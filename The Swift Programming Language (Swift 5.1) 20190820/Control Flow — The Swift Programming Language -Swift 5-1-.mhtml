From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html
Subject: =?utf-8?Q?Control=20Flow=20=E2=80=94=20The=20Swift=20Programming=20Langua?=
 =?utf-8?Q?ge=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:54:38 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----"


------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: text/html
Content-ID: <frame-F1E52A7A9AAABE13E9F05B62DD249870@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Control Flow =E2=80=94 The Swift Programming Language (Swift 5.1=
)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#">Co=
ntrol Flow</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#">Control Flow</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID121">For-In Loops</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID124">While Loops</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID125">While</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID126">Repeat-While</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID127">Conditional Statements</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID128">If</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID129">Switch</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID130">No Implicit Fallthrough</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID131">Interval Matching</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID132">Tuples</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID133">Value Bindings</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID134">Where</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID548">Compound Cases</a></li>
</ul>
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID135">Control Transfer Statements</a><ul=
>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID136">Continue</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID137">Break</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID138">Break in a Loop Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID139">Break in a Switch Statement</a></l=
i>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID140">Fallthrough</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID141">Labeled Statements</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID525">Early Exit</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID523">Checking API Availability</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"ID462">
<h1>Control Flow<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/ControlFlow.html#ID462" title=3D"Permalink to this hea=
dline">=C2=B6</a></h1>
<p>Swift provides a variety of control flow statements. These include <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">while</span></c=
ode> loops to perform a task multiple times; <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">if</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">guard</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">switch</span></co=
de> statements to execute different branches of code based on certain condi=
tions; and statements such as <code class=3D"docutils literal notranslate">=
<span class=3D"pre">break</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">continue</span></code> to transfer the fl=
ow of execution to another point in your code.</p>
<p>Swift also provides a <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">for</span></code>-<code class=3D"docutils literal notranslat=
e"><span class=3D"pre">in</span></code> loop that makes it easy to iterate =
over arrays, dictionaries, ranges, strings, and other sequences.</p>
<p>Swift=E2=80=99s <code class=3D"docutils literal notranslate"><span class=
=3D"pre">switch</span></code> statement is considerably more powerful than =
its counterpart in many C-like languages. Cases can match many different pa=
tterns, including interval matches, tuples, and casts to a specific type. M=
atched values in a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">switch</span></code> case can be bound to temporary constants or v=
ariables for use within the case=E2=80=99s body, and complex matching condi=
tions can be expressed with a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">where</span></code> clause for each case.</p>
<div class=3D"section" id=3D"ID121">
<h2>For-In Loops<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/ControlFlow.html#ID121" title=3D"Permalink to this hea=
dline">=C2=B6</a></h2>
<p>You use the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">for</span></code>-<code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">in</span></code> loop to iterate over a sequence, such as item=
s in an array, ranges of numbers, or characters in a string.</p>
<p>This example uses a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">for</span></code>-<code class=3D"docutils literal notranslate"=
><span class=3D"pre">in</span></code> loop to iterate over the items in an =
array:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">names</span> =3D [<span class=3D"s">"Anna"</spa=
n>, <span class=3D"s">"Alex"</span>, <span class=3D"s">"Brian"</span>, <spa=
n class=3D"s">"Jack"</span>]
</li><li><span class=3D"k">for</span> <span class=3D"nv">name</span> <span =
class=3D"k">in</span> <span class=3D"nv">names</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Hello, </sp=
an>\<span class=3D"p">(</span><span class=3D"nv">name</span><span class=3D"=
p">)</span><span class=3D"s">!"</span>)
</li><li>}
</li><li><span class=3D"c">// Hello, Anna!</span>
</li><li><span class=3D"c">// Hello, Alex!</span>
</li><li><span class=3D"c">// Hello, Brian!</span>
</li><li><span class=3D"c">// Hello, Jack!</span>
</li></ol></div></div></div>
<p>You can also iterate over a dictionary to access its key-value pairs. Ea=
ch item in the dictionary is returned as a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">(key,</span> <span class=3D"pre">value)</s=
pan></code> tuple when the dictionary is iterated, and you can decompose th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">(key,</s=
pan> <span class=3D"pre">value)</span></code> tuple=E2=80=99s members as ex=
plicitly named constants for use within the body of the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">for</span></code>-<code class=
=3D"docutils literal notranslate"><span class=3D"pre">in</span></code> loop=
. In the code example below, the dictionary=E2=80=99s keys are decomposed i=
nto a constant called <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">animalName</span></code>, and the dictionary=E2=80=99s values a=
re decomposed into a constant called <code class=3D"docutils literal notran=
slate"><span class=3D"pre">legCount</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">numberOfLegs</span> =3D [<span class=3D"s">"spi=
der"</span>: <span class=3D"m">8</span>, <span class=3D"s">"ant"</span>: <s=
pan class=3D"m">6</span>, <span class=3D"s">"cat"</span>: <span class=3D"m"=
>4</span>]
</li><li><span class=3D"k">for</span> (<span class=3D"nv">animalName</span>=
, <span class=3D"nv">legCount</span>) <span class=3D"k">in</span> <span cla=
ss=3D"nv">numberOfLegs</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">animalName</span><span class=3D"p=
">)</span><span class=3D"s">s have </span>\<span class=3D"p">(</span><span =
class=3D"nv">legCount</span><span class=3D"p">)</span><span class=3D"s"> le=
gs"</span>)
</li><li>}
</li><li><span class=3D"c">// cats have 4 legs</span>
</li><li><span class=3D"c">// ants have 6 legs</span>
</li><li><span class=3D"c">// spiders have 8 legs</span>
</li></ol></div></div></div>
<p>The contents of a <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Dictionary</span></code> are inherently unordered, and iterating=
 over them does not guarantee the order in which they will be retrieved. In=
 particular, the order you insert items into a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Dictionary</span></code> doesn=E2=80=
=99t define the order they are iterated. For more about arrays and dictiona=
ries, see <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/CollectionTypes.html"><span class=3D"doc">Collection=
 Types</span></a>.</p>
<p>You can also use <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">for</span></code>-<code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">in</span></code> loops with numeric ranges. This example =
prints the first few entries in a five-times table:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fo=
r</span> <span class=3D"nv">index</span> <span class=3D"k">in</span> <span =
class=3D"m">1</span>...<span class=3D"m">5</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">index</span><span class=3D"p">)</=
span><span class=3D"s"> times 5 is </span>\<span class=3D"p">(</span><span =
class=3D"nv">index</span> * <span class=3D"m">5</span><span class=3D"p">)</=
span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// 1 times 5 is 5</span>
</li><li><span class=3D"c">// 2 times 5 is 10</span>
</li><li><span class=3D"c">// 3 times 5 is 15</span>
</li><li><span class=3D"c">// 4 times 5 is 20</span>
</li><li><span class=3D"c">// 5 times 5 is 25</span>
</li></ol></div></div></div>
<p>The sequence being iterated over is a range of numbers from <code class=
=3D"docutils literal notranslate"><span class=3D"pre">1</span></code> to <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">5</span></co=
de>, inclusive, as indicated by the use of the closed range operator (<code=
 class=3D"docutils literal notranslate"><span class=3D"pre">...</span></cod=
e>). The value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">index</span></code> is set to the first number in the range (<code=
 class=3D"docutils literal notranslate"><span class=3D"pre">1</span></code>=
), and the statements inside the loop are executed. In this case, the loop =
contains only one statement, which prints an entry from the five-times tabl=
e for the current value of <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">index</span></code>. After the statement is executed, the =
value of <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
ndex</span></code> is updated to contain the second value in the range (<co=
de class=3D"docutils literal notranslate"><span class=3D"pre">2</span></cod=
e>), and the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">print(_:separator:terminator:)</span></code> function is called again. T=
his process continues until the end of the range is reached.</p>
<p>In the example above, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">index</span></code> is a constant whose value is automatical=
ly set at the start of each iteration of the loop. As such, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">index</span></code> does =
not have to be declared before it is used. It is implicitly declared simply=
 by its inclusion in the loop declaration, without the need for a <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">let</span></code> d=
eclaration keyword.</p>
<p>If you don=E2=80=99t need each value from a sequence, you can ignore the=
 values by using an underscore in place of a variable name.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">base</span> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">power</span> =3D <=
span class=3D"m">10</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">answer</span> =3D =
<span class=3D"m">1</span>
</li><li><span class=3D"k">for</span> <span class=3D"k">_</span> <span clas=
s=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"nv">power</sp=
an> {
</li><li>    <span class=3D"nv">answer</span> *=3D <span class=3D"nv">base<=
/span>
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"</span>\<span c=
lass=3D"p">(</span><span class=3D"nv">base</span><span class=3D"p">)</span>=
<span class=3D"s"> to the power of </span>\<span class=3D"p">(</span><span =
class=3D"nv">power</span><span class=3D"p">)</span><span class=3D"s"> is </=
span>\<span class=3D"p">(</span><span class=3D"nv">answer</span><span class=
=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "3 to the power of 10 is 59049"</span>
</li></ol></div></div></div>
<p>The example above calculates the value of one number to the power of ano=
ther (in this case, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">3</span></code> to the power of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">10</span></code>). It multiplies a starting=
 value of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
1</span></code> (that is, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">3</span></code> to the power of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">0</span></code>) by <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">3</span></code>, ten times,=
 using a closed range that starts with <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">1</span></code> and ends with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">10</span></code>. For this=
 calculation, the individual counter values each time through the loop are =
unnecessary=E2=80=94the code simply executes the loop the correct number of=
 times. The underscore character (<code class=3D"docutils literal notransla=
te"><span class=3D"pre">_</span></code>) used in place of a loop variable c=
auses the individual values to be ignored and does not provide access to th=
e current value during each iteration of the loop.</p>
<p>In some situations, you might not want to use closed ranges, which inclu=
de both endpoints. Consider drawing the tick marks for every minute on a wa=
tch face. You want to draw <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">60</span></code> tick marks, starting with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">0</span></code> minut=
e. Use the half-open range operator (<code class=3D"docutils literal notran=
slate"><span class=3D"pre">..&lt;</span></code>) to include the lower bound=
 but not the upper bound. For more about ranges, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/BasicOper=
ators.html#ID73"><span class=3D"std std-ref">Range Operators</span></a>.</p=
>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">minutes</span> =3D <span class=3D"m">60</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">tickMark</span> <s=
pan class=3D"k">in</span> <span class=3D"m">0</span>..&lt;<span class=3D"nv=
">minutes</span> {
</li><li>    <span class=3D"c">// render the tick mark each minute (60 time=
s)</span>
</li><li>}
</li></ol></div></div></div>
<p>Some users might want fewer tick marks in their UI. They could prefer on=
e mark every <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">5</span></code> minutes instead. Use the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">stride(from:to:by:)</span></code> functio=
n to skip the unwanted marks.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">minuteInterval</span> =3D <span class=3D"m">5</=
span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">tickMark</span> <s=
pan class=3D"k">in</span> <span class=3D"nv">stride</span>(<span class=3D"n=
v">from</span>: <span class=3D"m">0</span>, <span class=3D"nv">to</span>: <=
span class=3D"nv">minutes</span>, <span class=3D"nv">by</span>: <span class=
=3D"nv">minuteInterval</span>) {
</li><li>    <span class=3D"c">// render the tick mark every 5 minutes (0, =
5, 10, 15 ... 45, 50, 55)</span>
</li><li>}
</li></ol></div></div></div>
<p>Closed ranges are also available, by using <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">stride(from:through:by:)</span></code> =
instead:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">hours</span> =3D <span class=3D"m">12</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">hourInterval</span=
> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">tickMark</span> <s=
pan class=3D"k">in</span> <span class=3D"nv">stride</span>(<span class=3D"n=
v">from</span>: <span class=3D"m">3</span>, <span class=3D"nv">through</spa=
n>: <span class=3D"nv">hours</span>, <span class=3D"nv">by</span>: <span cl=
ass=3D"nv">hourInterval</span>) {
</li><li>    <span class=3D"c">// render the tick mark every 3 hours (3, 6,=
 9, 12)</span>
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID124">
<h2>While Loops<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/ControlFlow.html#ID124" title=3D"Permalink to this head=
line">=C2=B6</a></h2>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> loop performs a set of statements until a condition becomes =
<code class=3D"docutils literal notranslate"><span class=3D"pre">false</spa=
n></code>. These kinds of loops are best used when the number of iterations=
 is not known before the first iteration begins. Swift provides two kinds o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">while</s=
pan></code> loops:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">while<=
/span></code> evaluates its condition at the start of each pass through the=
 loop.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">repeat=
</span></code>-<code class=3D"docutils literal notranslate"><span class=3D"=
pre">while</span></code> evaluates its condition at the end of each pass th=
rough the loop.</li>
</ul>
<div class=3D"section" id=3D"ID125">
<h3>While<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/ControlFlow.html#ID125" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> loop starts by evaluating a single condition. If the conditi=
on is <code class=3D"docutils literal notranslate"><span class=3D"pre">true=
</span></code>, a set of statements is repeated until the condition becomes=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">false</sp=
an></code>.</p>
<p>Here=E2=80=99s the general form of a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">while</span></code> loop:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">while</span> <span class=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>This example plays a simple game of <em>Snakes and Ladders</em> (also kn=
own as <em>Chutes and Ladders</em>):</p>
<img alt=3D"../_images/snakesAndLadders_2x.png" class=3D"align-center" src=
=3D"https://docs.swift.org/swift-book/_images/snakesAndLadders_2x.png" styl=
e=3D"width: 623px;">
<p>The rules of the game are as follows:</p>
<ul class=3D"simple">
<li>The board has 25 squares, and the aim is to land on or beyond square 25=
.</li>
<li>The player=E2=80=99s starting square is =E2=80=9Csquare zero=E2=80=9D, =
which is just off the bottom-left corner of the board.</li>
<li>Each turn, you roll a six-sided dice and move by that number of squares=
, following the horizontal path indicated by the dotted arrow above.</li>
<li>If your turn ends at the bottom of a ladder, you move up that ladder.</=
li>
<li>If your turn ends at the head of a snake, you move down that snake.</li=
>
</ul>
<p>The game board is represented by an array of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Int</span></code> values. Its size is=
 based on a constant called <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">finalSquare</span></code>, which is used to initialize th=
e array and also to check for a win condition later in the example. Because=
 the players start off the board, on =E2=80=9Csquare zero=E2=80=9D, the boa=
rd is initialized with 26 zero <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Int</span></code> values, not 25.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">finalSquare</span> =3D <span class=3D"m">25</sp=
an>
</li><li><span class=3D"k">var</span> <span class=3D"nv">board</span> =3D [=
<span class=3D"nv">Int</span>](<span class=3D"nv">repeating</span>: <span c=
lass=3D"m">0</span>, <span class=3D"nv">count</span>: <span class=3D"nv">fi=
nalSquare</span> + <span class=3D"m">1</span>)
</li></ol></div></div></div>
<p>Some squares are then set to have more specific values for the snakes an=
d ladders. Squares with a ladder base have a positive number to move you up=
 the board, whereas squares with a snake head have a negative number to mov=
e you back down the board.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">b=
oard</span>[<span class=3D"m">03</span>] =3D +<span class=3D"m">08</span>; =
<span class=3D"nv">board</span>[<span class=3D"m">06</span>] =3D +<span cla=
ss=3D"m">11</span>; <span class=3D"nv">board</span>[<span class=3D"m">09</s=
pan>] =3D +<span class=3D"m">09</span>; <span class=3D"nv">board</span>[<sp=
an class=3D"m">10</span>] =3D +<span class=3D"m">02</span>
</li><li><span class=3D"nv">board</span>[<span class=3D"m">14</span>] =3D <=
span class=3D"m">-10</span>; <span class=3D"nv">board</span>[<span class=3D=
"m">19</span>] =3D <span class=3D"m">-11</span>; <span class=3D"nv">board</=
span>[<span class=3D"m">22</span>] =3D <span class=3D"m">-02</span>; <span =
class=3D"nv">board</span>[<span class=3D"m">24</span>] =3D <span class=3D"m=
">-08</span>
</li></ol></div></div></div>
<p>Square 3 contains the bottom of a ladder that moves you up to square 11.=
 To represent this, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">board[03]</span></code> is equal to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">+08</span></code>, which is equivalent =
to an integer value of <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">8</span></code> (the difference between <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">3</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">11</span></code>). To=
 align the values and statements, the unary plus operator (<code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">+i</span></code>) is expli=
citly used with the unary minus operator (<code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-i</span></code>) and numbers lower than <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">10</span></c=
ode> are padded with zeros. (Neither stylistic technique is strictly necess=
ary, but they lead to neater code.)</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">square</span> =3D <span class=3D"m">0</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">diceRoll</span> =
=3D <span class=3D"m">0</span>
</li><li><span class=3D"k">while</span> <span class=3D"nv">square</span> &l=
t; <span class=3D"nv">finalSquare</span> {
</li><li>    <span class=3D"c">// roll the dice</span>
</li><li>    <span class=3D"nv">diceRoll</span> +=3D <span class=3D"m">1</s=
pan>
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">diceRoll</span>=
 =3D=3D <span class=3D"m">7</span> { <span class=3D"nv">diceRoll</span> =3D=
 <span class=3D"m">1</span> }
</li><li>    <span class=3D"c">// move by the rolled amount</span>
</li><li>    <span class=3D"nv">square</span> +=3D <span class=3D"nv">diceR=
oll</span>
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">square</span> &=
lt; <span class=3D"nv">board</span>.<span class=3D"nv">count</span> {
</li><li>        <span class=3D"c">// if we're still on the board, move up =
or down for a snake or a ladder</span>
</li><li>        <span class=3D"nv">square</span> +=3D <span class=3D"nv">b=
oard</span>[<span class=3D"nv">square</span>]
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Game over!"</sp=
an>)
</li></ol></div></div></div>
<p>The example above uses a very simple approach to dice rolling. Instead o=
f generating a random number, it starts with a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">diceRoll</span></code> value of <code =
class=3D"docutils literal notranslate"><span class=3D"pre">0</span></code>.=
 Each time through the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">while</span></code> loop, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">diceRoll</span></code> is incremented by one a=
nd is then checked to see whether it has become too large. Whenever this re=
turn value equals <code class=3D"docutils literal notranslate"><span class=
=3D"pre">7</span></code>, the dice roll has become too large and is reset t=
o a value of <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">1</span></code>. The result is a sequence of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">diceRoll</span></code> values that is=
 always <code class=3D"docutils literal notranslate"><span class=3D"pre">1<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">2</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">3</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">4</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">5</span></code>, <code class=3D"docutils literal =
notranslate"><span class=3D"pre">6</span></code>, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">1</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">2</span></code> and so on.</=
p>
<p>After rolling the dice, the player moves forward by <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">diceRoll</span></code> squares=
. It=E2=80=99s possible that the dice roll may have moved the player beyond=
 square 25, in which case the game is over. To cope with this scenario, the=
 code checks that <code class=3D"docutils literal notranslate"><span class=
=3D"pre">square</span></code> is less than the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">board</span></code> array=E2=80=99s <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">count</span>=
</code> property. If <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">square</span></code> is valid, the value stored in <code class=
=3D"docutils literal notranslate"><span class=3D"pre">board[square]</span><=
/code> is added to the current <code class=3D"docutils literal notranslate"=
><span class=3D"pre">square</span></code> value to move the player up or do=
wn any ladders or snakes.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If this check is not performed, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">board[square]</span></code> might t=
ry to access a value outside the bounds of the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">board</span></code> array, which would=
 trigger a runtime error.</p>
</div>
<p>The current <code class=3D"docutils literal notranslate"><span class=3D"=
pre">while</span></code> loop execution then ends, and the loop=E2=80=99s c=
ondition is checked to see if the loop should be executed again. If the pla=
yer has moved on or beyond square number <code class=3D"docutils literal no=
translate"><span class=3D"pre">25</span></code>, the loop=E2=80=99s conditi=
on evaluates to <code class=3D"docutils literal notranslate"><span class=3D=
"pre">false</span></code> and the game ends.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> loop is appropriate in this case, because the length of the =
game is not clear at the start of the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">while</span></code> loop. Instead, the loop is =
executed until a particular condition is satisfied.</p>
</div>
<div class=3D"section" id=3D"ID126">
<h3>Repeat-While<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/ControlFlow.html#ID126" title=3D"Permalink to this hea=
dline">=C2=B6</a></h3>
<p>The other variation of the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">while</span></code> loop, known as the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">repeat</span></code>-<code=
 class=3D"docutils literal notranslate"><span class=3D"pre">while</span></c=
ode> loop, performs a single pass through the loop block first, <em>before<=
/em> considering the loop=E2=80=99s condition. It then continues to repeat =
the loop until the condition is <code class=3D"docutils literal notranslate=
"><span class=3D"pre">false</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">repeat</span></code>-<code class=3D"docutils literal notranslat=
e"><span class=3D"pre">while</span></code> loop in Swift is analogous to a =
<code class=3D"docutils literal notranslate"><span class=3D"pre">do</span><=
/code>-<code class=3D"docutils literal notranslate"><span class=3D"pre">whi=
le</span></code> loop in other languages.</p>
</div>
<p>Here=E2=80=99s the general form of a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">repeat</span></code>-<code class=3D"docutils =
literal notranslate"><span class=3D"pre">while</span></code> loop:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">repeat</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>} <span class=3D"k">while</span> <span class=3D"gi">condition</spa=
n>
</li></ol></div></div></div>
<p>Here=E2=80=99s the <em>Snakes and Ladders</em> example again, written as=
 a <code class=3D"docutils literal notranslate"><span class=3D"pre">repeat<=
/span></code>-<code class=3D"docutils literal notranslate"><span class=3D"p=
re">while</span></code> loop rather than a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">while</span></code> loop. The values of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">finalSquare<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">board</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">square</span></code>, and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">diceRoll</span></code> are initialized in e=
xactly the same way as with a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">while</span></code> loop.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">finalSquare</span> =3D <span class=3D"m">25</sp=
an>
</li><li><span class=3D"k">var</span> <span class=3D"nv">board</span> =3D [=
<span class=3D"nv">Int</span>](<span class=3D"nv">repeating</span>: <span c=
lass=3D"m">0</span>, <span class=3D"nv">count</span>: <span class=3D"nv">fi=
nalSquare</span> + <span class=3D"m">1</span>)
</li><li><span class=3D"nv">board</span>[<span class=3D"m">03</span>] =3D +=
<span class=3D"m">08</span>; <span class=3D"nv">board</span>[<span class=3D=
"m">06</span>] =3D +<span class=3D"m">11</span>; <span class=3D"nv">board</=
span>[<span class=3D"m">09</span>] =3D +<span class=3D"m">09</span>; <span =
class=3D"nv">board</span>[<span class=3D"m">10</span>] =3D +<span class=3D"=
m">02</span>
</li><li><span class=3D"nv">board</span>[<span class=3D"m">14</span>] =3D <=
span class=3D"m">-10</span>; <span class=3D"nv">board</span>[<span class=3D=
"m">19</span>] =3D <span class=3D"m">-11</span>; <span class=3D"nv">board</=
span>[<span class=3D"m">22</span>] =3D <span class=3D"m">-02</span>; <span =
class=3D"nv">board</span>[<span class=3D"m">24</span>] =3D <span class=3D"m=
">-08</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">square</span> =3D =
<span class=3D"m">0</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">diceRoll</span> =
=3D <span class=3D"m">0</span>
</li></ol></div></div></div>
<p>In this version of the game, the <em>first</em> action in the loop is to=
 check for a ladder or a snake. No ladder on the board takes the player str=
aight to square 25, and so it isn=E2=80=99t possible to win the game by mov=
ing up a ladder. Therefore, it=E2=80=99s safe to check for a snake or a lad=
der as the first action in the loop.</p>
<p>At the start of the game, the player is on =E2=80=9Csquare zero=E2=80=9D=
. <code class=3D"docutils literal notranslate"><span class=3D"pre">board[0]=
</span></code> always equals <code class=3D"docutils literal notranslate"><=
span class=3D"pre">0</span></code> and has no effect.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">re=
peat</span> {
</li><li>    <span class=3D"c">// move up or down for a snake or ladder</sp=
an>
</li><li>    <span class=3D"nv">square</span> +=3D <span class=3D"nv">board=
</span>[<span class=3D"nv">square</span>]
</li><li>    <span class=3D"c">// roll the dice</span>
</li><li>    <span class=3D"nv">diceRoll</span> +=3D <span class=3D"m">1</s=
pan>
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">diceRoll</span>=
 =3D=3D <span class=3D"m">7</span> { <span class=3D"nv">diceRoll</span> =3D=
 <span class=3D"m">1</span> }
</li><li>    <span class=3D"c">// move by the rolled amount</span>
</li><li>    <span class=3D"nv">square</span> +=3D <span class=3D"nv">diceR=
oll</span>
</li><li>} <span class=3D"k">while</span> <span class=3D"nv">square</span> =
&lt; <span class=3D"nv">finalSquare</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Game over!"</sp=
an>)
</li></ol></div></div></div>
<p>After the code checks for snakes and ladders, the dice is rolled and the=
 player is moved forward by <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">diceRoll</span></code> squares. The current loop executio=
n then ends.</p>
<p>The loop=E2=80=99s condition (<code class=3D"docutils literal notranslat=
e"><span class=3D"pre">while</span> <span class=3D"pre">square</span> <span=
 class=3D"pre">&lt;</span> <span class=3D"pre">finalSquare</span></code>) i=
s the same as before, but this time it=E2=80=99s not evaluated until the <e=
m>end</em> of the first run through the loop. The structure of the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">repeat</span></cod=
e>-<code class=3D"docutils literal notranslate"><span class=3D"pre">while</=
span></code> loop is better suited to this game than the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">while</span></code> loop in =
the previous example. In the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">repeat</span></code>-<code class=3D"docutils literal not=
ranslate"><span class=3D"pre">while</span></code> loop above, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">square</span> <span c=
lass=3D"pre">+=3D</span> <span class=3D"pre">board[square]</span></code> is=
 always executed <em>immediately after</em> the loop=E2=80=99s <code class=
=3D"docutils literal notranslate"><span class=3D"pre">while</span></code> c=
ondition confirms that <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">square</span></code> is still on the board. This behavior remo=
ves the need for the array bounds check seen in the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">while</span></code> loop version =
of the game described earlier.</p>
</div>
</div>
<div class=3D"section" id=3D"ID127">
<h2>Conditional Statements<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/ControlFlow.html#ID127" title=3D"Permalink t=
o this headline">=C2=B6</a></h2>
<p>It is often useful to execute different pieces of code based on certain =
conditions. You might want to run an extra piece of code when an error occu=
rs, or to display a message when a value becomes too high or too low. To do=
 this, you make parts of your code <em>conditional</em>.</p>
<p>Swift provides two ways to add conditional branches to your code: the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">if</span></c=
ode> statement and the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">switch</span></code> statement. Typically, you use the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">if</span></code> =
statement to evaluate simple conditions with only a few possible outcomes. =
The <code class=3D"docutils literal notranslate"><span class=3D"pre">switch=
</span></code> statement is better suited to more complex conditions with m=
ultiple possible permutations and is useful in situations where pattern mat=
ching can help select an appropriate code branch to execute.</p>
<div class=3D"section" id=3D"ID128">
<h3>If<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/Lan=
guageGuide/ControlFlow.html#ID128" title=3D"Permalink to this headline">=C2=
=B6</a></h3>
<p>In its simplest form, the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">if</span></code> statement has a single <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">if</span></code> condition=
. It executes a set of statements only if that condition is <code class=3D"=
docutils literal notranslate"><span class=3D"pre">true</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">temperatureInFahrenheit</span> =3D <span class=
=3D"m">30</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">temperatureInFahren=
heit</span> &lt;=3D <span class=3D"m">32</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's very c=
old. Consider wearing a scarf."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "It's very cold. Consider wearing a sc=
arf."</span>
</li></ol></div></div></div>
<p>The example above checks whether the temperature is less than or equal t=
o 32 degrees Fahrenheit (the freezing point of water). If it is, a message =
is printed. Otherwise, no message is printed, and code execution continues =
after the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
if</span></code> statement=E2=80=99s closing brace.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">if<=
/span></code> statement can provide an alternative set of statements, known=
 as an <em>else clause</em>, for situations when the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">if</span></code> condition is <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">false</span>=
</code>. These statements are indicated by the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">else</span></code> keyword.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">t=
emperatureInFahrenheit</span> =3D <span class=3D"m">40</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">temperatureInFahren=
heit</span> &lt;=3D <span class=3D"m">32</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's very c=
old. Consider wearing a scarf."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's not th=
at cold. Wear a t-shirt."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "It's not that cold. Wear a t-shirt."<=
/span>
</li></ol></div></div></div>
<p>One of these two branches is always executed. Because the temperature ha=
s increased to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">40</span></code> degrees Fahrenheit, it is no longer cold enough to ad=
vise wearing a scarf and so the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">else</span></code> branch is triggered instead.</p>
<p>You can chain multiple <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">if</span></code> statements together to consider additional=
 clauses.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">t=
emperatureInFahrenheit</span> =3D <span class=3D"m">90</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">temperatureInFahren=
heit</span> &lt;=3D <span class=3D"m">32</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's very c=
old. Consider wearing a scarf."</span>)
</li><li>} <span class=3D"k">else</span> <span class=3D"k">if</span> <span =
class=3D"nv">temperatureInFahrenheit</span> &gt;=3D <span class=3D"m">86</s=
pan> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's really=
 warm. Don't forget to wear sunscreen."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's not th=
at cold. Wear a t-shirt."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "It's really warm. Don't forget to wea=
r sunscreen."</span>
</li></ol></div></div></div>
<p>Here, an additional <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">if</span></code> statement was added to respond to particularl=
y warm temperatures. The final <code class=3D"docutils literal notranslate"=
><span class=3D"pre">else</span></code> clause remains, and it prints a res=
ponse for any temperatures that are neither too warm nor too cold.</p>
<p>The final <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">else</span></code> clause is optional, however, and can be excluded if t=
he set of conditions does not need to be complete.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">t=
emperatureInFahrenheit</span> =3D <span class=3D"m">72</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">temperatureInFahren=
heit</span> &lt;=3D <span class=3D"m">32</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's very c=
old. Consider wearing a scarf."</span>)
</li><li>} <span class=3D"k">else</span> <span class=3D"k">if</span> <span =
class=3D"nv">temperatureInFahrenheit</span> &gt;=3D <span class=3D"m">86</s=
pan> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"It's really=
 warm. Don't forget to wear sunscreen."</span>)
</li><li>}
</li></ol></div></div></div>
<p>Because the temperature is neither too cold nor too warm to trigger the =
<code class=3D"docutils literal notranslate"><span class=3D"pre">if</span><=
/code> or <code class=3D"docutils literal notranslate"><span class=3D"pre">=
else</span> <span class=3D"pre">if</span></code> conditions, no message is =
printed.</p>
</div>
<div class=3D"section" id=3D"ID129">
<h3>Switch<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book=
/LanguageGuide/ControlFlow.html#ID129" title=3D"Permalink to this headline"=
>=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> statement considers a value and compares it against several=
 possible matching patterns. It then executes an appropriate block of code,=
 based on the first pattern that matches successfully. A <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">switch</span></code> stateme=
nt provides an alternative to the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">if</span></code> statement for responding to multip=
le potential states.</p>
<p>In its simplest form, a <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">switch</span></code> statement compares a value against on=
e or more values of the same type.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">switch</span> <span class=3D"gi">some value to consider</span>=
 {
</li><li><span class=3D"k">case</span> <span class=3D"gi">value 1</span>:
</li><li>    <span class=3D"gi">respond to value 1</span>
</li><li><span class=3D"k">case</span> <span class=3D"gi">value 2</span>,
</li><li>     <span class=3D"gi">value 3</span>:
</li><li>    <span class=3D"gi">respond to value 2 or 3</span>
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"gi">otherwise, do something else</span>
</li><li>}
</li></ol></div></div></div>
<p>Every <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
witch</span></code> statement consists of multiple possible <em>cases</em>,=
 each of which begins with the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">case</span></code> keyword. In addition to comparing a=
gainst specific values, Swift provides several ways for each case to specif=
y more complex matching patterns. These options are described later in this=
 chapter.</p>
<p>Like the body of an <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">if</span></code> statement, each <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">case</span></code> is a separate branch=
 of code execution. The <code class=3D"docutils literal notranslate"><span =
class=3D"pre">switch</span></code> statement determines which branch should=
 be selected. This procedure is known as <em>switching</em> on the value th=
at is being considered.</p>
<p>Every <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
witch</span></code> statement must be <em>exhaustive</em>. That is, every p=
ossible value of the type being considered must be matched by one of the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">switch</span=
></code> cases. If it=E2=80=99s not appropriate to provide a case for every=
 possible value, you can define a default case to cover any values that are=
 not addressed explicitly. This default case is indicated by the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">default</span></code=
> keyword, and must always appear last.</p>
<p>This example uses a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">switch</span></code> statement to consider a single lowercase =
character called <code class=3D"docutils literal notranslate"><span class=
=3D"pre">someCharacter</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">someCharacter</span>: <span class=3D"nc">Charac=
ter</span> =3D <span class=3D"s">"z"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">someCharacter</=
span> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"a"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The first l=
etter of the alphabet"</span>)
</li><li><span class=3D"k">case</span> <span class=3D"s">"z"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The last le=
tter of the alphabet"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Some other =
character"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The last letter of the alphabet"</spa=
n>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
tch</span></code> statement=E2=80=99s first case matches the first letter o=
f the English alphabet, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">a</span></code>, and its second case matches the last letter,=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">z</span><=
/code>. Because the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">switch</span></code> must have a case for every possible characte=
r, not just every alphabetic character, this <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">switch</span></code> statement uses a <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">default</spa=
n></code> case to match all characters other than <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">a</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">z</span></code>. This pro=
vision ensures that the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">switch</span></code> statement is exhaustive.</p>
<div class=3D"section" id=3D"ID130">
<h4>No Implicit Fallthrough<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/ControlFlow.html#ID130" title=3D"Permalink =
to this headline">=C2=B6</a></h4>
<p>In contrast with <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">switch</span></code> statements in C and Objective-C, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statements in Swift do not fall through the bottom of each case and into th=
e next one by default. Instead, the entire <code class=3D"docutils literal =
notranslate"><span class=3D"pre">switch</span></code> statement finishes it=
s execution as soon as the first matching <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">switch</span></code> case is completed, wit=
hout requiring an explicit <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">break</span></code> statement. This makes the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statement safer and easier to use than the one in C and avoids executing mo=
re than one <code class=3D"docutils literal notranslate"><span class=3D"pre=
">switch</span></code> case by mistake.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Although <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">break</span></code> is not required in Swift, you can use =
a <code class=3D"docutils literal notranslate"><span class=3D"pre">break</s=
pan></code> statement to match and ignore a particular case or to break out=
 of a matched case before that case has completed its execution. For detail=
s, see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/ControlFlow.html#ID139"><span class=3D"std std-ref">Bre=
ak in a Switch Statement</span></a>.</p>
</div>
<p>The body of each case <em>must</em> contain at least one executable stat=
ement. It is not valid to write the following code, because the first case =
is empty:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">anotherCharacter</span>: <span class=3D"nc">Cha=
racter</span> =3D <span class=3D"s">"a"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">anotherCharacte=
r</span> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"a"</span>: <span =
class=3D"c">// Invalid, the case has an empty body</span>
</li><li><span class=3D"k">case</span> <span class=3D"s">"A"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The letter =
A"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Not the let=
ter A"</span>)
</li><li>}
</li><li><span class=3D"c">// This will report a compile-time error.</span>
</li></ol></div></div></div>
<p>Unlike a <code class=3D"docutils literal notranslate"><span class=3D"pre=
">switch</span></code> statement in C, this <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">switch</span></code> statement does not m=
atch both <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"a"</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">"A"</span></code>. Rather, it reports a compile-time error that=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">case</spa=
n> <span class=3D"pre">"a":</span></code> does not contain any executable s=
tatements. This approach avoids accidental fallthrough from one case to ano=
ther and makes for safer code that is clearer in its intent.</p>
<p>To make a <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> with a single case that matches both <code class=3D=
"docutils literal notranslate"><span class=3D"pre">"a"</span></code> and <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">"A"</span></=
code>, combine the two values into a compound case, separating the values w=
ith commas.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">anotherCharacter</span>: <span class=3D"nc">Cha=
racter</span> =3D <span class=3D"s">"a"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">anotherCharacte=
r</span> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"a"</span>, <span =
class=3D"s">"A"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The letter =
A"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Not the let=
ter A"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The letter A"</span>
</li></ol></div></div></div>
<p>For readability, a compound case can also be written over multiple lines=
. For more information about compound cases, see <a class=3D"reference inte=
rnal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.h=
tml#ID548"><span class=3D"std std-ref">Compound Cases</span></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">To explicitly fall through at the end of a particular <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">switch</span>=
</code> case, use the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">fallthrough</span></code> keyword, as described in <a class=3D"=
reference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide=
/ControlFlow.html#ID140"><span class=3D"std std-ref">Fallthrough</span></a>=
.</p>
</div>
</div>
<div class=3D"section" id=3D"ID131">
<h4>Interval Matching<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/ControlFlow.html#ID131" title=3D"Permalink to thi=
s headline">=C2=B6</a></h4>
<p>Values in <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> cases can be checked for their inclusion in an inte=
rval. This example uses number intervals to provide a natural-language coun=
t for numbers of any size:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">approximateCount</span> =3D <span class=3D"m">6=
2</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">countedThings</spa=
n> =3D <span class=3D"s">"moons orbiting Saturn"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">naturalCount</span=
>: <span class=3D"nc">String</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">approximateCoun=
t</span> {
</li><li><span class=3D"k">case</span> <span class=3D"m">0</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
no"</span>
</li><li><span class=3D"k">case</span> <span class=3D"m">1</span>..&lt;<spa=
n class=3D"m">5</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
a few"</span>
</li><li><span class=3D"k">case</span> <span class=3D"m">5</span>..&lt;<spa=
n class=3D"m">12</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
several"</span>
</li><li><span class=3D"k">case</span> <span class=3D"m">12</span>..&lt;<sp=
an class=3D"m">100</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
dozens of"</span>
</li><li><span class=3D"k">case</span> <span class=3D"m">100</span>..&lt;<s=
pan class=3D"m">1000</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
hundreds of"</span>
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">naturalCount</span> =3D <span class=3D"s">"=
many"</span>
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"There are </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">naturalCount</span><span cl=
ass=3D"p">)</span><span class=3D"s"> </span>\<span class=3D"p">(</span><spa=
n class=3D"nv">countedThings</span><span class=3D"p">)</span><span class=3D=
"s">."</span>)
</li><li><span class=3D"c">// Prints "There are dozens of moons orbiting Sa=
turn."</span>
</li></ol></div></div></div>
<p>In the above example, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">approximateCount</span></code> is evaluated in a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statement. Each <code class=3D"docutils literal notranslate"><span class=3D=
"pre">case</span></code> compares that value to a number or interval. Becau=
se the value of <code class=3D"docutils literal notranslate"><span class=3D=
"pre">approximateCount</span></code> falls between 12 and 100, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">naturalCount</span></=
code> is assigned the value <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">"dozens</span> <span class=3D"pre">of"</span></code>, and=
 execution is transferred out of the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">switch</span></code> statement.</p>
</div>
<div class=3D"section" id=3D"ID132">
<h4>Tuples<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book=
/LanguageGuide/ControlFlow.html#ID132" title=3D"Permalink to this headline"=
>=C2=B6</a></h4>
<p>You can use tuples to test multiple values in the same <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">switch</span></code> statem=
ent. Each element of the tuple can be tested against a different value or i=
nterval of values. Alternatively, use the underscore character (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">_</span></code>), als=
o known as the wildcard pattern, to match any possible value.</p>
<p>The example below takes an (x, y) point, expressed as a simple tuple of =
type <code class=3D"docutils literal notranslate"><span class=3D"pre">(Int,=
</span> <span class=3D"pre">Int)</span></code>, and categorizes it on the g=
raph that follows the example.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">somePoint</span> =3D (<span class=3D"m">1</span=
>, <span class=3D"m">1</span>)
</li><li><span class=3D"k">switch</span> <span class=3D"nv">somePoint</span=
> {
</li><li><span class=3D"k">case</span> (<span class=3D"m">0</span>, <span c=
lass=3D"m">0</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">somePoint</span><span class=3D"p"=
>)</span><span class=3D"s"> is at the origin"</span>)
</li><li><span class=3D"k">case</span> (<span class=3D"k">_</span>, <span c=
lass=3D"m">0</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">somePoint</span><span class=3D"p"=
>)</span><span class=3D"s"> is on the x-axis"</span>)
</li><li><span class=3D"k">case</span> (<span class=3D"m">0</span>, <span c=
lass=3D"k">_</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">somePoint</span><span class=3D"p"=
>)</span><span class=3D"s"> is on the y-axis"</span>)
</li><li><span class=3D"k">case</span> (<span class=3D"m">-2</span>...<span=
 class=3D"m">2</span>, <span class=3D"m">-2</span>...<span class=3D"m">2</s=
pan>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">somePoint</span><span class=3D"p"=
>)</span><span class=3D"s"> is inside the box"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">somePoint</span><span class=3D"p"=
>)</span><span class=3D"s"> is outside of the box"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "(1, 1) is inside the box"</span>
</li></ol></div></div></div>
<img alt=3D"../_images/coordinateGraphSimple_2x.png" class=3D"align-center"=
 src=3D"https://docs.swift.org/swift-book/_images/coordinateGraphSimple_2x.=
png" style=3D"width: 288px;">
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
tch</span></code> statement determines whether the point is at the origin (=
0, 0), on the red x-axis, on the orange y-axis, inside the blue 4-by-4 box =
centered on the origin, or outside of the box.</p>
<p>Unlike C, Swift allows multiple <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">switch</span></code> cases to consider the same va=
lue or values. In fact, the point (0, 0) could match all <em>four</em> of t=
he cases in this example. However, if multiple matches are possible, the fi=
rst matching case is always used. The point (0, 0) would match <code class=
=3D"docutils literal notranslate"><span class=3D"pre">case</span> <span cla=
ss=3D"pre">(0,</span> <span class=3D"pre">0)</span></code> first, and so al=
l other matching cases would be ignored.</p>
</div>
<div class=3D"section" id=3D"ID133">
<h4>Value Bindings<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/ControlFlow.html#ID133" title=3D"Permalink to this h=
eadline">=C2=B6</a></h4>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> case can name the value or values it matches to temporary c=
onstants or variables, for use in the body of the case. This behavior is kn=
own as <em>value binding</em>, because the values are bound to temporary co=
nstants or variables within the case=E2=80=99s body.</p>
<p>The example below takes an (x, y) point, expressed as a tuple of type <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">(Int,</span>=
 <span class=3D"pre">Int)</span></code>, and categorizes it on the graph th=
at follows:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">anotherPoint</span> =3D (<span class=3D"m">2</s=
pan>, <span class=3D"m">0</span>)
</li><li><span class=3D"k">switch</span> <span class=3D"nv">anotherPoint</s=
pan> {
</li><li><span class=3D"k">case</span> (<span class=3D"k">let</span> <span =
class=3D"nv">x</span>, <span class=3D"m">0</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"on the x-ax=
is with an x value of </span>\<span class=3D"p">(</span><span class=3D"nv">=
x</span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"k">case</span> (<span class=3D"m">0</span>, <span c=
lass=3D"k">let</span> <span class=3D"nv">y</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"on the y-ax=
is with a y value of </span>\<span class=3D"p">(</span><span class=3D"nv">y=
</span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> (<span =
class=3D"nv">x</span>, <span class=3D"nv">y</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"somewhere e=
lse at (</span>\<span class=3D"p">(</span><span class=3D"nv">x</span><span =
class=3D"p">)</span><span class=3D"s">, </span>\<span class=3D"p">(</span><=
span class=3D"nv">y</span><span class=3D"p">)</span><span class=3D"s">)"</s=
pan>)
</li><li>}
</li><li><span class=3D"c">// Prints "on the x-axis with an x value of 2"</=
span>
</li></ol></div></div></div>
<img alt=3D"../_images/coordinateGraphMedium_2x.png" class=3D"align-center"=
 src=3D"https://docs.swift.org/swift-book/_images/coordinateGraphMedium_2x.=
png" style=3D"width: 288px;">
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
tch</span></code> statement determines whether the point is on the red x-ax=
is, on the orange y-axis, or elsewhere (on neither axis).</p>
<p>The three <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> cases declare placeholder constants <code class=3D"=
docutils literal notranslate"><span class=3D"pre">x</span></code> and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">y</span></code>=
, which temporarily take on one or both tuple values from <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">anotherPoint</span></code>.=
 The first case, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">case</span> <span class=3D"pre">(let</span> <span class=3D"pre">x,=
</span> <span class=3D"pre">0)</span></code>, matches any point with a <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">y</span></code=
> value of <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>0</span></code> and assigns the point=E2=80=99s <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">x</span></code> value to the tempora=
ry constant <code class=3D"docutils literal notranslate"><span class=3D"pre=
">x</span></code>. Similarly, the second case, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">case</span> <span class=3D"pre">(0,</s=
pan> <span class=3D"pre">let</span> <span class=3D"pre">y)</span></code>, m=
atches any point with an <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">x</span></code> value of <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">0</span></code> and assigns the point=E2=80=
=99s <code class=3D"docutils literal notranslate"><span class=3D"pre">y</sp=
an></code> value to the temporary constant <code class=3D"docutils literal =
notranslate"><span class=3D"pre">y</span></code>.</p>
<p>After the temporary constants are declared, they can be used within the =
case=E2=80=99s code block. Here, they are used to print the categorization =
of the point.</p>
<p>This <code class=3D"docutils literal notranslate"><span class=3D"pre">sw=
itch</span></code> statement does not have a <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">default</span></code> case. The final ca=
se, <code class=3D"docutils literal notranslate"><span class=3D"pre">case</=
span> <span class=3D"pre">let</span> <span class=3D"pre">(x,</span> <span c=
lass=3D"pre">y)</span></code>, declares a tuple of two placeholder constant=
s that can match any value. Because <code class=3D"docutils literal notrans=
late"><span class=3D"pre">anotherPoint</span></code> is always a tuple of t=
wo values, this case matches all possible remaining values, and a <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">default</span></cod=
e> case is not needed to make the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">switch</span></code> statement exhaustive.</p>
</div>
<div class=3D"section" id=3D"ID134">
<h4>Where<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/ControlFlow.html#ID134" title=3D"Permalink to this headline">=
=C2=B6</a></h4>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> case can use a <code class=3D"docutils literal notranslate"=
><span class=3D"pre">where</span></code> clause to check for additional con=
ditions.</p>
<p>The example below categorizes an (x, y) point on the following graph:</p=
>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">yetAnotherPoint</span> =3D (<span class=3D"m">1=
</span>, <span class=3D"m">-1</span>)
</li><li><span class=3D"k">switch</span> <span class=3D"nv">yetAnotherPoint=
</span> {
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> (<span =
class=3D"nv">x</span>, <span class=3D"nv">y</span>) <span class=3D"k">where=
</span> <span class=3D"nv">x</span> =3D=3D <span class=3D"nv">y</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"(</span>\<s=
pan class=3D"p">(</span><span class=3D"nv">x</span><span class=3D"p">)</spa=
n><span class=3D"s">, </span>\<span class=3D"p">(</span><span class=3D"nv">=
y</span><span class=3D"p">)</span><span class=3D"s">) is on the line x =3D=
=3D y"</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> (<span =
class=3D"nv">x</span>, <span class=3D"nv">y</span>) <span class=3D"k">where=
</span> <span class=3D"nv">x</span> =3D=3D -<span class=3D"nv">y</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"(</span>\<s=
pan class=3D"p">(</span><span class=3D"nv">x</span><span class=3D"p">)</spa=
n><span class=3D"s">, </span>\<span class=3D"p">(</span><span class=3D"nv">=
y</span><span class=3D"p">)</span><span class=3D"s">) is on the line x =3D=
=3D -y"</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> (<span =
class=3D"nv">x</span>, <span class=3D"nv">y</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"(</span>\<s=
pan class=3D"p">(</span><span class=3D"nv">x</span><span class=3D"p">)</spa=
n><span class=3D"s">, </span>\<span class=3D"p">(</span><span class=3D"nv">=
y</span><span class=3D"p">)</span><span class=3D"s">) is just some arbitrar=
y point"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "(1, -1) is on the line x =3D=3D -y"</=
span>
</li></ol></div></div></div>
<img alt=3D"../_images/coordinateGraphComplex_2x.png" class=3D"align-center=
" src=3D"https://docs.swift.org/swift-book/_images/coordinateGraphComplex_2=
x.png" style=3D"width: 289px;">
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
tch</span></code> statement determines whether the point is on the green di=
agonal line where <code class=3D"docutils literal notranslate"><span class=
=3D"pre">x</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y</=
span></code>, on the purple diagonal line where <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">x</span> <span class=3D"pre">=3D=3D</=
span> <span class=3D"pre">-y</span></code>, or neither.</p>
<p>The three <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> cases declare placeholder constants <code class=3D"=
docutils literal notranslate"><span class=3D"pre">x</span></code> and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">y</span></code>=
, which temporarily take on the two tuple values from <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">yetAnotherPoint</span></code>. =
These constants are used as part of a <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">where</span></code> clause, to create a dynamic=
 filter. The <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> case matches the current value of <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">point</span></code> only if=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">where=
</span></code> clause=E2=80=99s condition evaluates to <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">true</span></code> for that va=
lue.</p>
<p>As in the previous example, the final case matches all possible remainin=
g values, and so a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">default</span></code> case is not needed to make the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statement exhaustive.</p>
</div>
<div class=3D"section" id=3D"ID548">
<h4>Compound Cases<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/ControlFlow.html#ID548" title=3D"Permalink to this h=
eadline">=C2=B6</a></h4>
<p>Multiple switch cases that share the same body can be combined by writin=
g several patterns after <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">case</span></code>, with a comma between each of the pattern=
s. If any of the patterns match, then the case is considered to match. The =
patterns can be written over multiple lines if the list is long. For exampl=
e:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">someCharacter</span>: <span class=3D"nc">Charac=
ter</span> =3D <span class=3D"s">"e"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">someCharacter</=
span> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"a"</span>, <span =
class=3D"s">"e"</span>, <span class=3D"s">"i"</span>, <span class=3D"s">"o"=
</span>, <span class=3D"s">"u"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">someCharacter</span><span class=
=3D"p">)</span><span class=3D"s"> is a vowel"</span>)
</li><li><span class=3D"k">case</span> <span class=3D"s">"b"</span>, <span =
class=3D"s">"c"</span>, <span class=3D"s">"d"</span>, <span class=3D"s">"f"=
</span>, <span class=3D"s">"g"</span>, <span class=3D"s">"h"</span>, <span =
class=3D"s">"j"</span>, <span class=3D"s">"k"</span>, <span class=3D"s">"l"=
</span>, <span class=3D"s">"m"</span>,
</li><li>     <span class=3D"s">"n"</span>, <span class=3D"s">"p"</span>, <=
span class=3D"s">"q"</span>, <span class=3D"s">"r"</span>, <span class=3D"s=
">"s"</span>, <span class=3D"s">"t"</span>, <span class=3D"s">"v"</span>, <=
span class=3D"s">"w"</span>, <span class=3D"s">"x"</span>, <span class=3D"s=
">"y"</span>, <span class=3D"s">"z"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">someCharacter</span><span class=
=3D"p">)</span><span class=3D"s"> is a consonant"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">someCharacter</span><span class=
=3D"p">)</span><span class=3D"s"> is not a vowel or a consonant"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "e is a vowel"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swi=
tch</span></code> statement=E2=80=99s first case matches all five lowercase=
 vowels in the English language. Similarly, its second case matches all low=
ercase English consonants. Finally, the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">default</span></code> case matches any other =
character.</p>
<p>Compound cases can also include value bindings. All of the patterns of a=
 compound case have to include the same set of value bindings, and each bin=
ding has to get a value of the same type from all of the patterns in the co=
mpound case. This ensures that, no matter which part of the compound case m=
atched, the code in the body of the case can always access a value for the =
bindings and that the value always has the same type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">stillAnotherPoint</span> =3D (<span class=3D"m"=
>9</span>, <span class=3D"m">0</span>)
</li><li><span class=3D"k">switch</span> <span class=3D"nv">stillAnotherPoi=
nt</span> {
</li><li><span class=3D"k">case</span> (<span class=3D"k">let</span> <span =
class=3D"nv">distance</span>, <span class=3D"m">0</span>), (<span class=3D"=
m">0</span>, <span class=3D"k">let</span> <span class=3D"nv">distance</span=
>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"On an axis,=
 </span>\<span class=3D"p">(</span><span class=3D"nv">distance</span><span =
class=3D"p">)</span><span class=3D"s"> from the origin"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Not on an a=
xis"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "On an axis, 9 from the origin"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cas=
e</span></code> above has two patterns: <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">(let</span> <span class=3D"pre">distance,</sp=
an> <span class=3D"pre">0)</span></code> matches points on the x-axis and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">(0,</span> =
<span class=3D"pre">let</span> <span class=3D"pre">distance)</span></code> =
matches points on the y-axis. Both patterns include a binding for <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">distance</span></co=
de> and <code class=3D"docutils literal notranslate"><span class=3D"pre">di=
stance</span></code> is an integer in both patterns=E2=80=94which means tha=
t the code in the body of the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">case</span></code> can always access a value for <code =
class=3D"docutils literal notranslate"><span class=3D"pre">distance</span><=
/code>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID135">
<h2>Control Transfer Statements<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID135" title=3D"Permal=
ink to this headline">=C2=B6</a></h2>
<p><em>Control transfer statements</em> change the order in which your code=
 is executed, by transferring control from one piece of code to another. Sw=
ift has five control transfer statements:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">contin=
ue</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">break<=
/span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">fallth=
rough</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">return=
</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">throw<=
/span></code></li>
</ul>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
tinue</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">break</span></code>, and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">fallthrough</span></code> statements are describe=
d below. The <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">return</span></code> statement is described in <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.ht=
ml"><span class=3D"doc">Functions</span></a>, and the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">throw</span></code> statement i=
s described in <a class=3D"reference internal" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/ErrorHandling.html#ID510"><span class=3D"std st=
d-ref">Propagating Errors Using Throwing Functions</span></a>.</p>
<div class=3D"section" id=3D"ID136">
<h3>Continue<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/ControlFlow.html#ID136" title=3D"Permalink to this headlin=
e">=C2=B6</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
tinue</span></code> statement tells a loop to stop what it is doing and sta=
rt again at the beginning of the next iteration through the loop. It says =
=E2=80=9CI am done with the current loop iteration=E2=80=9D without leaving=
 the loop altogether.</p>
<p>The following example removes all vowels and spaces from a lowercase str=
ing to create a cryptic puzzle phrase:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">puzzleInput</span> =3D <span class=3D"s">"great=
 minds think alike"</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">puzzleOutput</span=
> =3D <span class=3D"s">""</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">charactersToRemove=
</span>: [<span class=3D"nc">Character</span>] =3D [<span class=3D"s">"a"</=
span>, <span class=3D"s">"e"</span>, <span class=3D"s">"i"</span>, <span cl=
ass=3D"s">"o"</span>, <span class=3D"s">"u"</span>, <span class=3D"s">" "</=
span>]
</li><li><span class=3D"k">for</span> <span class=3D"nv">character</span> <=
span class=3D"k">in</span> <span class=3D"nv">puzzleInput</span> {
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">charactersToRem=
ove</span>.<span class=3D"nv">contains</span>(<span class=3D"nv">character<=
/span>) {
</li><li>        <span class=3D"k">continue</span>
</li><li>    }
</li><li>    <span class=3D"nv">puzzleOutput</span>.<span class=3D"nv">appe=
nd</span>(<span class=3D"nv">character</span>)
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">puzzleOutput</s=
pan>)
</li><li><span class=3D"c">// Prints "grtmndsthnklk"</span>
</li></ol></div></div></div>
<p>The code above calls the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">continue</span></code> keyword whenever it matches a vowe=
l or a space, causing the current iteration of the loop to end immediately =
and to jump straight to the start of the next iteration.</p>
</div>
<div class=3D"section" id=3D"ID137">
<h3>Break<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/ControlFlow.html#ID137" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">bre=
ak</span></code> statement ends execution of an entire control flow stateme=
nt immediately. The <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">break</span></code> statement can be used inside a <code class=3D=
"docutils literal notranslate"><span class=3D"pre">switch</span></code> or =
loop statement when you want to terminate the execution of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
or loop statement earlier than would otherwise be the case.</p>
<div class=3D"section" id=3D"ID138">
<h4>Break in a Loop Statement<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/ControlFlow.html#ID138" title=3D"Permalin=
k to this headline">=C2=B6</a></h4>
<p>When used inside a loop statement, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">break</span></code> ends the loop=E2=80=99s exe=
cution immediately and transfers control to the code after the loop=E2=80=
=99s closing brace (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">}</span></code>). No further code from the current iteration of t=
he loop is executed, and no further iterations of the loop are started.</p>
</div>
<div class=3D"section" id=3D"ID139">
<h4>Break in a Switch Statement<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID139" title=3D"Permal=
ink to this headline">=C2=B6</a></h4>
<p>When used inside a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">switch</span></code> statement, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">break</span></code> causes the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code>=
 statement to end its execution immediately and to transfer control to the =
code after the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">switch</span></code> statement=E2=80=99s closing brace (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">}</span></code>).</p>
<p>This behavior can be used to match and ignore one or more cases in a <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">switch</span>=
</code> statement. Because Swift=E2=80=99s <code class=3D"docutils literal =
notranslate"><span class=3D"pre">switch</span></code> statement is exhausti=
ve and does not allow empty cases, it is sometimes necessary to deliberatel=
y match and ignore a case in order to make your intentions explicit. You do=
 this by writing the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">break</span></code> statement as the entire body of the case you=
 want to ignore. When that case is matched by the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">switch</span></code> statement, the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">break</sp=
an></code> statement inside the case ends the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">switch</span></code> statement=E2=80=99=
s execution immediately.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">A <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">switch</span></code> case that contains only a comment is reporte=
d as a compile-time error. Comments are not statements and do not cause a <=
code class=3D"docutils literal notranslate"><span class=3D"pre">switch</spa=
n></code> case to be ignored. Always use a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">break</span></code> statement to ignore a =
<code class=3D"docutils literal notranslate"><span class=3D"pre">switch</sp=
an></code> case.</p>
</div>
<p>The following example switches on a <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Character</span></code> value and determines w=
hether it represents a number symbol in one of four languages. For brevity,=
 multiple values are covered in a single <code class=3D"docutils literal no=
translate"><span class=3D"pre">switch</span></code> case.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">numberSymbol</span>: <span class=3D"nc">Charact=
er</span> =3D <span class=3D"s">"=E4=B8=89"</span>  <span class=3D"c">// Ch=
inese symbol for the number 3</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">possibleIntegerVal=
ue</span>: <span class=3D"nc">Int</span>?
</li><li><span class=3D"k">switch</span> <span class=3D"nv">numberSymbol</s=
pan> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"1"</span>, <span =
class=3D"s">"=D9=A1"</span>, <span class=3D"s">"=E4=B8=80"</span>, <span cl=
ass=3D"s">"=E0=B9=91"</span>:
</li><li>    <span class=3D"nv">possibleIntegerValue</span> =3D <span class=
=3D"m">1</span>
</li><li><span class=3D"k">case</span> <span class=3D"s">"2"</span>, <span =
class=3D"s">"=D9=A2"</span>, <span class=3D"s">"=E4=BA=8C"</span>, <span cl=
ass=3D"s">"=E0=B9=92"</span>:
</li><li>    <span class=3D"nv">possibleIntegerValue</span> =3D <span class=
=3D"m">2</span>
</li><li><span class=3D"k">case</span> <span class=3D"s">"3"</span>, <span =
class=3D"s">"=D9=A3"</span>, <span class=3D"s">"=E4=B8=89"</span>, <span cl=
ass=3D"s">"=E0=B9=93"</span>:
</li><li>    <span class=3D"nv">possibleIntegerValue</span> =3D <span class=
=3D"m">3</span>
</li><li><span class=3D"k">case</span> <span class=3D"s">"4"</span>, <span =
class=3D"s">"=D9=A4"</span>, <span class=3D"s">"=E5=9B=9B"</span>, <span cl=
ass=3D"s">"=E0=B9=94"</span>:
</li><li>    <span class=3D"nv">possibleIntegerValue</span> =3D <span class=
=3D"m">4</span>
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"k">break</span>
</li><li>}
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">integerValue</span> =3D <span class=3D"nv">possibleIntegerValue</=
span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The integer=
 value of </span>\<span class=3D"p">(</span><span class=3D"nv">numberSymbol=
</span><span class=3D"p">)</span><span class=3D"s"> is </span>\<span class=
=3D"p">(</span><span class=3D"nv">integerValue</span><span class=3D"p">)</s=
pan><span class=3D"s">."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"An integer =
value could not be found for </span>\<span class=3D"p">(</span><span class=
=3D"nv">numberSymbol</span><span class=3D"p">)</span><span class=3D"s">."</=
span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The integer value of =E4=B8=89 is 3."=
</span>
</li></ol></div></div></div>
<p>This example checks <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">numberSymbol</span></code> to determine whether it is a Latin,=
 Arabic, Chinese, or Thai symbol for the numbers <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">1</span></code> to <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">4</span></code>. If a match=
 is found, one of the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">switch</span></code> statement=E2=80=99s cases sets an optional=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Int?</spa=
n></code> variable called <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">possibleIntegerValue</span></code> to an appropriate intege=
r value.</p>
<p>After the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> statement completes its execution, the example uses=
 optional binding to determine whether a value was found. The <code class=
=3D"docutils literal notranslate"><span class=3D"pre">possibleIntegerValue<=
/span></code> variable has an implicit initial value of <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">nil</span></code> by virtue o=
f being an optional type, and so the optional binding will succeed only if =
<code class=3D"docutils literal notranslate"><span class=3D"pre">possibleIn=
tegerValue</span></code> was set to an actual value by one of the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code=
> statement=E2=80=99s first four cases.</p>
<p>Because it=E2=80=99s not practical to list every possible <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Character</span></code> =
value in the example above, a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">default</span></code> case handles any characters that =
are not matched. This <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">default</span></code> case does not need to perform any action,=
 and so it is written with a single <code class=3D"docutils literal notrans=
late"><span class=3D"pre">break</span></code> statement as its body. As soo=
n as the <code class=3D"docutils literal notranslate"><span class=3D"pre">d=
efault</span></code> case is matched, the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">break</span></code> statement ends the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">switch</span><=
/code> statement=E2=80=99s execution, and code execution continues from the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">if</span>=
 <span class=3D"pre">let</span></code> statement.</p>
</div>
</div>
<div class=3D"section" id=3D"ID140">
<h3>Fallthrough<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/ControlFlow.html#ID140" title=3D"Permalink to this head=
line">=C2=B6</a></h3>
<p>In Swift, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> statements don=E2=80=99t fall through the bottom of=
 each case and into the next one. That is, the entire <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">switch</span></code> statement =
completes its execution as soon as the first matching case is completed. By=
 contrast, C requires you to insert an explicit <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">break</span></code> statement at the =
end of every <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> case to prevent fallthrough. Avoiding default fallt=
hrough means that Swift <code class=3D"docutils literal notranslate"><span =
class=3D"pre">switch</span></code> statements are much more concise and pre=
dictable than their counterparts in C, and thus they avoid executing multip=
le <code class=3D"docutils literal notranslate"><span class=3D"pre">switch<=
/span></code> cases by mistake.</p>
<p>If you need C-style fallthrough behavior, you can opt in to this behavio=
r on a case-by-case basis with the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">fallthrough</span></code> keyword. The example bel=
ow uses <code class=3D"docutils literal notranslate"><span class=3D"pre">fa=
llthrough</span></code> to create a textual description of a number.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">integerToDescribe</span> =3D <span class=3D"m">=
5</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">description</span>=
 =3D <span class=3D"s">"The number </span>\<span class=3D"p">(</span><span =
class=3D"nv">integerToDescribe</span><span class=3D"p">)</span><span class=
=3D"s"> is"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">integerToDescri=
be</span> {
</li><li><span class=3D"k">case</span> <span class=3D"m">2</span>, <span cl=
ass=3D"m">3</span>, <span class=3D"m">5</span>, <span class=3D"m">7</span>,=
 <span class=3D"m">11</span>, <span class=3D"m">13</span>, <span class=3D"m=
">17</span>, <span class=3D"m">19</span>:
</li><li>    <span class=3D"nv">description</span> +=3D <span class=3D"s">"=
 a prime number, and also"</span>
</li><li>    <span class=3D"k">fallthrough</span>
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">description</span> +=3D <span class=3D"s">"=
 an integer."</span>
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">description</sp=
an>)
</li><li><span class=3D"c">// Prints "The number 5 is a prime number, and a=
lso an integer."</span>
</li></ol></div></div></div>
<p>This example declares a new <code class=3D"docutils literal notranslate"=
><span class=3D"pre">String</span></code> variable called <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">description</span></code> a=
nd assigns it an initial value. The function then considers the value of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">integerToDes=
cribe</span></code> using a <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">switch</span></code> statement. If the value of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">integerToDescribe</=
span></code> is one of the prime numbers in the list, the function appends =
text to the end of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">description</span></code>, to note that the number is prime. It th=
en uses the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">fallthrough</span></code> keyword to =E2=80=9Cfall into=E2=80=9D the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">default</span>=
</code> case as well. The <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">default</span></code> case adds some extra text to the end =
of the description, and the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">switch</span></code> statement is complete.</p>
<p>Unless the value of <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">integerToDescribe</span></code> is in the list of known prime =
numbers, it is not matched by the first <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">switch</span></code> case at all. Because the=
re are no other specific cases, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">integerToDescribe</span></code> is matched by the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">default</span=
></code> case.</p>
<p>After the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">switch</span></code> statement has finished executing, the number=E2=80=
=99s description is printed using the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">print(_:separator:terminator:)</span></code> fu=
nction. In this example, the number <code class=3D"docutils literal notrans=
late"><span class=3D"pre">5</span></code> is correctly identified as a prim=
e number.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">fallthrough</span></code> keyword does not check the case condi=
tions for the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">switch</span></code> case that it causes execution to fall into. The <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">fallthrough<=
/span></code> keyword simply causes code execution to move directly to the =
statements inside the next case (or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">default</span></code> case) block, as in C=E2=80=
=99s standard <code class=3D"docutils literal notranslate"><span class=3D"p=
re">switch</span></code> statement behavior.</p>
</div>
</div>
<div class=3D"section" id=3D"ID141">
<h3>Labeled Statements<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/ControlFlow.html#ID141" title=3D"Permalink to th=
is headline">=C2=B6</a></h3>
<p>In Swift, you can nest loops and conditional statements inside other loo=
ps and conditional statements to create complex control flow structures. Ho=
wever, loops and conditional statements can both use the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">break</span></code> statemen=
t to end their execution prematurely. Therefore, it is sometimes useful to =
be explicit about which loop or conditional statement you want a <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">break</span></code> =
statement to terminate. Similarly, if you have multiple nested loops, it ca=
n be useful to be explicit about which loop the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">continue</span></code> statement shou=
ld affect.</p>
<p>To achieve these aims, you can mark a loop statement or conditional stat=
ement with a <em>statement label</em>. With a conditional statement, you ca=
n use a statement label with the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">break</span></code> statement to end the execution o=
f the labeled statement. With a loop statement, you can use a statement lab=
el with the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">break</span></code> or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">continue</span></code> statement to end or continue the exec=
ution of the labeled statement.</p>
<p>A labeled statement is indicated by placing a label on the same line as =
the statement=E2=80=99s introducer keyword, followed by a colon. Here=E2=80=
=99s an example of this syntax for a <code class=3D"docutils literal notran=
slate"><span class=3D"pre">while</span></code> loop, although the principle=
 is the same for all loops and <code class=3D"docutils literal notranslate"=
><span class=3D"pre">switch</span></code> statements:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">label name</span>: <span class=3D"k">while</span> <span class=
=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The following example uses the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">break</span></code> and <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">continue</span></code> statements wit=
h a labeled <code class=3D"docutils literal notranslate"><span class=3D"pre=
">while</span></code> loop for an adapted version of the <em>Snakes and Lad=
ders</em> game that you saw earlier in this chapter. This time around, the =
game has an extra rule:</p>
<ul class=3D"simple">
<li>To win, you must land <em>exactly</em> on square 25.</li>
</ul>
<p>If a particular dice roll would take you beyond square 25, you must roll=
 again until you roll the exact number needed to land on square 25.</p>
<p>The game board is the same as before.</p>
<img alt=3D"../_images/snakesAndLadders_2x.png" class=3D"align-center" src=
=3D"https://docs.swift.org/swift-book/_images/snakesAndLadders_2x.png" styl=
e=3D"width: 623px;">
<p>The values of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">finalSquare</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">board</span></code>, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">square</span></code>, and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">diceRoll</span></code=
> are initialized in the same way as before:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">finalSquare</span> =3D <span class=3D"m">25</sp=
an>
</li><li><span class=3D"k">var</span> <span class=3D"nv">board</span> =3D [=
<span class=3D"nv">Int</span>](<span class=3D"nv">repeating</span>: <span c=
lass=3D"m">0</span>, <span class=3D"nv">count</span>: <span class=3D"nv">fi=
nalSquare</span> + <span class=3D"m">1</span>)
</li><li><span class=3D"nv">board</span>[<span class=3D"m">03</span>] =3D +=
<span class=3D"m">08</span>; <span class=3D"nv">board</span>[<span class=3D=
"m">06</span>] =3D +<span class=3D"m">11</span>; <span class=3D"nv">board</=
span>[<span class=3D"m">09</span>] =3D +<span class=3D"m">09</span>; <span =
class=3D"nv">board</span>[<span class=3D"m">10</span>] =3D +<span class=3D"=
m">02</span>
</li><li><span class=3D"nv">board</span>[<span class=3D"m">14</span>] =3D <=
span class=3D"m">-10</span>; <span class=3D"nv">board</span>[<span class=3D=
"m">19</span>] =3D <span class=3D"m">-11</span>; <span class=3D"nv">board</=
span>[<span class=3D"m">22</span>] =3D <span class=3D"m">-02</span>; <span =
class=3D"nv">board</span>[<span class=3D"m">24</span>] =3D <span class=3D"m=
">-08</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">square</span> =3D =
<span class=3D"m">0</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">diceRoll</span> =
=3D <span class=3D"m">0</span>
</li></ol></div></div></div>
<p>This version of the game uses a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">while</span></code> loop and a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">switch</span></code> statemen=
t to implement the game=E2=80=99s logic. The <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">while</span></code> loop has a statement=
 label called <code class=3D"docutils literal notranslate"><span class=3D"p=
re">gameLoop</span></code> to indicate that it is the main game loop for th=
e Snakes and Ladders game.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">whi=
le</span></code> loop=E2=80=99s condition is <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">while</span> <span class=3D"pre">square<=
/span> <span class=3D"pre">!=3D</span> <span class=3D"pre">finalSquare</spa=
n></code>, to reflect that you must land exactly on square 25.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">g=
ameLoop</span>: <span class=3D"k">while</span> <span class=3D"nv">square</s=
pan> !=3D <span class=3D"nv">finalSquare</span> {
</li><li>    <span class=3D"nv">diceRoll</span> +=3D <span class=3D"m">1</s=
pan>
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">diceRoll</span>=
 =3D=3D <span class=3D"m">7</span> { <span class=3D"nv">diceRoll</span> =3D=
 <span class=3D"m">1</span> }
</li><li>    <span class=3D"k">switch</span> <span class=3D"nv">square</spa=
n> + <span class=3D"nv">diceRoll</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">finalSquare</=
span>:
</li><li>        <span class=3D"c">// diceRoll will move us to the final sq=
uare, so the game is over</span>
</li><li>        <span class=3D"k">break</span> <span class=3D"nv">gameLoop=
</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"k">let</span> <sp=
an class=3D"nv">newSquare</span> <span class=3D"k">where</span> <span class=
=3D"nv">newSquare</span> &gt; <span class=3D"nv">finalSquare</span>:
</li><li>        <span class=3D"c">// diceRoll will move us beyond the fina=
l square, so roll again</span>
</li><li>        <span class=3D"k">continue</span> <span class=3D"nv">gameL=
oop</span>
</li><li>    <span class=3D"k">default</span>:
</li><li>        <span class=3D"c">// this is a valid move, so find out its=
 effect</span>
</li><li>        <span class=3D"nv">square</span> +=3D <span class=3D"nv">d=
iceRoll</span>
</li><li>        <span class=3D"nv">square</span> +=3D <span class=3D"nv">b=
oard</span>[<span class=3D"nv">square</span>]
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Game over!"</sp=
an>)
</li></ol></div></div></div>
<p>The dice is rolled at the start of each loop. Rather than moving the pla=
yer immediately, the loop uses a <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">switch</span></code> statement to consider the resul=
t of the move and to determine whether the move is allowed:</p>
<ul class=3D"simple">
<li>If the dice roll will move the player onto the final square, the game i=
s over. The <code class=3D"docutils literal notranslate"><span class=3D"pre=
">break</span> <span class=3D"pre">gameLoop</span></code> statement transfe=
rs control to the first line of code outside of the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">while</span></code> loop, which e=
nds the game.</li>
<li>If the dice roll will move the player <em>beyond</em> the final square,=
 the move is invalid and the player needs to roll again. The <code class=3D=
"docutils literal notranslate"><span class=3D"pre">continue</span> <span cl=
ass=3D"pre">gameLoop</span></code> statement ends the current <code class=
=3D"docutils literal notranslate"><span class=3D"pre">while</span></code> l=
oop iteration and begins the next iteration of the loop.</li>
<li>In all other cases, the dice roll is a valid move. The player moves for=
ward by <code class=3D"docutils literal notranslate"><span class=3D"pre">di=
ceRoll</span></code> squares, and the game logic checks for any snakes and =
ladders. The loop then ends, and control returns to the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">while</span></code> condition=
 to decide whether another turn is required.</li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>If the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
break</span></code> statement above did not use the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">gameLoop</span></code> label, it =
would break out of the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">switch</span></code> statement, not the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">while</span></code> statement. U=
sing the <code class=3D"docutils literal notranslate"><span class=3D"pre">g=
ameLoop</span></code> label makes it clear which control statement should b=
e terminated.</p>
<p class=3D"last">It is not strictly necessary to use the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">gameLoop</span></code> labe=
l when calling <code class=3D"docutils literal notranslate"><span class=3D"=
pre">continue</span> <span class=3D"pre">gameLoop</span></code> to jump to =
the next iteration of the loop. There is only one loop in the game, and the=
refore no ambiguity as to which loop the <code class=3D"docutils literal no=
translate"><span class=3D"pre">continue</span></code> statement will affect=
. However, there is no harm in using the <code class=3D"docutils literal no=
translate"><span class=3D"pre">gameLoop</span></code> label with the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">continue</span><=
/code> statement. Doing so is consistent with the label=E2=80=99s use along=
side the <code class=3D"docutils literal notranslate"><span class=3D"pre">b=
reak</span></code> statement and helps make the game=E2=80=99s logic cleare=
r to read and understand.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID525">
<h2>Early Exit<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/LanguageGuide/ControlFlow.html#ID525" title=3D"Permalink to this headl=
ine">=C2=B6</a></h2>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">guard=
</span></code> statement, like an <code class=3D"docutils literal notransla=
te"><span class=3D"pre">if</span></code> statement, executes statements dep=
ending on the Boolean value of an expression. You use a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">guard</span></code> statement=
 to require that a condition must be true in order for the code after the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">guard</span=
></code> statement to be executed. Unlike an <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">if</span></code> statement, a <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">guard</span></code> =
statement always has an <code class=3D"docutils literal notranslate"><span =
class=3D"pre">else</span></code> clause=E2=80=94the code inside the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">else</span></code=
> clause is executed if the condition is not true.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">greet</span>(<span class=3D"nv">person</span>:=
 [<span class=3D"nc">String</span>: <span class=3D"nc">String</span>]) {
</li><li>    <span class=3D"k">guard</span> <span class=3D"k">let</span> <s=
pan class=3D"nv">name</span> =3D <span class=3D"nv">person</span>[<span cla=
ss=3D"s">"name"</span>] <span class=3D"k">else</span> {
</li><li>        <span class=3D"k">return</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Hello </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">name</span><span class=3D"p=
">)</span><span class=3D"s">!"</span>)
</li><li>
</li><li>    <span class=3D"k">guard</span> <span class=3D"k">let</span> <s=
pan class=3D"nv">location</span> =3D <span class=3D"nv">person</span>[<span=
 class=3D"s">"location"</span>] <span class=3D"k">else</span> {
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"I hope =
the weather is nice near you."</span>)
</li><li>        <span class=3D"k">return</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"I hope the =
weather is nice in </span>\<span class=3D"p">(</span><span class=3D"nv">loc=
ation</span><span class=3D"p">)</span><span class=3D"s">."</span>)
</li><li>}
</li><li>
</li><li><span class=3D"nv">greet</span>(<span class=3D"nv">person</span>: =
[<span class=3D"s">"name"</span>: <span class=3D"s">"John"</span>])
</li><li><span class=3D"c">// Prints "Hello John!"</span>
</li><li><span class=3D"c">// Prints "I hope the weather is nice near you."=
</span>
</li><li><span class=3D"nv">greet</span>(<span class=3D"nv">person</span>: =
[<span class=3D"s">"name"</span>: <span class=3D"s">"Jane"</span>, <span cl=
ass=3D"s">"location"</span>: <span class=3D"s">"Cupertino"</span>])
</li><li><span class=3D"c">// Prints "Hello Jane!"</span>
</li><li><span class=3D"c">// Prints "I hope the weather is nice in Cuperti=
no."</span>
</li></ol></div></div></div>
<p>If the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
guard</span></code> statement=E2=80=99s condition is met, code execution co=
ntinues after the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">guard</span></code> statement=E2=80=99s closing brace. Any variabl=
es or constants that were assigned values using an optional binding as part=
 of the condition are available for the rest of the code block that the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">guard</span><=
/code> statement appears in.</p>
<p>If that condition is not met, the code inside the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">else</span></code> branch is exe=
cuted. That branch must transfer control to exit the code block in which th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">guard</s=
pan></code> statement appears. It can do this with a control transfer state=
ment such as <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">return</span></code>, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">break</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">continue</span></code>, or <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">throw</span></code>, or it can c=
all a function or method that doesn=E2=80=99t return, such as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">fatalError(_:file:lin=
e:)</span></code>.</p>
<p>Using a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>guard</span></code> statement for requirements improves the readability of=
 your code, compared to doing the same check with an <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">if</span></code> statement. It l=
ets you write the code that=E2=80=99s typically executed without wrapping i=
t in an <code class=3D"docutils literal notranslate"><span class=3D"pre">el=
se</span></code> block, and it lets you keep the code that handles a violat=
ed requirement next to the requirement.</p>
</div>
<div class=3D"section" id=3D"ID523">
<h2>Checking API Availability<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/ControlFlow.html#ID523" title=3D"Permalin=
k to this headline">=C2=B6</a></h2>
<p>Swift has built-in support for checking API availability, which ensures =
that you don=E2=80=99t accidentally use APIs that are unavailable on a give=
n deployment target.</p>
<p>The compiler uses availability information in the SDK to verify that all=
 of the APIs used in your code are available on the deployment target speci=
fied by your project. Swift reports an error at compile time if you try to =
use an API that isn=E2=80=99t available.</p>
<p>You use an <em>availability condition</em> in an <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">if</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">guard</span></code> s=
tatement to conditionally execute a block of code, depending on whether the=
 APIs you want to use are available at runtime. The compiler uses the infor=
mation from the availability condition when it verifies that the APIs in th=
at block of code are available.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">#available</span>(<span class=3D"k">iOS</span> <s=
pan class=3D"m">10</span>, <span class=3D"k">macOS</span> <span class=3D"m"=
>10.12</span>, *) {
</li><li>    <span class=3D"c">// Use iOS 10 APIs on iOS, and use macOS 10.=
12 APIs on macOS</span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"c">// Fall back to earlier iOS and macOS APIs</=
span>
</li><li>}
</li></ol></div></div></div>
<p>The availability condition above specifies that in iOS, the body of the =
<code class=3D"docutils literal notranslate"><span class=3D"pre">if</span><=
/code> statement executes only in iOS 10 and later; in macOS, only in macOS=
 10.12 and later. The last argument, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">*</span></code>, is required and specifies that =
on any other platform, the body of the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">if</span></code> executes on the minimum deplo=
yment target specified by your target.</p>
<p>In its general form, the availability condition takes a list of platform=
 names and versions. You use platform names such as <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">iOS</span></code>, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">macOS</span></code>, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">watchOS</span=
></code>, and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">tvOS</span></code>=E2=80=94for the full list, see <a class=3D"reference=
 internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attrib=
utes.html#ID348"><span class=3D"std std-ref">Declaration Attributes</span><=
/a>. In addition to specifying major version numbers like iOS 8 or macOS 10=
.10, you can specify minor versions numbers like iOS 11.2.6 and macOS 10.13=
.3.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"k">#available</span>(<span class=3D"g=
i">platform name</span> <span class=3D"gi">version</span>, <span class=3D"g=
i">...</span>, *) {
</li><li>    <span class=3D"gi">statements to execute if the APIs are avail=
able</span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"gi">fallback statements to execute if the APIs =
are unavailable</span>
</li><li>}
</li></ol></div></div></div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/CollectionTypes.html">Collection Types</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/Functions.html">Functions</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/snakesAndLadders_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////kysscCcoTyQlfHqGKi45cnqRaXubXnyoPEVSTVZj
7PD29ff6TH6/S32+TH2+TH29RnOtQmyjPmWZOl+QTHy7THu4THm0UX65THatTHKkVn2zO1Z5Y43E
TWiMe5/OTWJ+m7LQTVJZTG6ZcY2xTVxvr8Xh8PT5O0FI5u314ejwTVBTTU5P+Pr89/n7/P3++/z9
+vv8c3d5oKiqs72/vcfJwszOhImKy9fZ1uLk2+bojpSV4O7w0N3fnKOkpq+wrba3xtLTt8LD3urr
iY+Pamtra7OJZqSAXIBrU2FZUFdT3eTga6+GY5l5YIxyWXZlVWteQFpKLTQvc62BfKZ3iZtp///+
29rRmY9Y2dTI/eTA//3696tC+KxD+K5G+K9K+LFPxo9F+bVY+btkqoBG+sZ9+9GW/Nah/Nmp/N2y
/OC5fnVp/u7Z2M2+/vXp//rz//z47Z5AkXBH1cWxe2NJ5ZM9+NSxHBgU/Nm1y7GX1LqfbGVeV1JN
//79wHk3bFtL48SnvqWOlIV32oQ5882ssJiEYFVMc2tkintvPjUvo419ZF5aWFVTzMnHVElC87+h
yMbFxsTD2m057K6V0Fc26puHg2VdqaWkpVxQ4op6yUUz2nlrj4F/qklB1GZczlZPwjgzyUpFAQAA
vzAwuTExpS0tsTQ0xUA9pjc3ljw8hj8/dkRDNyMjaUZGXUlJ68XF8draU0xM9+rq+/PzIyIi/v7+
/f39+/v7+fn59/f39fX18/Pz8PDw7+/v7e3t6urq5ubm4uLi39/f3Nzc2dnZ1tbW0tLSz8/PzMzM
ysrKyMjIx8fHxMTEw8PDwsLCwMDAv7+/vLy8uLi4s7Ozrq6up6enoaGhnJycl5eXk5OTj4+PioqK
h4eHg4ODf39/e3t7d3d3cnJybm5uZ2dnYGBgW1tbWFhYVVVVU1NTUlJSUFBQTk5OTU1NSkpKR0dH
REREPz8/ODg4MDAwKCgoHx8fGxsbGBgYEBAQDAwMCQkJBgYGBAQEAgICAQEB////A94E/gAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAUHUSURBVHja7L13gBzVmS/6O1Wd
0+Sk0YwSSCAhIWtlCYFhRgQh0fftfe/uXT0b1iwm2cYYcLqrHq4u18ubGXYdCLZxIBgHjK1Ntu+2
cpgRCkgmCEUkUBppNDl2qE51vvdHVXdXT55RdzMj1Y8w3XWq61SdqvOr7/vOFxiDDh06dFyREPQh
0KFDh85vOnTo0KHzmw4dOnTo/KZDhw4dOr/p0KFDh85vOnTo0KHzmw4dOnR+06FDhw6d33To0KFD
5zcdOnTo0PlNhw4dOiYEg/ZLQB8PHRPF+fnpO9apcn08dUwQsms4frPpg6NjojiZzreu/iTqmCgk
XT/VoUPH1QCd33To0KHzmw4dOnTo/KZDhw4dkwGGwZuO8CzS60IAwIfZ6/E6MwAci2Wtw2vsAPBR
OFv9zcgFgDO+7A1pZV5mjtvSnsWJUFwGAO0tWevwO1sBoOti1jp0zQKAvnPZ6s8yDwC807N3D43z
x8JvLXdn74y2KH8WZ69HZXWlszprHSpE07siW/01K5eZxSHN1BSNZPEaoEz7cPa6PHVtlu/TsSwP
6l8AALe5sncPd+v6qQ4dOq4e6PymQ4cOnd906NChQ+c3HTp06JgMMOhDMCWx2cJvz2qHmywIuvVx
16Hzm45M4/1ZDgOkrtPV6veNK8zA8aWZ6/Cdax0mhC6dvQUA+uI1wZuv12+FDp3fdKQXJ+YKAKwI
vXOTsmF2LjLqRPjh9UYAFkSOLAR2JVb8T+u3Qsfkhm5/m3pomC0g2u8HLDco/oO7ZmS2wy3XGCH7
fBymaxv0LDM6dPltrOD6HRg/ppsQ/sst+Pha2JWkRNeaJGsmOyy3QT52I45wwXwWcABnzunymw6d
3zIoPu5aedXeMxfQcwvwiWSFEwDeLRNOZrRDJxC4EVjYB+QAZiB4hz5zdOj6aQZhA4A9V+U9M0ci
IQD37AQsADbNFfqaM/sSjET6ASAGiIAZ6Nm2b88mffLo0OW3TMEBYHH+VXnPcpQ/jTcDnwcw2xl7
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
yST/fwDOY6Q2v5ZuNAAAAABJRU5ErkJggg==

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/coordinateGraphSimple_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////tn2WgFSOsq21Yz+JlZWo/v7/ZHOl9fb58fL1AE3o
GF7qImXrM23hO3ToQHruQHjpQ3vuQnnpQ3vqQ3vpRHvqRHzqRn3tRXzpRn3rSH/uR37rSH/sSH/r
TILvTX3eTX7eTn7eUH/fUYDfVofoU4LfU4HfWozwW4rqYJDxXo3tZJLuZ5Xwa5fwbZnyb5Paf6X0
f6Loe5rYh6jrjK7xkLL1jK3uiajnkLDyl7b2lLLwl7b0lrXynbr1or71q8X4k6jUpbzos8r5t835
us/5sMTrtMjwscXsvdH5tMftu870wdT5wdL0xtf5q7jS1uL76e/77O3vjq3oqsDpr8XurcLqtsrv
7fP9+fv99/n76Ors/P3+9PX28PHy+/z8+Pn59/j49fb28/T08fLy7/Dw7e7u7O3t6+zs6uvr6erq
6Onp5+jo5ufn5ebm5OXl4uPj4OHh3N3dz9DQ/Pz79PTz8cSD8seJ88mN7tKp9Nq0992496tC+LJS
57d2+suJ+suL+cyO+c6T9cuR3r+U7c+l/N2y+9yz+9618dWu+9+48tax++G9uJt+wqqR/Pv6s5yL
2mw5moiA3Hxb3odvvzAwxXl51IWFx35+14mJ2oyM0IaG3ZGR04qK25CQ2I6O04yM3pWV3JSU35eX
3JaW2ZSU1ZGR4Jub3Zqa25mZ356e4aGh4aOj9fPz7evr+/r6+vn58vHx/v7+/Pz8+/v7+vr69/f3
9vb29fX18vLy8fHx7+/v5OTk4uLi39/f3t7e2tra2dnZ1tbW1NTU0dHRzs7OzMzMycnJxsbGwMDA
v7+/vLy8urq6t7e3tbW1sbGxrq6uqamppqamoqKin5+fnJycmZmZlpaWkZGRiIiIhYWFgYGBfX19
eHh4dHR0cXFxbm5uaGhoY2NjWlpaVVVVTk5OSkpKSEhIRkZGQkJCQEBAPj4+OTk5Nzc3MjIyMDAw
LCwsKSkpJSUlIiIiHh4eGRkZExMTDg4ODQ0NCwsLCAgIBwcHBQUFAgICAQEB////g+EFVgAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAB9lSURBVHja7J17dFXlmYd/e+9z
Tq6QiIBWq7bKiB1rL9qO09pVtdiIuZCEAKJRybIdrWk7VaarraudNV3OYjltZ5adGVsFKSXUVMhJ
kJMYQkTxElsquiq1UMe7lZtcFEKSk5xr5g+wzYm8b3K+nZ1Nk9/zF/Bmf9/7vd9z9tn7kP0eywIh
5tgsAaFAhAIRCkQoECEUiFAgQoEIBSKEAhEKRE5eAif4t7bO0lLhxyOd6GuQxqor7GmQZ1JGBRDZ
HF2lpKnOC3S0l8yToy7yWhaFc5fhgsrnKguqj6+Ug1+zy8q0TXNXaDkvZV5x0EB2vjXVQ8vdM/ya
VyM81auRa+01vqzIZF6+hRmTKl3LImR7BiJ/pbGRNeAZiFAgQoEIBSIUiBAKRE5qgRYBTX6k6de8
gdFVKDLW8w76pEP281oZj/VsbAMAOGlpIKsWTXFxLDutJeC4iKrzApad0g42z6vIQbwXAI6qH/oc
r1s2yx1My8G8moFmeLMgNarNO/Sw+zJfYkNYVwsAYSdVIwwTBpLV0hzNoeQCOXFlVABoTc9Xouq8
QIudXChHXeS1vRt2NQD0/0Wgrf+I33wBAF66oO+JiuMv3OpsFxRJK8vZBC3qXaGVeTMGlQVqaACA
ts7KEvlc3S/FUBeKlciJK6MCiCBeor9H9CvxjvYKJeoir7uB3GHRzx2dejoAYBoOHvcHZSfKuEpb
UH1CiXYhvEITyF2h5byUecVBs7wGagIW+fHe7Ne86RNcFhzADAD45qnY59m8fj0vnP28vAvLmj3p
qUsB1DtHP89iUKDsueIwbgNwCvazFhTIhIOYAXx9enoPS0GBTPjfZNHT+Lpz+EqWggKZ8PMDOB3T
cJCVoEBmHMKM205N/g8LAf5GohF7B3LfDOy5j4XgGciMaw7ibL6D8Qxkzn440XqWgWcgU/b14Z0G
loECmRKyU2+zChQIABBOZf+bRmfn7bsSqI3QH14DIeuHMf/pK87ZuAdoffRh+kOBsuer/wDsPguw
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
YII=

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/coordinateGraphMedium_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////+fr69vf38/T08fLy7/Dw7u/v7e7u6+zs6uvr6erq
6Onp5+jo5ufn5OXl4+Tk4uPj4eLi4OHh3N3d/Pz79PTz7Ozr88uS96tC965I97BM5rh657t/8MOF
8MSG+s2O8MSI+s6Q8saL8ceM+s+T88mP+9CV9syS9MmQ88qR9cyT8smR+M+W+tGY9MyU9s6W376Q
4cGV7s2f78+i7s6h+9ms+9qs/Nuu79Cl79Cm/Nyw8NGn+9uw8tOq8tSr9tiu89Ws+92z9dev89at
8dSs+dy09Nix+96399q0+Ny23XE62GY44IVj4I1z2XVZ2ntmvzAwwTY2wz09xXR0x3h40ICA04OD
1YWF14eH0YOD24qK2IiI2YuL3I2N242N246O3ZGR24+PxoODyIeH1JGR2JaW1ZSU4Z6e3Zub25qa
356e3Z2d4qGh46Sk4KGh4aOj4aWl4qam+vf3+fb29vT09PLy7uzs7evr+vn5+fj4/v7+/f39/Pz8
+/v7+vr6+fn5+Pj49fX19PT08/Pz8fHx7e3t5ubm39/f3t7e2tra2NjY19fX1NTU0tLS0dHRz8/P
zMzMysrKycnJx8fHxcXFwMDAv7+/vLy8urq6ubm5t7e3tbW1sLCwr6+vra2tqqqqqampp6enpaWl
o6OjoaGhn5+fnZ2dmpqamZmZl5eXlZWVkZGRjY2Ni4uLiIiIh4eHhISEgoKCgICAf39/fX19e3t7
eHh4d3d3dXV1c3NzcHBwb29vbGxsampqaGhoZWVlY2NjYWFhXl5eXFxcW1tbWFhYVlZWVFRUUlJS
UVFRTU1NS0tLSUlJR0dHREREQ0NDQEBAPz8/Ojo6ODg4Nzc3NDQ0MjIyMDAwLy8vLCwsKysrKCgo
JiYmJCQkIiIiICAgHh4eHBwcGhoaGRkZFxcXFRUVExMTERERDg4ODAwMCgoKCAgIBwcHBAQEAgIC
AQEB////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv+JAswAAAPJ0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
/////////////////////wCQNH9pAAAdBUlEQVR42uydb3Bc13mff+fe3QVIkGuSgP7Aqm3KNSU5
nolUyiJn7FgTK844nk5jOx/amfpDM23cZpQolcw/IrALLLCLBUGDFAHGHvlPnTpVojrjqjNums44
daJMPKbrjDWRklhKbMuKVFKiLJG0TBLALrB7+4FSjQV53uW9i8WliOf5oKF49p73Pe999tx7l3vO
OieA5ASUABAIEAgQCBAIAIEAgQCBAIEAEAgQCK5eMpf5u+GgOZmkL/u4Nr0Wk8V8o++J7uS1+wX1
/bAbAypG1U6Gu+aF9nfqLqWUD52H4rZtY742F+ZLzo/Rq3OumK84q9mK61wlXzRaO8hr9+Dg9qQD
ylgD2lQ1GrdsK1vHdljoTJK43k4z8UR0Jf00jYkyrbgWUdd6HnMXUhlRkrjcAyUXaH+RIihDCZIy
QQmYgQCBAIEAgQCBANZCoCilTFOJ2ydl271muAtxx1Mqcvy4rnVZT6+T5MJm0+dbVaOL3r7ChnGW
27V6Y7aNKwWB1bfdauZ1x3Pqe1EPmB/+Bz0JBpSxWidded48aR2U0mo14rYctvxFKz4HajhJpalG
0z8NNBveSoYFw+DSVJtxNezpx2w3FYmCxHllpVyj3ZuwkWBAmcjstmG2tit0I3GhvXG9na4QaFGS
aqr7MihK+0recWVrdX9uRq+SCseGRo2SmXGl8vRe498mO8irKS3U9bMJ6Ni/0Ff3S9J/+UDtDyuv
v6Z++QHVLQmyw+bH2At1U6COCm3l5Y3r7TT+PVBaS1lTiVuXWur243D7LZKkn9t+qtLFuKMpFTl+
XJ7CYjHxjG6VpJ7teppqIFB8ntZthyT9Xv8LJykGAsXngR/oFkm36JkqxUCgBHxPt0i5m7mCXf4p
DNrx7866/tO/1//9WykFM1ASzvzfLV/QLUxAzEDJb6NvnXjn2XdRCARKxq+fDt/T/+QZCoFAyaj9
cPer+h514B4o+TVs4OUfUQYESsoLp/T0KGVAoNeJmiMxj2jqKcThHugNKnG/RbXjrX9zO+IgUDIm
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
q06msgZqVXi1O92GofQy1yljEuMeCDqiZQbKX7yEBTXvTJY9r0zoNbNuXWaCWs6YWTPz5qxtxpWa
jQ1LVmvivC4sKdzkPdBKued8YCTcs9DwfxMreyEKze9ptSt0wrysuMs7DVfcBF3Cnvw+5+G62dn9
vja3L7/H+dnr79U5V8pfb7TacZ27Pl8yWjvIa9fg4HZf2x5zQCN5K2G3qWo0zsw+aB3r9uX3Gq3J
85qZPRC708u5ukkP+fz9zeHhDV65H9Im423T5+9VUkP3We85M650n6yNDDrIy3pm2WQOKDJbTYYL
wxvNFzykvm7kVWg0j8TuNOZXWiekchpX2rTipsKkNJZG3OpqfQ4EgECQwlPYFfH5HVuC+ROfqKeQ
7HeW3t/dAJsfHcycf+77lavgxHR9rKt0buMKNPaRXZKkE4/dv+bDO7brH7sb4LO/dqMkfW96IXV/
uj7W1Tq3cQV6367Tx3+09NZf+CfPnxtZ4/Ed/OUuB9j88Rv/9vi56+/e/sR70/an62NdtXMbU6Ce
nfrTfy3p06f7/9uaDu6hOwcGt3Y5xmODP/rDUenwmW0P35umPWsx1lU7tzFvoj/b/9LTkrT/H/X2
NR1d/90/1+2aFt+jJ0Yl7X1B7051+lmDsa7euY05A23RKxOSpPk13oD7+Snp3R/t7nl7q34kSXpB
N6Uq0BqMdfXObUyB/v3D35Akjdyks2s6ulFJf9TdEAP68awk6az6C9UUBVqDsa7euY0p0JmLNwfD
d9989pFr7RONTTo3KUm6oG09Wn8kO7eJdufY9mt36pv/8VorYPaN7/k1pZ661ilxz+0VCvS1d0jS
X/6OJI3v3H3dy3+2Ntfo5XHXDCcdKKxPfeKf2ysUaOB2SfqiJP3ne95+9pu3/HRtBrQsbtepKffG
VHTm6Pr0J8G5vUKBnnxUku6VCr/0QT35+w+s1Yj+f9w14Jw2X7x33qzXJtajPonO7RUK9Ftv/OED
H3zlf/+ztRvTb61h/V7WdRe/DnO9XlqX80+icxvzg8T+u37ytU9co/V78NmLHyCW3qVn16M/yc5t
TIG+tO0fPnnNVvCv9d6HpOEPvOP5X1+PAiU7tzEf49+m3W/88fj7r7UK/u3fXf/jOxfe9u6zjzXX
o0DJzm3sf8q4hin3fOd6SSf++yfXoz8Jz21Mgf7pz75lvvYT0L9yN3f5MaQw8FB47j+NXwVns+tj
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
RU5ErkJggg==

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/coordinateGraphComplex_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gb2xtZGJjcW9w/vz9vbq8paKksa2w+/b6Y1Vh
VThSm36Z8OLv9Ojzs2iwtGmxtGqxtm2ztGyxt3C0tm+zuHK1u3e4una3vHq5unm3v4C8uX+2wY6/
y5jJzZzLxpfEz6DNyaDH1KvS2LHW5s3l6dPo4s3hyLfH7dzstGyyvXy7wYW/xYzDvIe6yJLG0KXP
wJ2/2rbZ3bzc0rTR4cPg48fi2b7YW0Rb1brV2sfa6tbq7+Dv3tDe8eTx6d3p9ez1NzU3+PH49/D3
4tvi+fP56+Xr8u3y7+rvMC8w/Pj8+/j79vP29PH07uvuQD9A/Pr8+Pb48vDyysjK//7/2tnazMvM
y8rLurm6t7a339bg7Ont6OXp4+Dk5ePm5uXn5eTm+fn67e3u6enq/f7++fr6+Pn59fb28/T08fLy
8PHx7/Dw7e7u7O3t6+zs6uvr6erq6Onp5+jo5ufn5ebm5OXl4uPj4eLi3d7e3+bj5e3p4urm3OTg
8vj19/v57/Px7PDu5uro/P79+Pr58PLx6Orp4+XktNLCzNvT5PHqyeTV1+Lc6fLtbLSKa7OJb7WM
brSLcLaNcbaOdbiReruVgb6bicKhk8iplMWpocyzqNG5rta/stjCt9rGwN/NvdfIvNPG0Ofa1ere
4+/o8Pfz6O/rbLOJcbWNc7ePcrWNc7WOV4Rpf7yYV35nhcCdjMSjkMammcqtQ1dLn8GtgZ2MvNzJ
xeHQxNrNuMe+3O3j4O/m4fDn9fr38vf00t/X7vbxPFJE6vXupq+p+fz6ys3Lx8vISkdHSUZGRUND
TEpKbGpqamhoaGZmUE9PXl1dvby8u7q6urm5ubi4r66uraysrKurp6am/v7+/f39/Pz8+vr69/f3
9fX19PT08vLy7+/v4eHh39/f3Nzc19fX1NTU0dHRz8/Pzs7OzMzMx8fHw8PDv7+/s7OzsLCwqamp
np6ek5OTh4eHenp6bm5ubW1tampqWFhYRkZGJycnFxcXDg4OCAgIBAQEAQEB////q6YRawAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAADWTSURBVHja7N15fBPnnT/wz4ws
+cAYG+yE09gYbAuSEkKTbHOXJM3V7Tr7y3Y32237apMA4TZ3Dtpu0ibhCiaY0zleSbtpu2W3dH8L
DTnYbM6GlBD6S7DkA7s2GIMNvi3LsjS/P2QSC/R8bY800hzf7z8cX83zfOeZt2eekTWPJAkcHJGE
zEPAwYQ4mBAHE+JgQhwcTIiDCXEwIQ4mxMHBhDiYEAcT4jB7lP2SCQ09ljY1fZdH4SJBHW3rmdCQ
48eXXbaMR+EiQehNZ0IcquOFDiB5+mCEyhdVCluYV+UW5tyLHib6dhGtAlhURVZO9Qs8vKiIyBZF
UhcRNWTJC05Q2fkLieTcqh+RHZfTJauui+q3v9EX2oHkK24iCF17BwApcbOwpZ+mrhfmpMTVVO2J
5BnP8Rw5alS/wOrEDUR2QyR1EfE8WXICmV2TQCSfSP0p2TF1gCKpi+o32GgYQRcRmu0+PYfP1UOM
8oV9lruKhRGEkB+Gm/+C+pY5h1jHkMIJFnTJWejdaUCnm89DHEJBUy4RdNGF7JN8oNO9kkeL45K4
7MV2YMqYSwRdPJ3+JB/orD3GA8ZxcYxvCy/okpv6T/KB+tO1PGIcF838OgWCQqfT7jVARvsZ5WTr
twX3nBsAFAnvNSEViWtYP5rKgtyW7newniOoaxxgm3cm+DqlkLw/k9dc1Cu5Q0+lkYMBMivTgyWt
aqCy5Lai3N8mdyJl5OZg+hlnaIMD/lEsA8CH5QpSZswM39RKqcQXjx+COPX7+Bh89Lv+v8+fRh7z
vOj1WpzgK4nHIIv7LegEkmr9YUci5GyzYBMAfK25Sen+whf2Z261IvV2CX2P8PjF9a3auehZovzU
FjuRJfsFbMkLiXce12xXXddCIHAhHSCH/1nbptD/SFZ6iJcn2rqJQ7lteyfV1yBDOcLXS2SJukT9
jp3QCaR8plz4d+Di89ol4b4+Iz194m1SuDh95kFJFJUrqyRxuFeeILLSioVUluxXkqpWVhLZCOr6
iyx/JKmLpYupbO0yIll/5q9k0+6Vj1Dp5QtV1iXq98UtW7bs/FfRVmHf3L/eKaHTfRvPIQVR2SO1
AADWStIp8+/ui+1AcutZ8cws7CwyX0Kniw0JYlogEPyl76MBT7v5BbUBU+Y0YXiELjucL6Oz8VbW
Ej668fWlwfuXXqclBI0pwDAJAYczZZxsYkPh43yv7WcA1r6FB60h6CYMnxAq2ZA48o8hCcCj8pzf
WV4Q8alFNkTEZCQsAorwewsIyqUFUR98ncmGxFcyb8JTqH3L/5QFBB2lBVGE9rIhYTh7UYEM+fBm
Cwh6cpBXUZ+/3Itp9lMnces7TOaSeDAQqCkKpLCgwZ7gqPRNwEk3n4cujd/dnjD6Lf+PWNCgDwFV
+iagmw2Fid8jRf58Fwsa/DkyNiSIFf4ETGRBQyBkAUOe9aqG+Ai8l7GgQabT/YamTTjV7TbvnLpQ
5XYJ6DGvoP3uIQsaygPRlX0T0O1O42tXSKyd6XuinAUNjRAq+iagO5kNDYiTa35i89ifZ0FDJISK
vgnoYUMDYsKzyb3nILGgoRKyjKFjH/cqvrvb5g/6wsNFCWen8DloiNPpoKH8Cad6kmHyz1e1pcHf
iwNp95wYjMd1wCQWNJyzkDXOQ/8nFV3LEmta+w40W/cSvd8NJI0chqChL1FVkWFDT/KtZh69ffLH
qaXIz+jGrPkWBbRrvxtIyr8dWhDCB04besrNvGZDF4If7+xEwr9alFBu27AFhc6FqvpvMRZvqQ7z
0mVZzX09zbd+u1rU1ubVm6rFPW1c+xyRVcraqqk6JYwm8ltWbiSyz60S1KVMHfivchnBpx2Vr4aj
C8CiYlHJErVDuwPUDm1zVEnEzsrkYAgOUMR1SZ90dSHHk1s9SKMr9oVsNXBHTtnIwpcea+qDPfMd
0/zM+cJPidtH9i3eBWDtMiRl4Du7LXMO+qQSyB43+GO5j72k7kIGbP1algzfuVtNPpDHU5C8CxaM
TyqB7JuG/WB3yIWs/2lYqWxB+CdqewulM/7e1u+ODv+LyefSOorFPT2b2b2EKKSsZzFV50j5mQXE
hWzkPOKRZ9tuQV3hLiUrvufER1nTAOBMG2TgsUfXCtrd07uIqHinQhSM7TZixp7s8JK/fxMeoEjq
kiorgdwrWofQ6KqXhIT6HxZyBdYLfwoLm/o8Ffnhnyqq2L2CWLnAVbacAr48UECNWgM6iHzlLmrr
isCKaUP8iZq7Mdne190YfPnLL+MY4H/5ZcGLi/1UyUvIHaopIbJ1UMjBoA6Q6rr2u4Hsj+8bfqPD
Xe30UFYCPK6bTXoqbypLs3nWjSqw4FXspTYge5yaNzOGvWDu1woc8JrUUEtGYM53U5614jzopaRG
JH1D1QI3wyb0fGamWQ2dSbN17PwPWFZQox8xIYTMcrMaSpOPpBVaV1D+k+o2TlCxzYwvmnu9rpvf
Ndk4LrIj5cL6FW1TrSfodsSO0F44m3xe143vm2sgH7J9tRr5SasJyklTK0gVIaDc2eTzVpjMkFz0
1d/9VhN0VP2j3eoImdLQ1wb8/Q8sSMPpdL+hLDu8FTeCw+qC1H+lHRsy0TwoogVK1H8rolkMuZbN
s7qg2xEfQigvTITXZfy1Bm2rLX4Vi0xQRN/N+n5+InxNTnBYdh4UKSE2ZOw4EPk8KGJCbMjQgloj
nwdFTogNGVzQ0cgFRfw99WzI0IKisdxopITwvocNGfYqFpUFayMmhI7CRPia2ZA1r2JRIYR3CxPR
e4YNWfIqFh1CeLcwEX42ZFFBUSEUNNTsfIYPjhFC2hBVQdEhFLyWNX/Ah8cIMX5iI3K6o/fVD9Eh
hHd7ktHb/BEfH/3H3Y5G5KT9S/QaDPnI2dzgHzbY5gpevgoYGT7ndnv87ofminuyYfNcqpJVfVRS
2O9gFQ8hS9Q1HrDNF32vryTPJX84qewWcluQ2w6yQ3RdN7RISPS8Pne4/Q5sdHnIQwphvmScDPGX
fR92e2ErvF7R5mdHB18yHrvQ8EvGMyc3Ivuz+syI+iW+ZLw1+Id9pMcj2PgxRRJ9G+lUqcLjd52b
ni7adJewVQDIWEw9g0L0CwCJIx75BeFgZ5eXaJqqawEQEKYzqO89x6hAB5FNtbUJc/bibYEO6geG
OEB0XY7rkhqR031KPj/sfgc2GvrJcinM0gSusi7hI9sNcujKIAMjLckLm1M0qXaVLSCfqe/ZQcGn
+gUqd83LF2crds8nn/Un6jp2FT64Xniy8FIlLwmUEtmakq3iZJ2jJ4caDOoAkXVtsEnI/uL/7VXR
r7jRKE2nAQB/LkiEv/wGnrHqNTbYJOR81rQ3uq1GkxCudSbB35LPx0rHgtKivmpvVAnhBU8STiWw
If0KitLvxbQjhHY2pGdBiUc1+DLZKBNiQ7oWNEqLryOONiE2pGdB/wIjEGJDFhOkASG0O1NwKmEa
HzdrCNKCEN4pSMEpOxuyhiBNCLEhKwnShhAbspAgjQixIesI0ooQG9KNIIfGgjQjhHcKJuJUMxuK
u6CAxoK0I4R3siYiwIZML0hDQkFDTWzI5IK0JIR3siZCYUMmF6QpoaAhvpbFU1D2dK0FaUuofz50
LR/NuAka800YmxDeGZuKQAUbMrEgrQnh7cJUKGzIxII0J8SGzC5Ie0JsyOSCYkDogqG1fGBjFdIr
MRQUC0L9hsr50MYqvt4SQ0ExIYS3p6dCafxfPraxiW+1BZDdEytBoc/Uu9f0s5KKRNdYAEXC86d4
u2nN9ai8q4g8+1JZsl+y50Gz60cT2XGAbd4ZUburGqj9IXfoqTRyMFBE/9xTbf+9S0Fi1pYiVXWJ
D+6AnX3GGdrggH9EtLIHHcdOnwSm3aKaOq/sMdS4oi0Ah6dRy36JlT0WbAIArNq5SPRF26sVSbyc
hTTCI/w2wTxbaycq7ZnjRS9IbbETRZP9ArbkhevF2TXbPcS3HBJ7CywEAsL0CF8vUXKy0kNkE23d
xKHctr2TOoREydK1bQFkf35aVV1UvwN3NgDhWag/1K7sQa+gMefMSSD/E1GaV/b4KiJY2eOVlgAc
Gd9TV1f8V/agY8e4iUDFNTzb1TJeaQkg0RPbRS9jRwgzJ0wCKmbzcdZWkKOxAWYlhJ3Vk4ATbEhb
QTOegnkJwTNuEgJVbEhTQd+EmQnhzXGTADakoaArYy4oxoSChvhapp2gW2B2QniTr2UmExRzQniz
mq9lms2D4iEo9oTgYUPRj1fPx2ceFB9CbEgDQeeUOF3F4kOIDZlKUFwIsaFoX8WUeM2D4kao39DV
fPSNPg+KHyF4JmcD1WwoKlexQByvYvEjhP1VbMgE86B4EoKHDUVtHhRXQfEjBE82G4rSPCiuguJI
iK9lJpgHxZkQn4eMPw+KNyHsn5QNVE9lC4adB8WdEA5Mygaa2JBh50HxJ8SGDD4P0gEhNqRaUIui
D0FxJ8SGVIV0sMWvE0HxJ9RviO/LhhV/69KNIB0QwoG8HKB6H7sYetzu1o+g0Gfqy8P87ZJIphYK
InKSOPtoayvOvTHIAkRkv3iGyD4zWmVdwBOAzaUIkmUSVdIuqlNsthHZHct2kjv7B4eC7DGXlUe7
LqrfgY06QwcwRit70NH0P+3AmPti3u+gocuVPW53KbDP2B/zfr8MYmUPz+rgn9tbnhBsvFGRfAtF
LW9KXqSI+92Y4l0uTHb+uQ3n/rNAuMwB2S8glfasIH7ik1TXtRBQhOnSvmXEOG9TlhDZrfJicVLB
dvHOvjbbpcDRcK/4Farrovod2Ohy8YVsV3C9CBccU0QtrUOLMFexu49cQaN4CnEF/FY7zleKX0D1
C1RiKZGNoK7PfgOlVLQSRnEf0SmWBKhsTQmRrcP8HGHyoEuB/fTTTxMnE7V1Uf2KG9XBdDp4ef1m
GtCcd7/ebp51N5N+1eWHY8Y5HVWkF0LIdI4Cmo/eDw5SUIsfjp79YEJhYurpHDY0NEHfBhMKG77j
bGgogrpWggmxoUgErQETYkPq4mCrHgXpixB8x0cBzVW8UH74u/k+PQrSGSH4To8Cah5gQ2EEuXV5
DtIdITYkFqTPc5D+CLEhY13F9EiIDYUX5Iddn4J0SIgNhZ8H2bv1KUiPhPoN3cOGBs6DdCtIl4Tg
O5gOnGdDA+ZB+hWkT0Jwvs6GQudB+hWkU0IxNdT9c54HRRIJOq3LWX5XK87fU+7UvKdCngeZ8izE
1zJjzIN0Tajf0F3WNnSwxa93QTomBOfro4HWGBsqb1Va9CSoQfeC9EwIzgOxNyQ/ABZkHkKxN1R+
atIBFmQmQrE2dCRvfDILMhehGBvyJcqyX1eC0vUvSO+E+g3dGRtDf6Moil9Pggq+DyYUBUO5QNtd
EqwVb7Q0wJ7+LSOUGvLu9ML+x0uWPF8jer2ETGFuy4otNeKeNq/aSmQ3Ld0myma3n0Prnc7JxNZb
izcTWWFdG3eQY3NCwmMAli0VlLyslNqh5FFEFjuK+8TP8kh4J6kBE7JyRS0QByiSuiSsqhlKo0++
HLLVwB/vUzZdMl/6YTsw2bk1+nOfSZf+n9fRmtH/17XLkJSB7+yO/R5/5vZjXMZVej3vPPaS8CwE
ZdCtpSG8JtpRUv1AO/6KJVtj3O8jijK0QYl2HHP7kZAxM+YdD/XgpogvZBOCf7jKuneKtm6QH39J
lPvR6E7iJ9a9ZyG14MRy73Yie1UN/trWKvyd67zUjj3ijeeOFNTlHuTstw9ngMfGifLFvVTJS5Rt
RHaRTfwDsX6yH/buu8QbUwcokrrqHN6c4Tcafjqtzv+joB7VVQZplcxOnQK03mkXpVeSPQuzBfT+
7AMaAb/KkukssRzSwckNsBesUd92RNnhb6b7O7L+2J8GtE23W+RebNyMbxmnYIMQ2otPMoBaCxh6
w92AcRlTwISiH/mZVjD0htsHu/clMCENYmK1BQy94fbB3j3neSakTcyKhaHPixbEWVDBGmOxTzBQ
rXvvP9qM2um5+7TsJJ5fff6G24fxo79lLEGGOgthb3UmUFtTZOKr2PgMowkyFiHAzIaCgu4EE2JD
1hJkOELRN+QqnseCLEUo+obk1SzIWoRQnQXUVt/DVzEmpDqqsoC6+ntYEBNiQ/3xSyMLMiYhkxla
32pkQQYlZCpD61MMLciohExkyOiCDEuo39C9LIgJqTeUB9TVJbMgJqQ6Ps0D6qbea3hBCcYWZGRC
QUN19xpdUIGxBRmakOENmUKQsQn1G0pmQUxIvaEsoG6qMT9P/b8jfJDTDS/I6ITuvyoTqJu+yICl
r2vqhdz7AzCh+Mbe4GfyG88ZrvKJY+sg9642viBDffw+vKH7jzaj9nybwep+YZwXcsYPYTZCc4N/
2GCbK3j5KmDkXPEZTbgdABs2z6UqWdVHJYl+nSdr0H7kviyiZ9V1jQds8wOCpCTPJc/vRPbmlFoo
+dPEryCHit6hSOoS5wY2ujzkGwNC1hcqHvyytlIq8cWDOtnv788BabeN0aDbx8fgo99Fv9mxuXVQ
xvw/Ubo4wVcSj0Eear/zpwnPQq3BP+wjPR7Bxo8pkqdd1LIjtcsr7vexXcJWASBj8ZNEluwXt7zX
hPYj48eLHOxUXdcCICBMZ/R2ESWPCnQIMvabkuugZL4j2tJevC3QQf2gEgcoorqofgc2GrrYiRRm
EUNXWdcuUQEN8mPCB74rdofyvLjVBXnEni3vIVeto/oFKu88B+Qc90W9rmNX4YPrhT+0XqrkJYFS
0b3YWC+U6XeLN61z9ORQg0EdoAjqIvsVN2rwO7ILcV8mUDu9yBC1/mqsF/Lo12GWMAkhOA3zfNmv
2rxQMo6ACeksnjPKM4q/avNC8f9wBRPSXxjDUFDQaoAJ6dGQAZ4vM6EgMxEywOepzSjIVIR0b8iU
gsxFSOeGzCnIZIR0bcikgsxGSMeG1plUkOkI6fb5snWzTCrIfIR0+nzZulm1JhVkQkK6fL7MxILM
SEiHzwaZWZApCenO0LpZtRhrVkHmJKSz58vWzarF2HSzCjIpoaChvGQdCboHTMhghqYC9bowZHZB
piWEXJ0YMr0g8xLae0QXhswvyLyEAD0YsoAgMxPSwbXMCoJMTejCtewZFsSEIruW/Uecev+JJQSZ
nFDQUPaxuPQ9cqwlBJmdUNBQ+fJ4CJrYYwlBoc/Uu9f0s5KKBC/fAECUgyTeDsD60VQW5LZ0v2TP
PrkCnTX3KerqGgfY5p0R9bqqQVzSZRN6oJz8H1HTT6WRg4Ei+ueeHCyyLkjktkVDafQZZ2iDA/5h
1JU9yJDeqQRSnTNVbax6ZY/kcV4ova5MVb0aeGWPBZsAAKt2LnpWsPFqRRIvGyGN8PjF/RKtAkBq
C7ViItkvYEteuF6YnN3RiM7TvkI1dS0EAsL0CF+vaLsb270Ym/6HpE7RCxJt3cSh3La9kzqEgwwl
UReAZKVHTb8DGw1AeBbqDwOu7LFrXr44W/HPlUDq9DdV1KVyZY+32muBAurTJjUlW8VJXtlDd3FL
IdB5fE7M+lvXXoux3j/CGmEJQsjKBzrdsTIUfEexEUzIRLHlkxgaWjerFmN77lGYkLkidoaCgn4M
MCHTGZLQ6b6NBTGhyAy5tDb0luUEWYgQDsfA0FsVlhNkJUIxMPRWRY/lBFmKkOaGLCnIWoQ0NmRN
QRYjhMP5Mjobb2VBTEi9oUwZJ5tu1UgQRllPkOUIYaZGht6q6BnkN6tMyCSxt1ITQ9YVZD1CgBaG
LCzIioQ0uJZZWZAlCe2tzJyAk+5bWRATUn8t801Ad9QMWVuQRQlF1ZDFBVmVUBQN/aTD2oIsSyhq
hn4yq8bagqxLqN9QGgtiQuoN9U1Ad3KaxIKGFAoTujQq+iagJ/maCFp4zzqC5u5kQkJDp1Vvn9Fs
nauYU5hJgKUN5U841XOoWeXWSbNrgFGWngddQqg8zN8uiWQiR20nkVmUkdnB+sUzRPaZ0eK2H270
e47dJnxE+AnA5hLMAuTjNUDhf4qa3kXu0GYbkd2xbOcgg0EPpURlibou6lcKswyBO3DJGcn8K3sM
Eu93nELytGsFWWJlD8c1tUCqW4uadLKyR3eY6U9NKciVPTz9i/xvb3lC0MlGRfItFFWwKXkR8Qjn
xhQvtVLUdt8yIkv2C0ilPcQXv29OIurqPt7o97jPCh6AXwgo4ct+cXYtUOC8XdjwNmUJsUNb5cXU
zc/2heSxFh8gACjto4aSqOuifv0726umfX8fgLbqqQ3BU9KzawAsF1/IdgXXi3DBMUXUyzq0CHMV
u/vIlT2KpxB7tryPypL9ApVYSmQHqevH7j5v21XtYZOf/QZKabjL3HtfH2wmvSRA7VBNCZGtw/wc
ajCoAwSgmBxKoq5L+q2dKbePAj5LnemeHvyf3bv5juzS+EaeDZ6Um0UTuPDvBzXXAKn7zT40X+tB
Sj1OzJK908UvYkLAby63wVNx8zC2+MmsGiC93PxD0+hN+IHrXEA+AyZEhVLuHJ6h92bVWOST9nlt
/reyrw58msuEBokPhmXovXM1wKgHLTEyl3fLyXLiLDChQQ1d7oDHdfMQBZ2wjCDg0T70zQcTGjxm
ZDrgHZIhawnCswlI+AETGkLsHaohiwk6mhI4gtnHmNBQDJUPyZDFBNVcLR/7+qdy4SImNJQYiqH3
zp0A0iwjCC2B3lL8xpewgQkNYz40clBBD1lmRD6fha6XsLFLTj7PhIZ4LbPDm3wjC+qPBYvlo6MB
ZHjk74l/aZfAcgZey5xNPm/Fje+zIADADjx0NQAgBX/ks9BQDWXZ4a24kQX1xwtDeA0TGqohKwoa
UjChIRpiQUwoMkMsiAkNw1BhIryu0M8Hv/c5C2JCQ4/38xPha3KGCPJYXFB51VwmFIEhFgTn9gQm
pN4QC+ILWWSGHmZBTEi1oRuuAWbd6wFGsqBhEVqLNcQW6URbNmK757CZrGSwFTbSiZwNz5E9q6jr
fWcifOUScM8JIPXhsJuu0uyw0INBH6BI6pJUNBryNGt78DDJyseipzvlwwhcKy7go7+hyvvTdQTl
PynXUdLJfvGnb1A901lhXUkScPt/wfMntH9zVNiSQZSEjyUyC2J3pU+uIb+WkzhAEdVF9BvSaMNY
IaG7X+fTMsfg0ZTJcyGOKEbI3f6vgl+M/fMdimjNnZ/vlC77VNTWWPkUcS293NZA1PHzHUoDsTHZ
L6BMoHqms0Rd55o2foy73us7Iij5dEDc7uVn4Rf/fAYmjDslfLwvMFEOUBVTByiSuqh+QxrdICY0
JviH6xedu0QVbJYfmiHKVeyZRzy77i57JI8YlnE9OyjqVL9A5TL5ZXH2R6PnU8/UvzB/avjMW+1/
XfFd9NimC3oe66VKXhIoJbI18zOJ6fKyLeupwaAOUCR11Tl6rhh+o2FBEnM5TxexXgU5B1Qi+uJ2
sl8g81Ei+SjZsjL3NUHmVG3/j8a1Mb40nO86S79A0aTb8m2LSyK9kA0h8uJ0wdWuXydxhzs2GQCU
imsPx3Rn9+yJyxg7o/e+EMeFk3fPdcAzE6HE/DxkpGBCRPT8uAFQ6lPZUFQJuY4f6ZHu/vOpeBT7
saRxB2u77pa+2X5hwbTxPwYApb0wHoY+kVbHfoAf6O6R7v70rLaEftTmvDoxcGD25S2x38H6rwe0
7eDskykHAodGPh18bwMXFsF7uzAVSsU1Md3XxTMDC2M9vuV/fi05MXBgVlabptPprSP7up7sau6z
9dVPivEeNjx4QNsOFo2yF+3sSql3yFWht/lvz3F3KhXXfBK7fa3Lssdh6pce6DrvSz5zddpns7Qj
VJGErjMPOzFfTjgS0937h1dlh9Z9/MLRe2o8cKLXcfF7NofmuDsRM0M1Z/9mEuIQyUjsA+Cec6hQ
wwvZOrt/bYET2NWOdTHdvdIkzQWVJ6LHC2DKMfzw4tyhglQgVtey0msD8RC0LBE1AFDwe/KTDZES
+gnswfdFFfw+pvt3uSRJ/6xtFy8kwusEgFTsLYqnoc2SJJ2MPaHT8Hf1/1XSkFBS3crgfdk/4guz
3ZyuBYJDmIGEEsT1PBSXGFV3MngBqw58R8PpdP+bxK4rfIG/mG0Im9AXnMOWAImXpmM7H4pDXHhP
vHUUWjM0vKkP3l2v8aFrltmGcNyFXz31hR+WQ9MnARWzYe5YdWQUEho1OAu1pQOAwwsANdPG7uut
TovJDg3sN2YhA/5w///mHajHidlHTAyo8rJku6/7tHOYwzWUkAKBQCBwBgBaxvukrlXTY7NLA/rV
PE5CdgEAlgIlYV/x5rhJCJww8XmoOT/N5lk3PEFDPQs93QwAvwBcM9Lx6QO/i9U+fdlvDCITtr8C
AM6jrzr8ynBv3oH6QJVpz0NtaShqGov10ILQs8/2/2V8X1/H6Njt1Jf9xiB+2pcQvDpPxv1/ELzm
zTtQD7Maaknzd64cq+a6P5xYlgzXaJP+DO75S/CtNXciXhG+6M1xk4AqU17LKlLQmf7C8Lcb3k19
+diEe9KCZ3ts22S2MZyEq1sz4B6f2FssftGbyXkmPQ/95Ne9Z/qP7Y71mhFy2nAgu//vc0w3hpd1
jUifs39EwF9OffbYU21SQ7t//eXvkHqHQ2iYF7IO+cuI/UnoeVnjD8jVt/sOJQe837+SfJWnOgbX
MkWWt8d2dMulr47tXdpdyJDy1V9jPx/I0roDJ+b+U2lPza8HeVkszkPZFz9qo30s/2pF9hc0JGT2
2IPfDuFVQUMm+32ZU+2G/NlpNeGpngRU/M94Honhn4XKE7F8XxzK1LDf8oY+AHvLhmdoslSHmv+r
0d7OW+OfZlpCzgY5Lj96GvYrt9UChQJBYyH4+NX+IrkWrqs/1aSkjJQtMRrXh1YO/NeLtWmhS8AM
6dOLISt7YPmgnzVaKZX44mFIs34d19QCqW5B9vEx+Ejw25yzR+uB3Nu0qKk4wVcSj0Eear+hz5eH
noWCXzu1MUX43tpGwCd8smBz0iLiSd1NyS1PEGVt9y0jsmS/gFTas0Kcpep6cXYPkP7fonco6gDJ
szJ87hHUo2bfXaKOtynUI9zPS4uJQ7ltO/n4BnGAAKC0jxpKoi6q34GN9hEXsikAAFeZb4qopXWS
V5ir2N1HLX9Q9vgU6payj8qS/QKVWEpkibreu+YEUHAv/lOQPwr4d4jeaPyB/Fc0/0nU8ZIAtUM1
JUS2DvNzqMGgDhCAYnIoibqofsWNDv+OrDtOszYt+n3v3AkgtVDlDeuYjGygaqrV78gsfVP/3rkT
QIFb9fYz8rKBpqlMyNqCRkXy8ct9k9iQlQn1f1NvRL82OcCGLEwoOt/Uy4asSyha3w7FhmQWFBVD
eUyIBak3lJcDNOcxIRak/r4sNwc4l8eEWFBEhhTLGpJZULQMWfVaJrOgqF3LLGrIeoS0+abefkP3
MyErCNLmOw73Hc8Bmo/ez4RYkNrwWdWQzILYEBPShyDLGpItJ0jDb+q1piHZcoIe1rCHoKGqcibE
gtQbGgXUPFDOhFiQakOnLWdIZkFsiAnpSdCXhu5nQuYKd8wEXTB0tIsJmSn+7VDsBPUban67mwmZ
aCfHxlIQ4DuYDrR8Ws6Ewse6OFWqvt9N13cDo1QJGqeuR+fruUDNPdaYD4Wu7LE0+C9bQLiMwRqp
p0SU60gPUF+gbqOzCvklXFS/gCQTbcv5XRJGuBQ1da3LxIe/VVNy8/stwJhvjhQWJfnFu7PCvngC
edQiGUoZATX9Dmx04TQxoYXBRSyIpSGSpM0LRLnNib3LxaVvTvSpX46C7Bd4ztEiPEm9OvMEMGqO
uro6ZuID4Zmo1L+U2N3/agMybvi5IL1VJlb2SLD3+klC9GCRdeF5LFHT78BGnw5ZjSl0ZY/t2wHA
BW+uqKUGySPMVexekisu3VW2lMhiuY/Kkv0ClbvWirJPXlUNpP3xQXV1NQEQZot7qZKX7WtByxc9
giUMa0qIbesQIAeDOkCD1rVE3DbVr7hRs6/s4Z5ZDYy4Za/KThvU1xu4cTRQc5f559QmvyNzu6qB
1Iq49J1+YDTQan5DsgUExetT8U5rGJLNL2juJLAhJhSJoDhWYAlDMgtiQ0xIv4IuGLrTzoRYkHpD
uUDbODsTMlo8qRNBgPPXJjdkUkJPztSLIPMbklkQG2JCOhdkdkMyC4qZoel2JsSCVBuamgnUmtOQ
zIJiEntnmdaQbE5BN+muLvMakk0p6LATbIgJRSLoBT3W1m+oiAkZ4Cr2gj6rCxqqKWJCuhfk1Gt9
e6vNaEg2naDDTh2XaEZDJiL0kI7nQWY2lGCaPXny8mog9aa5Oi+zOq8ZtTDTfZlsHkFdup4HhZ6H
pq9jQnqLw5d36X0eFGLos3NMSF8hjezS/zzoS0NZQP2xIusSSolTpWS/U6uBkRq8HzRek12pmgrU
VZvFUOiyDIuC/3L4hU/nPyo/5xG2Ze8jlpSQ7H5qrQEHmSX7hTSjC8g7FIh+XT/NwoevCUtupVjb
lT7xD+7/1gA5V4wWpFfbF48ljxo9WKrrovod2Gjny+I7si9BSZQ6IiHRXoeOeThbj7m8C0j99zGS
JnXJ4myaX2Wzyi0dzaj1XzVaXUmD5VXXReUGNGof9MC5yrp2iRpqkKmVPeZPExfnKltAPZm8vGcH
tdtEv+XvdgEjbhbPpCOo6+zl+OB6UbLYS5W8JFBKZH+2rwbIyd0XNlnn6MmhBoM6QJHURfUrbnT4
c6Gn4nTJFfb7Xhcw5c/a3Iud1mpvfnhfFlBbbYb3h4x/R1bWCUw5vspoZZ+/KheoM8PnqQ1PqKwD
SDbiuyx7zfKZfNkMguZ8z4ilm+W5DtkEgq4oMGbxJjFkbEIvdADJV9xk1PLNYcjQhF5oN7Qgkzxf
JrOguBoywfNlMguK732Z8Z/rkFkQG7IoIZMIMoEh2cCCpphBkPGfL5MNLGiMKQQZ/vkymQXpwJCh
n+uQWZAewsiGZBbEhixHKNqCFq1nQ5FEguUFFerlPJTXjFrcc4DPQnwVi+g8VH8PE9I4XjStoODz
ZXXGM2QwQi+2aS3o3N89ELe9qzKkIZkFhYZ73w7E2VAREzKwIHfrN+K6h1VZQF21tIQJGVRQ25Gc
UXHex6osoO4bfiakRYx8sQ3I/VTLc1Di1Y6472ZVFtDxscSEoh9LZrQBuUef1LKPdXV1db1xN5QH
dHz7XiYU9fh+p+aCsHHy5Mnx39NP84C6umTDEAp9d3pe8KHQBEeVeIsMYU5OSCC2kxK2ElmlzDGP
eiL1SCWQdOwHPwiftSWUEG0/N1JQ18bd5NjMW4XpgG3BclHJClHyRgeZ3Ubs7rJADeqm5mwhjpqD
HEq1da3YtqtqKI36Q566Cl2W4bRer8GfVALZ46L9hfO+MF8/7nW0ZvT/de0yJGXgO7tjfy1bfAIY
ed12vZ53HntJfBaCpQT1R+1SAHhthH52d+of7z6Bjo8XbjfEwQkl1AEAeCZzgU/0+lT52QXCC9nu
R8SrMmHTqO6l4uzqqefXinK/Hd8GZP9xTbt4L3bOJ+6DbbsEdT0TTO8DgG9fmj7fDhvwWIciKtm7
mNihXKV2gzg72XZCnH18276/r0KH++HN4fPUAYqkrse3eb1DaXQ1cRbKBwC4ytaL1xdCe74oVxHw
54trd5UtJ9cXShJu+2IbkD1OIdquJHum68KzrQDgz7wksWcPjgF+4dpExWSzSwL79omzNSVEtg7K
kdlVqMdMj2Ao15PrC6mtqw7iQRY3aoA7sv1twJSxeZq1vz0jIyMjI1Nne507FajPM8J9mf4J7XcD
uWOmwGKx1zCGZEMIOnoTLBd7jxjEkGwIQU/CihE0dAcTYkGRGTp9BxOKUFBSbAUlShlsyDyE9ruB
pHyrnoOMYkjWvaDbATbEhFiQiQ3JlhfkWlJpAENzmJCOz0F2nd+VHskH6t1zmBBfxVTHJ/lAp34N
ySyIDZmR0EssyDiGdEnopSQWZBxDsi4FNbKgsIZuY0IsKAJDEjpdtzEhFmQ+QzILMkoc1qkhWYeC
ck6zIAMZknUo6OhTzMVAhmQWZDRDjbcyIVpQGguiDMk42bSQCZGCeB5EGsqUcdJ1mgmFi8sOJDUi
5ygLomNmpozOd2qZUJhIbOWr2BBi78xMGV31txqZ0DptCslKbMSUP94e837pGAvYYt/rDuwkDFVO
l3Gy6Y5Y9yuM0MVhlg+6OMxKqcSnxahlOiQknvbEvN9B4vEx+Oh3Me+1OMFXQuU/dAUw4tZxMe/3
QswPWWYgdFmGRQCAjSm9xYKNNwI+4f3A5qRFirjfTcktTwhz156TkHvsx8KNyX4BqbRnhTirvi7U
AZJnpSBZ2reMGOdtCrVu6/MSsfpG8bbt5E1XN1yBrkMFL0e7LqrfgY2GrpMSSij45LqrzCd8hH2d
5BXmKnb3TROX7ip7XLjlBoeE3JE/+xlxGSP6BSqxlMiqrwtHAf8O0ULUxX3Uk/5LAlS2poTI1mF+
DkXIVRboOOWpePjtKNdF9StudPhzoe7on7gPTGxE4rHbY96vsd7zGBgT+iag+7g+5tR6GKMDrY3I
PX2W77aG8Q5IhW8Cut23MqEvBeUc7WYXw4pK3RiSdSLoSUahylAaE+oXxO8oqjSUnGZ5QgdaG5HT
zYJUGeqbgJ74G5J1IOjovzAHVVGhC0OyDgTxOcjQhmQWxIaMS4jnQdEydLNFCW0o53lQNAzZ0FNx
syUJbbBJfBWLhiGnDZ54GpJZkNHjgzgbkuMpiOdBZjAkx1EQz4NMYUiOm6BEvoqZw5AcN0GjWFA0
DTngcd1sGUJBQXwVi6qhTAe88TEksyBzxIy4GZJZkDlib9wMySzILIbK42RIZkGmiaChG01OiAVp
Ox+yw1uRZmpCLEjja1mWHd6kP5uX0KZXHCxI42tZlh3e8i9MS+g7zQEWFANDvvIb9U1I9QobVx6X
kFOgWlBcVvYYZzxD0+3wxvR3HaEreywN/ssWEC5jsEbqKRHlOtIDxPIHdx6XkP1ZpyhtUwJUnVS/
gCRTPdNZam+xLhMf/lZdyTLIrOQXJ1fYF08gjxpVMg5X9iKxYLaKuqh+B+7sQmJlj77gIhalgWXi
CrcvFWU2o2+5MDf7uIScPz8sbLbUv4zGLu4XeM7RRpyknsoQ1wVstvmLhclTgCLstzRAlITnQWW3
ylQWm/3kWJAHCD9w9Xpd/n9TU5e434E7+zTEhLZvBwAXvLmilhokjzBXsXuJMPdKi4Ts7qefFha/
3JdLDRrVL1C5ay2RpeoCXGVLxdkmAMJscS9V8pIAla0pIbJ1ILclDxCAYri9vRVf6xh2XVS/4p2N
0coeG1oCcHwe0Uw6Lg/dNxhyTn1lYSJ8iU5T3ZFtcASQ6Pk+3zDFKN7NT4SvyWkiQhscAWSfbeRD
G7N4P4aG5FgJGvPPfGDNaUiOlaBvKnxcY2rIkwjfGacpCPUL4oMa4+goTIQ/FoY0J/QKC4rXnLow
Ef5mp+EJvdLCguJpqFd7QzILMrkhza9lMgsy+7XszA0GJsSC4m8oGf7yGwxLiAXpwFC+5oZkbQU5
sliQ2Q3J2gq68hY+iGY3JGsqaAYLMr8hWUtBV/JVTDeGWvINRoivYroy1J2EUwn5hiLEgvQV7R4N
DcmaCeJ5kEUMyVoJ4nmQVQxpQOjV83wVs5Kh6BN69ZzCgnRraJoBCL16XuF5kE4NpeCU/QbdEwpe
xXgepEtDBSk41fJxtJtNiGprm/gqpud451Z39ynZoeuzUB4L0rehghQEPp8Wb0Ip4tTtDg3nQSnx
GPPxZjM0fSIC9ugaCl3ZY1HwXw6/8On8R+XnPKLcfUcl2HvqRD3Z/dRaAw4yS/YLyAk+amUPe1+A
yhI9/zQLH74mLLmVYm1X+qgJhOQTJ1fbF48ljxo9WGRd5Z97IDtnD7vfgY12viyeC30JSqLUCf7/
7r9IyP6sXRr+lmEwD3trOiepb1kWZ9P86puNKDtInqprOo53BcqVa4bd7oBG7YMeOFdZ1y5RQw2y
aIWNg8cVOGaI78VcZQvyiN1e3rODGhVxvwBQuWse8aZZxe75xKmbrOvs5fjgelGy2EuVvCRQSmRr
SraKk3WOnhxqMKgDNHhdx0+fhJxVMcx+xY0Ofy4k+OqMV48rsGdoeDcfl6/sOG3COXX25RMRaIre
fChad2TBdxSv5Zse/UfKoayJCDRP0xmhV88F4Bi1n4+PMe7LsqJ5HooOoVdbFDiufJcPjoEMKU3X
6ojQqy1+OK68ZRUfG8MYGpsKpeJa3RDqF8QHxkCRURg1QzILsmTsfTtqhmQWZNGImiE5KoJ6WJB1
DcnRENS1kg+IUQ25r4kzoaCgNXw4DGsIFdfElZA5BFl3IdG3C6JgSLa8IGW+37rnoUNRMCRbXRCc
0wrAhuJDiOdBbCgyQizITIZmx4HQQRZkFkPTJwFVs2NO6KCLBZkl3hwXkSGVhA66TSnowbYjf+fp
PGtJQyfUGkpQKajPjIKOOe1AEnBkhNNihu5AfaDqmhXbYnYWOugypaDVTvuc8yebjmL2OFgs3hw3
Cag4ErML2UGXH3YTzoOesHvzx0y67OqjSC6ypKFzd8eGUOpBtx/2bhPOpP8RPbsBYAIc2605pz5x
f0wI3e3uM6cg/AE1AADvxQ/bWcPQ5ElApYo5deijiAuCf6zZ2iN6/bpjrgDG19eE5bjqOeIpX2l1
iVecXSlv81B1rpM2d4mz9uX/miTO9vxUUNfKKSH/PCt1TAGAlvTAqucAnNiEeVfhg9/0iUoupb61
OlUhCsYIqVOcfNTe+yx51IgDFEFdVV90AlOvG7zRZfliQqcHew4Xn30hYWLaVeb4wfNNCve/9Zc5
Dl8HAGuXISkD39ltmRPRwo87gCl/HPR1j70UwYXsM5eJBIWN8pbLHfJ/wJJhu24kcGK4c+rQ94WC
N7Ousu6d4V/9y/MB2OtEn1H80ehO4ifWvWfhFKKQ5V5yCtsgh9IPjXmpHXvE2bkjBXW5AQC1SwHg
tREAgDP/dAg96zYEx2EszgCPCRe7KO6lSl6iUO+yLLJF9Ey96ABFVled4x9a6nHi3iPDajT8WUjw
IayDLX5MbBB+yvVRUB+AVQb5aFckH/xaSfYszAY/5WHbt2/fvn3fBoAHP808JJcnbwqm9wGNgF9t
yWR2RWTnC0Wj7C8nZwNVVw9rs+G8O33Q3YeJaWfMdvp+thUA/JlAY4bD1352Giwc++9FHaqv/lSb
m/qDLX1wmHAetD0jIyMjIxOozXB8/NgoSwsC9ldlA9VXa0LoYEsD7D1fM/Ho5TmKXtoEq4dnuIbk
YQnqNvPTPpUe7NgDDk/28AzJwxJk6s8HpdkxXumPektfy7KzgeqpUSZkAUHI5hPQQENNU6NK6GBL
A+yFJv+Molf6KiZZ3NCkYRiShyyo4A6Tjpe7nM87F8eBYRiShyzoWyYdLdceO5OJxJBsdUEYfI1n
NhQhIdML4iAM5UWBEAuyrqEcoDkvYkIsyMKGcodkaBBCb7AgC8e+3BzgXF5EhN5wsyCrG1IGMyTT
gnwsiA01592vlhAL4tiXmwM0H71fHSEWxPGlIVWEWBAHAOw7ngM0T1VB6A23D+NZEAd8x3OApj8M
m9Cm8z7YT4YTtC5OexKXfscCttj3ugM74zLEgn59vxkNnDso2ir0UcRlwX/Jyre/8CGhO8wn7VdL
3hKxxwA5c1cU1Vm630F7Vl3Xg1fiw3/XYockiahpRcLiidBqKImssN/zh9qB0UUX/rkg5PPloU9w
9EoAsLL0srM+jP+85dK2VgKlvcJhSaS+iXllaR+1Om+Sn/pCZbJfQHaQ3xCtvq5fABA2nUiW7FCI
p8Nhl4ndUbB5PSVokKFUXZew39R3b23F+d/fkH7hdRf9OFwS7vW/3bLlt29I4eL0mcWSKCpXVkni
cK88QWSlFQupLNmvJFWtrCSyEdT1mSx/JEwuJ0teShUs1S4jkvVn/koOhnvlI1RadV1Ev67c9PT0
Wf8QLhVuLvTfOQ0Yn3GngGp3nOZCcelXBgcAwHljGlBTVT60MXojkRLEYc3Ico4Cah4oHwqhN9w+
FsRxSUw9KDB0CaH1bh8SMsp4yDguvpadHgXU3FM+GKH1KT7Yu3+/l0eM45L3h06PAs5fYki+VND4
wiYeLo5whg6mhzEkXyooY+Ijy1X1EHiEegtPeYT80qYuTwT7RvccUV3UPSJZ8uJeKvvMogh2V6EP
UCR10Y06Xw9jKPTd6T2dg82k6aWitIs49XvsKnxwfcx7HWyJqjj2W35XKzD6gFN4Fjo8IoHvxTio
OfXr6cD5B8RnITw0jb+ZhWOw85Ajs1xMiINjUEP3JJWDCXFEL/iXQBxMiIMJcTAhDibEwcGEOJgQ
BxPiYEIcHEyIgwlxGC7+/wA0JUMCyjKdugAAAABJRU5ErkJggg==

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--12yxt4id2om6wv5HLW7uBCaDnTOFNcrxXoMZ4x9yKO------
