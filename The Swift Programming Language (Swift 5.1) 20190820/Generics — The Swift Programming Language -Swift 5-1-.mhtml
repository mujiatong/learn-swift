From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Generics.html
Subject: =?utf-8?Q?Generics=20=E2=80=94=20The=20Swift=20Programming=20Language=20(?=
 =?utf-8?Q?Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:58:12 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----"


------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Generics.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Generics =E2=80=94 The Swift Programming Language (Swift 5.1)</t=
itle>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#">Gener=
ics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#">Generics</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID180">The Problem That Generics Solve</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID181">Generic Functions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID182">Type Parameters</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID183">Naming Type Parameters</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID184">Generic Types</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID185">Extending a Generic Type</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID186">Type Constraints</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID187">Type Constraint Syntax</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID188">Type Constraints in Action</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID189">Associated Types</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID190">Associated Types in Action</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID191">Extending an Existing Type to Specify=
 an Associated Type</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID560">Adding Constraints to an Associated T=
ype</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID575">Using a Protocol in Its Associated Ty=
pe=E2=80=99s Constraints</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID192">Generic Where Clauses</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID553">Extensions with a Generic Where Claus=
e</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID557">Associated Types with a Generic Where=
 Clause</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#ID558">Generic Subscripts</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"generics">
<h1>Generics<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Generics.html#generics" title=3D"Permalink to this headlin=
e">=C2=B6</a></h1>
<p><em>Generic code</em> enables you to write flexible, reusable functions =
and types that can work with any type, subject to requirements that you def=
ine. You can write code that avoids duplication and expresses its intent in=
 a clear, abstracted manner.</p>
<p>Generics are one of the most powerful features of Swift, and much of the=
 Swift standard library is built with generic code. In fact, you=E2=80=99ve=
 been using generics throughout the <em>Language Guide</em>, even if you di=
dn=E2=80=99t realize it. For example, Swift=E2=80=99s <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Array</span></code> and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Dictionary</span>=
</code> types are both generic collections. You can create an array that ho=
lds <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code> values, or an array that holds <code class=3D"docutils literal =
notranslate"><span class=3D"pre">String</span></code> values, or indeed an =
array for any other type that can be created in Swift. Similarly, you can c=
reate a dictionary to store values of any specified type, and there are no =
limitations on what that type can be.</p>
<div class=3D"section" id=3D"ID180">
<h2>The Problem That Generics Solve<a class=3D"headerlink" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/Generics.html#ID180" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>Here=E2=80=99s a standard, nongeneric function called <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">swapTwoInts(_:_:)</span></co=
de>, which swaps two <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Int</span></code> values:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">swapTwoInts</span>(<span class=3D"k">_</span> =
<span class=3D"nv">a</span>: <span class=3D"k">inout</span> <span class=3D"=
nc">Int</span>, <span class=3D"k">_</span> <span class=3D"nv">b</span>: <sp=
an class=3D"k">inout</span> <span class=3D"nc">Int</span>) {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">temporaryA</sp=
an> =3D <span class=3D"nv">a</span>
</li><li>    <span class=3D"nv">a</span> =3D <span class=3D"nv">b</span>
</li><li>    <span class=3D"nv">b</span> =3D <span class=3D"nv">temporaryA<=
/span>
</li><li>}
</li></ol></div></div></div>
<p>This function makes use of in-out parameters to swap the values of <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">a</span></code>=
 and <code class=3D"docutils literal notranslate"><span class=3D"pre">b</sp=
an></code>, as described in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Functions.html#ID173"><span class=
=3D"std std-ref">In-Out Parameters</span></a>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swa=
pTwoInts(_:_:)</span></code> function swaps the original value of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">b</span></code> int=
o <code class=3D"docutils literal notranslate"><span class=3D"pre">a</span>=
</code>, and the original value of <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">a</span></code> into <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">b</span></code>. You can call this func=
tion to swap the values in two <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Int</span></code> variables:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">someInt</span> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">anotherInt</span> =
=3D <span class=3D"m">107</span>
</li><li><span class=3D"nv">swapTwoInts</span>(&amp;<span class=3D"nv">some=
Int</span>, &amp;<span class=3D"nv">anotherInt</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"someInt is now =
</span>\<span class=3D"p">(</span><span class=3D"nv">someInt</span><span cl=
ass=3D"p">)</span><span class=3D"s">, and anotherInt is now </span>\<span c=
lass=3D"p">(</span><span class=3D"nv">anotherInt</span><span class=3D"p">)<=
/span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "someInt is now 107, and anotherInt is=
 now 3"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swa=
pTwoInts(_:_:)</span></code> function is useful, but it can only be used wi=
th <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</sp=
an></code> values. If you want to swap two <code class=3D"docutils literal =
notranslate"><span class=3D"pre">String</span></code> values, or two <code =
class=3D"docutils literal notranslate"><span class=3D"pre">Double</span></c=
ode> values, you have to write more functions, such as the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">swapTwoStrings(_:_:)</span=
></code> and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">swapTwoDoubles(_:_:)</span></code> functions shown below:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">swapTwoStrings</span>(<span class=3D"k">_</spa=
n> <span class=3D"nv">a</span>: <span class=3D"k">inout</span> <span class=
=3D"nc">String</span>, <span class=3D"k">_</span> <span class=3D"nv">b</spa=
n>: <span class=3D"k">inout</span> <span class=3D"nc">String</span>) {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">temporaryA</sp=
an> =3D <span class=3D"nv">a</span>
</li><li>    <span class=3D"nv">a</span> =3D <span class=3D"nv">b</span>
</li><li>    <span class=3D"nv">b</span> =3D <span class=3D"nv">temporaryA<=
/span>
</li><li>}
</li><li>
</li><li><span class=3D"k">func</span> <span class=3D"nv">swapTwoDoubles</s=
pan>(<span class=3D"k">_</span> <span class=3D"nv">a</span>: <span class=3D=
"k">inout</span> <span class=3D"nc">Double</span>, <span class=3D"k">_</spa=
n> <span class=3D"nv">b</span>: <span class=3D"k">inout</span> <span class=
=3D"nc">Double</span>) {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">temporaryA</sp=
an> =3D <span class=3D"nv">a</span>
</li><li>    <span class=3D"nv">a</span> =3D <span class=3D"nv">b</span>
</li><li>    <span class=3D"nv">b</span> =3D <span class=3D"nv">temporaryA<=
/span>
</li><li>}
</li></ol></div></div></div>
<p>You may have noticed that the bodies of the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">swapTwoInts(_:_:)</span></code>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">swapTwoStrings(=
_:_:)</span></code>, and <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">swapTwoDoubles(_:_:)</span></code> functions are identical. =
The only difference is the type of the values that they accept (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">String</span=
></code>, and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Double</span></code>).</p>
<p>It=E2=80=99s more useful, and considerably more flexible, to write a sin=
gle function that swaps two values of <em>any</em> type. Generic code enabl=
es you to write such a function. (A generic version of these functions is d=
efined below.)</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">In all three functions, the types of <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">a</span></code> and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">b</span></code> must=
 be the same. If <code class=3D"docutils literal notranslate"><span class=
=3D"pre">a</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">b</span></code> aren=E2=80=99t of the same type, it isn=
=E2=80=99t possible to swap their values. Swift is a type-safe language, an=
d doesn=E2=80=99t allow (for example) a variable of type <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">String</span></code> and a v=
ariable of type <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Double</span></code> to swap values with each other. Attempting to do=
 so results in a compile-time error.</p>
</div>
</div>
<div class=3D"section" id=3D"ID181">
<h2>Generic Functions<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Generics.html#ID181" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p><em>Generic functions</em> can work with any type. Here=E2=80=99s a gene=
ric version of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">swapTwoInts(_:_:)</span></code> function from above, called <code =
class=3D"docutils literal notranslate"><span class=3D"pre">swapTwoValues(_:=
_:)</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">swapTwoValues</span>&lt;<span class=3D"nv">T</=
span>&gt;(<span class=3D"k">_</span> <span class=3D"nv">a</span>: <span cla=
ss=3D"k">inout</span> <span class=3D"nc">T</span>, <span class=3D"k">_</spa=
n> <span class=3D"nv">b</span>: <span class=3D"k">inout</span> <span class=
=3D"nc">T</span>) {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">temporaryA</sp=
an> =3D <span class=3D"nv">a</span>
</li><li>    <span class=3D"nv">a</span> =3D <span class=3D"nv">b</span>
</li><li>    <span class=3D"nv">b</span> =3D <span class=3D"nv">temporaryA<=
/span>
</li><li>}
</li></ol></div></div></div>
<p>The body of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">swapTwoValues(_:_:)</span></code> function is identical to the bod=
y of the <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
wapTwoInts(_:_:)</span></code> function. However, the first line of <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">swapTwoValues(_:_=
:)</span></code> is slightly different from <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">swapTwoInts(_:_:)</span></code>. Here=E2=
=80=99s how the first lines compare:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">swapTwoInts</span>(<span class=3D"k">_</span> =
<span class=3D"nv">a</span>: <span class=3D"k">inout</span> <span class=3D"=
nc">Int</span>, <span class=3D"k">_</span> <span class=3D"nv">b</span>: <sp=
an class=3D"k">inout</span> <span class=3D"nc">Int</span>)
</li><li><span class=3D"k">func</span> <span class=3D"nv">swapTwoValues</sp=
an>&lt;<span class=3D"nv">T</span>&gt;(<span class=3D"k">_</span> <span cla=
ss=3D"nv">a</span>: <span class=3D"k">inout</span> <span class=3D"nc">T</sp=
an>, <span class=3D"k">_</span> <span class=3D"nv">b</span>: <span class=3D=
"k">inout</span> <span class=3D"nc">T</span>)
</li></ol></div></div></div>
<p>The generic version of the function uses a <em>placeholder</em> type nam=
e (called <code class=3D"docutils literal notranslate"><span class=3D"pre">=
T</span></code>, in this case) instead of an <em>actual</em> type name (suc=
h as <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</=
span></code>, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">String</span></code>, or <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Double</span></code>). The placeholder type name doesn=
=E2=80=99t say anything about what <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">T</span></code> must be, but it <em>does</em> say =
that both <code class=3D"docutils literal notranslate"><span class=3D"pre">=
a</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">b</span></code> must be of the same type <code class=3D"docutils =
literal notranslate"><span class=3D"pre">T</span></code>, whatever <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">T</span></code> re=
presents. The actual type to use in place of <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">T</span></code> is determined each time =
the <code class=3D"docutils literal notranslate"><span class=3D"pre">swapTw=
oValues(_:_:)</span></code> function is called.</p>
<p>The other difference between a generic function and a nongeneric functio=
n is that the generic function=E2=80=99s name (<code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">swapTwoValues(_:_:)</span></code>) is =
followed by the placeholder type name (<code class=3D"docutils literal notr=
anslate"><span class=3D"pre">T</span></code>) inside angle brackets (<code =
class=3D"docutils literal notranslate"><span class=3D"pre">&lt;T&gt;</span>=
</code>). The brackets tell Swift that <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">T</span></code> is a placeholder type name wit=
hin the <code class=3D"docutils literal notranslate"><span class=3D"pre">sw=
apTwoValues(_:_:)</span></code> function definition. Because <code class=3D=
"docutils literal notranslate"><span class=3D"pre">T</span></code> is a pla=
ceholder, Swift doesn=E2=80=99t look for an actual type called <code class=
=3D"docutils literal notranslate"><span class=3D"pre">T</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swa=
pTwoValues(_:_:)</span></code> function can now be called in the same way a=
s <code class=3D"docutils literal notranslate"><span class=3D"pre">swapTwoI=
nts</span></code>, except that it can be passed two values of <em>any</em> =
type, as long as both of those values are of the same type as each other. E=
ach time <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
wapTwoValues(_:_:)</span></code> is called, the type to use for <code class=
=3D"docutils literal notranslate"><span class=3D"pre">T</span></code> is in=
ferred from the types of values passed to the function.</p>
<p>In the two examples below, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">T</span></code> is inferred to be <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Int</span></code> and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">String</span></code=
> respectively:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">someInt</span> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">anotherInt</span> =
=3D <span class=3D"m">107</span>
</li><li><span class=3D"nv">swapTwoValues</span>(&amp;<span class=3D"nv">so=
meInt</span>, &amp;<span class=3D"nv">anotherInt</span>)
</li><li><span class=3D"c">// someInt is now 107, and anotherInt is now 3</=
span>
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">someString</span> =
=3D <span class=3D"s">"hello"</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">anotherString</spa=
n> =3D <span class=3D"s">"world"</span>
</li><li><span class=3D"nv">swapTwoValues</span>(&amp;<span class=3D"nv">so=
meString</span>, &amp;<span class=3D"nv">anotherString</span>)
</li><li><span class=3D"c">// someString is now "world", and anotherString =
is now "hello"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">swapTwoValues(_:_:)</span></code> function defined above is ins=
pired by a generic function called <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">swap</span></code>, which is part of the Swift sta=
ndard library, and is automatically made available for you to use in your a=
pps. If you need the behavior of the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">swapTwoValues(_:_:)</span></code> function in yo=
ur own code, you can use Swift=E2=80=99s existing <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">swap(_:_:)</span></code> function r=
ather than providing your own implementation.</p>
</div>
</div>
<div class=3D"section" id=3D"ID182">
<h2>Type Parameters<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/Generics.html#ID182" title=3D"Permalink to this hea=
dline">=C2=B6</a></h2>
<p>In the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
swapTwoValues(_:_:)</span></code> example above, the placeholder type <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">T</span></code>=
 is an example of a <em>type parameter</em>. Type parameters specify and na=
me a placeholder type, and are written immediately after the function=E2=80=
=99s name, between a pair of matching angle brackets (such as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">&lt;T&gt;</span></cod=
e>).</p>
<p>Once you specify a type parameter, you can use it to define the type of =
a function=E2=80=99s parameters (such as the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">a</span></code> and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">b</span></code> parameters of =
the <code class=3D"docutils literal notranslate"><span class=3D"pre">swapTw=
oValues(_:_:)</span></code> function), or as the function=E2=80=99s return =
type, or as a type annotation within the body of the function. In each case=
, the type parameter is replaced with an <em>actual</em> type whenever the =
function is called. (In the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">swapTwoValues(_:_:)</span></code> example above, <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">T</span></code> wa=
s replaced with <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Int</span></code> the first time the function was called, and was rep=
laced with <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>String</span></code> the second time it was called.)</p>
<p>You can provide more than one type parameter by writing multiple type pa=
rameter names within the angle brackets, separated by commas.</p>
</div>
<div class=3D"section" id=3D"ID183">
<h2>Naming Type Parameters<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/Generics.html#ID183" title=3D"Permalink to t=
his headline">=C2=B6</a></h2>
<p>In most cases, type parameters have descriptive names, such as <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">Key</span></code> a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">Value</=
span></code> in <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Dictionary&lt;Key,</span> <span class=3D"pre">Value&gt;</span></code>=
 and <code class=3D"docutils literal notranslate"><span class=3D"pre">Eleme=
nt</span></code> in <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Array&lt;Element&gt;</span></code>, which tells the reader about =
the relationship between the type parameter and the generic type or functio=
n it=E2=80=99s used in. However, when there isn=E2=80=99t a meaningful rela=
tionship between them, it=E2=80=99s traditional to name them using single l=
etters such as <code class=3D"docutils literal notranslate"><span class=3D"=
pre">T</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">U</span></code>, and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">V</span></code>, such as <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">T</span></code> in the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">swapTwoValues(_:_:)</spa=
n></code> function above.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Always give type parameters upper camel case names (such =
as <code class=3D"docutils literal notranslate"><span class=3D"pre">T</span=
></code> and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">MyTypeParameter</span></code>) to indicate that they=E2=80=99re a placeh=
older for a <em>type</em>, not a value.</p>
</div>
</div>
<div class=3D"section" id=3D"ID184">
<h2>Generic Types<a class=3D"headerlink" href=3D"https://docs.swift.org/swi=
ft-book/LanguageGuide/Generics.html#ID184" title=3D"Permalink to this headl=
ine">=C2=B6</a></h2>
<p>In addition to generic functions, Swift enables you to define your own <=
em>generic types</em>. These are custom classes, structures, and enumeratio=
ns that can work with <em>any</em> type, in a similar way to <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Array</span></code> and =
<code class=3D"docutils literal notranslate"><span class=3D"pre">Dictionary=
</span></code>.</p>
<p>This section shows you how to write a generic collection type called <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Stack</span><=
/code>. A stack is an ordered set of values, similar to an array, but with =
a more restricted set of operations than Swift=E2=80=99s <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">Array</span></code> type. An=
 array allows new items to be inserted and removed at any location in the a=
rray. A stack, however, allows new items to be appended only to the end of =
the collection (known as <em>pushing</em> a new value on to the stack). Sim=
ilarly, a stack allows items to be removed only from the end of the collect=
ion (known as <em>popping</em> a value off the stack).</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The concept of a stack is used by the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">UINavigationController</span>=
</code> class to model the view controllers in its navigation hierarchy. Yo=
u call the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>UINavigationController</span></code> class <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">pushViewController(_:animated:)</span></c=
ode> method to add (or push) a view controller on to the navigation stack, =
and its <code class=3D"docutils literal notranslate"><span class=3D"pre">po=
pViewControllerAnimated(_:)</span></code> method to remove (or pop) a view =
controller from the navigation stack. A stack is a useful collection model =
whenever you need a strict =E2=80=9Clast in, first out=E2=80=9D approach to=
 managing a collection.</p>
</div>
<p>The illustration below shows the push and pop behavior for a stack:</p>
<img alt=3D"../_images/stackPushPop_2x.png" class=3D"align-center" src=3D"h=
ttps://docs.swift.org/swift-book/_images/stackPushPop_2x.png" style=3D"widt=
h: 664px;">
<ol class=3D"arabic simple">
<li>There are currently three values on the stack.</li>
<li>A fourth value is pushed onto the top of the stack.</li>
<li>The stack now holds four values, with the most recent one at the top.</=
li>
<li>The top item in the stack is popped.</li>
<li>After popping a value, the stack once again holds three values.</li>
</ol>
<p>Here=E2=80=99s how to write a nongeneric version of a stack, in this cas=
e for a stack of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Int</span></code> values:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">IntStack</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">items</span> =
=3D [<span class=3D"nv">Int</span>]()
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">push</span>(<span class=3D"k">_</span> <span class=3D"=
nv">item</span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"nv">items</span>.<span class=3D"nv">append<=
/span>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">pop</span>() -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">removeLast</span>()
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This structure uses an <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Array</span></code> property called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">items</span></code> to store the =
values in the stack. <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Stack</span></code> provides two methods, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">push</span></code> and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">pop</span></code>, =
to push and pop values on and off the stack. These methods are marked as <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">mutating</sp=
an></code>, because they need to modify (or <em>mutate</em>) the structure=
=E2=80=99s <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>items</span></code> array.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Int=
Stack</span></code> type shown above can only be used with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">Int</span></code> values, =
however. It would be much more useful to define a <em>generic</em> <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">Stack</span></code=
> class, that can manage a stack of <em>any</em> type of value.</p>
<p>Here=E2=80=99s a generic version of the same code:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Stack</span>&lt;<span class=3D"nv">Element</=
span>&gt; {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">items</span> =
=3D [<span class=3D"nv">Element</span>]()
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">push</span>(<span class=3D"k">_</span> <span class=3D"=
nv">item</span>: <span class=3D"nc">Element</span>) {
</li><li>        <span class=3D"nv">items</span>.<span class=3D"nv">append<=
/span>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">pop</span>() -&gt; <span class=3D"nc">Element</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">removeLast</span>()
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Note how the generic version of <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Stack</span></code> is essentially the same as the=
 nongeneric version, but with a type parameter called <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Element</span></code> instead o=
f an actual type of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Int</span></code>. This type parameter is written within a pair o=
f angle brackets (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">&lt;Element&gt;</span></code>) immediately after the structure=E2=
=80=99s name.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">Element=
</span></code> defines a placeholder name for a type to be provided later. =
This future type can be referred to as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Element</span></code> anywhere within the stru=
cture=E2=80=99s definition. In this case, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Element</span></code> is used as a placehol=
der in three places:</p>
<ul class=3D"simple">
<li>To create a property called <code class=3D"docutils literal notranslate=
"><span class=3D"pre">items</span></code>, which is initialized with an emp=
ty array of values of type <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Element</span></code></li>
<li>To specify that the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">push(_:)</span></code> method has a single parameter called <=
code class=3D"docutils literal notranslate"><span class=3D"pre">item</span>=
</code>, which must be of type <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Element</span></code></li>
<li>To specify that the value returned by the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">pop()</span></code> method will be a va=
lue of type <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Element</span></code></li>
</ul>
<p>Because it=E2=80=99s a generic type, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">Stack</span></code> can be used to create a s=
tack of <em>any</em> valid type in Swift, in a similar manner to <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Array</span></code> =
and <code class=3D"docutils literal notranslate"><span class=3D"pre">Dictio=
nary</span></code>.</p>
<p>You create a new <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Stack</span></code> instance by writing the type to be stored in =
the stack within angle brackets. For example, to create a new stack of stri=
ngs, you write <code class=3D"docutils literal notranslate"><span class=3D"=
pre">Stack&lt;String&gt;()</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">stackOfStrings</span> =3D <span class=3D"nv">St=
ack</span>&lt;<span class=3D"nc">String</span>&gt;()
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"uno"</span>)
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"dos"</span>)
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"tres"</span>)
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"cuatro"</span>)
</li><li><span class=3D"c">// the stack now contains 4 strings</span>
</li></ol></div></div></div>
<p>Here=E2=80=99s how <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">stackOfStrings</span></code> looks after pushing these four val=
ues on to the stack:</p>
<img alt=3D"../_images/stackPushedFourStrings_2x.png" class=3D"align-center=
" src=3D"https://docs.swift.org/swift-book/_images/stackPushedFourStrings_2=
x.png" style=3D"width: 664px;">
<p>Popping a value from the stack removes and returns the top value, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">"cuatro"</span><=
/code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">fromTheTop</span> =3D <span class=3D"nv">stackO=
fStrings</span>.<span class=3D"nv">pop</span>()
</li><li><span class=3D"c">// fromTheTop is equal to "cuatro", and the stac=
k now contains 3 strings</span>
</li></ol></div></div></div>
<p>Here=E2=80=99s how the stack looks after popping its top value:</p>
<img alt=3D"../_images/stackPoppedOneString_2x.png" class=3D"align-center" =
src=3D"https://docs.swift.org/swift-book/_images/stackPoppedOneString_2x.pn=
g" style=3D"width: 405px;">
</div>
<div class=3D"section" id=3D"ID185">
<h2>Extending a Generic Type<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Generics.html#ID185" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p>When you extend a generic type, you don=E2=80=99t provide a type paramet=
er list as part of the extension=E2=80=99s definition. Instead, the type pa=
rameter list from the <em>original</em> type definition is available within=
 the body of the extension, and the original type parameter names are used =
to refer to the type parameters from the original definition.</p>
<p>The following example extends the generic <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Stack</span></code> type to add a read-o=
nly computed property called <code class=3D"docutils literal notranslate"><=
span class=3D"pre">topItem</span></code>, which returns the top item on the=
 stack without popping it from the stack:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Stack</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">topItem</span>=
: <span class=3D"nc">Element</span>? {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">isEmpty</span> ? <span class=3D"k">nil</span> : <s=
pan class=3D"nv">items</span>[<span class=3D"nv">items</span>.<span class=
=3D"nv">count</span> - <span class=3D"m">1</span>]
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">top=
Item</span></code> property returns an optional value of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Element</span></code>=
. If the stack is empty, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">topItem</span></code> returns <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">nil</span></code>; if the stack isn=E2=
=80=99t empty, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">topItem</span></code> returns the final item in the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">items</span></code> array.</=
p>
<p>Note that this extension doesn=E2=80=99t define a type parameter list. I=
nstead, the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Stack</span></code> type=E2=80=99s existing type parameter name, <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">Element</span></co=
de>, is used within the extension to indicate the optional type of the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">topItem</span>=
</code> computed property.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">top=
Item</span></code> computed property can now be used with any <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Stack</span></code> i=
nstance to access and query its top item without removing it.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">topItem</span> =3D =
<span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">topItem</span> =
{
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The top ite=
m on the stack is </span>\<span class=3D"p">(</span><span class=3D"nv">topI=
tem</span><span class=3D"p">)</span><span class=3D"s">."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The top item on the stack is tres."</=
span>
</li></ol></div></div></div>
<p>Extensions of a generic type can also include requirements that instance=
s of the extended type must satisfy in order to gain the new functionality,=
 as discussed in <a class=3D"reference internal" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Generics.html#ID553"><span class=3D"std std-r=
ef">Extensions with a Generic Where Clause</span></a> below.</p>
</div>
<div class=3D"section" id=3D"ID186">
<h2>Type Constraints<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Generics.html#ID186" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">swa=
pTwoValues(_:_:)</span></code> function and the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Stack</span></code> type can work wit=
h any type. However, it=E2=80=99s sometimes useful to enforce certain <em>t=
ype constraints</em> on the types that can be used with generic functions a=
nd generic types. Type constraints specify that a type parameter must inher=
it from a specific class, or conform to a particular protocol or protocol c=
omposition.</p>
<p>For example, Swift=E2=80=99s <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Dictionary</span></code> type places a limitation on =
the types that can be used as keys for a dictionary. As described in <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/CollectionTypes.html#ID113"><span class=3D"std std-ref">Dictionaries=
</span></a>, the type of a dictionary=E2=80=99s keys must be <em>hashable</=
em>. That is, it must provide a way to make itself uniquely representable. =
<code class=3D"docutils literal notranslate"><span class=3D"pre">Dictionary=
</span></code> needs its keys to be hashable so that it can check whether i=
t already contains a value for a particular key. Without this requirement, =
<code class=3D"docutils literal notranslate"><span class=3D"pre">Dictionary=
</span></code> could not tell whether it should insert or replace a value f=
or a particular key, nor would it be able to find a value for a given key t=
hat is already in the dictionary.</p>
<p>This requirement is enforced by a type constraint on the key type for <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Dictionary</=
span></code>, which specifies that the key type must conform to the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Hashable</span></=
code> protocol, a special protocol defined in the Swift standard library. A=
ll of Swift=E2=80=99s basic types (such as <code class=3D"docutils literal =
notranslate"><span class=3D"pre">String</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">Int</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Double</span></code>,=
 and <code class=3D"docutils literal notranslate"><span class=3D"pre">Bool<=
/span></code>) are hashable by default.</p>
<p>You can define your own type constraints when creating custom generic ty=
pes, and these constraints provide much of the power of generic programming=
. Abstract concepts like <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Hashable</span></code> characterize types in terms of their =
conceptual characteristics, rather than their concrete type.</p>
<div class=3D"section" id=3D"ID187">
<h3>Type Constraint Syntax<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/Generics.html#ID187" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p>You write type constraints by placing a single class or protocol constra=
int after a type parameter=E2=80=99s name, separated by a colon, as part of=
 the type parameter list. The basic syntax for type constraints on a generi=
c function is shown below (although the syntax is the same for generic type=
s):</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunction</span>&lt;<span class=3D"nv">T</s=
pan>: <span class=3D"nc">SomeClass</span>, <span class=3D"nv">U</span>: <sp=
an class=3D"nc">SomeProtocol</span>&gt;(<span class=3D"nv">someT</span>: <s=
pan class=3D"nc">T</span>, <span class=3D"nv">someU</span>: <span class=3D"=
nc">U</span>) {
</li><li>    <span class=3D"c">// function body goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>The hypothetical function above has two type parameters. The first type =
parameter, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>T</span></code>, has a type constraint that requires <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">T</span></code> to be a subclas=
s of <code class=3D"docutils literal notranslate"><span class=3D"pre">SomeC=
lass</span></code>. The second type parameter, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">U</span></code>, has a type constraint=
 that requires <code class=3D"docutils literal notranslate"><span class=3D"=
pre">U</span></code> to conform to the protocol <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">SomeProtocol</span></code>.</p>
</div>
<div class=3D"section" id=3D"ID188">
<h3>Type Constraints in Action<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/Generics.html#ID188" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>Here=E2=80=99s a nongeneric function called <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">findIndex(ofString:in:)</span></code>,=
 which is given a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">String</span></code> value to find and an array of <code class=3D"=
docutils literal notranslate"><span class=3D"pre">String</span></code> valu=
es within which to find it. The <code class=3D"docutils literal notranslate=
"><span class=3D"pre">findIndex(ofString:in:)</span></code> function return=
s an optional <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Int</span></code> value, which will be the index of the first matching =
string in the array if it=E2=80=99s found, or <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">nil</span></code> if the string can=E2=
=80=99t be found:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">findIndex</span>(<span class=3D"nv">ofString</=
span> <span class=3D"nv">valueToFind</span>: <span class=3D"nc">String</spa=
n>, <span class=3D"nv">in</span> <span class=3D"nv">array</span>: [<span cl=
ass=3D"nc">String</span>]) -&gt; <span class=3D"nc">Int</span>? {
</li><li>    <span class=3D"k">for</span> (<span class=3D"nv">index</span>,=
 <span class=3D"nv">value</span>) <span class=3D"k">in</span> <span class=
=3D"nv">array</span>.<span class=3D"nv">enumerated</span>() {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">value</span=
> =3D=3D <span class=3D"nv">valueToFind</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"nv">ind=
ex</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"k">nil</span>
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">fin=
dIndex(ofString:in:)</span></code> function can be used to find a string va=
lue in an array of strings:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">strings</span> =3D [<span class=3D"s">"cat"</sp=
an>, <span class=3D"s">"dog"</span>, <span class=3D"s">"llama"</span>, <spa=
n class=3D"s">"parakeet"</span>, <span class=3D"s">"terrapin"</span>]
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">foundIndex</span> =3D <span class=3D"nv">findIndex</span>(<span c=
lass=3D"nv">ofString</span>: <span class=3D"s">"llama"</span>, <span class=
=3D"nv">in</span>: <span class=3D"nv">strings</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The index o=
f llama is </span>\<span class=3D"p">(</span><span class=3D"nv">foundIndex<=
/span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The index of llama is 2"</span>
</li></ol></div></div></div>
<p>The principle of finding the index of a value in an array isn=E2=80=99t =
useful only for strings, however. You can write the same functionality as a=
 generic function by replacing any mention of strings with values of some t=
ype <code class=3D"docutils literal notranslate"><span class=3D"pre">T</spa=
n></code> instead.</p>
<p>Here=E2=80=99s how you might expect a generic version of <code class=3D"=
docutils literal notranslate"><span class=3D"pre">findIndex(ofString:in:)</=
span></code>, called <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">findIndex(of:in:)</span></code>, to be written. Note that the re=
turn type of this function is still <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Int?</span></code>, because the function returns =
an optional index number, not an optional value from the array. Be warned, =
though=E2=80=94this function doesn=E2=80=99t compile, for reasons explained=
 after the example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">findIndex</span>&lt;<span class=3D"nv">T</span=
>&gt;(<span class=3D"nv">of</span> <span class=3D"nv">valueToFind</span>: <=
span class=3D"nc">T</span>, <span class=3D"nv">in</span> <span class=3D"nv"=
>array</span>:[<span class=3D"nc">T</span>]) -&gt; <span class=3D"nc">Int</=
span>? {
</li><li>    <span class=3D"k">for</span> (<span class=3D"nv">index</span>,=
 <span class=3D"nv">value</span>) <span class=3D"k">in</span> <span class=
=3D"nv">array</span>.<span class=3D"nv">enumerated</span>() {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">value</span=
> =3D=3D <span class=3D"nv">valueToFind</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"nv">ind=
ex</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"k">nil</span>
</li><li>}
</li></ol></div></div></div>
<p>This function doesn=E2=80=99t compile as written above. The problem lies=
 with the equality check, =E2=80=9C<code class=3D"docutils literal notransl=
ate"><span class=3D"pre">if</span> <span class=3D"pre">value</span> <span c=
lass=3D"pre">=3D=3D</span> <span class=3D"pre">valueToFind</span></code>=E2=
=80=9D. Not every type in Swift can be compared with the equal to operator =
(<code class=3D"docutils literal notranslate"><span class=3D"pre">=3D=3D</s=
pan></code>). If you create your own class or structure to represent a comp=
lex data model, for example, then the meaning of =E2=80=9Cequal to=E2=80=9D=
 for that class or structure isn=E2=80=99t something that Swift can guess f=
or you. Because of this, it isn=E2=80=99t possible to guarantee that this c=
ode will work for <em>every</em> possible type <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">T</span></code>, and an appropriate er=
ror is reported when you try to compile the code.</p>
<p>All is not lost, however. The Swift standard library defines a protocol =
called <code class=3D"docutils literal notranslate"><span class=3D"pre">Equ=
atable</span></code>, which requires any conforming type to implement the e=
qual to operator (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">=3D=3D</span></code>) and the not equal to operator (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">!=3D</span></code>) t=
o compare any two values of that type. All of Swift=E2=80=99s standard type=
s automatically support the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">Equatable</span></code> protocol.</p>
<p>Any type that is <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Equatable</span></code> can be used safely with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">findIndex(of:in:)</sp=
an></code> function, because it=E2=80=99s guaranteed to support the equal t=
o operator. To express this fact, you write a type constraint of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Equatable</span></co=
de> as part of the type parameter=E2=80=99s definition when you define the =
function:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">findIndex</span>&lt;<span class=3D"nv">T</span=
>: <span class=3D"nc">Equatable</span>&gt;(<span class=3D"nv">of</span> <sp=
an class=3D"nv">valueToFind</span>: <span class=3D"nc">T</span>, <span clas=
s=3D"nv">in</span> <span class=3D"nv">array</span>:[<span class=3D"nc">T</s=
pan>]) -&gt; <span class=3D"nc">Int</span>? {
</li><li>    <span class=3D"k">for</span> (<span class=3D"nv">index</span>,=
 <span class=3D"nv">value</span>) <span class=3D"k">in</span> <span class=
=3D"nv">array</span>.<span class=3D"nv">enumerated</span>() {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">value</span=
> =3D=3D <span class=3D"nv">valueToFind</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"nv">ind=
ex</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"k">nil</span>
</li><li>}
</li></ol></div></div></div>
<p>The single type parameter for <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">findIndex(of:in:)</span></code> is written as <code =
class=3D"docutils literal notranslate"><span class=3D"pre">T:</span> <span =
class=3D"pre">Equatable</span></code>, which means =E2=80=9Cany type <code =
class=3D"docutils literal notranslate"><span class=3D"pre">T</span></code> =
that conforms to the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Equatable</span></code> protocol.=E2=80=9D</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">fin=
dIndex(of:in:)</span></code> function now compiles successfully and can be =
used with any type that is <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Equatable</span></code>, such as <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">Double</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">String</span></code>:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">doubleIndex</span> =3D <span class=3D"nv">findI=
ndex</span>(<span class=3D"nv">of</span>: <span class=3D"m">9.3</span>, <sp=
an class=3D"nv">in</span>: [<span class=3D"m">3.14159</span>, <span class=
=3D"m">0.1</span>, <span class=3D"m">0.25</span>])
</li><li><span class=3D"c">// doubleIndex is an optional Int with no value,=
 because 9.3 isn't in the array</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">stringIndex</span>=
 =3D <span class=3D"nv">findIndex</span>(<span class=3D"nv">of</span>: <spa=
n class=3D"s">"Andrea"</span>, <span class=3D"nv">in</span>: [<span class=
=3D"s">"Mike"</span>, <span class=3D"s">"Malcolm"</span>, <span class=3D"s"=
>"Andrea"</span>])
</li><li><span class=3D"c">// stringIndex is an optional Int containing a v=
alue of 2</span>
</li></ol></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID189">
<h2>Associated Types<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Generics.html#ID189" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>When defining a protocol, it=E2=80=99s sometimes useful to declare one o=
r more associated types as part of the protocol=E2=80=99s definition. An <e=
m>associated type</em> gives a placeholder name to a type that is used as p=
art of the protocol. The actual type to use for that associated type isn=E2=
=80=99t specified until the protocol is adopted. Associated types are speci=
fied with the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">associatedtype</span></code> keyword.</p>
<div class=3D"section" id=3D"ID190">
<h3>Associated Types in Action<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/Generics.html#ID190" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>Here=E2=80=99s an example of a protocol called <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">Container</span></code>, which decl=
ares an associated type called <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Item</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Container</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Ite=
m</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">append</span>(<span class=3D"k">_</span> <span class=
=3D"nv">item</span>: <span class=3D"nc">Item</span>)
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span>: =
<span class=3D"nc">Int</span> { <span class=3D"k">get</span> }
</li><li>    <span class=3D"k">subscript</span>(<span class=3D"nv">i</span>=
: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Item</span> { <sp=
an class=3D"k">get</span> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Con=
tainer</span></code> protocol defines three required capabilities that any =
container must provide:</p>
<ul class=3D"simple">
<li>It must be possible to add a new item to the container with an <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">append(_:)</span><=
/code> method.</li>
<li>It must be possible to access a count of the items in the container thr=
ough a <code class=3D"docutils literal notranslate"><span class=3D"pre">cou=
nt</span></code> property that returns an <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Int</span></code> value.</li>
<li>It must be possible to retrieve each item in the container with a subsc=
ript that takes an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Int</span></code> index value.</li>
</ul>
<p>This protocol doesn=E2=80=99t specify how the items in the container sho=
uld be stored or what type they=E2=80=99re allowed to be. The protocol only=
 specifies the three bits of functionality that any type must provide in or=
der to be considered a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Container</span></code>. A conforming type can provide additio=
nal functionality, as long as it satisfies these three requirements.</p>
<p>Any type that conforms to the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Container</span></code> protocol must be able to spe=
cify the type of values it stores. Specifically, it must ensure that only i=
tems of the right type are added to the container, and it must be clear abo=
ut the type of the items returned by its subscript.</p>
<p>To define these requirements, the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Container</span></code> protocol needs a way to =
refer to the type of the elements that a container will hold, without knowi=
ng what that type is for a specific container. The <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Container</span></code> protocol n=
eeds to specify that any value passed to the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">append(_:)</span></code> method must hav=
e the same type as the container=E2=80=99s element type, and that the value=
 returned by the container=E2=80=99s subscript will be of the same type as =
the container=E2=80=99s element type.</p>
<p>To achieve this, the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Container</span></code> protocol declares an associated type =
called <code class=3D"docutils literal notranslate"><span class=3D"pre">Ite=
m</span></code>, written as <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">associatedtype</span> <span class=3D"pre">Item</span></co=
de>. The protocol doesn=E2=80=99t define what <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">Item</span></code> is=E2=80=94that info=
rmation is left for any conforming type to provide. Nonetheless, the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">Item</span></cod=
e> alias provides a way to refer to the type of the items in a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Container</span></cod=
e>, and to define a type for use with the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">append(_:)</span></code> method and subscri=
pt, to ensure that the expected behavior of any <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Container</span></code> is enforced.<=
/p>
<p>Here=E2=80=99s a version of the nongeneric <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">IntStack</span></code> type from <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/Generics.html#ID184"><span class=3D"std std-ref">Generic Types</span=
></a> above, adapted to conform to the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Container</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">IntStack</span>: <span class=3D"nc">Containe=
r</span> {
</li><li>    <span class=3D"c">// original IntStack implementation</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">items</span> =
=3D [<span class=3D"nv">Int</span>]()
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">push</span>(<span class=3D"k">_</span> <span class=3D"=
nv">item</span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"nv">items</span>.<span class=3D"nv">append<=
/span>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">pop</span>() -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">removeLast</span>()
</li><li>    }
</li><li>    <span class=3D"c">// conformance to the Container protocol</sp=
an>
</li><li>    <span class=3D"k">typealias</span> <span class=3D"nv">Item</sp=
an> =3D <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">append</span>(<span class=3D"k">_</span> <span class=
=3D"nv">item</span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">push</spa=
n>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span>: =
<span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">count</span>
</li><li>    }
</li><li>    <span class=3D"k">subscript</span>(<span class=3D"nv">i</span>=
: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>[<span class=3D"nv">i</span>]
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Int=
Stack</span></code> type implements all three of the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Container</span></code> protocol=
=E2=80=99s requirements, and in each case wraps part of the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">IntStack</span></code> ty=
pe=E2=80=99s existing functionality to satisfy these requirements.</p>
<p>Moreover, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">IntStack</span></code> specifies that for this implementation of <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Container</span><=
/code>, the appropriate <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Item</span></code> to use is a type of <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Int</span></code>. The definitio=
n of <code class=3D"docutils literal notranslate"><span class=3D"pre">typea=
lias</span> <span class=3D"pre">Item</span> <span class=3D"pre">=3D</span> =
<span class=3D"pre">Int</span></code> turns the abstract type of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Item</span></code> i=
nto a concrete type of <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Int</span></code> for this implementation of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Container</span></cod=
e> protocol.</p>
<p>Thanks to Swift=E2=80=99s type inference, you don=E2=80=99t actually nee=
d to declare a concrete <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Item</span></code> of <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Int</span></code> as part of the definition of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">IntStack</sp=
an></code>. Because <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">IntStack</span></code> conforms to all of the requirements of the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Container=
</span></code> protocol, Swift can infer the appropriate <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">Item</span></code> to use, s=
imply by looking at the type of the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">append(_:)</span></code> method=E2=80=99s <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">item</span></code=
> parameter and the return type of the subscript. Indeed, if you delete the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">typealias=
</span> <span class=3D"pre">Item</span> <span class=3D"pre">=3D</span> <spa=
n class=3D"pre">Int</span></code> line from the code above, everything stil=
l works, because it=E2=80=99s clear what type should be used for <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Item</span></code>.<=
/p>
<p>You can also make the generic <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Stack</span></code> type conform to the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Container</span></cod=
e> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Stack</span>&lt;<span class=3D"nv">Element</=
span>&gt;: <span class=3D"nc">Container</span> {
</li><li>    <span class=3D"c">// original Stack&lt;Element&gt; implementat=
ion</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">items</span> =
=3D [<span class=3D"nv">Element</span>]()
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">push</span>(<span class=3D"k">_</span> <span class=3D"=
nv">item</span>: <span class=3D"nc">Element</span>) {
</li><li>        <span class=3D"nv">items</span>.<span class=3D"nv">append<=
/span>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">pop</span>() -&gt; <span class=3D"nc">Element</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">removeLast</span>()
</li><li>    }
</li><li>    <span class=3D"c">// conformance to the Container protocol</sp=
an>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">append</span>(<span class=3D"k">_</span> <span class=
=3D"nv">item</span>: <span class=3D"nc">Element</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">push</spa=
n>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span>: =
<span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>.<span class=3D"nv">count</span>
</li><li>    }
</li><li>    <span class=3D"k">subscript</span>(<span class=3D"nv">i</span>=
: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Element</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">items</=
span>[<span class=3D"nv">i</span>]
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This time, the type parameter <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Element</span></code> is used as the type of the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">append(_:)</s=
pan></code> method=E2=80=99s <code class=3D"docutils literal notranslate"><=
span class=3D"pre">item</span></code> parameter and the return type of the =
subscript. Swift can therefore infer that <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Element</span></code> is the appropriate ty=
pe to use as the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Item</span></code> for this particular container.</p>
</div>
<div class=3D"section" id=3D"ID191">
<h3>Extending an Existing Type to Specify an Associated Type<a class=3D"hea=
derlink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Generics.h=
tml#ID191" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can extend an existing type to add conformance to a protocol, as des=
cribed in <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/Protocols.html#ID277"><span class=3D"std std-ref">Ad=
ding Protocol Conformance with an Extension</span></a>. This includes a pro=
tocol with an associated type.</p>
<p>Swift=E2=80=99s <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Array</span></code> type already provides an <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">append(_:)</span></code> method=
, a <code class=3D"docutils literal notranslate"><span class=3D"pre">count<=
/span></code> property, and a subscript with an <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Int</span></code> index to retrieve i=
ts elements. These three capabilities match the requirements of the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Container</span><=
/code> protocol. This means that you can extend <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Array</span></code> to conform to the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Container=
</span></code> protocol simply by declaring that <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Array</span></code> adopts the proto=
col. You do this with an empty extension, as described in <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Prot=
ocols.html#ID278"><span class=3D"std std-ref">Declaring Protocol Adoption w=
ith an Extension</span></a>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Array</span>: <span class=3D"nc">Containe=
r</span> {}
</li></ol></div></div></div>
<p>Array=E2=80=99s existing <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">append(_:)</span></code> method and subscript enable Swif=
t to infer the appropriate type to use for <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Item</span></code>, just as for the generi=
c <code class=3D"docutils literal notranslate"><span class=3D"pre">Stack</s=
pan></code> type above. After defining this extension, you can use any <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Array</span></=
code> as a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Container</span></code>.</p>
</div>
<div class=3D"section" id=3D"ID560">
<h3>Adding Constraints to an Associated Type<a class=3D"headerlink" href=3D=
"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID560" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can add type constraints to an associated type in a protocol to requ=
ire that conforming types satisfy those constraints. For example, the follo=
wing code defines a version of <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Container</span></code> that requires the items in the=
 container to be equatable.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Container</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Ite=
m</span>: <span class=3D"nc">Equatable</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">append</span>(<span class=3D"k">_</span> <span class=
=3D"nv">item</span>: <span class=3D"nc">Item</span>)
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span>: =
<span class=3D"nc">Int</span> { <span class=3D"k">get</span> }
</li><li>    <span class=3D"k">subscript</span>(<span class=3D"nv">i</span>=
: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Item</span> { <sp=
an class=3D"k">get</span> }
</li><li>}
</li></ol></div></div></div>
<p>To conform to this version of <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Container</span></code>, the container=E2=80=99s <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Item</span></=
code> type has to conform to the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Equatable</span></code> protocol.</p>
</div>
<div class=3D"section" id=3D"ID575">
<h3>Using a Protocol in Its Associated Type=E2=80=99s Constraints<a class=
=3D"headerlink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Gen=
erics.html#ID575" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>A protocol can appear as part of its own requirements. For example, here=
=E2=80=99s a protocol that refines the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Container</span></code> protocol, adding the r=
equirement of a <code class=3D"docutils literal notranslate"><span class=3D=
"pre">suffix(_:)</span></code> method. The <code class=3D"docutils literal =
notranslate"><span class=3D"pre">suffix(_:)</span></code> method returns a =
given number of elements from the end of the container, storing them in an =
instance of the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Suffix</span></code> type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SuffixableContainer</span>: <span class=3D=
"nc">Container</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Suf=
fix</span>: <span class=3D"nc">SuffixableContainer</span> <span class=3D"k"=
>where</span> <span class=3D"nc">Suffix</span>.<span class=3D"nc">Item</spa=
n> =3D=3D <span class=3D"nc">Item</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">suffix</span>=
(<span class=3D"k">_</span> <span class=3D"nv">size</span>: <span class=3D"=
nc">Int</span>) -&gt; <span class=3D"nc">Suffix</span>
</li><li>}
</li></ol></div></div></div>
<p>In this protocol, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Suffix</span></code> is an associated type, like the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Item</span></code> ty=
pe in the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Container</span></code> example above. <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Suffix</span></code> has two constraints: It m=
ust conform to the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">SuffixableContainer</span></code> protocol (the protocol currently=
 being defined), and its <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Item</span></code> type must be the same as the container=E2=
=80=99s <code class=3D"docutils literal notranslate"><span class=3D"pre">It=
em</span></code> type. The constraint on <code class=3D"docutils literal no=
translate"><span class=3D"pre">Item</span></code> is a generic <code class=
=3D"docutils literal notranslate"><span class=3D"pre">where</span></code> c=
lause, which is discussed in <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Generics.html#ID557"><span class=
=3D"std std-ref">Associated Types with a Generic Where Clause</span></a> be=
low.</p>
<p>Here=E2=80=99s an extension of the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">Stack</span></code> type from <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Gene=
rics.html#ID184"><span class=3D"std std-ref">Generic Types</span></a> above=
 that adds conformance to the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">SuffixableContainer</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Stack</span>: <span class=3D"nc">Suffixab=
leContainer</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">suffix</span>=
(<span class=3D"k">_</span> <span class=3D"nv">size</span>: <span class=3D"=
nc">Int</span>) -&gt; <span class=3D"nc">Stack</span> {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">result</sp=
an> =3D <span class=3D"nv">Stack</span>()
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">index</spa=
n> <span class=3D"k">in</span> (<span class=3D"nv">count</span>-<span class=
=3D"nv">size</span>)..&lt;<span class=3D"nv">count</span> {
</li><li>            <span class=3D"nv">result</span>.<span class=3D"nv">ap=
pend</span>(<span class=3D"k">self</span>[<span class=3D"nv">index</span>])
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">result<=
/span>
</li><li>    }
</li><li>    <span class=3D"c">// Inferred that Suffix is Stack.</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">stackOfInts</span>=
 =3D <span class=3D"nv">Stack</span>&lt;<span class=3D"nc">Int</span>&gt;()
</li><li><span class=3D"nv">stackOfInts</span>.<span class=3D"nv">append</s=
pan>(<span class=3D"m">10</span>)
</li><li><span class=3D"nv">stackOfInts</span>.<span class=3D"nv">append</s=
pan>(<span class=3D"m">20</span>)
</li><li><span class=3D"nv">stackOfInts</span>.<span class=3D"nv">append</s=
pan>(<span class=3D"m">30</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">suffix</span> =3D =
<span class=3D"nv">stackOfInts</span>.<span class=3D"nv">suffix</span>(<spa=
n class=3D"m">2</span>)
</li><li><span class=3D"c">// suffix contains 20 and 30</span>
</li></ol></div></div></div>
<p>In the example above, the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Suffix</span></code> associated type for <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Stack</span></code> is al=
so <code class=3D"docutils literal notranslate"><span class=3D"pre">Stack</=
span></code>, so the suffix operation on <code class=3D"docutils literal no=
translate"><span class=3D"pre">Stack</span></code> returns another <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">Stack</span></code=
>. Alternatively, a type that conforms to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">SuffixableContainer</span></code> can have =
a <code class=3D"docutils literal notranslate"><span class=3D"pre">Suffix</=
span></code> type that=E2=80=99s different from itself=E2=80=94meaning the =
suffix operation can return a different type. For example, here=E2=80=99s a=
n extension to the nongeneric <code class=3D"docutils literal notranslate">=
<span class=3D"pre">IntStack</span></code> type that adds <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">SuffixableContainer</span><=
/code> conformance, using <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Stack&lt;Int&gt;</span></code> as its suffix type instead o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">IntStack=
</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">IntStack</span>: <span class=3D"nc">Suffi=
xableContainer</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">suffix</span>=
(<span class=3D"k">_</span> <span class=3D"nv">size</span>: <span class=3D"=
nc">Int</span>) -&gt; <span class=3D"nc">Stack</span>&lt;<span class=3D"nc"=
>Int</span>&gt; {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">result</sp=
an> =3D <span class=3D"nv">Stack</span>&lt;<span class=3D"nc">Int</span>&gt=
;()
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">index</spa=
n> <span class=3D"k">in</span> (<span class=3D"nv">count</span>-<span class=
=3D"nv">size</span>)..&lt;<span class=3D"nv">count</span> {
</li><li>            <span class=3D"nv">result</span>.<span class=3D"nv">ap=
pend</span>(<span class=3D"k">self</span>[<span class=3D"nv">index</span>])
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">result<=
/span>
</li><li>    }
</li><li>    <span class=3D"c">// Inferred that Suffix is Stack&lt;Int&gt;.=
</span>
</li><li>}
</li></ol></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID192">
<h2>Generic Where Clauses<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Generics.html#ID192" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>Type constraints, as described in <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID186"><s=
pan class=3D"std std-ref">Type Constraints</span></a>, enable you to define=
 requirements on the type parameters associated with a generic function, su=
bscript, or type.</p>
<p>It can also be useful to define requirements for associated types. You d=
o this by defining a <em>generic where clause</em>. A generic <code class=
=3D"docutils literal notranslate"><span class=3D"pre">where</span></code> c=
lause enables you to require that an associated type must conform to a cert=
ain protocol, or that certain type parameters and associated types must be =
the same. A generic <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">where</span></code> clause starts with the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">where</span></code> keyword, fol=
lowed by constraints for associated types or equality relationships between=
 types and associated types. You write a generic <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">where</span></code> clause right bef=
ore the opening curly brace of a type or function=E2=80=99s body.</p>
<p>The example below defines a generic function called <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">allItemsMatch</span></code>, w=
hich checks to see if two <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Container</span></code> instances contain the same items in=
 the same order. The function returns a Boolean value of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">true</span></code> if all it=
ems match and a value of <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">false</span></code> if they don=E2=80=99t.</p>
<p>The two containers to be checked don=E2=80=99t have to be the same type =
of container (although they can be), but they do have to hold the same type=
 of items. This requirement is expressed through a combination of type cons=
traints and a generic <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">where</span></code> clause:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">allItemsMatch</span>&lt;<span class=3D"nv">C1<=
/span>: <span class=3D"nc">Container</span>, <span class=3D"nv">C2</span>: =
<span class=3D"nc">Container</span>&gt;
</li><li>    (<span class=3D"k">_</span> <span class=3D"nv">someContainer</=
span>: <span class=3D"nc">C1</span>, <span class=3D"k">_</span> <span class=
=3D"nv">anotherContainer</span>: <span class=3D"nc">C2</span>) -&gt; <span =
class=3D"nc">Bool</span>
</li><li>    <span class=3D"k">where</span> <span class=3D"nc">C1</span>.<s=
pan class=3D"nc">Item</span> =3D=3D <span class=3D"nc">C2</span>.<span clas=
s=3D"nc">Item</span>, <span class=3D"nc">C1</span>.<span class=3D"nc">Item<=
/span>: <span class=3D"nc">Equatable</span> {
</li><li>
</li><li>        <span class=3D"c">// Check that both containers contain th=
e same number of items.</span>
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">someContain=
er</span>.<span class=3D"nv">count</span> !=3D <span class=3D"nv">anotherCo=
ntainer</span>.<span class=3D"nv">count</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"k">fals=
e</span>
</li><li>        }
</li><li>
</li><li>        <span class=3D"c">// Check each pair of items to see if th=
ey're equivalent.</span>
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">i</span> <=
span class=3D"k">in</span> <span class=3D"m">0</span>..&lt;<span class=3D"n=
v">someContainer</span>.<span class=3D"nv">count</span> {
</li><li>            <span class=3D"k">if</span> <span class=3D"nv">someCon=
tainer</span>[<span class=3D"nv">i</span>] !=3D <span class=3D"nv">anotherC=
ontainer</span>[<span class=3D"nv">i</span>] {
</li><li>                <span class=3D"k">return</span> <span class=3D"k">=
false</span>
</li><li>            }
</li><li>        }
</li><li>
</li><li>        <span class=3D"c">// All items match, so return true.</spa=
n>
</li><li>        <span class=3D"k">return</span> <span class=3D"k">true</sp=
an>
</li><li>}
</li></ol></div></div></div>
<p>This function takes two arguments called <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">someContainer</span></code> and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">anotherContainer</s=
pan></code>. The <code class=3D"docutils literal notranslate"><span class=
=3D"pre">someContainer</span></code> argument is of type <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">C1</span></code>, and the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">anotherConta=
iner</span></code> argument is of type <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">C2</span></code>. Both <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">C1</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">C2</span></code> are =
type parameters for two container types to be determined when the function =
is called.</p>
<p>The following requirements are placed on the function=E2=80=99s two type=
 parameters:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">C1</sp=
an></code> must conform to the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Container</span></code> protocol (written as <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">C1:</span> <span cl=
ass=3D"pre">Container</span></code>).</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">C2</sp=
an></code> must also conform to the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Container</span></code> protocol (written as <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">C2:</span> <sp=
an class=3D"pre">Container</span></code>).</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">It=
em</span></code> for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">C1</span></code> must be the same as the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Item</span></code> for <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">C2</span></code> (wr=
itten as <code class=3D"docutils literal notranslate"><span class=3D"pre">C=
1.Item</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">C2.Item=
</span></code>).</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">It=
em</span></code> for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">C1</span></code> must conform to the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Equatable</span></code> protocol (wri=
tten as <code class=3D"docutils literal notranslate"><span class=3D"pre">C1=
.Item:</span> <span class=3D"pre">Equatable</span></code>).</li>
</ul>
<p>The first and second requirements are defined in the function=E2=80=99s =
type parameter list, and the third and fourth requirements are defined in t=
he function=E2=80=99s generic <code class=3D"docutils literal notranslate">=
<span class=3D"pre">where</span></code> clause.</p>
<p>These requirements mean:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">someCo=
ntainer</span></code> is a container of type <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">C1</span></code>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">anothe=
rContainer</span></code> is a container of type <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">C2</span></code>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">someCo=
ntainer</span></code> and <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">anotherContainer</span></code> contain the same type of ite=
ms.</li>
<li>The items in <code class=3D"docutils literal notranslate"><span class=
=3D"pre">someContainer</span></code> can be checked with the not equal oper=
ator (<code class=3D"docutils literal notranslate"><span class=3D"pre">!=3D=
</span></code>) to see if they=E2=80=99re different from each other.</li>
</ul>
<p>The third and fourth requirements combine to mean that the items in <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">anotherContain=
er</span></code> can <em>also</em> be checked with the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">!=3D</span></code> operator, b=
ecause they=E2=80=99re exactly the same type as the items in <code class=3D=
"docutils literal notranslate"><span class=3D"pre">someContainer</span></co=
de>.</p>
<p>These requirements enable the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">allItemsMatch(_:_:)</span></code> function to compar=
e the two containers, even if they=E2=80=99re of a different container type=
.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">all=
ItemsMatch(_:_:)</span></code> function starts by checking that both contai=
ners contain the same number of items. If they contain a different number o=
f items, there=E2=80=99s no way that they can match, and the function retur=
ns <code class=3D"docutils literal notranslate"><span class=3D"pre">false</=
span></code>.</p>
<p>After making this check, the function iterates over all of the items in =
<code class=3D"docutils literal notranslate"><span class=3D"pre">someContai=
ner</span></code> with a <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">for</span></code>-<code class=3D"docutils literal notranslat=
e"><span class=3D"pre">in</span></code> loop and the half-open range operat=
or (<code class=3D"docutils literal notranslate"><span class=3D"pre">..&lt;=
</span></code>). For each item, the function checks whether the item from <=
code class=3D"docutils literal notranslate"><span class=3D"pre">someContain=
er</span></code> isn=E2=80=99t equal to the corresponding item in <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">anotherContainer</s=
pan></code>. If the two items aren=E2=80=99t equal, then the two containers=
 don=E2=80=99t match, and the function returns <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">false</span></code>.</p>
<p>If the loop finishes without finding a mismatch, the two containers matc=
h, and the function returns <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">true</span></code>.</p>
<p>Here=E2=80=99s how the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">allItemsMatch(_:_:)</span></code> function looks in action:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">stackOfStrings</span> =3D <span class=3D"nv">St=
ack</span>&lt;<span class=3D"nc">String</span>&gt;()
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"uno"</span>)
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"dos"</span>)
</li><li><span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">push</=
span>(<span class=3D"s">"tres"</span>)
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">arrayOfStrings</sp=
an> =3D [<span class=3D"s">"uno"</span>, <span class=3D"s">"dos"</span>, <s=
pan class=3D"s">"tres"</span>]
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"nv">allItemsMatch</span=
>(<span class=3D"nv">stackOfStrings</span>, <span class=3D"nv">arrayOfStrin=
gs</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"All items m=
atch."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Not all ite=
ms match."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "All items match."</span>
</li></ol></div></div></div>
<p>The example above creates a <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Stack</span></code> instance to store <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">String</span></code> value=
s, and pushes three strings onto the stack. The example also creates an <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Array</span><=
/code> instance initialized with an array literal containing the same three=
 strings as the stack. Even though the stack and the array are of a differe=
nt type, they both conform to the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Container</span></code> protocol, and both contain =
the same type of values. You can therefore call the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">allItemsMatch(_:_:)</span></code>=
 function with these two containers as its arguments. In the example above,=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">allIt=
emsMatch(_:_:)</span></code> function correctly reports that all of the ite=
ms in the two containers match.</p>
</div>
<div class=3D"section" id=3D"ID553">
<h2>Extensions with a Generic Where Clause<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID553" title=
=3D"Permalink to this headline">=C2=B6</a></h2>
<p>You can also use a generic <code class=3D"docutils literal notranslate">=
<span class=3D"pre">where</span></code> clause as part of an extension. The=
 example below extends the generic <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Stack</span></code> structure from the previous ex=
amples to add an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">isTop(_:)</span></code> method.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Stack</span> <span class=3D"k">where</spa=
n> <span class=3D"nc">Element</span>: <span class=3D"nc">Equatable</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">isTop</span>(=
<span class=3D"k">_</span> <span class=3D"nv">item</span>: <span class=3D"n=
c">Element</span>) -&gt; <span class=3D"nc">Bool</span> {
</li><li>        <span class=3D"k">guard</span> <span class=3D"k">let</span=
> <span class=3D"nv">topItem</span> =3D <span class=3D"nv">items</span>.<sp=
an class=3D"nv">last</span> <span class=3D"k">else</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"k">fals=
e</span>
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">topItem=
</span> =3D=3D <span class=3D"nv">item</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This new <code class=3D"docutils literal notranslate"><span class=3D"pre=
">isTop(_:)</span></code> method first checks that the stack isn=E2=80=99t =
empty, and then compares the given item against the stack=E2=80=99s topmost=
 item. If you tried to do this without a generic <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">where</span></code> clause, you woul=
d have a problem: The implementation of <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">isTop(_:)</span></code> uses the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">=3D=3D</span></code> =
operator, but the definition of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Stack</span></code> doesn=E2=80=99t require its items=
 to be equatable, so using the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">=3D=3D</span></code> operator results in a compile-tim=
e error. Using a generic <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">where</span></code> clause lets you add a new requirement to=
 the extension, so that the extension adds the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">isTop(_:)</span></code> method only wh=
en the items in the stack are equatable.</p>
<p>Here=E2=80=99s how the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">isTop(_:)</span></code> method looks in action:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">stackOfStrings</span>.<span class=3D"nv">isTop</=
span>(<span class=3D"s">"tres"</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Top element=
 is tres."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Top element=
 is something else."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Top element is tres."</span>
</li></ol></div></div></div>
<p>If you try to call the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">isTop(_:)</span></code> method on a stack whose elements ar=
en=E2=80=99t equatable, you=E2=80=99ll get a compile-time error.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">NotEquatable</span> { }
</li><li><span class=3D"k">var</span> <span class=3D"nv">notEquatableStack<=
/span> =3D <span class=3D"nv">Stack</span>&lt;<span class=3D"nc">NotEquatab=
le</span>&gt;()
</li><li><span class=3D"k">let</span> <span class=3D"nv">notEquatableValue<=
/span> =3D <span class=3D"nv">NotEquatable</span>()
</li><li><span class=3D"nv">notEquatableStack</span>.<span class=3D"nv">pus=
h</span>(<span class=3D"nv">notEquatableValue</span>)
</li><li><span class=3D"nv">notEquatableStack</span>.<span class=3D"nv">isT=
op</span>(<span class=3D"nv">notEquatableValue</span>)  <span class=3D"c">/=
/ Error</span>
</li></ol></div></div></div>
<p>You can use a generic <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">where</span></code> clause with extensions to a protocol. Th=
e example below extends the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">Container</span></code> protocol from the previous exampl=
es to add a <code class=3D"docutils literal notranslate"><span class=3D"pre=
">startsWith(_:)</span></code> method.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Container</span> <span class=3D"k">where<=
/span> <span class=3D"nc">Item</span>: <span class=3D"nc">Equatable</span> =
{
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">startsWith</s=
pan>(<span class=3D"k">_</span> <span class=3D"nv">item</span>: <span class=
=3D"nc">Item</span>) -&gt; <span class=3D"nc">Bool</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">count</=
span> &gt;=3D <span class=3D"m">1</span> &amp;&amp; <span class=3D"k">self<=
/span>[<span class=3D"m">0</span>] =3D=3D <span class=3D"nv">item</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
rtsWith(_:)</span></code> method first makes sure that the container has at=
 least one item, and then it checks whether the first item in the container=
 matches the given item. This new <code class=3D"docutils literal notransla=
te"><span class=3D"pre">startsWith(_:)</span></code> method can be used wit=
h any type that conforms to the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Container</span></code> protocol, including the stack=
s and arrays used above, as long as the container=E2=80=99s items are equat=
able.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> [<span class=3D"m">9</span>, <span class=3D"m">9</span>, <span clas=
s=3D"m">9</span>].<span class=3D"nv">startsWith</span>(<span class=3D"m">42=
</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Starts with=
 42."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Starts with=
 something else."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Starts with something else."</span>
</li></ol></div></div></div>
<p>The generic <code class=3D"docutils literal notranslate"><span class=3D"=
pre">where</span></code> clause in the example above requires <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Item</span></code> to=
 conform to a protocol, but you can also write a generic <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">where</span></code> clauses =
that require <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Item</span></code> to be a specific type. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Container</span> <span class=3D"k">where<=
/span> <span class=3D"nc">Item</span> =3D=3D <span class=3D"nc">Double</spa=
n> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">average</span=
>() -&gt; <span class=3D"nc">Double</span> {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">sum</span>=
 =3D <span class=3D"m">0.0</span>
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">index</spa=
n> <span class=3D"k">in</span> <span class=3D"m">0</span>..&lt;<span class=
=3D"nv">count</span> {
</li><li>            <span class=3D"nv">sum</span> +=3D <span class=3D"k">s=
elf</span>[<span class=3D"nv">index</span>]
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">sum</sp=
an> / <span class=3D"nv">Double</span>(<span class=3D"nv">count</span>)
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>([<span class=3D"m">1260.0</span>, =
<span class=3D"m">1200.0</span>, <span class=3D"m">98.6</span>, <span class=
=3D"m">37.0</span>].<span class=3D"nv">average</span>())
</li><li><span class=3D"c">// Prints "648.9"</span>
</li></ol></div></div></div>
<p>This example adds an <code class=3D"docutils literal notranslate"><span =
class=3D"pre">average()</span></code> method to containers whose <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Item</span></code> t=
ype is <code class=3D"docutils literal notranslate"><span class=3D"pre">Dou=
ble</span></code>. It iterates over the items in the container to add them =
up, and divides by the container=E2=80=99s count to compute the average. It=
 explicitly converts the count from <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Int</span></code> to <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Double</span></code> to be able to do =
floating-point division.</p>
<p>You can include multiple requirements in a generic <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">where</span></code> clause that=
 is part of an extension, just like you can for a generic <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">where</span></code> clause =
that you write elsewhere. Separate each requirement in the list with a comm=
a.</p>
</div>
<div class=3D"section" id=3D"ID557">
<h2>Associated Types with a Generic Where Clause<a class=3D"headerlink" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID557" t=
itle=3D"Permalink to this headline">=C2=B6</a></h2>
<p>You can include a generic <code class=3D"docutils literal notranslate"><=
span class=3D"pre">where</span></code> clause on an associated type. For ex=
ample, suppose you want to make a version of <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Container</span></code> that includes an=
 iterator, like what the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Sequence</span></code> protocol uses in the standard library=
. Here=E2=80=99s how you write that:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Container</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Ite=
m</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">append</span>(<span class=3D"k">_</span> <span class=
=3D"nv">item</span>: <span class=3D"nc">Item</span>)
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span>: =
<span class=3D"nc">Int</span> { <span class=3D"k">get</span> }
</li><li>    <span class=3D"k">subscript</span>(<span class=3D"nv">i</span>=
: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Item</span> { <sp=
an class=3D"k">get</span> }
</li><li>
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Ite=
rator</span>: <span class=3D"nc">IteratorProtocol</span> <span class=3D"k">=
where</span> <span class=3D"nc">Iterator</span>.<span class=3D"nc">Element<=
/span> =3D=3D <span class=3D"nc">Item</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">makeIterator<=
/span>() -&gt; <span class=3D"nc">Iterator</span>
</li><li>}
</li></ol></div></div></div>
<p>The generic <code class=3D"docutils literal notranslate"><span class=3D"=
pre">where</span></code> clause on <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Iterator</span></code> requires that the iterator =
must traverse over elements of the same item type as the container=E2=80=99=
s items, regardless of the iterator=E2=80=99s type. The <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">makeIterator()</span></code> =
function provides access to a container=E2=80=99s iterator.</p>
<p>For a protocol that inherits from another protocol, you add a constraint=
 to an inherited associated type by including the generic <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">where</span></code> clause =
in the protocol declaration. For example, the following code declares a <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">ComparableCon=
tainer</span></code> protocol that requires <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Item</span></code> to conform to <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">Comparable</span><=
/code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">ComparableContainer</span>: <span class=3D=
"nc">Container</span> <span class=3D"k">where</span> <span class=3D"nc">Ite=
m</span>: <span class=3D"nc">Comparable</span> { }
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID558">
<h2>Generic Subscripts<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Generics.html#ID558" title=3D"Permalink to this =
headline">=C2=B6</a></h2>
<p>Subscripts can be generic, and they can include generic <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">where</span></code> clause=
s. You write the placeholder type name inside angle brackets after <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">subscript</span></=
code>, and you write a generic <code class=3D"docutils literal notranslate"=
><span class=3D"pre">where</span></code> clause right before the opening cu=
rly brace of the subscript=E2=80=99s body. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Container</span> {
</li><li>    <span class=3D"k">subscript</span>&lt;<span class=3D"nv">Indic=
es</span>: <span class=3D"nc">Sequence</span>&gt;(<span class=3D"nv">indice=
s</span>: <span class=3D"nc">Indices</span>) -&gt; [<span class=3D"nc">Item=
</span>]
</li><li>        <span class=3D"k">where</span> <span class=3D"nc">Indices<=
/span>.<span class=3D"nc">Iterator</span>.<span class=3D"nc">Element</span>=
 =3D=3D <span class=3D"nc">Int</span> {
</li><li>            <span class=3D"k">var</span> <span class=3D"nv">result=
</span> =3D [<span class=3D"nv">Item</span>]()
</li><li>            <span class=3D"k">for</span> <span class=3D"nv">index<=
/span> <span class=3D"k">in</span> <span class=3D"nv">indices</span> {
</li><li>                <span class=3D"nv">result</span>.<span class=3D"nv=
">append</span>(<span class=3D"k">self</span>[<span class=3D"nv">index</spa=
n>])
</li><li>            }
</li><li>            <span class=3D"k">return</span> <span class=3D"nv">res=
ult</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This extension to the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Container</span></code> protocol adds a subscript that takes=
 a sequence of indices and returns an array containing the items at each gi=
ven index. This generic subscript is constrained as follows:</p>
<ul class=3D"simple">
<li>The generic parameter <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Indices</span></code> in angle brackets has to be a type th=
at conforms to the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Sequence</span></code> protocol from the standard library.</li>
<li>The subscript takes a single parameter, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">indices</span></code>, which is an instan=
ce of that <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Indices</span></code> type.</li>
<li>The generic <code class=3D"docutils literal notranslate"><span class=3D=
"pre">where</span></code> clause requires that the iterator for the sequenc=
e must traverse over elements of type <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">Int</span></code>. This ensures that the indice=
s in the sequence are the same type as the indices used for a container.</l=
i>
</ul>
<p>Taken together, these constraints mean that the value passed for the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">indices</span=
></code> parameter is a sequence of integers.</p>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Protocols.html">Protocols</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/OpaqueTypes.html">Opaque Types</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/stackPushPop_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////houNnLC3maqwlaOoj5qeuuDst9zout/rud7quN3p
ttnktdjjtNbhsNDar87YrMnSq8fQqMLLpsDIpb7Go7vDori/nrO6mKitlaWqlqWqlaSpkZ6ikZ2h
jJWYgYSFt9znud7pt9vmttrltdnks9XfsNHbstPdrs3WrcvUrMrTqsbOpr/Gpb7FpL3EpLzDornA
oLa8n7W7kqCkk6GljpmcjpibiI+Rh46Qmq2ylqaqkJyfiZGTiJCShIiJg4eIkZ6hipOVhYqLhImK
g4iJh42Og4eHgoWFgYODfn9/8fLy7/Dw7u/v6erq5ufn09TU0dLSzs/PzM3Ny8zMysvLxMXFwcLC
vL29u7y8ubq6uLm5t7i4tre3tLW1s7S0srOzsLGxr7Cwq6ysp6iopqenpaampKWlo6SkoqOjoaKi
oKGhn6Cgnp+fnZ6enJ2dm5ycmpubmZqamJmZlpeXlZaWlJWVk5SUkJGRj5CQjY6Oi4yMiouLiYqK
iImJh4iIhoeHhYaGhIWFg4SEgoODgYKCgIGBf4CAf4B/g4OB///+hoWChYSBioiEhoJ7/vfs+suI
/NusiIaD+KxD+K9J+LBL+bRV+btk+r5s+sJ3+8eA+smE+8uK+82O+9GX/N2z/d+2/OC5/ebG/ezV
l5GJ//z4joqF6sys3MKm1b2jy7aftqeWsqSVsaSVpJqP/dm0+9ez+NWy9NOw8tGw7c2t7c6t7s6u
6cus58mr4sapzbegyrWfybSfxbGdwa6bvKuZuKiXraCTnpWM//nzhIOC//38/v7+/Pz8+/v7+Pj4
9/f39fX18vLy8fHx7u7u7e3t7Ozs6+vr6enp6Ojo5eXl4+Pj4ODg39/f3d3d2tra2dnZ19fX1NTU
0tLS0dHR0NDQzs7OysrKycnJx8fHxsbGw8PDwMDAv7+/vr6+u7u7tra2ra2tqqqqkpKSe3t7d3d3
bm5uY2NjVVVVRkZGNzc3Li4uJSUlHx8fFxcXERERDg4OCQkJBgYGBAQEAQEB////Kc28ugAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAACkaSURBVHja7N17fFTlve/x30pm
cpkkJARMQe5qAglBEYUEEtpXfVl3W0VaaoXtrhVruYioKMZgYQMqcikFtVuLR2wBqdiqPfUC52V3
3afnVRlzFQwJgUAChEAiIcnkNpOZyUzm/BGBBEHXSicy88zn3T86pM9Deb5rzXfWZTKjaQIA0COM
CACAwgQAChMAKEwAoDABgMIEAAoTAEBhAgCFCQAUJgBQmAAQPEwB9y/61CL2m0N4i1ijosK1rtzl
GaG5/AKLKcznzX0qK7SflwfCRdozQjiA0nMPOqYE1L9LC7QP37AODJfH94RwX8abux/YJ4Xi8ovj
uv/b0xzSjVkYLyItU0I3gLzEc48CrAwC7JTcWhAfHtqHFuvNIr4uEYkpCsXnSayIr7NLxBQXyjuB
NTbUz3zD+Ifp2U8OD04wh/aOYt0oktOYausSsYTg8qM18TalN3WKRFhDeC+whPtCvDDDRTpsNpvN
ZlseWP+wwLqGyYdzmjSRp6ZK5n6LmKyhd1ZqEnlyt2QVmUUL4duRedFiD/FjzHARdyZHmF8j6/HH
H18a8qcivqkisiI0Xz5yHY4VXzzsCt2dIFbzOkP8wGGViFesAXiWEVhHmHtErKG9o7ibxCcisk7E
F4KnZXv2iIh8YhFxh+5Nn6IIac+qCO3nwVrxRR8Kk4NPBtr9X5MgoA6yu/+rIEKkM0Qr47OIME08
7SG7C1hjxD0l1J8HYaJFi4hpc/j7nJLj6xTGa+JzhOjiV4aH9qXsmHCfPdSfANYwEV+n2yey8Q4K
E19jf7wWwm9b7nJ3iZjiQ/XaTH6U5GSG+jNA83i8zekTmn0iGwLsXxZwb1wfLCH9xnWRvDizSFdb
KJ+V7beE7k5w50Zfa5fIQJGlK7wh/vtOciBSpCGgQuAaZsAdYcSHiXS2TQ3VM7GuLJEbD2uyLkQL
c61o8d2PNklzqD8ZOiMD7c0iFGagHV/Gh4nPflOInoklSndJ+HhHbkgrChfvZOm+YhhYbxbhGmaA
WRcmvtYQ7UuZ1iUSISL5YSKeEM2gw2632+12Ecmxh+x7UZ+JiYm1ikiEiCewLktwhBlgB5gDRSS2
XEREWkLvtDx3o0Tv6wyPEfG5QnQPmNz9XxUiKyaF7NNghUhYfKHvOZNIR2D9yzjCDCxmTUQL7xaC
y3/KJ1pMQlyYiGMqO0PoysgRMccnbBRxB9hHPVKYgSXEj/intnhFRMRnn8S+EMpyv/jd0JzWAPuH
BdzbiiSv+0ZpiPqkx/YIzRgKw8N9ns5pod4Yof00EJG8NWGyujPg3pGqcTsSADglBwAKEwAoTACg
MAGAwgQAChMAQGECAIUJABQmAFCYAEBhAgCFCQAUJgCAwgQAChMAKEwAoDABgMIEAAoTAEBhAgCF
CQAUJgBQmABAYQIAhQkAFCYAgMIEAAoTAChMAKAwAYDCBAAKEwAoTAAAhQkAFCYAUJgAQGECAIUJ
ABQmAIDCBAAKEwAoTACgMAGAwgQAChMAKEwAAIUJABQmAFCYAEBhAgCFCQAUJgCAwgQAChMAKEwA
oDABILCZiCCQbBjqOf9YC/85gQABRdPIIJBs7bjwOO5+8gA4JYcuPiIAKEwAoDABgMIEAFCYAEBh
AgCFCQAUJgBQmABAYQIAhQkAoDABgMIEgP7Fx7sF2PaIZtsAAYuPdwtcGySXEELW6460b5MChQlA
R1+2dpnH05gBh2uYQED2pXQe/CdBUJgAdPSl0JickuNrbB584fFozshC04ahrV3djzgrDzTciQ0s
cc2i+b74TyVxhKahLee+naTz4D9pTE7J8VV85/+D0Dwfb7mw6Tkr5wgTwFecj7f0fKnkGJMjTACX
60tza+9Ti86De0mFwgRwCUPNXRf9pLOUs3IKE8CXvd7y5UvXXMcMIFzDBALmfHxoy6Vu9XEdkyNM
AF/qy9ZLvzWCY0wKE0BvQ1u6LvO/0JgUJoCeXm+5/FtvacwAwTVMIDDOx1u+6lcVuI7JESaA833Z
+tW/2sUxJoUJoNvlr1/SmBQmgJ5eb/n6jw6gMQMA1zCBK38+3qLno1a4jklhAhCP9/zDAa0S4bnw
v0Q5egxznSAqChM92CMvPA4njhBx0ZfdvdqjMCPmywa+C4/CxKXPzW7OJgR8ZZ2CwgTPDSAIcJcc
AChMAOCUXGV7T1x4fJoT9NDkiLrwmG91pTBxeYc6Ljy+ijhC0gbXEkKgMAHowYlFAOMaJgBQmADA
KTmgtH8WX3ic9DPyoDABXNbhHs9KD3FwSg4AFCYAUJgAAAoTAChMAKAwAYDCBAAKEwAoTACgMAEA
F+FXIwPsBSycFzOAwoQuDxABwCk5AFCYAEBhAgB64RomEGDCezwr+dZIChOX93vnhccxc8kjJD2w
Iev8YytxUJi4rC5vj8fEEaL43siAxTVMAKAwAYDCBIArotc1zKJVIiLLs0I6kTyziIg3IyD+MRty
Qz6Cb1y+6Uqv/vkez8q4uaGaQiDobsT/c7nCfMYkEvJvZAh7RuSbvOHyQkzPP3X2eOzaKtrW838y
z1U2gkDcAbxX8F8Q4ySFwPCM6SuPMHEFTCq73FdPd/Zsz4hoogKu+AsJEVxh307X86IVEfszogIo
TBpTR2PSlwCFCRGRvK9tTPoSoDAhIiK5X9eY9CVAYeJcY371WTl9CVCYuOCrGpO+BChM9HT5s3L6
EqAw0fus/HKNSV8CgYM3rgdKY8o/D3bSlwBHmNB1Vj7e/KWfRdKXAIWJSxxjfjvu4saMaKYvAQoT
l/Kzi44xI2L56G2AwsSlfbtXY3L9EqAwcXk9r2PSl0Cg4S55QMndMPXcvXL6MmTNJwKOMKGvMc8d
Y9KXAIUJfY1JXwIUJvQ1Jn0JUJjQ15gx9CUQiLjpE4CNSQSh7feuC49j7iMPChPAZXl7fC2ejzg4
JQcAChMAKEwAAIUJBJK8L/2kkFACBzd9DCq9ak1cRPAvw2X7zzM3sTX7qOy5wbH9tRP8bZW09DiM
qV8le1b1z/+Tz920cuFutiaF2X/Ktz45PWPE2aBfh6Y5501/YPGNbNE+OPRqzvQRquwE33poEluU
wuwfn7zy7rDb7d6mcAXWEn3v0LDdJ0azUQ2fMr/y+M+U2Qkebg/b/ZO/sFH14xqmgafKzrPJ17V6
FVlNlG3Ctx/8d7aqQfl/rP9FjDI7gdOU/h3HHLYqhdkPrK+deDy8S6EFuZpym3/KdjW4Ewx/TKmd
wN2U23KS7Uph+t+w2ifa1FqRr+mXE0vZsEaMOD2lXbGdwPbL1+9kw1KY/lbwh2Utyi3KFPsaW9aA
wt+rtxP4zHGj2LIUpt8PMIs61FuUd/yRcjatgZ2gUMGdwDO+8iCblsL0s9/e41BwVe3f+TWbVr/I
ZSruBPYsdgIK08+KSq9WcVldyUPYtrrdfq9HxWV5U9kJKEw/i5V6Jdc1sCSfjavXJlV3gvg8Nq4+
vHFd78mYJHSouK6zEsHG1b8TxDuVPMT82MrG5QjTr5Yq+lGuCewC+uVIl6Ir09i4FCYAUJgAQGEC
AIUJABQmAFCYAAAKEwAoTACgMAGAwgQAChMAKEwAoDABABQmAPgDn4cJI/Li43KD/kXW17mmeQrb
EhQm+tWMwX8rUGIhj2YvWJLK9gSFif47unwpTduS2FEd9J+kbBrWWGI+uWDezWxTUJjoH0W7ml6x
nDmjwEo81dI+ojn73bJ0tiooTPSHgrcH151RZzk1NS1XmUonsF1BYcL/rNtGbmpTakWVp8RVyL0f
UJjwv82OV1XbV5wNcaPZsDCE92FCj7yxTZHKLeroy68dYNOCwoS/Je2v8qq3KotsYtOCwoS/rety
KLiq6lUjrWxbGMA1TOgx9G8eFZc1ofgzti04woR/FRQPV3JdLs7JQWHC38ziUnJdXsll44LChL93
E5+S66pj04LCBAAKEwAoTACgMAGAwgQAChMAQGECAIUJABQmAFCYAEBhAgCFCQAUJgCAwgQAChO4
InxEQGFChy5FowqT5WxcvTYo+pUumqxi41KYfvWcNCu5LlsWhambU1rU3Ammudm4FKZftWWFK7ku
V+M0Nq7+nUDN54uzIYuNS2H61dSaak3BZUXteoJtq1tm7UkVd4LoXTlsWwrTz5b+T4yCq7Jk8bU2
Bjz2Pyqeu0azE1CYfnc29ZB6V/xdeRU3s2n1q0+rUXEnODyZTUth+llWZWu8amlFnm5ZzJY1shPM
dcardlJuZiegMPvD+/usA9W68RPV3P4fGWxYIybssyaqtRNEt7aXZ7Jh9TIRgW5/DfONDo9QZjla
XLF9djqb1Zj/rdxO0D5nNZuVI8z+8JcfHdhhHxCtwjlZmCXBsenUfvrSsHd+XKrUTnCSnYAjzP4y
Pm9RzL3ybVPQ/4Lc1LUyve7Fs7z7rg/S8hZZ7pXpZiV2glp2AgqzP/cxkRkR9z8Z9IcXpX948Lab
/4vt2dedoOSZX6iwE9htk19ie1KY/eoD+YsCq9gp77Ip++4GRXYCGMU1TACgMAGAwgQAChMAKEwA
oDABgMIEAFCYAEBhAgCFCQAUJgBQmABAYQIAhQkAoDDxL/NIiZLr0mQjGxcUJvzLlTVUyXWNEhcb
FxQm/CurMU3JdZ3NbmPjgsKEn+WYohVclSm5lm+YBYUJf5ufnazgqlIsp9m0oDDhb7srZ1mUW5R5
8M4cNi0oTPjdg45JkYotKdx9Sz3fMQtD+NZI6DLlUJS9XKlbyqbUpPuGsWHBESb6QWrRjBtjFVpP
VEZSIn0JjjDRP95ba49pqHJ6lFjMta2LvAfeYKOCwkQ/GZ9/IqPAV570WdCv5EaLJXt+zUo2KShM
9JtMyS8ZOMEyM9jX4XU2Nn+ynO0JChP9XJkAhamXNfbpiOCvWI97VXvf305SokYEq9v6FEFewsoI
LeiX717TPOVf+gsKE2Jygz4Fn/uZ5qkk0H+Fmb/p/QPSocLLxLLrf7q0TwdL+Zu23KtGBLnXnzpl
OIIZg/87X4njhEezFy4Z1+fZh1/8+14lYng88/6GD0ignwrzyPb2/3ci8WRn0IdkHlnRlPhexVjj
Myu2t99eNFaJCJraD9x4JMXY0eXLqdp/NzlPBf198vDhjS2nqxfMu7lPs28f8VhXyeFBp7xBf3Y5
POq1B68bsHgqCfRDYVp/+866ge1iU+BVpbPKtD/uw7g6w59YVru9oKTNVKVEBFIQ++H+OQ8bOC8v
erNxS8xxFQ4rvNVSPKI5+92y9D5MLvtTdMmZU9Ie/DF4TojscKS/VTSZBPxfmC+17hlzSpTRNmbP
x58PMTZnzgOtnyv0aWDtY8rSX9Y/vHDMoLp6dVZfU9Nytal0guF5pX/559kqdWI4LoOy3yrIIAG9
w/X+pk9Vc+k+hfpS5NS+svt/ZGhGZUvZvhqlImiotx3TfYax7dXN5SqtXipP/mNXodFJhW/+38+r
lIqhfPPAbVYS8HNhFr3edNarVErirW+63sjzpfB1W7hqEZS17yjSOXbziRWqfdbuiQNxo43OeSX2
wAnFYmhbUb2JBPxcmC8WtvkUS0l8FUUvGhj+QlFFrXIRNBSO1Dcyb2yTah9WJGL/r9fuNDbjzute
sisXQ6RtXB4J+LUw8677qFK5lMTRcJ3+HSUvuVG9HUWqPnpF3/uEkvZXedVbfqwkGpuQ6ItRLwWv
fX8SCfi1MAcVxIuCjhfqf74kFjpVjGBAvr4I1nU5FFx99aoRRi7fiXXk6moFY6gqX0sCfi3M1Wq8
WftiTlmte2y8HFMxgoTpT+saN7Tco+LyJxSvN3REWjRBxRQ8w4eSgF8LM8bdqWJMbrv+04vlDreK
EdR8pCuCwuLhKq5eXGLkfodEK/qtvF2fFpCAPwszWtFvb/ZF6R4a5VQzAreub4M0Kfo88YqhX4he
Jl4lY3DJsyTgz8JU9XPZDdz518yKZqDp2wF8Si6+ztjwMKMTlHsehHwCfEUFAFCYAEBhAgCFCQAU
JgBQmABAYQIAKEwAoDABgMIEAAoTAChMAKAwAYDCBABQmABAYQIAhQkAFCYAUJgAQGECAChMAKAw
AYDCBAAKEwAoTACgMAGAwgQAUJgAQGECAIUJABQmAFCYAEBhAgCFCQCgMAGAwgQAChMAKEwAoDAB
gMIEAFCYANBvhekjKADQV5juaDVXb/XqHtppVTMCT6euUVKi5Oo12Whk+AbRlIyhRFaRgD8L0/md
cBVTCl/ToXusc41JyQgSHHqGubKGKvk8GSUuI8OdMlLNw6ZpbhLwZ2Guso5RMaXIve26x7bvjVQx
gtHaaj3DshrTlHye1Ge1GRnelh2rZAzfbcwiAX8W5uLpTSqmFDXdqf/gYrqShXlkeoOucU+YVLwq
Y5pQl2lkfGadeZiCMVxjyiEBvYeiukbtPhVpVi+liMia3boH7zkZGaFeBOZbT9+ka+CC7GQFnycp
4aeNTXjMEq9gDDHZ80nAr4UpD6UNUC8lZ9piA6MXL3CqF8ENYQ/pG7i7cpZFvVfM+J05xmZ8vnOw
ekcOMUlH95CAfwtz/JCJ41RLadz3how3MDz9yPeUe20dEL9D77XJBx2TVLsmEe76t/osY1Oy6m9x
q3b/M/LGmxaRgN6xem/9Lngn+80jap2OzW766TYjExa+nf18q1IRxD3WfEzv2CmHouxN1Sqt3pSa
dJ/h63Fppz+uP+RRKYZRibfMSiMBvYP1/qZP5uyWe7wKvQVL845onmPogr9kzrFN9l6tUgRLW+7W
H0Hq7BmjVLpDGpWRNLAP9y9ODErKiFIohthRd9ydRgL6X2b1DpxcsPU2d5nDpURGkZb0iKvvmmxw
1uQC2232DlUiSE6IPDbPSATJB+3mxkqnEgcXYWOO5noP7OrDzCy5a+qtq5Kr1DjIjrpu0MRZKSRg
YILukRlyZGuE2E7XBX1IQ4cNlPR5Kb83PDFDjmyNUSaCCfOSXzM0aXz+o68U+MqTPgv65d9osfys
6qGVfZv8zlMvP703ybE/6FOYWJ+mZRyeOZ4EjDSsgbEp1rlrk2Mjg/3zOrpc7Q3Lm1P6NDfFOvc5
NSJoXG4z/EahTMn/eezGqJnB/jzxOJtWLtzzh75Ov0luf/WZxB8G/W9+uTuebK9f/ScSMHRIauxg
XBW7+jpRnQje6MukTFVWv/Vfmr1nhBop/IYEDJ/DGxteMmBZ8L8Lq3P9Ix/0ffaM3yoQgce96oY+
TcyLj8sN+o8E9HWuaZ7yL/0NhQkrzEF/C7RrQ1vLVBLov8LM37TlXiVeVhZJQ8fpPh0s5Q2PvneR
Ehksyz221HAEMwb/rUCJ1T+avWBJap9nH3rx73tVSGG+ZMxdMpEE+qkwK7a33140zn2qK8hDChse
cfj2xIkVY41Prdj+ma1QkQiaEt8/YuxCbt5LadqWxI7qoP90VNOwxhLzyQXzbu7T7OKtj5cPOzzo
lDfYY9BG2coe3HPPw1NJoD8Ks27b+sQ2U2Xwv6p0nRTT/rgP4+oMf2JZ7faCEnUiiP0wds7DBq7J
Fu1qesVy5owCxxWeamkf0Zz9bll6HyaX/WnkAVOxtAd/DL4T0rLDkf5W4RQS8H9hfn5/65hTooy2
MXs+nmPwBuHsBz4a2aZOBO1jtqS/rH94wduD686os/qamparTKUTDM8rfSe/tlKdGI6LK/vtggwS
0H1ypnPcj+4v3adQX4qc2lfWYmyzz2xtNdUoFUFDqU33r0ZatyVsLldp9VK5/x+7Co1OKnzzHycr
lYqh+c2B26wk4OfCLLy+6axXqZTEG2573cjzpfB622nVIjjbtKNI59jN1Sva1Fq9OBviRhud80rs
gROKxXBkRfUmEvBzYb5YVKHcF6HVHi56wcDw54sralWLwNdWqPMbB/LGNqn3AcpHX37tgLEZd173
kl25GCJt4/JIwK+FmZfc4FAuJXE0JOvfUfJSGtXbUaTyoy35ugYm7a/yqrd8i2wyNiFRYtRLwevY
fxUJ+LUwBxUcFwUdL0zUv6MUOlWMYECBvgjWdSn4iinVq0Ya+jJQ64hV1QrGUFm+jgT8WpirpUPF
tnDKat1j4+WYihEkTH9a17ih5R4Vlz+heL2R4bHFE1RMwTN8KAn4tTBj3J0qxuS26z+9WO5wqxhB
zUe6IigoHq7i6sVl7Jw8WlxKxtD1aQEJ+LMwo9VMSXz6Pwg1yqlmBG5d3wZpVvR54pVcI8OXiVfJ
GFzyLAn4szDDRE0G7vxrZkUz0PTtAD4lF2/wk03DpC7Enwchn4CqVQgAfkdhAgCFCQAUJgBQmABA
YQIAhQkAFCYAgMIEAAoTAChMAKAwAYDCBAAKEwAoTAAAhQkAFCYAUJgAQGECAIUJABQmAIDCBAAK
EwAoTACgMAGAwgQAChMAKEwAAIUJABQmAFCYAEBhAgCFCQAUJgBQmAAAChMAKEwAoDABgMIEAAoT
AChMAIDxwvQRFADoK0x3tJqrt3p1D+20qhmBp1PXKClRcvWabDQyfIMMUzKGEllFAv4sTOd3wlVM
KXxNh+6xzjUmJSNIcOgZ5soaquTzZJS4jAx3ipI7gYRNc5OAPwtzlXWMiilF7m3XPbZ9b4SKEYzW
VusZltWYpuTz5Gx2m5HhbdmxSsbw3cYsEvBnYTZOr1AxpajpTv0HF9OjVIzgiDTqGpdjUvGqjCm5
NtPI+Mw6s4pnpNeYckhA76GorlE3nRpuVi+liMia3boH7zkZqeAhpvnWaybpGjg/O1nB50mK5bSx
CY9Z4hWMITZ7AQn4tTBlcZqCMcWlLTYwevECp3oR3BD2kL6BuytnWdR7uRi8M8fYjDM7B6h35GCZ
dXQ3Cfi3MNN23DBWtZTGTRwy3sDw9CPfG6daBAPid+i9NvmgY1KkYqsPd99Sn2VsyrSz33erdv8z
cpJjEQnoHav3ntex8dmb25RKKWW27a5tRiYsfDv7+Va1DrGXtBzTO3bKoSh7uUul1ZtSk+4zfD0u
tfbj+qbTKsUwKvGWn6SSgN7Ben/TJ3N2y1Kvpk5Imvee5tmGLvhL5pzmySpFYLpp6cK79UeQWjTj
RpXukEZlJCX24f7F8UFJo1W6/Rc7asbsVBLQ/6zRO3BywdbbXM1H1TjGiEweGHFs3mSDsyYXNN3m
LnOoEkFC5PGqDAMz3ltrj2mocnqUWP61rYu8B97ow8QsOfH6rb8bUKXGa2bUtYMn/jiZBAxM0D0y
Q45uLb3rvdq6oA9p6NWJkj4v5TXDEzPkyNYIsZ0O/giGDJv58U5b8lZDk8bnn8go8JUnfRb0y7/R
YsmeX7Oyb5NH7xshe5Mc+4M+hYn1aVrGwhPjScBIwxoYm2yduzYzNjLYz0p9rvaG5baUPs1Nsc5d
m6JEBOWbKrKMTsuU/JKBEywzg/154nU2Nn+yvM/TJ8kdsSMS7wj6z63p7MhZ8P0hJGDskNTYwbgq
3ujrRHUi+GNfJmUKRGS3IuvYKH8lAYPn8MaGlwxYFvzvwupc/8gHfZ8947cKROBxr7qhTxPz4uNy
g/7Awte5pnnKv/Q3FCasMAf9/b+uDW0tU0mg/wozf9OWe5V4WVkkDR2n+3SwlDc8+t5FSmSwLPfY
UsMRzBj8twIlVv9o9oIlqX2efejFv+9VIYX5kjF3yUQS6KfCrNjefnvROPepriAPKWx4xOHbEydW
9OGd+BXbP7MVKhJBU+L7R4xdyM17KU3bkthRHfSfjmoa1lhiPrlg3s19ml289fHyYYcHnfIGewza
KFvZg3vueXgqCfRHYdZtW5/YZqoM/leVrpNi2h/3YVyd4U8sq91eUKJOBLEfxs552MA12aJdTa9Y
zpxR4LjCUy3tI5qz3y1L78Pksj+NPGAqlvbgj8F3Qlp2ONLfKpxCAv4vzM/vbx1zSpTRNmbPx3P+
ZGzO7Ac+GqnQbzu1j9mS/rL+4QVvD647o87qa2parjKVTjA8r/Sd/NpKdWI4Lq7stwsySED3yZnO
cT+6v3SfQn0pcmpfWYuxzT6ztdVUo1QEDaU23b8aad2WsLlcpdVL5f5/7Co0OqnwzX+crFQqhuY3
B26zkoCfC7Pw+qazXqVSEm+47XUjz5fC622nVYvgbNOOIp1jN1evUOuzBEScDXGjjc55JfbACcVi
OLKiehMJ+LkwXyyqUO6L0GoPF71gYPjzxRW1qkXgayscqW9k3tgm1T6sSOToy68dMDbjzutesisX
Q6RtXB4J+LUw85IbHMqlJI6GZP07Sl5Ko3o7ilR+tCVf18Ck/VVe9ZZvkU3GJiRKjHopeB37ryIB
vxbmoILjoqDjhYn6d5RCp4oRDCjQF8G6LgVfMaV61UhDXwZqHbGqWsEYKsvXkYBfC3O1dKjYFk5Z
rXtsvBxTMYKE6U/rGje03KPi8icUrzcyPLZ4goopeIYPJQG/FmaMu1PFmNx2/acXyx1uFSOo+UhX
BAXFw1VcvbiMnZNHi0vJGLo+LSABfxZmtJopiU//B6FGOdWMwK3r2yDNij5PvJJrZPgy8SoZg0ue
JQF/FmaYqMnAnX/NrGgGmr4dwKfk4g1+smmY1IX48yDkE1C1CgHA7yhMAKAwAYDCBAAKEwAoTACg
MAGAwgQAUJgAQGECAIUJABQmAFCYAEBhAgCFCQCgMAGAwgQAChMAKEwAoDABgMIEAFCYAEBhAgCF
CQAUJgBQmABAYQIAhQkAoDABgMIEAAoTAChMAKAwAYDCBAAKEwBAYQIAhQkAFCYAUJgAQGECAIUJ
ADBemD6CAgB9hemOVnP1Vq/uoZ1WNSPwdOoaJSVKrl6TjUaGb5BhSsZQIqtIwJ+F6fxOuIopha/p
0D3WucakZAQJDj3DXFlDlXyejBKXkeFOUXInkLBpbhLwZ2Guso5RMaXIve26x7bvjVAxgtHaaj3D
shrTlHyenM1uMzK8LTtWyRi+25hFAv4szMbpFSqmFDXdqf/gYnqUihEckUZd43JMKl6VMSXXZhoZ
n1lnVvGM9BpTDgnoPRTVNeqmU8PN6qUUEVmzW/fgPScjFTzENN96zSRdA+dnJyv4PEmxnDY24TFL
vIIxxGYvIAG/FqYsTlMwpri0xQZGL17gVC+CG8Ie0jdwd+Usi3ovF4N35hibcWbnAPWOHCyzju4m
Af8WZtqOG8aqltK4iUPGGxiefuR741SLYED8Dr3XJh90TIpUbPXh7lvqs4xNmXb2+27V7n9GTnIs
IgG9Y/Xe8zo2Pntzm1Ippcy23bXNyISFb2c/36rWIfaSlmN6x045FGUvd6m0elNq0n2Gr8el1n5c
33RapRhGJd7yk1QS0DtY72/6ZM5uWerV1AlJ897TPNvQBX/JnNM8WaUITDctXXi3/ghSi2bcqNId
0qiMpMQ+3L84PihptEq3/2JHzZidSgL6nzV6B04u2Hqbq/moGscYkckDI47Nm2xw1uSCptvcZQ5V
IkiIPF6VYWDGe2vtMQ1VTo8Sy7+2dZH3wBt9mJglJ16/9XcDqtR4zYy6dvDEHyeTgIEJukdmyNGt
pXe9V1sX9CENvTpR0uelvGZ4YoYc2RohttPBH8GQYTM/3mlL3mpo0vj8ExkFvvKkz4J++TdaLNnz
a1b2bfLofSNkb5Jjf9CnMLE+TctYeGI8CRhpWANjk61z12bGRgb7WanP1d6w3JbSp7kp1rlrU5SI
oHxTRZbRaZmSXzJwgmVmsD9PvM7G5k+W93n6JLkjdkTiHUH/uTWdHTkLvj+EBIwdkho7GFfFG32d
qE4Ef+zLpEyBiOxWZB0b5a8kYGwCH+8GABQmAFCYAHBFXOIaZuQdIZ1I92+Ma3cQQYhG0P2bf2Gh
/SwgBREReW7FxT/Ret7wnaEJAKCH9zklBwDjKEwAoDABgMIEgCui102ffG76AEAvGZcrTAAAp+QA
QGECAIUJABQmAFCYAEBhAgAoTACgMAGAwgQAChMAKEwAoDABgMIEAFCYwSDv5Mm8S/28aNnxLx7l
L5tFTKGmeNmxLx4VLPsxcVwZfLxbALrjA5mx+xI/t8Xcde77mFpMZRkEFVpsMYevZ/NzhAmdquLs
57+/rt5yHYGEluNx9nN9ab0/ajWBXBEmIggW1quk9vwf6lstFWPJJJQM9p0+9zBL7O8dG0ckHGHi
8rbE2cef/0OW3TTESiYh5D6LI/3Cn+abhxIJham8J5btK7e1tdmOioic+sFCERG5/wefi4jMam5r
b20s/WLkXc1tbc29Lu3/Tjp6nqA5BgwizyDWsKz4kK2tzXak+493NrbZv/hD2bKH5J6Wttani3uO
f0nae/zp4Y7YcjK8EjR8g1zylFtExPOgpmmrpU3TNO3XLWLTNO1Jb5eIiPuUps0QyfWKiHjuuTD1
sLjye/5VzfJD8gxinZLTKSLima9pmlbrEhERT46maXXiaBYRkY6KC8OPdLk+6b3515LhFcAR5jds
jbtuZnWb6aWfnP9JroiIHF7nW7q/6HhrRGKeiMg6x38cusdu2nph4jZxT+35Fz0ub5NmUFvvmj2z
ps30ux+LHBwc2Xo0v9wWtmGuiEhkQnNl2dmOyBH55wdvD3Nl9ZzskUdIkFNy9bkrrn5/dFl7+B8u
ugK5LbzjhUlTrjnktPxGRMR+8KG0N++XmBnnBywXT68JORJ9O3EG9a5w+K33Rx5sN20XGRbRfjBl
6vjE1rCXRUTCWwYmT0iq6bLsOD94mXh77TFNYikkQgpTeb+5WUSmLZHoi5KPEPNBEcmcfehJEZGH
p2aJPCHyQo8tta7XhGZv2O+IM6iPMCeLyNQcifokL1o6pomItV4sh0VE6kVExjpk/fnB4bKm1xGm
rStsPRFSmMp7QEREHhNz/LmfdB84/NwTldzyWIW8n5YhIvKkiEiGyBPnR4WLrddf5OuUaOIMZodE
ROQRiRhwVUTXSRGRrLFuWS8irhQREVkr4T0Ks7nX5EyPxBEhham8NhERsYtEnvtJ94FD8n0O84DN
KQ5b981P58XzssLE2/sHPllJnMHsaRERaReJWCmdN3f/zCsmkXMXX5pE6/FE7ew9u0vMREhhKq/r
i+OFHvt/97Ni12d3r2vrjE64pkJEZNWXJvrkot9i1S5+CiG4dL8AmqXnxeleL4sR4uux+cMvvSuB
wlRZ93nUIOlqvbANuvf8rLd/Vbr/AWdk0uWa1nLxpusgzuDfFQaKt7VDzN038O6MlOXdr6ciIs/0
6ETvxRdgwsVOhBSm8rrve+6SjinS2X3M+GlkmIi0OmpFsjL+8OvLbRKv9G7SwohLHIYiiGz/ojY7
MnPdYcNFROQ6cdaLSNRRERFrpLzYY/MP7jW52CyriZDCVN4T5SIy8wl5TuRziSoXsV5rFhHpiu4+
gFxy0buHzuu86I13g6WziTiDWe5BEamKFZdkdsjmO0Sk+FlxTBMR+VaeiHwQ473r/GCPLO01eZ24
2fwUZggEPqbx4aa3Iuw/EjnjMo1u+sH18Q4RkUZPfMuCuvmtse4zl57oEnOvN+K9KM6pxBnMwq9p
fKRpeIS9UqTaafnz8l88lWpxHBMR8cSkP/VYyzppTT0/2C2mXpt/lPR+Izu+Ifyy0zf7q5ELOkRE
2so0TdPqXSLi+c8fik3TtAWdIiJdzjmaNkNkhqZpmiYy6/zUPKeU9/yrWmUJeQb1r0Yu7N4VDmia
ph3pviDZfkjTtDrpeNQjIl5b3oXh+c6ust6bfxEZXgF8vNs37Gxpw/9yVRycKiLyreKzG1oPrSky
V4nIq4seejbsnnkL/yzyVJjk7hYRmSlP/vXcxGmN8maPv+f2aNeBF4kzmNWX/XKMs6I0S0RkrPXf
xz2y8cEDXxw1/nZ+zsHxFeN7DJ7aFPWrHn/8NNp5YAsRXokDTDL4BjkjZ/21r3NLxnlKpp3/07J1
K58lzyDmNl9uV6gd2mH58k/vfKfzswsn4Sue/dU6MuQaJi7vhtWW5PN/yFvZcQeRhJL3n+2x+fN/
5ZhJJBQmvsqd9ujz1/3fiH6IL3UJLT/ssfn/HL0ok0Q4JVdeh6nmmr7Prhqy4I/djz5J70ogzaDm
CrvcrnD3G+6YS/181s62IV+cX4xn81OYAPSx8pYiChMAAhvXMAGAwgQAChMAKEwAoDABgMIEAAoT
AEBhAgCFCQAUJgAEgv8/AJoHIwzdDgkeAAAAAElFTkSuQmCC

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/stackPushedFourStrings_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////AAABAwMEBAQFCAkKCgsMFxsdDA4PgYOEGh8hJi0w
hYqMYnZ9RFJXV2hupLvDo7rCmaqwqMvWka+5jqu1dIyUHSMluuDst9zorM/aqs3YpsjTpMXQlrW/
gJqje5ScaH2ETl5jO0dLnr7ImrnDboSLtNfiXW91Lzg7sM/ZrMnTq8jRq8fQqsbPpb/Hpb7GpL3F
oLW8m660m62zkZ2hsdbhrtLdhaGpND9Cud/qtdrlocLMi6iwIikrtNbgs9Ters3WrcvUqcXNp8LK
orrBpLzDornAnLC2mqyxmKmuiI+RDxMUEhYXmq2ylKOnKTI0jZeZAQICBQYGBgcHg4eHg4WFfn9/
/P398/T08vPz8fLy6Onp5+jo5ufn0tPT0NHRz9DQzs/Pzc7OzM3Ny8zMysvLyMnJxsfHwsPDvr+/
vL29u7y8ubq6q6ysqaqqqKmppKWln6Cgl5iYjo+PjY6OjI2Ni4yMiouLiYqKiImJhoeHgYKCf4CA
AgIB///+h4aDhYSC/vbpjYqFEA4L/ejKiYeE+KxD+K9J+LFO+bZb+bxm+sBv+sFy+sR5+8yL/NWg
/Nyw/eK+/eXE/efI/u3VmJKK//rzi4iEUkc6qZ6R/vDek46IindiZlhJNS4m5smq0Lqiwa+brqGT
q5+Sqp6RqJ2RpJqPoJeNDAoIIBsWd2ZU/Niz+9ey6smm58ak5MOix6qNsJd9KSMd/dm08c+s7s2q
7Muo1beYzbCSvaKHoYpzlYBqPzYt+day9dOw3b6eRz0z8dCv7c2t7c6t7s+u68yt6sus6cus6Mqr
4cWoCAcG3MGm1b2kzbegzLagyrWfybSfyLOexrKdvayaraCTrJ+SjoqGjYmFioeE//z5//37hIOC
GBQRBAMDBQQE/v7++/v7+fn59/f39fX18fHx7+/v7e3t6+vr6urq5eXl4uLi39/f3d3d29vb2NjY
1dXV1NTU0tLSxcXFxMTEwcHBwMDAt7e3s7Ozr6+vrq6urKysq6urAgICAQEB////MZ2u5wAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAADfaSURBVHja7N15nBxlnT/wT9/V
19xHMvd0z0wSCCBHhKgkuKzrQcKyoIyu7iKgRFkkCVFUwAmZHBADgeDKGlguhdXhEEyCPzXmBQmy
XBo5QibJTHfP9NxHZqan7/v3R0+SyeVWh8Sufvrz1teLnpmuV6q+9fSnn6p6qh6VCkREJIeaJSAi
YmASETEwiYgYmEREDEwiIgYmEREDk4iIGJhERAxMIiIGJhERA5OIiIFJRMTAJCJiYBIR0d+kZQmI
lGVj7Mhr0y2sBwOTiE4qMS0wJ1gOHpITETEwiYgYmERExMAkImJgEhExMImIGJhERAxMIiIGJhER
A5OIiBiYREQMTCIiBiYRkRLwaUVECpMXYY9GqVQq1oCIiIfkREQMTCIiBiYRkXLxog+RsrQUJY78
YLmJBWEPk4hOpjUWOmKY9WBgEhExMImIGJhERMTAJCJiYBIRMTCJiBiYREQMTCIiBiYREQOTiIgY
mEREDEwiIgYmEREDk4iIgUlEJB4+QJhIYULWI68nWA5F4ayRREQ8JCciYmASETEwiYiUjBd9iBRm
U0KVxNT/PfFWFoSBSUQnE40cea1ZyXrwkJyIiIFJRMTAJCJiYLIEREQMTCIiBiYREQOTiIiBSUTE
wCQiYmASEREDk4iIgUlExMAkImJgEhExMImIhMPnYRIpS4tOc+SHSdaDgUlEJ9XagiNPWW9hPRSF
0+wSEcnEc5hERAxMIqLTi+cwiRTmPxPTPqA3sx4MTCI6qdC0WSOtLAcPyYlIHg9LwMAkImJgEhEx
MImI6KiB618DAKyuz+mKfEUDAPFf5nAJvqwFgMT/ZOZf3zjt9aKmnGgALTOOvB4phT965EeLFiOl
R368mR+Dv6evAcB90/bO0VfJedfP4SqoWIIfZygwQ9NeJ3OjAbRuPLLRuomj/uSb/htVnB+Dv39T
WMFDciJFuU2S9fGN38VSZRgDkyg7EpN5ycAkInmJybxkYBKRvMRkXjIwiUheYjIvGZhEJC8xmZcM
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

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/stackPoppedOneString_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////AAABAwMEBAUGCgwNICYpFRkbGBwegYOEgIKDf4GC
MDk9MTs/P0tQGyAihouNhYqMNkFFRlRZj5qeDA8Qs9jkmLjCjqu1S1tgOkZKHSMluuDsud/rt9zo
ttvntdrmtNnlq87ZpMXQnb3HmrrEl7bAf5mhepObdY2VaoCHaH2EXXB2Tl5jLDU4ut/ruN3pqcvW
p8jTi6ewbYOKQU5SPUlNDxITuNzotNfiLzg7ttnktdjjtNbhsNDars3XERQVrcrUqMLKpLzEnrO6
nK+1m660l6eslqarlqWqlaSpkp+jttzns9jjrtLdn8DKlLO8ka+4hqKqboWMQ1FVND9Ctdrlstbh
sNTfosPNg56mcYiPY3d9U2Rpud7pttrlWWtws9TestPdqsbOobi/nLC2mqyxmauwmKmul6itjZib
j5qdjpmcjZeajJaZiI+RIystOERHSFdbJi4wExcYm66zmq2yk6KmipKUhIiJKTI0jJWXhYqLhImK
g4iJGR8gh42OAQICAwQEBwkJBgcHg4eHfn9/8/T08PHx5+jo5ufnxsfHxMXFwsPDwMHBu7y8uLm5
tre3tba2tLW1s7S0srOzsbKyrq+vqaqqpqenpaampKWlo6SkoqOjoaKioKGhn6CgmpublpeXlZaW
lJWVk5SUkpOTkJGRjo+Pi4yMiImJhoeHhYaGhIWFg4SEgoODgIGBf4CAhoWC//78hoJ7EA4L+KxD
+LFP+bJR+blg+sN4+86P/enNlI+IhoN/pZuP/vbsSD4zYFNF0ruiwa+bt6iXsqSVrqGTmpOLDAoI
BgUEUEQ4FBEOdmVTNi4mIh0Y+dWxs5l/gm9c/dm0/Ni0+9ez89Gt3L2d0bOVxqqNvaKHjnplaFlK
Wk1APzYtBwYF8M6snohx9dOx6sqp4cKjHRkVLCYgvKuZjYmF//37GBQR/v7+/f39+vr69/f39PT0
8vLy7u7u6+vr5OTk39/f2tra1tbW0NDQzMzMycnJwsLCvr6+rKysAgICAQEB////89HzdgAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAACnBSURBVHja7J15eFNV/v/fN3vS
JW2TphuydaFQFumGUHYRRMdlZkC+gjCIOvM86iiCy+jA8CiIDoriTxkcd0VAdgVZZKktUKAsrSBt
oVDWLjRt2mZp0uy/P1LWutzbJ0zak8/rj5mkOVdy3/e87jnn5t5zOA4EQfBARBEQBLlCEOQKQZAr
BEGuEAS5QhDkCkEQ5ApBkCsEQa4QBLlCEB0cCUXQ8djpvV1HKVC7QvwuPzqdP+kphg4HR/cZd7hW
xekFpNSyULtC/J4qLi8AalnIFeL3VHF7AJKFXCF+d6zicre+IllovEL83ljlCjRmoXaF+O2xCqhl
IVeI3+uAeW547/yJMqE+GPGLrYrn5j9Jx1Is5ApxE5vCWjxt/0pjFuqDETejtP2CKjRmIVeINh0w
t/cX/06ykCvETcN69698QrLQeIW4vlVxen/9QxqzULtCXFXF9RuqUMtCrhDXxiqe3/ycZCFXiN8Z
q5AsNF4h+I5VaMxC7QrBb6xCLUvHgZ63DzCXDVXi6956ruuOSW5o849RVuRKcHMI91//9ofr23zb
/Zvup4RovEL8Ij+4rr2W3UV50HiF4MUmioD6YAQfYvpTBtSuEHyopQioXSF+ffwopgxobE8Q1Acj
CHKFIAhyhSDIFYIgVwiCXCEIcoUgyBWCIFcIgiBXCIJcIYhbCd072bGgZ72oXSHawWWKgFwheHGI
IiBXCF7QxBTkCsGLGHrenlwheFFL7Qq5QvCD2hVyhaDxCrlC0HiFXCFovBLk3PC7fR0AIDq4E9Fz
AODtCEs4BGo24w4UQeCoa5PBDa58ygFAXXDL8okYADzBPF6RfNxhIggcn3IAvNQHo/EKQeMVGq8Q
5EoQQu0KuUJ07PEKQa7QeIUgV2i8Qtxy6LnIjnby8lIG5ArBg3E0tKc+GEFDe3KFIMgVgiDIFYIg
VwiCXCEIcoUgyBWCIFcIglwhCIJcIYh2QveDdSx+cF97LaU1JcgV4teh24ypD0YIh9ZfIVcIglwh
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

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--IBehCKOclJCUxZftsOheFdLCvOaXOrxicBpTVXTdPY------
