From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html
Subject: =?utf-8?Q?Lexical=20Structure=20=E2=80=94=20The=20Swift=20Programming=20L?=
 =?utf-8?Q?anguage=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:59:21 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----"


------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Lexical Structure =E2=80=94 The Swift Programming Language (Swif=
t 5.1)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.h=
tml">Language Reference</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Abo=
ut the Language Reference</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.ht=
ml#">Lexical Structure</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Types.html">Types</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Expressions.html">Expressions</a></=
li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Statements.html">Statements</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html">Declarations</a>=
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Attributes.html">Attributes</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Patterns.html">Patterns</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html"=
>Generic Parameters and Arguments</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html">Summary=
 of the Grammar</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#">Lexical Structure</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID411">Whitespace and Comments</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID412">Identifiers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID413">Keywords and Punctuation</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID414">Literals</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID415">Integer Literals</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID416">Floating-Point Literals</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID417">String Literals</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID418">Operators</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"lexical-structure">
<h1>Lexical Structure<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/LexicalStructure.html#lexical-structure" title=
=3D"Permalink to this headline">=C2=B6</a></h1>
<p>The <em>lexical structure</em> of Swift describes what sequence of chara=
cters form valid tokens of the language. These valid tokens form the lowest=
-level building blocks of the language and are used to describe the rest of=
 the language in subsequent chapters. A token consists of an identifier, ke=
yword, punctuation, literal, or operator.</p>
<p>In most cases, tokens are generated from the characters of a Swift sourc=
e file by considering the longest possible substring from the input text, w=
ithin the constraints of the grammar that are specified below. This behavio=
r is referred to as <em>longest match</em> or <em>maximal munch</em>.</p>
<div class=3D"section" id=3D"ID411">
<h2>Whitespace and Comments<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/LexicalStructure.html#ID411" title=3D"Per=
malink to this headline">=C2=B6</a></h2>
<p>Whitespace has two uses: to separate tokens in the source file and to he=
lp determine whether an operator is a prefix or postfix (see <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#ID418"><span class=3D"std std-ref">Operators</span><=
/a>), but is otherwise ignored. The following characters are considered whi=
tespace: space (U+0020), line feed (U+000A), carriage return (U+000D), hori=
zontal tab (U+0009), vertical tab (U+000B), form feed (U+000C) and null (U+=
0000).</p>
<p>Comments are treated as whitespace by the compiler. Single line comments=
 begin with <code class=3D"docutils literal notranslate"><span class=3D"pre=
">//</span></code> and continue until a line feed (U+000A) or carriage retu=
rn (U+000D). Multiline comments begin with <code class=3D"docutils literal =
notranslate"><span class=3D"pre">/*</span></code> and end with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">*/</span></code>. Nes=
ting multiline comments is allowed, but the comment markers must be balance=
d.</p>
<p>Comments can contain additional formatting and markup, as described in <=
a class=3D"reference external" href=3D"https://developer.apple.com/library/=
content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.htm=
l">Markup Formatting Reference</a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of whitespace</p><div class=3D"syntax-group"><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_whitespace"></a>whitespace</s=
pan><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalSt=
ructure.html#grammar_whitespace-item">whitespace-item</a></span>  <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/LexicalStructure.html#grammar_whitespace">whitespace</a></span>=
 <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_whitespace-item"></a>whitespace-item</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramma=
r_line-break">line-break</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_whitespace-item_1100"></a>whitespace-=
item</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Le=
xicalStructure.html#grammar_comment">comment</a></span> </p><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_whitespace-item_1=
101"></a>whitespace-item</span><span class=3D"arrow"> =E2=86=92 </span> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/LexicalStructure.html#grammar_multiline-comment">multilin=
e-comment</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-=
name"><a id=3D"grammar_whitespace-item_1102"></a>whitespace-item</span><spa=
n class=3D"arrow"> =E2=86=92 </span> U+0000, U+0009, U+000B, U+000C, or U+0=
020</p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_line-break"></a>line-break</span><sp=
an class=3D"arrow"> =E2=86=92 </span> U+000A</p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_line-break_1103"></a>line-bre=
ak</span><span class=3D"arrow"> =E2=86=92 </span> U+000D</p><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_line-break_1104">=
</a>line-break</span><span class=3D"arrow"> =E2=86=92 </span> U+000D follow=
ed by U+000A</p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><=
span class=3D"syntax-def-name"><a id=3D"grammar_comment"></a>comment</span>=
<span class=3D"arrow"> =E2=86=92 </span> <code>//</code> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/LexicalStructure.html#grammar_comment-text">comment-text</a></span>  <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/LexicalStructure.html#grammar_line-break">line-break</a><=
/span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_multiline-comment"></a>multiline-comment</span><span class=3D"arro=
w"> =E2=86=92 </span> <code>/*</code> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure=
.html#grammar_multiline-comment-text">multiline-comment-text</a></span>  <c=
ode>*/</code></p></div><div class=3D"syntax-group"><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_comment-text"></a>comment-=
text</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Le=
xicalStructure.html#grammar_comment-text-item">comment-text-item</a></span>=
  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/LexicalStructure.html#grammar_comment-text">comment-=
text</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_comment-text-item"></a>comment-text-item</s=
pan><span class=3D"arrow"> =E2=86=92 </span> Any Unicode scalar value excep=
t U+000A or U+000D</p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_multiline-comment-tex=
t"></a>multiline-comment-text</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/LexicalStructure.html#grammar_multiline-comment-text=
-item">multiline-comment-text-item</a></span>  <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexical=
Structure.html#grammar_multiline-comment-text">multiline-comment-text</a></=
span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_multiline-comment-text-item"></a>multiline-comment-te=
xt-item</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_multiline-comment">multiline-comment</a></sp=
an> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gr=
ammar_multiline-comment-text-item_1105"></a>multiline-comment-text-item</sp=
an><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStr=
ucture.html#grammar_comment-text-item">comment-text-item</a></span> </p><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_multi=
line-comment-text-item_1106"></a>multiline-comment-text-item</span><span cl=
ass=3D"arrow"> =E2=86=92 </span> Any Unicode scalar value except  <code>/*<=
/code> or  <code>*/</code></p></div></div></div>
<div class=3D"section" id=3D"ID412">
<h2>Identifiers<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/LexicalStructure.html#ID412" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p><em>Identifiers</em> begin with an uppercase or lowercase letter A throu=
gh Z, an underscore (<code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">_</span></code>), a noncombining alphanumeric Unicode character =
in the Basic Multilingual Plane, or a character outside the Basic Multiling=
ual Plane that isn=E2=80=99t in a Private Use Area. After the first charact=
er, digits and combining Unicode characters are also allowed.</p>
<p>To use a reserved word as an identifier, put a backtick (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">`</span></code>) before a=
nd after it. For example, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">class</span></code> is not a valid identifier, but <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">`class`</span></co=
de> is valid. The backticks aren=E2=80=99t considered part of the identifie=
r; <code class=3D"docutils literal notranslate"><span class=3D"pre">`x`</sp=
an></code> and <code class=3D"docutils literal notranslate"><span class=3D"=
pre">x</span></code> have the same meaning.</p>
<p>Inside a closure with no explicit parameter names, the parameters are im=
plicitly named <code class=3D"docutils literal notranslate"><span class=3D"=
pre">$0</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">$1</span></code>, <code class=3D"docutils literal notranslate"=
><span class=3D"pre">$2</span></code>, and so on. These names are valid ide=
ntifiers within the scope of the closure.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an identifier</p><div class=3D"syntax-group"><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_identifier"></a>identifier=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexica=
lStructure.html#grammar_identifier-head">identifier-head</a></span>  <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/LexicalStructure.html#grammar_identifier-characters">identif=
ier-characters</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span c=
lass=3D"syntax-def-name"><a id=3D"grammar_identifier_1107"></a>identifier</=
span><span class=3D"arrow"> =E2=86=92 </span> <code>`</code> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_identifier-head">identifier-head</a></=
span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/LexicalStructure.html#grammar_identifier-charac=
ters">identifier-characters</a></span> <sub>opt</sub> <code>`</code></p><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_ident=
ifier_1108"></a>identifier</span><span class=3D"arrow"> =E2=86=92 </span> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/LexicalStructure.html#grammar_implicit-parameter-name">=
implicit-parameter-name</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_identifier-list"></a>identifier-list<=
/span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexical=
Structure.html#grammar_identifier">identifier</a></span>  |  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_identifier">identifier</a></span>  <co=
de>,</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_identifier-l=
ist">identifier-list</a></span> </p></div><div class=3D"syntax-group"><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_identif=
ier-head"></a>identifier-head</span><span class=3D"arrow"> =E2=86=92 </span=
> Upper- or lowercase letter A through Z</p><p class=3D"syntax-def"><span c=
lass=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1109"></a>identif=
ier-head</span><span class=3D"arrow"> =E2=86=92 </span> <code>_</code></p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_ide=
ntifier-head_1110"></a>identifier-head</span><span class=3D"arrow"> =E2=86=
=92 </span> U+00A8, U+00AA, U+00AD, U+00AF, U+00B2=E2=80=93U+00B5, or U+00B=
7=E2=80=93U+00BA</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"=
><a id=3D"grammar_identifier-head_1111"></a>identifier-head</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> U+00BC=E2=80=93U+00BE, U+00C0=E2=80=93U+00D=
6, U+00D8=E2=80=93U+00F6, or U+00F8=E2=80=93U+00FF</p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1112"><=
/a>identifier-head</span><span class=3D"arrow"> =E2=86=92 </span> U+0100=E2=
=80=93U+02FF, U+0370=E2=80=93U+167F, U+1681=E2=80=93U+180D, or U+180F=E2=80=
=93U+1DBF</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_identifier-head_1113"></a>identifier-head</span><span class=3D"=
arrow"> =E2=86=92 </span> U+1E00=E2=80=93U+1FFF</p><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1114"></a>=
identifier-head</span><span class=3D"arrow"> =E2=86=92 </span> U+200B=E2=80=
=93U+200D, U+202A=E2=80=93U+202E, U+203F=E2=80=93U+2040, U+2054, or U+2060=
=E2=80=93U+206F</p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_identifier-head_1115"></a>identifier-head</span><span clas=
s=3D"arrow"> =E2=86=92 </span> U+2070=E2=80=93U+20CF, U+2100=E2=80=93U+218F=
, U+2460=E2=80=93U+24FF, or U+2776=E2=80=93U+2793</p><p class=3D"syntax-def=
"><span class=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1116"></=
a>identifier-head</span><span class=3D"arrow"> =E2=86=92 </span> U+2C00=E2=
=80=93U+2DFF or U+2E80=E2=80=93U+2FFF</p><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1117"></a>identifier=
-head</span><span class=3D"arrow"> =E2=86=92 </span> U+3004=E2=80=93U+3007,=
 U+3021=E2=80=93U+302F, U+3031=E2=80=93U+303F, or U+3040=E2=80=93U+D7FF</p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_id=
entifier-head_1118"></a>identifier-head</span><span class=3D"arrow"> =E2=86=
=92 </span> U+F900=E2=80=93U+FD3D, U+FD40=E2=80=93U+FDCF, U+FDF0=E2=80=93U+=
FE1F, or U+FE30=E2=80=93U+FE44</p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_identifier-head_1119"></a>identifier-head</=
span><span class=3D"arrow"> =E2=86=92 </span> U+FE47=E2=80=93U+FFFD</p><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_identi=
fier-head_1120"></a>identifier-head</span><span class=3D"arrow"> =E2=86=92 =
</span> U+10000=E2=80=93U+1FFFD, U+20000=E2=80=93U+2FFFD, U+30000=E2=80=93U=
+3FFFD, or U+40000=E2=80=93U+4FFFD</p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1121"></a>identifier-=
head</span><span class=3D"arrow"> =E2=86=92 </span> U+50000=E2=80=93U+5FFFD=
, U+60000=E2=80=93U+6FFFD, U+70000=E2=80=93U+7FFFD, or U+80000=E2=80=93U+8F=
FFD</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_identifier-head_1122"></a>identifier-head</span><span class=3D"arrow">=
 =E2=86=92 </span> U+90000=E2=80=93U+9FFFD, U+A0000=E2=80=93U+AFFFD, U+B000=
0=E2=80=93U+BFFFD, or U+C0000=E2=80=93U+CFFFD</p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_identifier-head_1123"></a>id=
entifier-head</span><span class=3D"arrow"> =E2=86=92 </span> U+D0000=E2=80=
=93U+DFFFD or U+E0000=E2=80=93U+EFFFD</p></div><div class=3D"syntax-group">=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_id=
entifier-character"></a>identifier-character</span><span class=3D"arrow"> =
=E2=86=92 </span> Digit 0 through 9</p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_identifier-character_1124"></a>identi=
fier-character</span><span class=3D"arrow"> =E2=86=92 </span> U+0300=E2=80=
=93U+036F, U+1DC0=E2=80=93U+1DFF, U+20D0=E2=80=93U+20FF, or U+FE20=E2=80=93=
U+FE2F</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"=
grammar_identifier-character_1125"></a>identifier-character</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_identifier-head">identifier-head</a></span> </p><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_identifier-character=
s"></a>identifier-characters</span><span class=3D"arrow"> =E2=86=92 </span>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/LexicalStructure.html#grammar_identifier-character">i=
dentifier-character</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_identifier-characters">identifier-characters</a></span> <sub>opt</=
sub></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span cla=
ss=3D"syntax-def-name"><a id=3D"grammar_implicit-parameter-name"></a>implic=
it-parameter-name</span><span class=3D"arrow"> =E2=86=92 </span> <code>$</c=
ode> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/LexicalStructure.html#grammar_decimal-digits">dec=
imal-digits</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID413">
<h2>Keywords and Punctuation<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h2>
<p>The following keywords are reserved and can=E2=80=99t be used as identif=
iers, unless they=E2=80=99re escaped with backticks, as described above in =
<a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/LexicalStructure.html#ID412"><span class=3D"std std-ref">Ide=
ntifiers</span></a>. Keywords other than <code class=3D"docutils literal no=
translate"><span class=3D"pre">inout</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">var</span></code>, and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">let</span></code> ca=
n be used as parameter names in a function declaration or function call wit=
hout being escaped with backticks. When a member has the same name as a key=
word, references to that member don=E2=80=99t need to be escaped with backt=
icks, except when there=E2=80=99s ambiguity between referring to the member=
 and using the keyword=E2=80=94for example, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">self</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Type</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Protocol</span></=
code> have special meaning in an explicit member expression, so they must b=
e escaped with backticks in that context.</p>
<ul class=3D"simple">
<li>Keywords used in declarations: <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">associatedtype</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">class</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">deinit</span></code=
>, <code class=3D"docutils literal notranslate"><span class=3D"pre">enum</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">extension</span></code>, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">fileprivate</span></code>, <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">func</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">import</span></code>, <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">init</span></code>=
, <code class=3D"docutils literal notranslate"><span class=3D"pre">inout</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">internal</span></code>, <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">let</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">open</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">operator</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">private</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">protocol</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">public</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">static</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">struct</span></code>, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">subscript</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">typealias</span></cod=
e>, and <code class=3D"docutils literal notranslate"><span class=3D"pre">va=
r</span></code>.</li>
<li>Keywords used in statements: <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">break</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">case</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">continue</span></code>, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">default</span></c=
ode>, <code class=3D"docutils literal notranslate"><span class=3D"pre">defe=
r</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">do</span></code>, <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">else</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">fallthrough</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">for</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">guard</span></code>, =
<code class=3D"docutils literal notranslate"><span class=3D"pre">if</span><=
/code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">in=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">repeat</span></code>, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">return</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">switch</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">where</span></code>, and <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">while</span></code=
>.</li>
<li>Keywords used in expressions and types: <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">as</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Any</span></code>, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">catch</span></code>, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">false</span><=
/code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">is=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">nil</span></code>, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">rethrows</span></code>, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">super</span></code>, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">self</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Self</span></code>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">throw</span></c=
ode>, <code class=3D"docutils literal notranslate"><span class=3D"pre">thro=
ws</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">true</span></code>, and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">try</span></code>.</li>
<li>Keywords used in patterns: <code class=3D"docutils literal notranslate"=
><span class=3D"pre">_</span></code>.</li>
<li>Keywords that begin with a number sign (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">#</span></code>): <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">#available</span></code>, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">#colorLiteral</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">#column</span></code>, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">#else</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">#elseif</span></code>, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">#endif</span></code>, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">#error</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">#file</span>=
</code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">#=
fileLiteral</span></code>, <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">#function</span></code>, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">#if</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">#imageLiteral</span></code>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">#line</span></c=
ode>, <code class=3D"docutils literal notranslate"><span class=3D"pre">#sel=
ector</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">#sourceLocation</span></code>, and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">#warning</span></code>.</li>
<li>Keywords reserved in particular contexts: <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">associativity</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">convenience</span></=
code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">dyn=
amic</span></code>, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">didSet</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">final</span></code>, <code class=3D"docutils literal =
notranslate"><span class=3D"pre">get</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">infix</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">indirect</span></code=
>, <code class=3D"docutils literal notranslate"><span class=3D"pre">lazy</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">left</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">mutating</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">none</span></code>, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">nonmutating</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">optional</span></code=
>, <code class=3D"docutils literal notranslate"><span class=3D"pre">overrid=
e</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">postfix</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">precedence</span></code>, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">prefix</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Protocol</span></code>, <=
code class=3D"docutils literal notranslate"><span class=3D"pre">required</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">right</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">set</span></code>, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Type</span></code>, <code class=3D"docutils literal =
notranslate"><span class=3D"pre">unowned</span></code>, <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">weak</span></code>, and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">willSet</span><=
/code>. Outside the context in which they appear in the grammar, they can b=
e used as identifiers.</li>
</ul>
<p>The following tokens are reserved as punctuation and can=E2=80=99t be us=
ed as custom operators: <code class=3D"docutils literal notranslate"><span =
class=3D"pre">(</span></code>, <code class=3D"docutils literal notranslate"=
><span class=3D"pre">)</span></code>, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">{</span></code>, <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">}</span></code>, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">[</span></code>, <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">]</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">.</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">,</span></co=
de>, <code class=3D"docutils literal notranslate"><span class=3D"pre">:</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">;</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">=3D</span></code>, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">@</span></code>, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">#</span></code>, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">&amp;</span></code> (as a prefix operator),=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">-&gt;</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">`</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">?</span></code>, and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">!</span></code> (as a postfix operator).</p>
</div>
<div class=3D"section" id=3D"ID414">
<h2>Literals<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#ID414" title=3D"Permalink to this =
headline">=C2=B6</a></h2>
<p>A <em>literal</em> is the source code representation of a value of a typ=
e, such as a number or string.</p>
<p>The following are examples of literals:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"m">42=
</span>               <span class=3D"c">// Integer literal</span>
</li><li><span class=3D"m">3.14159</span>          <span class=3D"c">// Flo=
ating-point literal</span>
</li><li><span class=3D"s">"Hello, world!"</span>  <span class=3D"c">// Str=
ing literal</span>
</li><li><span class=3D"k">true</span>             <span class=3D"c">// Boo=
lean literal</span>
</li></ol></div></div></div>
<p>A literal doesn=E2=80=99t have a type on its own. Instead, a literal is =
parsed as having infinite precision and Swift=E2=80=99s type inference atte=
mpts to infer a type for the literal. For example, in the declaration <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">let</span> <spa=
n class=3D"pre">x:</span> <span class=3D"pre">Int8</span> <span class=3D"pr=
e">=3D</span> <span class=3D"pre">42</span></code>, Swift uses the explicit=
 type annotation (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">:</span> <span class=3D"pre">Int8</span></code>) to infer that the=
 type of the integer literal <code class=3D"docutils literal notranslate"><=
span class=3D"pre">42</span></code> is <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Int8</span></code>. If there isn=E2=80=99t sui=
table type information available, Swift infers that the literal=E2=80=99s t=
ype is one of the default literal types defined in the Swift standard libra=
ry. The default types are <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Int</span></code> for integer literals, <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">Double</span></code> for floa=
ting-point literals, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">String</span></code> for string literals, and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">Bool</span></code> for Boole=
an literals. For example, in the declaration <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">let</span> <span class=3D"pre">str</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">"Hello,</span> <span c=
lass=3D"pre">world"</span></code>, the default inferred type of the string =
literal <code class=3D"docutils literal notranslate"><span class=3D"pre">"H=
ello,</span> <span class=3D"pre">world"</span></code> is <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">String</span></code>.</p>
<p>When specifying the type annotation for a literal value, the annotation=
=E2=80=99s type must be a type that can be instantiated from that literal v=
alue. That is, the type must conform to one of the following Swift standard=
 library protocols: <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">ExpressibleByIntegerLiteral</span></code> for integer literals, <=
code class=3D"docutils literal notranslate"><span class=3D"pre">Expressible=
ByFloatLiteral</span></code> for floating-point literals, <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">ExpressibleByStringLiteral<=
/span></code> for string literals, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">ExpressibleByBooleanLiteral</span></code> for Bool=
ean literals, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">ExpressibleByUnicodeScalarLiteral</span></code> for string literals tha=
t contain only a single Unicode scalar, and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">ExpressibleByExtendedGraphemeClusterLiter=
al</span></code> for string literals that contain only a single extended gr=
apheme cluster. For example, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Int8</span></code> conforms to the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">ExpressibleByIntegerLiteral</sp=
an></code> protocol, and therefore it can be used in the type annotation fo=
r the integer literal <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">42</span></code> in the declaration <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">let</span> <span class=3D"pre">x:</sp=
an> <span class=3D"pre">Int8</span> <span class=3D"pre">=3D</span> <span cl=
ass=3D"pre">42</span></code>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a literal</p><div class=3D"syntax-group"><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_literal"></a>literal</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure=
.html#grammar_numeric-literal">numeric-literal</a></span>  |  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_string-literal">string-literal</a><=
/span>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_boolean-liter=
al">boolean-literal</a></span>  |  <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.ht=
ml#grammar_nil-literal">nil-literal</a></span> </p></div><div class=3D"synt=
ax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"=
grammar_numeric-literal"></a>numeric-literal</span><span class=3D"arrow"> =
=E2=86=92 </span> <code>-</code><sub>opt</sub> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexical=
Structure.html#grammar_integer-literal">integer-literal</a></span>  |  <cod=
e>-</code><sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar=
_floating-point-literal">floating-point-literal</a></span> </p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_boolean-litera=
l"></a>boolean-literal</span><span class=3D"arrow"> =E2=86=92 </span> <code=
>true</code> |  <code>false</code></p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_nil-literal"></a>nil-literal</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <code>nil</code></p></div></div><div=
 class=3D"section" id=3D"ID415">
<h3>Integer Literals<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/LexicalStructure.html#ID415" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p><em>Integer literals</em> represent integer values of unspecified precis=
ion. By default, integer literals are expressed in decimal; you can specify=
 an alternate base using a prefix. Binary literals begin with <code class=
=3D"docutils literal notranslate"><span class=3D"pre">0b</span></code>, oct=
al literals begin with <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">0o</span></code>, and hexadecimal literals begin with <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">0x</span></code>.<=
/p>
<p>Decimal literals contain the digits <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">0</span></code> through <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">9</span></code>. Binary literals=
 contain <code class=3D"docutils literal notranslate"><span class=3D"pre">0=
</span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">1</span></code>, octal literals contain <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">0</span></code> through <code class=
=3D"docutils literal notranslate"><span class=3D"pre">7</span></code>, and =
hexadecimal literals contain <code class=3D"docutils literal notranslate"><=
span class=3D"pre">0</span></code> through <code class=3D"docutils literal =
notranslate"><span class=3D"pre">9</span></code> as well as <code class=3D"=
docutils literal notranslate"><span class=3D"pre">A</span></code> through <=
code class=3D"docutils literal notranslate"><span class=3D"pre">F</span></c=
ode> in upper- or lowercase.</p>
<p>Negative integers literals are expressed by prepending a minus sign (<co=
de class=3D"docutils literal notranslate"><span class=3D"pre">-</span></cod=
e>) to an integer literal, as in <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-42</span></code>.</p>
<p>Underscores (<code class=3D"docutils literal notranslate"><span class=3D=
"pre">_</span></code>) are allowed between digits for readability, but they=
=E2=80=99re ignored and therefore don=E2=80=99t affect the value of the lit=
eral. Integer literals can begin with leading zeros (<code class=3D"docutil=
s literal notranslate"><span class=3D"pre">0</span></code>), but they=E2=80=
=99re likewise ignored and don=E2=80=99t affect the base or value of the li=
teral.</p>
<p>Unless otherwise specified, the default inferred type of an integer lite=
ral is the Swift standard library type <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Int</span></code>. The Swift standard library =
also defines types for various sizes of signed and unsigned integers, as de=
scribed in <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/TheBasics.html#ID317"><span class=3D"std std-ref">I=
ntegers</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an integer literal</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_integer-literal"></a>=
integer-literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_binary-literal">binary-literal</a><=
/span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_integer-literal_1126"></a>integer-literal</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_o=
ctal-literal">octal-literal</a></span> </p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_integer-literal_1127"></a>integer-=
literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_decimal-literal">decimal-literal</a></span> =
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_integer-literal_1128"></a>integer-literal</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_hexade=
cimal-literal">hexadecimal-literal</a></span> </p></div><div class=3D"synta=
x-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"g=
rammar_binary-literal"></a>binary-literal</span><span class=3D"arrow"> =E2=
=86=92 </span> <code>0b</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_binary-digit">binary-digit</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexica=
lStructure.html#grammar_binary-literal-characters">binary-literal-character=
s</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"synta=
x-def-name"><a id=3D"grammar_binary-digit"></a>binary-digit</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> Digit 0 or 1</p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_binary-literal-character"></a=
>binary-literal-character</span><span class=3D"arrow"> =E2=86=92 </span> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#grammar_binary-digit">binary-digit=
</a></span>  |  <code>_</code></p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_binary-literal-characters"></a>binary-liter=
al-characters</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_binary-literal-character">binary-liter=
al-character</a></span>  <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar=
_binary-literal-characters">binary-literal-characters</a></span> <sub>opt</=
sub></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span cla=
ss=3D"syntax-def-name"><a id=3D"grammar_octal-literal"></a>octal-literal</s=
pan><span class=3D"arrow"> =E2=86=92 </span> <code>0o</code> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_octal-digit">octal-digit</a></span>  <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/LexicalStructure.html#grammar_octal-literal-characters"=
>octal-literal-characters</a></span> <sub>opt</sub></p><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_octal-digit"></a>octal=
-digit</span><span class=3D"arrow"> =E2=86=92 </span> Digit 0 through 7</p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_oc=
tal-literal-character"></a>octal-literal-character</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_o=
ctal-digit">octal-digit</a></span>  |  <code>_</code></p><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_octal-literal-charac=
ters"></a>octal-literal-characters</span><span class=3D"arrow"> =E2=86=92 <=
/span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/LexicalStructure.html#grammar_octal-literal-cha=
racter">octal-literal-character</a></span>  <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStr=
ucture.html#grammar_octal-literal-characters">octal-literal-characters</a><=
/span> <sub>opt</sub></p></div><div class=3D"syntax-group"><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_decimal-literal"><=
/a>decimal-literal</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/LexicalStructure.html#grammar_decimal-digit">decimal-digit</a><=
/span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/LexicalStructure.html#grammar_decimal-literal-=
characters">decimal-literal-characters</a></span> <sub>opt</sub></p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_decimal-d=
igit"></a>decimal-digit</span><span class=3D"arrow"> =E2=86=92 </span> Digi=
t 0 through 9</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_decimal-digits"></a>decimal-digits</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_de=
cimal-digit">decimal-digit</a></span>  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructur=
e.html#grammar_decimal-digits">decimal-digits</a></span> <sub>opt</sub></p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_de=
cimal-literal-character"></a>decimal-literal-character</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramm=
ar_decimal-digit">decimal-digit</a></span>  |  <code>_</code></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_decimal-li=
teral-characters"></a>decimal-literal-characters</span><span class=3D"arrow=
"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_dec=
imal-literal-character">decimal-literal-character</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_decimal-literal-characters">decimal=
-literal-characters</a></span> <sub>opt</sub></p></div><div class=3D"syntax=
-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gr=
ammar_hexadecimal-literal"></a>hexadecimal-literal</span><span class=3D"arr=
ow"> =E2=86=92 </span> <code>0x</code> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructur=
e.html#grammar_hexadecimal-digit">hexadecimal-digit</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_hexadecimal-literal-characters">hex=
adecimal-literal-characters</a></span> <sub>opt</sub></p><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_hexadecimal-digit"><=
/a>hexadecimal-digit</span><span class=3D"arrow"> =E2=86=92 </span> Digit 0=
 through 9, a through f, or A through F</p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_hexadecimal-literal-character"></a=
>hexadecimal-literal-character</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/LexicalStructure.html#grammar_hexadecimal-digit">he=
xadecimal-digit</a></span>  |  <code>_</code></p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_hexadecimal-literal-characte=
rs"></a>hexadecimal-literal-characters</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_hexadecimal-=
literal-character">hexadecimal-literal-character</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_hexadecimal-literal-characters">hexade=
cimal-literal-characters</a></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID416">
<h3>Floating-Point Literals<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/LexicalStructure.html#ID416" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p><em>Floating-point literals</em> represent floating-point values of unsp=
ecified precision.</p>
<p>By default, floating-point literals are expressed in decimal (with no pr=
efix), but they can also be expressed in hexadecimal (with a <code class=3D=
"docutils literal notranslate"><span class=3D"pre">0x</span></code> prefix)=
.</p>
<p>Decimal floating-point literals consist of a sequence of decimal digits =
followed by either a decimal fraction, a decimal exponent, or both. The dec=
imal fraction consists of a decimal point (<code class=3D"docutils literal =
notranslate"><span class=3D"pre">.</span></code>) followed by a sequence of=
 decimal digits. The exponent consists of an upper- or lowercase <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">e</span></code> pref=
ix followed by a sequence of decimal digits that indicates what power of 10=
 the value preceding the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">e</span></code> is multiplied by. For example, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">1.25e2</span></code> =
represents 1.25 x 10<sup>2</sup>, which evaluates to <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">125.0</span></code>. Similarly, =
<code class=3D"docutils literal notranslate"><span class=3D"pre">1.25e-2</s=
pan></code> represents 1.25 x 10<sup>-2</sup>, which evaluates to <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">0.0125</span></code=
>.</p>
<p>Hexadecimal floating-point literals consist of a <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">0x</span></code> prefix, followed=
 by an optional hexadecimal fraction, followed by a hexadecimal exponent. T=
he hexadecimal fraction consists of a decimal point followed by a sequence =
of hexadecimal digits. The exponent consists of an upper- or lowercase <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">p</span></code=
> prefix followed by a sequence of decimal digits that indicates what power=
 of 2 the value preceding the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">p</span></code> is multiplied by. For example, <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">0xFp2</span></code=
> represents 15 x 2<sup>2</sup>, which evaluates to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">60</span></code>. Similarly, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">0xFp-2</span><=
/code> represents 15 x 2<sup>-2</sup>, which evaluates to <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">3.75</span></code>.</p>
<p>Negative floating-point literals are expressed by prepending a minus sig=
n (<code class=3D"docutils literal notranslate"><span class=3D"pre">-</span=
></code>) to a floating-point literal, as in <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">-42.5</span></code>.</p>
<p>Underscores (<code class=3D"docutils literal notranslate"><span class=3D=
"pre">_</span></code>) are allowed between digits for readability, but they=
=E2=80=99re ignored and therefore don=E2=80=99t affect the value of the lit=
eral. Floating-point literals can begin with leading zeros (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">0</span></code>), but the=
y=E2=80=99re likewise ignored and don=E2=80=99t affect the base or value of=
 the literal.</p>
<p>Unless otherwise specified, the default inferred type of a floating-poin=
t literal is the Swift standard library type <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Double</span></code>, which represents a=
 64-bit floating-point number. The Swift standard library also defines a <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Float</span>=
</code> type, which represents a 32-bit floating-point number.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a floating-point literal</p><div class=3D"syntax-group"><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_floating-point-=
literal"></a>floating-point-literal</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/LexicalStructure.html#grammar_decimal-literal"=
>decimal-literal</a></span>  <span class=3D"syntactic-category"><a href=3D"=
https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gra=
mmar_decimal-fraction">decimal-fraction</a></span> <sub>opt</sub> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/LexicalStructure.html#grammar_decimal-exponent">decimal-exponen=
t</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"synta=
x-def-name"><a id=3D"grammar_floating-point-literal_1129"></a>floating-poin=
t-literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/LexicalStructure.html#grammar_hexadecimal-literal">hexadecimal-literal</=
a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_hexadecimal-f=
raction">hexadecimal-fraction</a></span> <sub>opt</sub> <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/LexicalStructure.html#grammar_hexadecimal-exponent">hexadecimal-exponent<=
/a></span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_decimal-fraction"></a>decima=
l-fraction</span><span class=3D"arrow"> =E2=86=92 </span> <code>.</code> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#grammar_decimal-literal">decimal-l=
iteral</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-nam=
e"><a id=3D"grammar_decimal-exponent"></a>decimal-exponent</span><span clas=
s=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_floating-point-e">floating-point-e</a></span>  <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/LexicalStructure.html#grammar_sign">sign</a></span> <sub>opt</sub> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/LexicalStructure.html#grammar_decimal-literal">decimal-liter=
al</a></span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_hexadecimal-fraction"></a=
>hexadecimal-fraction</span><span class=3D"arrow"> =E2=86=92 </span> <code>=
.</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/LexicalStructure.html#grammar_hexadecimal-dig=
it">hexadecimal-digit</a></span>  <span class=3D"syntactic-category"><a hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.htm=
l#grammar_hexadecimal-literal-characters">hexadecimal-literal-characters</a=
></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-de=
f-name"><a id=3D"grammar_hexadecimal-exponent"></a>hexadecimal-exponent</sp=
an><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStr=
ucture.html#grammar_floating-point-p">floating-point-p</a></span>  <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/LexicalStructure.html#grammar_sign">sign</a></span> <sub>opt</=
sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/LexicalStructure.html#grammar_decimal-literal">de=
cimal-literal</a></span> </p></div><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_floating-point=
-e"></a>floating-point-e</span><span class=3D"arrow"> =E2=86=92 </span> <co=
de>e</code> |  <code>E</code></p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_floating-point-p"></a>floating-point-p</span=
><span class=3D"arrow"> =E2=86=92 </span> <code>p</code> |  <code>P</code><=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_sign"></a>sign</span><span class=3D"arrow"> =E2=86=92 </span> <code>+</cod=
e> |  <code>-</code></p></div></div></div>
<div class=3D"section" id=3D"ID417">
<h3>String Literals<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/LexicalStructure.html#ID417" title=3D"Permalink t=
o this headline">=C2=B6</a></h3>
<p>A string literal is a sequence of characters surrounded by quotation mar=
ks. A single-line string literal is surrounded by double quotation marks an=
d has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"s">"</span><span class=3D"gi">characters</span><span class=3D"s">=
"</span>
</li></ol></div></div></div>
<p>String literals can=E2=80=99t contain an unescaped double quotation mark=
 (<code class=3D"docutils literal notranslate"><span class=3D"pre">"</span>=
</code>), an unescaped backslash (<code class=3D"docutils literal notransla=
te"><span class=3D"pre">\</span></code>), a carriage return, or a line feed=
.</p>
<p>A multiline string literal is surrounded by three double quotation marks=
 and has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"s">"""</span>
</li><li><span class=3D"gi">characters</span><span class=3D"s"></span>
</li><li><span class=3D"s">"""</span>
</li></ol></div></div></div>
<p>Unlike a single-line string literal, a multiline string literal can cont=
ain unescaped double quotation marks (<code class=3D"docutils literal notra=
nslate"><span class=3D"pre">"</span></code>), carriage returns, and line fe=
eds. It can=E2=80=99t contain three unescaped double quotation marks next t=
o each other.</p>
<p>The line break after the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">"""</span></code> that begins the multiline string litera=
l is not part of the string. The line break before the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">"""</span></code> that ends th=
e literal is also not part of the string. To make a multiline string litera=
l that begins or ends with a line feed, write a blank line as its first or =
last line.</p>
<p>A multiline string literal can be indented using any combination of spac=
es and tabs; this indentation is not included in the string. The <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">"""</span></code> th=
at ends the literal determines the indentation: Every nonblank line in the =
literal must begin with exactly the same indentation that appears before th=
e closing <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"""</span></code>; there=E2=80=99s no conversion between tabs and spaces. Y=
ou can include additional spaces and tabs after that indentation; those spa=
ces and tabs appear in the string.</p>
<p>Line breaks in a multiline string literal are normalized to use the line=
 feed character. Even if your source file has a mix of carriage returns and=
 line feeds, all of the line breaks in the string will be the same.</p>
<p>In a multiline string literal, writing a backslash (<code class=3D"docut=
ils literal notranslate"><span class=3D"pre">\</span></code>) at the end of=
 a line omits that line break from the string. Any whitespace between the b=
ackslash and the line break is also omitted. You can use this syntax to har=
d wrap a multiline string literal in your source code, without changing the=
 value of the resulting string.</p>
<p>Special characters can be included in string literals of both the single=
-line and multiline forms using the following escape sequences:</p>
<ul class=3D"simple">
<li>Null character (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">\0</span></code>)</li>
<li>Backslash (<code class=3D"docutils literal notranslate"><span class=3D"=
pre">\\</span></code>)</li>
<li>Horizontal tab (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">\t</span></code>)</li>
<li>Line feed (<code class=3D"docutils literal notranslate"><span class=3D"=
pre">\n</span></code>)</li>
<li>Carriage return (<code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">\r</span></code>)</li>
<li>Double quotation mark (<code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">\"</span></code>)</li>
<li>Single quotation mark (<code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">\'</span></code>)</li>
<li>Unicode scalar (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">\u{</span></code><em>n</em><code class=3D"docutils literal notran=
slate"><span class=3D"pre">}</span></code>), where <em>n</em> is a hexadeci=
mal number that has one to eight digits</li>
</ul>
<p>The value of an expression can be inserted into a string literal by plac=
ing the expression in parentheses after a backslash (<code class=3D"docutil=
s literal notranslate"><span class=3D"pre">\</span></code>). The interpolat=
ed expression can contain a string literal, but can=E2=80=99t contain an un=
escaped backslash, a carriage return, or a line feed.</p>
<p>For example, all of the following string literals have the same value:</=
p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"s">"1=
 2 3"</span>
</li><li><span class=3D"s">"1 2 </span>\<span class=3D"p">(</span><span cla=
ss=3D"s">"3"</span><span class=3D"p">)</span><span class=3D"s">"</span>
</li><li><span class=3D"s">"1 2 </span>\<span class=3D"p">(</span><span cla=
ss=3D"m">3</span><span class=3D"p">)</span><span class=3D"s">"</span>
</li><li><span class=3D"s">"1 2 </span>\<span class=3D"p">(</span><span cla=
ss=3D"m">1</span> + <span class=3D"m">2</span><span class=3D"p">)</span><sp=
an class=3D"s">"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">x</span> =3D <span=
 class=3D"m">3</span>; <span class=3D"s">"1 2 </span>\<span class=3D"p">(</=
span><span class=3D"nv">x</span><span class=3D"p">)</span><span class=3D"s"=
>"</span>
</li></ol></div></div></div>
<p>A string delimited by extended delimiters is a sequence of characters su=
rrounded by quotation marks and a balanced set of one or more number signs =
(<code class=3D"docutils literal notranslate"><span class=3D"pre">#</span><=
/code>). A string delimited by extended delimiters has the following forms:=
</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"s">#"</span><span class=3D"gi">characters</span><span class=3D"s"=
>"#</span>
</li><li>
</li><li><span class=3D"s">#"""</span>
</li><li><span class=3D"gi">characters</span><span class=3D"s"></span>
</li><li><span class=3D"s">"""#</span>
</li></ol></div></div></div>
<p>Special characters in a string delimited by extended delimiters appear i=
n the resulting string as normal characters rather than as special characte=
rs. You can use extended delimiters to create strings with characters that =
would ordinarily have a special effect such as generating a string interpol=
ation, starting an escape sequence, or terminating the string.</p>
<p>The following example shows a string literal and a string delimited by e=
xtended delimiters that create equivalent string values:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">string</span> =3D <span class=3D"s">#"\(x) \ " =
\u{2603}"#</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">escaped</span> =3D=
 <span class=3D"s">"\\(x) \\ \" \\u{2603}"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">string</span>)
</li><li><span class=3D"c">// Prints "\(x) \ " \u{2603}"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">string</span> =
=3D=3D <span class=3D"nv">escaped</span>)
</li><li><span class=3D"c">// Prints "true"</span>
</li></ol></div></div></div>
<p>If you use more than one number sign to form a string delimited by exten=
ded delimiters, don=E2=80=99t place whitespace in between the number signs:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">###"Line 1\###nLine 2"###</span>) <span class=
=3D"c">// OK</span>
</li><li><span class=3D"nv">print</span>(# # <span class=3D"s">#"Line 1\# #=
 #nLine 2"#</span> # #) <span class=3D"c">// Error</span>
</li></ol></div></div></div>
<p>Multiline string literals that you create using extended delimiters have=
 the same indentation requirements as regular multiline string literals.</p=
>
<p>The default inferred type of a string literal is <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">String</span></code>. For more in=
formation about the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">String</span></code> type, see <a class=3D"reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.=
html"><span class=3D"doc">Strings and Characters</span></a> and <a class=3D=
"reference external" href=3D"https://developer.apple.com/documentation/swif=
t/string"><code class=3D"docutils literal notranslate"><span class=3D"pre">=
String</span></code></a>.</p>
<p>String literals that are concatenated by the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">+</span></code> operator are concaten=
ated at compile time. For example, the values of <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">textA</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">textB</span></code> i=
n the example below are identical=E2=80=94no runtime concatenation is perfo=
rmed.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">textA</span> =3D <span class=3D"s">"Hello "</sp=
an> + <span class=3D"s">"world"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">textB</span> =3D <=
span class=3D"s">"Hello world"</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a string literal</p><div class=3D"syntax-group"><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_string-literal"></a>str=
ing-literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/LexicalStructure.html#grammar_static-string-literal">static-string-lit=
eral</a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_inte=
rpolated-string-literal">interpolated-string-literal</a></span> </p></div><=
div class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-de=
f-name"><a id=3D"grammar_string-literal-opening-delimiter"></a>string-liter=
al-opening-delimiter</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/LexicalStructure.html#grammar_extended-string-literal-delimit=
er">extended-string-literal-delimiter</a></span> <sub>opt</sub> <code>"</co=
de></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_string-literal-closing-delimiter"></a>string-literal-closing-delimiter=
</span><span class=3D"arrow"> =E2=86=92 </span> <code>"</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_extended-string-literal-delimiter">=
extended-string-literal-delimiter</a></span> <sub>opt</sub></p></div><div c=
lass=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-nam=
e"><a id=3D"grammar_static-string-literal"></a>static-string-literal</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruct=
ure.html#grammar_string-literal-opening-delimiter">string-literal-opening-d=
elimiter</a></span>  <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_quo=
ted-text">quoted-text</a></span> <sub>opt</sub> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexica=
lStructure.html#grammar_string-literal-closing-delimiter">string-literal-cl=
osing-delimiter</a></span> </p><p class=3D"syntax-def"><span class=3D"synta=
x-def-name"><a id=3D"grammar_static-string-literal_1130"></a>static-string-=
literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_multiline-string-literal-opening-delimiter">=
multiline-string-literal-opening-delimiter</a></span>  <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_multiline-quoted-text">multiline-quoted-text=
</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramm=
ar_multiline-string-literal-closing-delimiter">multiline-string-literal-clo=
sing-delimiter</a></span> </p></div><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_multiline-str=
ing-literal-opening-delimiter"></a>multiline-string-literal-opening-delimit=
er</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexi=
calStructure.html#grammar_extended-string-literal-delimiter">extended-strin=
g-literal-delimiter</a></span>  <code>"""</code></p><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_multiline-string-literal-=
closing-delimiter"></a>multiline-string-literal-closing-delimiter</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <code>"""</code> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_extended-string-literal-delimiter">extended-=
string-literal-delimiter</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_extended-string-literal-delimiter"></=
a>extended-string-literal-delimiter</span><span class=3D"arrow"> =E2=86=92 =
</span> <code>#</code> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_e=
xtended-string-literal-delimiter">extended-string-literal-delimiter</a></sp=
an> <sub>opt</sub></p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_quoted-text"></a>quot=
ed-text</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_quoted-text-item">quoted-text-item</a></span=
>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/LexicalStructure.html#grammar_quoted-text">quoted-t=
ext</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_quoted-text-item"></a>quoted-text-item</span=
><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#grammar_escaped-character">escaped-character</a></span> </p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_quoted-=
text-item_1131"></a>quoted-text-item</span><span class=3D"arrow"> =E2=86=92=
 </span> Any Unicode scalar value except  <code>"</code>,  <code>\</code>, =
U+000A, or U+000D</p></div><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_multiline-quoted-text"=
></a>multiline-quoted-text</span><span class=3D"arrow"> =E2=86=92 </span> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/LexicalStructure.html#grammar_multiline-quoted-text-ite=
m">multiline-quoted-text-item</a></span>  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#grammar_multiline-quoted-text">multiline-quoted-text</a></span> <=
sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_multiline-quoted-text-item"></a>multiline-quoted-text-item</=
span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalS=
tructure.html#grammar_escaped-character">escaped-character</a></span> </p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_mul=
tiline-quoted-text-item_1132"></a>multiline-quoted-text-item</span><span cl=
ass=3D"arrow"> =E2=86=92 </span> Any Unicode scalar value except  <code>\</=
code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"g=
rammar_multiline-quoted-text-item_1133"></a>multiline-quoted-text-item</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStru=
cture.html#grammar_escaped-newline">escaped-newline</a></span> </p></div><d=
iv class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def=
-name"><a id=3D"grammar_interpolated-string-literal"></a>interpolated-strin=
g-literal</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/LexicalStructure.html#grammar_string-literal-opening-delimiter">string-l=
iteral-opening-delimiter</a></span>  <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.=
html#grammar_interpolated-text">interpolated-text</a></span> <sub>opt</sub>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/LexicalStructure.html#grammar_string-literal-closing-=
delimiter">string-literal-closing-delimiter</a></span> </p><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_interpolated-strin=
g-literal_1134"></a>interpolated-string-literal</span><span class=3D"arrow"=
> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_mult=
iline-string-literal-opening-delimiter">multiline-string-literal-opening-de=
limiter</a></span>  <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_inte=
rpolated-text">interpolated-text</a></span> <sub>opt</sub> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/LexicalStructure.html#grammar_multiline-string-literal-closing-delimit=
er">multiline-string-literal-closing-delimiter</a></span> </p></div><div cl=
ass=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name=
"><a id=3D"grammar_interpolated-text"></a>interpolated-text</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_interpolated-text-item">interpolated-text-item</a></span>  <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/LexicalStructure.html#grammar_interpolated-text">interpolated=
-text</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"s=
yntax-def-name"><a id=3D"grammar_interpolated-text-item"></a>interpolated-t=
ext-item</span><span class=3D"arrow"> =E2=86=92 </span> <code>\(</code> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/Expressions.html#grammar_expression">expression</a></span=
>  <code>)</code> |  <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_quo=
ted-text-item">quoted-text-item</a></span> </p></div><div class=3D"syntax-g=
roup"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gram=
mar_multiline-interpolated-text"></a>multiline-interpolated-text</span><spa=
n class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.=
html#grammar_multiline-interpolated-text-item">multiline-interpolated-text-=
item</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_multili=
ne-interpolated-text">multiline-interpolated-text</a></span> <sub>opt</sub>=
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_multiline-interpolated-text-item"></a>multiline-interpolated-text-item</s=
pan><span class=3D"arrow"> =E2=86=92 </span> <code>\(</code> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Expressions.html#grammar_expression">expression</a></span>  <code>)<=
/code> |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/LexicalStructure.html#grammar_multiline-quot=
ed-text-item">multiline-quoted-text-item</a></span> </p></div><div class=3D=
"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a i=
d=3D"grammar_escape-sequence"></a>escape-sequence</span><span class=3D"arro=
w"> =E2=86=92 </span> <code>\</code> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.=
html#grammar_extended-string-literal-delimiter">extended-string-literal-del=
imiter</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-nam=
e"><a id=3D"grammar_escaped-character"></a>escaped-character</span><span cl=
ass=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_escape-sequence">escape-sequence</a></span>  <code>0</code> |  <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/LexicalStructure.html#grammar_escape-sequence">escape-seq=
uence</a></span>  <code>\</code> |  <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.h=
tml#grammar_escape-sequence">escape-sequence</a></span>  <code>t</code> |  =
<span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/LexicalStructure.html#grammar_escape-sequence">escape-=
sequence</a></span>  <code>n</code> |  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructur=
e.html#grammar_escape-sequence">escape-sequence</a></span>  <code>r</code> =
|  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/LexicalStructure.html#grammar_escape-sequence">esca=
pe-sequence</a></span>  <code>"</code> |  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#grammar_escape-sequence">escape-sequence</a></span>  <code>'</cod=
e></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gram=
mar_escaped-character_1135"></a>escaped-character</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_es=
cape-sequence">escape-sequence</a></span>  <code>u</code> <code>{</code> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/LexicalStructure.html#grammar_unicode-scalar-digits">uni=
code-scalar-digits</a></span>  <code>}</code></p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_unicode-scalar-digits"></a>u=
nicode-scalar-digits</span><span class=3D"arrow"> =E2=86=92 </span> Between=
 one and eight hexadecimal digits</p></div><div class=3D"syntax-group"><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_escape=
d-newline"></a>escaped-newline</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/LexicalStructure.html#grammar_escape-sequence">esca=
pe-sequence</a></span>  <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_=
whitespace">whitespace</a></span> <sub>opt</sub> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexic=
alStructure.html#grammar_line-break">line-break</a></span> </p></div></div>=
</div>
</div>
<div class=3D"section" id=3D"ID418">
<h2>Operators<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/LexicalStructure.html#ID418" title=3D"Permalink to this=
 headline">=C2=B6</a></h2>
<p>The Swift standard library defines a number of operators for your use, m=
any of which are discussed in <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html"><span class=
=3D"doc">Basic Operators</span></a> and <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html=
"><span class=3D"doc">Advanced Operators</span></a>. The present section de=
scribes which characters can be used to define custom operators.</p>
<p>Custom operators can begin with one of the ASCII characters <code class=
=3D"docutils literal notranslate"><span class=3D"pre">/</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">=3D</span></co=
de>, <code class=3D"docutils literal notranslate"><span class=3D"pre">-</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">+</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">!</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">*</span></code>, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">%</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">&lt;</span></code>, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">&gt;</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">&amp;</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">|</span></code=
>, <code class=3D"docutils literal notranslate"><span class=3D"pre">^</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
?</span></code>, or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">~</span></code>, or one of the Unicode characters defined in the =
grammar below (which include characters from the <em>Mathematical Operators=
</em>, <em>Miscellaneous Symbols</em>, and <em>Dingbats</em> Unicode blocks=
, among others). After the first character, combining Unicode characters ar=
e also allowed.</p>
<p>You can also define custom operators that begin with a dot (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">.</span></code>). The=
se operators can contain additional dots. For example, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">.+.</span></code> is treated a=
s a single operator. If an operator doesn=E2=80=99t begin with a dot, it ca=
n=E2=80=99t contain a dot elsewhere. For example, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">+.+</span></code> is treated as the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">+</span><=
/code> operator followed by the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">.+</span></code> operator.</p>
<p>Although you can define custom operators that contain a question mark (<=
code class=3D"docutils literal notranslate"><span class=3D"pre">?</span></c=
ode>), they can=E2=80=99t consist of a single question mark character only.=
 Additionally, although operators can contain an exclamation mark (<code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">!</span></code>), =
postfix operators can=E2=80=99t begin with either a question mark or an exc=
lamation mark.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The tokens <code class=3D"docutils literal notranslate"><=
span class=3D"pre">=3D</span></code>, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-&gt;</span></code>, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">//</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">/*</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">*/</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">.</span></co=
de>, the prefix operators <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">&lt;</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">&amp;</span></code>, and <code class=3D"docutils =
literal notranslate"><span class=3D"pre">?</span></code>, the infix operato=
r <code class=3D"docutils literal notranslate"><span class=3D"pre">?</span>=
</code>, and the postfix operators <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">&gt;</span></code>, <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">!</span></code>, and <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">?</span></code> are reserved.=
 These tokens can=E2=80=99t be overloaded, nor can they be used as custom o=
perators.</p>
</div>
<p>The whitespace around an operator is used to determine whether an operat=
or is used as a prefix operator, a postfix operator, or a binary operator. =
This behavior is summarized in the following rules:</p>
<ul class=3D"simple">
<li>If an operator has whitespace around both sides or around neither side,=
 it=E2=80=99s treated as a binary operator. As an example, the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">+++</span></code> ope=
rator in <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
+++b</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">a</span> <span class=3D"pre">+++</span> <span class=3D"pre">b<=
/span></code> is treated as a binary operator.</li>
<li>If an operator has whitespace on the left side only, it=E2=80=99s treat=
ed as a prefix unary operator. As an example, the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">+++</span></code> operator in <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">a</span> <span =
class=3D"pre">+++b</span></code> is treated as a prefix unary operator.</li=
>
<li>If an operator has whitespace on the right side only, it=E2=80=99s trea=
ted as a postfix unary operator. As an example, the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">+++</span></code> operator in <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">a+++</span> <=
span class=3D"pre">b</span></code> is treated as a postfix unary operator.<=
/li>
<li>If an operator has no whitespace on the left but is followed immediatel=
y by a dot (<code class=3D"docutils literal notranslate"><span class=3D"pre=
">.</span></code>), it=E2=80=99s treated as a postfix unary operator. As an=
 example, the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">+++</span></code> operator in <code class=3D"docutils literal notransla=
te"><span class=3D"pre">a+++.b</span></code> is treated as a postfix unary =
operator (<code class=3D"docutils literal notranslate"><span class=3D"pre">=
a+++</span> <span class=3D"pre">.b</span></code> rather than <code class=3D=
"docutils literal notranslate"><span class=3D"pre">a</span> <span class=3D"=
pre">+++</span> <span class=3D"pre">.b</span></code>).</li>
</ul>
<p>For the purposes of these rules, the characters <code class=3D"docutils =
literal notranslate"><span class=3D"pre">(</span></code>, <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">[</span></code>, and <code =
class=3D"docutils literal notranslate"><span class=3D"pre">{</span></code> =
before an operator, the characters <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">)</span></code>, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">]</span></code>, and <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">}</span></code> after an operato=
r, and the characters <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">,</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">;</span></code>, and <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">:</span></code> are also considered whitespac=
e.</p>
<p>There=E2=80=99s one caveat to the rules above. If the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">!</span></code> or <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">?</span></code> pre=
defined operator has no whitespace on the left, it=E2=80=99s treated as a p=
ostfix operator, regardless of whether it has whitespace on the right. To u=
se the <code class=3D"docutils literal notranslate"><span class=3D"pre">?</=
span></code> as the optional-chaining operator, it must not have whitespace=
 on the left. To use it in the ternary conditional (<code class=3D"docutils=
 literal notranslate"><span class=3D"pre">?</span></code> <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">:</span></code>) operator, =
it must have whitespace around both sides.</p>
<p>In certain constructs, operators with a leading <code class=3D"docutils =
literal notranslate"><span class=3D"pre">&lt;</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">&gt;</span></code> ma=
y be split into two or more tokens. The remainder is treated the same way a=
nd may be split again. As a result, there=E2=80=99s no need to use whitespa=
ce to disambiguate between the closing <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">&gt;</span></code> characters in constructs li=
ke <code class=3D"docutils literal notranslate"><span class=3D"pre">Diction=
ary&lt;String,</span> <span class=3D"pre">Array&lt;Int&gt;&gt;</span></code=
>. In this example, the closing <code class=3D"docutils literal notranslate=
"><span class=3D"pre">&gt;</span></code> characters are not treated as a si=
ngle token that may then be misinterpreted as a bit shift <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">&gt;&gt;</span></code> oper=
ator.</p>
<p>To learn how to define new, custom operators, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedO=
perators.html#ID46"><span class=3D"std std-ref">Custom Operators</span></a>=
 and <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Declarations.html#ID380"><span class=3D"std std-ref">Op=
erator Declaration</span></a>. To learn how to overload existing operators,=
 see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/AdvancedOperators.html#ID42"><span class=3D"std std-ref">=
Operator Methods</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of operators</p><div class=3D"syntax-group"><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_operator"></a>operator</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructu=
re.html#grammar_operator-head">operator-head</a></span>  <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/LexicalStructure.html#grammar_operator-characters">operator-characters</=
a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-d=
ef-name"><a id=3D"grammar_operator_1136"></a>operator</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramma=
r_dot-operator-head">dot-operator-head</a></span>  <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lex=
icalStructure.html#grammar_dot-operator-characters">dot-operator-characters=
</a></span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><=
span class=3D"syntax-def-name"><a id=3D"grammar_operator-head"></a>operator=
-head</span><span class=3D"arrow"> =E2=86=92 </span> <code>/</code> |  <cod=
e>=3D</code> |  <code>-</code> |  <code>+</code> |  <code>!</code> |  <code=
>*</code> |  <code>%</code> |  <code>&lt;</code> |  <code>&gt;</code> |  <c=
ode>&amp;</code> |  <code>|</code> |  <code>^</code> |  <code>~</code> |  <=
code>?</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_operator-head_1137"></a>operator-head</span><span class=3D"a=
rrow"> =E2=86=92 </span> U+00A1=E2=80=93U+00A7</p><p class=3D"syntax-def"><=
span class=3D"syntax-def-name"><a id=3D"grammar_operator-head_1138"></a>ope=
rator-head</span><span class=3D"arrow"> =E2=86=92 </span> U+00A9 or U+00AB<=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_operator-head_1139"></a>operator-head</span><span class=3D"arrow"> =E2=86=
=92 </span> U+00AC or U+00AE</p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_operator-head_1140"></a>operator-head</span><=
span class=3D"arrow"> =E2=86=92 </span> U+00B0=E2=80=93U+00B1</p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operator-h=
ead_1141"></a>operator-head</span><span class=3D"arrow"> =E2=86=92 </span> =
U+00B6, U+00BB, U+00BF, U+00D7, or U+00F7</p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_operator-head_1142"></a>operator=
-head</span><span class=3D"arrow"> =E2=86=92 </span> U+2016=E2=80=93U+2017<=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_operator-head_1143"></a>operator-head</span><span class=3D"arrow"> =E2=86=
=92 </span> U+2020=E2=80=93U+2027</p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_operator-head_1144"></a>operator-head</s=
pan><span class=3D"arrow"> =E2=86=92 </span> U+2030=E2=80=93U+203E</p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operato=
r-head_1145"></a>operator-head</span><span class=3D"arrow"> =E2=86=92 </spa=
n> U+2041=E2=80=93U+2053</p><p class=3D"syntax-def"><span class=3D"syntax-d=
ef-name"><a id=3D"grammar_operator-head_1146"></a>operator-head</span><span=
 class=3D"arrow"> =E2=86=92 </span> U+2055=E2=80=93U+205E</p><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operator-head_11=
47"></a>operator-head</span><span class=3D"arrow"> =E2=86=92 </span> U+2190=
=E2=80=93U+23FF</p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_operator-head_1148"></a>operator-head</span><span class=3D=
"arrow"> =E2=86=92 </span> U+2500=E2=80=93U+2775</p><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_operator-head_1149"></a>o=
perator-head</span><span class=3D"arrow"> =E2=86=92 </span> U+2794=E2=80=93=
U+2BFF</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"=
grammar_operator-head_1150"></a>operator-head</span><span class=3D"arrow"> =
=E2=86=92 </span> U+2E00=E2=80=93U+2E7F</p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_operator-head_1151"></a>operator-h=
ead</span><span class=3D"arrow"> =E2=86=92 </span> U+3001=E2=80=93U+3003</p=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_o=
perator-head_1152"></a>operator-head</span><span class=3D"arrow"> =E2=86=92=
 </span> U+3008=E2=80=93U+3020</p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_operator-head_1153"></a>operator-head</span=
><span class=3D"arrow"> =E2=86=92 </span> U+3030</p></div><div class=3D"syn=
tax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_operator-character"></a>operator-character</span><span class=3D"ar=
row"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_=
operator-head">operator-head</a></span> </p><p class=3D"syntax-def"><span c=
lass=3D"syntax-def-name"><a id=3D"grammar_operator-character_1154"></a>oper=
ator-character</span><span class=3D"arrow"> =E2=86=92 </span> U+0300=E2=80=
=93U+036F</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_operator-character_1155"></a>operator-character</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> U+1DC0=E2=80=93U+1DFF</p><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operator-character_1=
156"></a>operator-character</span><span class=3D"arrow"> =E2=86=92 </span> =
U+20D0=E2=80=93U+20FF</p><p class=3D"syntax-def"><span class=3D"syntax-def-=
name"><a id=3D"grammar_operator-character_1157"></a>operator-character</spa=
n><span class=3D"arrow"> =E2=86=92 </span> U+FE00=E2=80=93U+FE0F</p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operator-=
character_1158"></a>operator-character</span><span class=3D"arrow"> =E2=86=
=92 </span> U+FE20=E2=80=93U+FE2F</p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_operator-character_1159"></a>operator-ch=
aracter</span><span class=3D"arrow"> =E2=86=92 </span> U+E0100=E2=80=93U+E0=
1EF</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_operator-characters"></a>operator-characters</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_op=
erator-character">operator-character</a></span>  <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexic=
alStructure.html#grammar_operator-characters">operator-characters</a></span=
> <sub>opt</sub></p></div><div class=3D"syntax-group"><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_dot-operator-head"></a>=
dot-operator-head</span><span class=3D"arrow"> =E2=86=92 </span> <code>.</c=
ode></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gr=
ammar_dot-operator-character"></a>dot-operator-character</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>.</code> |  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexica=
lStructure.html#grammar_operator-character">operator-character</a></span> <=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_dot-operator-characters"></a>dot-operator-characters</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramma=
r_dot-operator-character">dot-operator-character</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_dot-operator-characters">dot-operator-=
characters</a></span> <sub>opt</sub></p></div><div class=3D"syntax-group"><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_bin=
ary-operator"></a>binary-operator</span><span class=3D"arrow"> =E2=86=92 </=
span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/LexicalStructure.html#grammar_operator">operator=
</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a =
id=3D"grammar_prefix-operator"></a>prefix-operator</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_o=
perator">operator</a></span> </p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_postfix-operator"></a>postfix-operator</span=
><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#grammar_operator">operator</a></span> </p></div></div></div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/AboutTheLanguageReference.html">About the Language Referenc=
e</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Types.html">Types</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--XuVQts7jnmiwbERxU4v1Qzb5Xku43Rv9DZtTVogku5------
