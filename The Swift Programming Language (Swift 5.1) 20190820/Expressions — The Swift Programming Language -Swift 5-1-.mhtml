From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Expressions.html
Subject: =?utf-8?Q?Expressions=20=E2=80=94=20The=20Swift=20Programming=20Language?=
 =?utf-8?Q?=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:59:40 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----"


------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Expressions.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Expressions =E2=80=94 The Swift Programming Language (Swift 5.1)=
</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.h=
tml">Language Reference</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Abo=
ut the Language Reference</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/LexicalStructure.html">Lexical Stru=
cture</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Types.html">Types</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#">=
Expressions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Statements.html">Statements</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html">Declarations</a>=
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Attributes.html">Attributes</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Patterns.html">Patterns</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html"=
>Generic Parameters and Arguments</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html">Summary=
 of the Grammar</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#">Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID384">Prefix Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID516">Try Operator</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID385">Binary Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID386">Assignment Operator</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID387">Ternary Conditional Operator</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID388">Type-Casting Operators</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID389">Primary Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID390">Literal Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID391">Self Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID392">Superclass Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID393">Closure Expression</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID544">Capture Lists</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID394">Implicit Member Expression</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID395">Parenthesized Expression</a></li=
>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID552">Tuple Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID396">Wildcard Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID563">Key-Path Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID547">Selector Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID549">Key-Path String Expression</a></=
li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID397">Postfix Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID398">Function Call Expression</a></li=
>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID399">Initializer Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID400">Explicit Member Expression</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID401">Postfix Self Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID403">Subscript Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID404">Forced-Value Expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#ID405">Optional-Chaining Expression</a>=
</li>
</ul>
</li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"expressions">
<h1>Expressions<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Expressions.html#expressions" title=3D"Permalink to t=
his headline">=C2=B6</a></h1>
<p>In Swift, there are four kinds of expressions: prefix expressions, binar=
y expressions, primary expressions, and postfix expressions. Evaluating an =
expression returns a value, causes a side effect, or both.</p>
<p>Prefix and binary expressions let you apply operators to smaller express=
ions. Primary expressions are conceptually the simplest kind of expression,=
 and they provide a way to access values. Postfix expressions, like prefix =
and binary expressions, let you build up more complex expressions using pos=
tfixes such as function calls and member access. Each kind of expression is=
 described in detail in the sections below.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an expression</p><div class=3D"syntax-group"><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_expression"></a>expression=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expres=
sions.html#grammar_try-operator">try-operator</a></span> <sub>opt</sub> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/Expressions.html#grammar_prefix-expression">prefix-expres=
sion</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_binary-expre=
ssions">binary-expressions</a></span> <sub>opt</sub></p><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_expression-list"></a>=
expression-list</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_expression">expression</a></span>  |  <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#grammar_expression">expression</a></spa=
n>  <code>,</code> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_expression=
-list">expression-list</a></span> </p></div></div><div class=3D"section" id=
=3D"ID384">
<h2>Prefix Expressions<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Expressions.html#ID384" title=3D"Permalink to =
this headline">=C2=B6</a></h2>
<p><em>Prefix expressions</em> combine an optional prefix operator with an =
expression. Prefix operators take one argument, the expression that follows=
 them.</p>
<p>For information about the behavior of these operators, see <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
BasicOperators.html"><span class=3D"doc">Basic Operators</span></a> and <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/AdvancedOperators.html"><span class=3D"doc">Advanced Operators</s=
pan></a>.</p>
<p>For information about the operators provided by the Swift standard libra=
ry, see <a class=3D"reference external" href=3D"https://developer.apple.com=
/documentation/swift/operator_declarations">Operator Declarations</a>.</p>
<p>In addition to the standard library operators, you use <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">&amp;</span></code> immedia=
tely before the name of a variable that=E2=80=99s being passed as an in-out=
 argument to a function call expression. For more information and to see an=
 example, see <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Functions.html#ID173"><span class=3D"std std-ref=
">In-Out Parameters</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a prefix expression</p><div class=3D"syntax-group"><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_prefix-expression"><=
/a>prefix-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/LexicalStructure.html#grammar_prefix-operator">prefix-operato=
r</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_p=
ostfix-expression">postfix-expression</a></span> </p><p class=3D"syntax-def=
"><span class=3D"syntax-def-name"><a id=3D"grammar_prefix-expression_1058">=
</a>prefix-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Expressions.html#grammar_in-out-expression">in-out-expressio=
n</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_in-out-expression"></a>in-out-expression</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>&amp;</code> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexic=
alStructure.html#grammar_identifier">identifier</a></span> </p></div></div>=
<div class=3D"section" id=3D"ID516">
<h3>Try Operator<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Expressions.html#ID516" title=3D"Permalink to this h=
eadline">=C2=B6</a></h3>
<p>A <em>try expression</em> consists of the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">try</span></code> operator followed by a=
n expression that can throw an error. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">try</span> <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>An <em>optional-try expression</em> consists of the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">try?</span></code> operator fo=
llowed by an expression that can throw an error. It has the following form:=
</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">try</span>? <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>If the <em>expression</em> does not throw an error, the value of the opt=
ional-try expression is an optional containing the value of the <em>express=
ion</em>. Otherwise, the value of the optional-try expression is <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>.</=
p>
<p>A <em>forced-try expression</em> consists of the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">try!</span></code> operator follo=
wed by an expression that can throw an error. It has the following form:</p=
>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">try</span>! <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>If the <em>expression</em> throws an error, a runtime error is produced.=
</p>
<p>When the expression on the left-hand side of a binary operator is marked=
 with <code class=3D"docutils literal notranslate"><span class=3D"pre">try<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">try?</span></code>, or <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">try!</span></code>, that operator applies to the whole bi=
nary expression. That said, you can use parentheses to be explicit about th=
e scope of the operator=E2=80=99s application.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">s=
um</span> =3D <span class=3D"k">try</span> <span class=3D"nv">someThrowingF=
unction</span>() + <span class=3D"nv">anotherThrowingFunction</span>()   <s=
pan class=3D"c">// try applies to both function calls</span>
</li><li><span class=3D"nv">sum</span> =3D <span class=3D"k">try</span> (<s=
pan class=3D"nv">someThrowingFunction</span>() + <span class=3D"nv">another=
ThrowingFunction</span>()) <span class=3D"c">// try applies to both functio=
n calls</span>
</li><li><span class=3D"nv">sum</span> =3D (<span class=3D"k">try</span> <s=
pan class=3D"nv">someThrowingFunction</span>()) + <span class=3D"nv">anothe=
rThrowingFunction</span>() <span class=3D"c">// Error: try applies only to =
the first function call</span>
</li></ol></div></div></div>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">try</=
span></code> expression can=E2=80=99t appear on the right-hand side of a bi=
nary operator, unless the binary operator is the assignment operator or the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">try</span=
></code> expression is enclosed in parentheses.</p>
<p>For more information and to see examples of how to use <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">try</span></code>, <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">try?</span></code>=
, and <code class=3D"docutils literal notranslate"><span class=3D"pre">try!=
</span></code>, see <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/ErrorHandling.html"><span class=3D"doc">Er=
ror Handling</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a try expression</p><div class=3D"syntax-group"><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_try-operator"></a>try-o=
perator</span><span class=3D"arrow"> =E2=86=92 </span> <code>try</code> |  =
<code>try</code> <code>?</code> |  <code>try</code> <code>!</code></p></div=
></div></div>
</div>
<div class=3D"section" id=3D"ID385">
<h2>Binary Expressions<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Expressions.html#ID385" title=3D"Permalink to =
this headline">=C2=B6</a></h2>
<p><em>Binary expressions</em> combine an infix binary operator with the ex=
pression that it takes as its left-hand and right-hand arguments. It has th=
e following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">left-hand argument</span> <span class=3D"gi">operator</span> =
<span class=3D"gi">right-hand argument</span>
</li></ol></div></div></div>
<p>For information about the behavior of these operators, see <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
BasicOperators.html"><span class=3D"doc">Basic Operators</span></a> and <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/AdvancedOperators.html"><span class=3D"doc">Advanced Operators</s=
pan></a>.</p>
<p>For information about the operators provided by the Swift standard libra=
ry, see <a class=3D"reference external" href=3D"https://developer.apple.com=
/documentation/swift/operator_declarations">Operator Declarations</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">At parse time, an expression made up of binary operators =
is represented as a flat list. This list is transformed into a tree by appl=
ying operator precedence. For example, the expression <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">2</span> <span class=3D"pre">+<=
/span> <span class=3D"pre">3</span> <span class=3D"pre">*</span> <span clas=
s=3D"pre">5</span></code> is initially understood as a flat list of five it=
ems, <code class=3D"docutils literal notranslate"><span class=3D"pre">2</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">+</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">3</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">*</span></code>, and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">5</span></code>. This process transforms it into=
 the tree (2 + (3 * 5)).</p>
</div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a binary expression</p><div class=3D"syntax-group"><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_binary-expression"><=
/a>binary-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/LexicalStructure.html#grammar_binary-operator">binary-operato=
r</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Expressions.html#grammar_prefix-expressi=
on">prefix-expression</a></span> </p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_binary-expression_1059"></a>binary-expre=
ssion</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntact=
ic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/E=
xpressions.html#grammar_assignment-operator">assignment-operator</a></span>=
  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Expressions.html#grammar_try-operator">try-operator<=
/a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_pre=
fix-expression">prefix-expression</a></span> </p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_binary-expression_1060"></a>=
binary-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Expressions.html#grammar_conditional-operator">conditional-opera=
tor</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Expressions.html#grammar_try-operator"=
>try-operator</a></span> <sub>opt</sub> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.ht=
ml#grammar_prefix-expression">prefix-expression</a></span> </p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_binary-express=
ion_1061"></a>binary-expression</span><span class=3D"arrow"> =E2=86=92 </sp=
an> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Expressions.html#grammar_type-casting-operator">ty=
pe-casting-operator</a></span> </p><p class=3D"syntax-def"><span class=3D"s=
yntax-def-name"><a id=3D"grammar_binary-expressions"></a>binary-expressions=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expres=
sions.html#grammar_binary-expression">binary-expression</a></span>  <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Expressions.html#grammar_binary-expressions">binary-expressio=
ns</a></span> <sub>opt</sub></p></div></div><div class=3D"section" id=3D"ID=
386">
<h3>Assignment Operator<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID386" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>The <em>assignment operator</em> sets a new value for a given expression=
. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span> =3D <span class=3D"gi">value</span>
</li></ol></div></div></div>
<p>The value of the <em>expression</em> is set to the value obtained by eva=
luating the <em>value</em>. If the <em>expression</em> is a tuple, the <em>=
value</em> must be a tuple with the same number of elements. (Nested tuples=
 are allowed.) Assignment is performed from each part of the <em>value</em>=
 to the corresponding part of the <em>expression</em>. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li>(<span class=3D"nv">=
a</span>, <span class=3D"k">_</span>, (<span class=3D"nv">b</span>, <span c=
lass=3D"nv">c</span>)) =3D (<span class=3D"s">"test"</span>, <span class=3D=
"m">9.45</span>, (<span class=3D"m">12</span>, <span class=3D"m">3</span>))
</li><li><span class=3D"c">// a is "test", b is 12, c is 3, and 9.45 is ign=
ored</span>
</li></ol></div></div></div>
<p>The assignment operator does not return any value.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an assignment operator</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_assignment-operat=
or"></a>assignment-operator</span><span class=3D"arrow"> =E2=86=92 </span> =
<code>=3D</code></p></div></div></div>
<div class=3D"section" id=3D"ID387">
<h3>Ternary Conditional Operator<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#ID387" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>The <em>ternary conditional operator</em> evaluates to one of two given =
values based on the value of a condition. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">condition</span> ? <span class=3D"gi">expression used if true=
</span> : <span class=3D"gi">expression used if false</span>
</li></ol></div></div></div>
<p>If the <em>condition</em> evaluates to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">true</span></code>, the conditional operato=
r evaluates the first expression and returns its value. Otherwise, it evalu=
ates the second expression and returns its value. The unused expression is =
not evaluated.</p>
<p>For an example that uses the ternary conditional operator, see <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/BasicOperators.html#ID71"><span class=3D"std std-ref">Ternary Conditio=
nal Operator</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a conditional operator</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_conditional-opera=
tor"></a>conditional-operator</span><span class=3D"arrow"> =E2=86=92 </span=
> <code>?</code> <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_expression">=
expression</a></span>  <code>:</code></p></div></div></div>
<div class=3D"section" id=3D"ID388">
<h3>Type-Casting Operators<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#ID388" title=3D"Permalink=
 to this headline">=C2=B6</a></h3>
<p>There are four type-casting operators: the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">is</span></code> operator, the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">as</span></code> o=
perator, the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">as?</span></code> operator, and the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">as!</span></code> operator.</p>
<p>They have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span> <span class=3D"k">is</span> <span class=3D"=
gi">type</span>
</li><li><span class=3D"gi">expression</span> <span class=3D"k">as</span> <=
span class=3D"gi">type</span>
</li><li><span class=3D"gi">expression</span> <span class=3D"k">as</span>? =
<span class=3D"gi">type</span>
</li><li><span class=3D"gi">expression</span> <span class=3D"k">as</span>! =
<span class=3D"gi">type</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">is<=
/span></code> operator checks at runtime whether the <em>expression</em> ca=
n be cast to the specified <em>type</em>. It returns <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">true</span></code> if the <em>ex=
pression</em> can be cast to the specified <em>type</em>; otherwise, it ret=
urns <code class=3D"docutils literal notranslate"><span class=3D"pre">false=
</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">as<=
/span></code> operator performs a cast when it is known at compile time tha=
t the cast always succeeds, such as upcasting or bridging. Upcasting lets y=
ou use an expression as an instance of its type=E2=80=99s supertype, withou=
t using an intermediate variable. The following approaches are equivalent:<=
/p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">f</span>(<span class=3D"k">_</span> <span clas=
s=3D"nv">any</span>: <span class=3D"k">Any</span>) { <span class=3D"nv">pri=
nt</span>(<span class=3D"s">"Function for Any"</span>) }
</li><li><span class=3D"k">func</span> <span class=3D"nv">f</span>(<span cl=
ass=3D"k">_</span> <span class=3D"nv">int</span>: <span class=3D"nc">Int</s=
pan>) { <span class=3D"nv">print</span>(<span class=3D"s">"Function for Int=
"</span>) }
</li><li><span class=3D"k">let</span> <span class=3D"nv">x</span> =3D <span=
 class=3D"m">10</span>
</li><li><span class=3D"nv">f</span>(<span class=3D"nv">x</span>)
</li><li><span class=3D"c">// Prints "Function for Int"</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">y</span>: <span cl=
ass=3D"k">Any</span> =3D <span class=3D"nv">x</span>
</li><li><span class=3D"nv">f</span>(<span class=3D"nv">y</span>)
</li><li><span class=3D"c">// Prints "Function for Any"</span>
</li><li>
</li><li><span class=3D"nv">f</span>(<span class=3D"nv">x</span> <span clas=
s=3D"k">as</span> <span class=3D"k">Any</span>)
</li><li><span class=3D"c">// Prints "Function for Any"</span>
</li></ol></div></div></div>
<p>Bridging lets you use an expression of a Swift standard library type suc=
h as <code class=3D"docutils literal notranslate"><span class=3D"pre">Strin=
g</span></code> as its corresponding Foundation type such as <code class=3D=
"docutils literal notranslate"><span class=3D"pre">NSString</span></code> w=
ithout needing to create a new instance. For more information on bridging, =
see <a class=3D"reference external" href=3D"https://developer.apple.com/doc=
umentation/swift/imported_c_and_objective_c_apis/working_with_foundation_ty=
pes">Working with Foundation Types</a>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">as?=
</span></code> operator performs a conditional cast of the <em>expression</=
em> to the specified <em>type</em>. The <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">as?</span></code> operator returns an optiona=
l of the specified <em>type</em>. At runtime, if the cast succeeds, the val=
ue of <em>expression</em> is wrapped in an optional and returned; otherwise=
, the value returned is <code class=3D"docutils literal notranslate"><span =
class=3D"pre">nil</span></code>. If casting to the specified <em>type</em> =
is guaranteed to fail or is guaranteed to succeed, a compile-time error is =
raised.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">as!=
</span></code> operator performs a forced cast of the <em>expression</em> t=
o the specified <em>type</em>. The <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">as!</span></code> operator returns a value of the =
specified <em>type</em>, not an optional type. If the cast fails, a runtime=
 error is raised. The behavior of <code class=3D"docutils literal notransla=
te"><span class=3D"pre">x</span> <span class=3D"pre">as!</span> <span class=
=3D"pre">T</span></code> is the same as the behavior of <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">(x</span> <span class=3D"pre"=
>as?</span> <span class=3D"pre">T)!</span></code>.</p>
<p>For more information about type casting and to see examples that use the=
 type-casting operators, see <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/TypeCasting.html"><span class=3D"=
doc">Type Casting</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a type-casting operator</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_type-casting-ope=
rator"></a>type-casting-operator</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <code>is</code> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_type">type</a>=
</span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_type-casting-operator_1062"></a>type-casting-operator</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <code>as</code> <span class=3D"syntac=
tic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
Types.html#grammar_type">type</a></span> </p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_type-casting-operator_1063"></a>=
type-casting-operator</span><span class=3D"arrow"> =E2=86=92 </span> <code>=
as</code> <code>?</code> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_type">type=
</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a =
id=3D"grammar_type-casting-operator_1064"></a>type-casting-operator</span><=
span class=3D"arrow"> =E2=86=92 </span> <code>as</code> <code>!</code> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Types.html#grammar_type">type</a></span> </p></div></div><=
/div>
</div>
<div class=3D"section" id=3D"ID389">
<h2>Primary Expressions<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID389" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p><em>Primary expressions</em> are the most basic kind of expression. They=
 can be used as expressions on their own, and they can be combined with oth=
er tokens to make prefix expressions, binary expressions, and postfix expre=
ssions.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a primary expression</p><div class=3D"syntax-group"><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_primary-expression"=
></a>primary-expression</span><span class=3D"arrow"> =E2=86=92 </span> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/LexicalStructure.html#grammar_identifier">identifier</a></=
span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/GenericParametersAndArguments.html#grammar_gene=
ric-argument-clause">generic-argument-clause</a></span> <sub>opt</sub></p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_pri=
mary-expression_1065"></a>primary-expression</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_literal-exp=
ression">literal-expression</a></span> </p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_primary-expression_1066"></a>prima=
ry-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Expressions.html#grammar_self-expression">self-expression</a></span>=
 </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_primary-expression_1067"></a>primary-expression</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_superc=
lass-expression">superclass-expression</a></span> </p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_primary-expression_1068=
"></a>primary-expression</span><span class=3D"arrow"> =E2=86=92 </span> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/Expressions.html#grammar_closure-expression">closure-expr=
ession</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-nam=
e"><a id=3D"grammar_primary-expression_1069"></a>primary-expression</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.ht=
ml#grammar_parenthesized-expression">parenthesized-expression</a></span> </=
p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_=
primary-expression_1070"></a>primary-expression</span><span class=3D"arrow"=
> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_tuple-exp=
ression">tuple-expression</a></span> </p><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_primary-expression_1071"></a>primary=
-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Expressions.html#grammar_implicit-member-expression">implicit-member-e=
xpression</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-=
name"><a id=3D"grammar_primary-expression_1072"></a>primary-expression</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions=
.html#grammar_wildcard-expression">wildcard-expression</a></span> </p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_primary=
-expression_1073"></a>primary-expression</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Expressions.html#grammar_key-path-expre=
ssion">key-path-expression</a></span> </p><p class=3D"syntax-def"><span cla=
ss=3D"syntax-def-name"><a id=3D"grammar_primary-expression_1074"></a>primar=
y-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Expressions.html#grammar_selector-expression">selector-expression</a>=
</span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_primary-expression_1075"></a>primary-expression</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gram=
mar_key-path-string-expression">key-path-string-expression</a></span> </p><=
/div></div><div class=3D"section" id=3D"ID390">
<h3>Literal Expression<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Expressions.html#ID390" title=3D"Permalink to =
this headline">=C2=B6</a></h3>
<p>A <em>literal expression</em> consists of either an ordinary literal (su=
ch as a string or a number), an array or dictionary literal, a playground l=
iteral, or one of the following special literals:</p>
<table border=3D"1" class=3D"docutils">
<colgroup>
<col width=3D"14%">
<col width=3D"21%">
<col width=3D"65%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">Literal</th>
<th class=3D"head">Type</th>
<th class=3D"head">Value</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">#file</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">String=
</span></code></td>
<td>The name of the file in which it appears.</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">#line</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code></td>
<td>The line number on which it appears.</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">#column</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code></td>
<td>The column number in which it begins.</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">#function</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">String=
</span></code></td>
<td>The name of the declaration in which it appears.</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">#dsohandle</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">Unsafe=
RawPointer</span></code></td>
<td>The DSO (dynamic shared object) handle in use where it appears.</td>
</tr>
</tbody>
</table>
<p>Inside a function, the value of <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">#function</span></code> is the name of that functi=
on, inside a method it is the name of that method, inside a property getter=
 or setter it is the name of that property, inside special members like <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">init</span></=
code> or <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
ubscript</span></code> it is the name of that keyword, and at the top level=
 of a file it is the name of the current module.</p>
<p>When used as the default value of a function or method parameter, the sp=
ecial literal=E2=80=99s value is determined when the default value expressi=
on is evaluated at the call site.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">logFunctionName</span>(<span class=3D"nv">stri=
ng</span>: <span class=3D"nc">String</span> =3D <span class=3D"k">#function=
</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">string</spa=
n>)
</li><li>}
</li><li><span class=3D"k">func</span> <span class=3D"nv">myFunction</span>=
() {
</li><li>    <span class=3D"nv">logFunctionName</span>() <span class=3D"c">=
// Prints "myFunction()".</span>
</li><li>}
</li></ol></div></div></div>
<p>An <em>array literal</em> is an ordered collection of values. It has the=
 following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>[<spa=
n class=3D"gi">value 1</span>, <span class=3D"gi">value 2</span>, <span cla=
ss=3D"gi">...</span>]
</li></ol></div></div></div>
<p>The last expression in the array can be followed by an optional comma. T=
he value of an array literal has type <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">[T]</span></code>, where <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">T</span></code> is the type of t=
he expressions inside it. If there are expressions of multiple types, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">T</span></code>=
 is their closest common supertype. Empty array literals are written using =
an empty pair of square brackets and can be used to create an empty array o=
f a specified type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">emptyArray</span>: [<span class=3D"nc">Double</=
span>] =3D []
</li></ol></div></div></div>
<p>A <em>dictionary literal</em> is an unordered collection of key-value pa=
irs. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>[<spa=
n class=3D"gi">key 1</span>: <span class=3D"gi">value 1</span>, <span class=
=3D"gi">key 2</span>: <span class=3D"gi">value 2</span>, <span class=3D"gi"=
>...</span>]
</li></ol></div></div></div>
<p>The last expression in the dictionary can be followed by an optional com=
ma. The value of a dictionary literal has type <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">[Key:</span> <span class=3D"pre">Value=
]</span></code>, where <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Key</span></code> is the type of its key expressions and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Value</span></c=
ode> is the type of its value expressions. If there are expressions of mult=
iple types, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Key</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Value</span></code> are the closest common supertype for thei=
r respective values. An empty dictionary literal is written as a colon insi=
de a pair of brackets (<code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">[:]</span></code>) to distinguish it from an empty array liter=
al. You can use an empty dictionary literal to create an empty dictionary l=
iteral of specified key and value types.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">emptyDictionary</span>: [<span class=3D"nc">Str=
ing</span>: <span class=3D"nc">Double</span>] =3D [:]
</li></ol></div></div></div>
<p>A <em>playground literal</em> is used by Xcode to create an interactive =
representation of a color, file, or image within the program editor. Playgr=
ound literals in plain text outside of Xcode are represented using a specia=
l literal syntax.</p>
<p>For information on using playground literals in Xcode, see <a class=3D"r=
eference external" href=3D"https://help.apple.com/xcode/mac/current/#/dev4c=
60242fc">Add a color, file, or image literal</a> in Xcode Help.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a literal expression</p><div class=3D"syntax-group"><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_literal-expression"=
></a>literal-expression</span><span class=3D"arrow"> =E2=86=92 </span> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/LexicalStructure.html#grammar_literal">literal</a></span> =
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_literal-expression_1076"></a>literal-expression</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_array-l=
iteral">array-literal</a></span>  |  <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#=
grammar_dictionary-literal">dictionary-literal</a></span>  |  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_playground-literal">playground-literal</=
a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_literal-expression_1077"></a>literal-expression</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <code>#file</code> |  <code>#line</code> | =
 <code>#column</code> |  <code>#function</code> |  <code>#dsohandle</code><=
/p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_array-literal"></a>array-literal</span><=
span class=3D"arrow"> =E2=86=92 </span> <code>[</code> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Expressions.html#grammar_array-literal-items">array-literal-items</a></spa=
n> <sub>opt</sub> <code>]</code></p><p class=3D"syntax-def"><span class=3D"=
syntax-def-name"><a id=3D"grammar_array-literal-items"></a>array-literal-it=
ems</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Exp=
ressions.html#grammar_array-literal-item">array-literal-item</a></span>  <c=
ode>,</code><sub>opt</sub> |  <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar=
_array-literal-item">array-literal-item</a></span>  <code>,</code> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Expressions.html#grammar_array-literal-items">array-literal-it=
ems</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_array-literal-item"></a>array-literal-item</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gram=
mar_expression">expression</a></span> </p></div><div class=3D"syntax-group"=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_d=
ictionary-literal"></a>dictionary-literal</span><span class=3D"arrow"> =E2=
=86=92 </span> <code>[</code> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar=
_dictionary-literal-items">dictionary-literal-items</a></span>  <code>]</co=
de> |  <code>[</code> <code>:</code> <code>]</code></p><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_dictionary-literal-ite=
ms"></a>dictionary-literal-items</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#grammar_dictionary-literal-item"=
>dictionary-literal-item</a></span>  <code>,</code><sub>opt</sub> |  <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Expressions.html#grammar_dictionary-literal-item">dictionary=
-literal-item</a></span>  <code>,</code> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.h=
tml#grammar_dictionary-literal-items">dictionary-literal-items</a></span> <=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_dictionary-literal-item"></a>dictionary-literal-item</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_exp=
ression">expression</a></span>  <code>:</code> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Express=
ions.html#grammar_expression">expression</a></span> </p></div><div class=3D=
"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a i=
d=3D"grammar_playground-literal"></a>playground-literal</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>#colorLiteral</code> <code>(</code> <co=
de>red</code> <code>:</code> <span class=3D"syntactic-category"><a href=3D"=
https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_=
expression">expression</a></span>  <code>,</code> <code>green</code> <code>=
:</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#grammar_expression">expressi=
on</a></span>  <code>,</code> <code>blue</code> <code>:</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_expression">expression</a></span>  <code=
>,</code> <code>alpha</code> <code>:</code> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expression=
s.html#grammar_expression">expression</a></span>  <code>)</code></p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_playgroun=
d-literal_1078"></a>playground-literal</span><span class=3D"arrow"> =E2=86=
=92 </span> <code>#fileLiteral</code> <code>(</code> <code>resourceName</co=
de> <code>:</code> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_expression=
">expression</a></span>  <code>)</code></p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_playground-literal_1079"></a>playg=
round-literal</span><span class=3D"arrow"> =E2=86=92 </span> <code>#imageLi=
teral</code> <code>(</code> <code>resourceName</code> <code>:</code> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Expressions.html#grammar_expression">expression</a></span>  =
<code>)</code></p></div></div></div>
<div class=3D"section" id=3D"ID391">
<h3>Self Expression<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#ID391" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sel=
f</span></code> expression is an explicit reference to the current type or =
instance of the type in which it occurs. It has the following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">self</span>
</li><li><span class=3D"k">self</span>.<span class=3D"gi">member name</span=
>
</li><li><span class=3D"k">self</span>[<span class=3D"gi">subscript index</=
span>]
</li><li><span class=3D"k">self</span>(<span class=3D"gi">initializer argum=
ents</span>)
</li><li><span class=3D"k">self</span>.<span class=3D"nv">init</span>(<span=
 class=3D"gi">initializer arguments</span>)
</li></ol></div></div></div>
<p>In an initializer, subscript, or instance method, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">self</span></code> refers to the=
 current instance of the type in which it occurs. In a type method, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">self</span></code=
> refers to the current type in which it occurs.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sel=
f</span></code> expression is used to specify scope when accessing members,=
 providing disambiguation when there is another variable of the same name i=
n scope, such as a function parameter. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">greeting</span=
>: <span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">greeting</spa=
n>: <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">greeting<=
/span> =3D <span class=3D"nv">greeting</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>In a mutating method of a value type, you can assign a new instance of t=
hat value type to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">self</span></code>. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Point</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">x</span> =3D <=
span class=3D"m">0.0</span>, <span class=3D"nv">y</span> =3D <span class=3D=
"m">0.0</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">moveBy</span>(<span class=3D"nv">x</span> <span class=
=3D"nv">deltaX</span>: <span class=3D"nc">Double</span>, <span class=3D"nv"=
>y</span> <span class=3D"nv">deltaY</span>: <span class=3D"nc">Double</span=
>) {
</li><li>        <span class=3D"k">self</span> =3D <span class=3D"nv">Point=
</span>(<span class=3D"nv">x</span>: <span class=3D"nv">x</span> + <span cl=
ass=3D"nv">deltaX</span>, <span class=3D"nv">y</span>: <span class=3D"nv">y=
</span> + <span class=3D"nv">deltaY</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a self expression</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_self-expression"></a>s=
elf-expression</span><span class=3D"arrow"> =E2=86=92 </span> <code>self</c=
ode> |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Expressions.html#grammar_self-method-expressio=
n">self-method-expression</a></span>  |  <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.h=
tml#grammar_self-subscript-expression">self-subscript-expression</a></span>=
  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#grammar_self-initializer-express=
ion">self-initializer-expression</a></span> </p></div><div class=3D"syntax-=
group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_self-method-expression"></a>self-method-expression</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>self</code> <code>.</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_identifier">identifier</a></span> <=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_self-subscript-expression"></a>self-subscript-expression</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>self</code> <code>[</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_function-call-argument-list">function-ca=
ll-argument-list</a></span>  <code>]</code></p><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_self-initializer-expression"><=
/a>self-initializer-expression</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <code>self</code> <code>.</code> <code>init</code></p></div></div></div>
<div class=3D"section" id=3D"ID392">
<h3>Superclass Expression<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Expressions.html#ID392" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>A <em>superclass expression</em> lets a class interact with its supercla=
ss. It has one of the following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">super</span>.<span class=3D"gi">member name</span>
</li><li><span class=3D"k">super</span>[<span class=3D"gi">subscript index<=
/span>]
</li><li><span class=3D"k">super</span>.<span class=3D"nv">init</span>(<spa=
n class=3D"gi">initializer arguments</span>)
</li></ol></div></div></div>
<p>The first form is used to access a member of the superclass. The second =
form is used to access the superclass=E2=80=99s subscript implementation. T=
he third form is used to access an initializer of the superclass.</p>
<p>Subclasses can use a superclass expression in their implementation of me=
mbers, subscripting, and initializers to make use of the implementation in =
their superclass.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a superclass expression</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_superclass-expre=
ssion"></a>superclass-expression</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#grammar_superclass-method-expres=
sion">superclass-method-expression</a></span>  |  <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expr=
essions.html#grammar_superclass-subscript-expression">superclass-subscript-=
expression</a></span>  |  <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_sup=
erclass-initializer-expression">superclass-initializer-expression</a></span=
> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_superclass-method-expression"></a>sup=
erclass-method-expression</span><span class=3D"arrow"> =E2=86=92 </span> <c=
ode>super</code> <code>.</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_identifier">identifier</a></span> </p><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_superclass-subscript-expressio=
n"></a>superclass-subscript-expression</span><span class=3D"arrow"> =E2=86=
=92 </span> <code>super</code> <code>[</code> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressi=
ons.html#grammar_function-call-argument-list">function-call-argument-list</=
a></span>  <code>]</code></p><p class=3D"syntax-def"><span class=3D"syntax-=
def-name"><a id=3D"grammar_superclass-initializer-expression"></a>superclas=
s-initializer-expression</span><span class=3D"arrow"> =E2=86=92 </span> <co=
de>super</code> <code>.</code> <code>init</code></p></div></div></div>
<div class=3D"section" id=3D"ID393">
<h3>Closure Expression<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Expressions.html#ID393" title=3D"Permalink to =
this headline">=C2=B6</a></h3>
<p>A <em>closure expression</em> creates a closure, also known as a <em>lam=
bda</em> or an <em>anonymous function</em> in other programming languages. =
Like a function declaration, a closure contains statements, and it captures=
 constants and variables from its enclosing scope. It has the following for=
m:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>{ (<s=
pan class=3D"gi">parameters</span>) -&gt; <span class=3D"gi">return type</s=
pan> <span class=3D"k">in</span>
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>parameters</em> have the same form as the parameters in a functi=
on declaration, as described in <a class=3D"reference internal" href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362"><sp=
an class=3D"std std-ref">Function Declaration</span></a>.</p>
<p>There are several special forms that allow closures to be written more c=
oncisely:</p>
<ul class=3D"simple">
<li>A closure can omit the types of its parameters, its return type, or bot=
h. If you omit the parameter names and both types, omit the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">in</span></code> keyword =
before the statements. If the omitted types can=E2=80=99t be inferred, a co=
mpile-time error is raised.</li>
<li>A closure may omit names for its parameters. Its parameters are then im=
plicitly named <code class=3D"docutils literal notranslate"><span class=3D"=
pre">$</span></code> followed by their position: <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">$0</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">$1</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">$2</span></code>, an=
d so on.</li>
<li>A closure that consists of only a single expression is understood to re=
turn the value of that expression. The contents of this expression are also=
 considered when performing type inference on the surrounding expression.</=
li>
</ul>
<p>The following closure expressions are equivalent:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">m=
yFunction</span> { (<span class=3D"nv">x</span>: <span class=3D"nc">Int</sp=
an>, <span class=3D"nv">y</span>: <span class=3D"nc">Int</span>) -&gt; <spa=
n class=3D"nc">Int</span> <span class=3D"k">in</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">x</span> + =
<span class=3D"nv">y</span>
</li><li>}
</li><li>
</li><li><span class=3D"nv">myFunction</span> { <span class=3D"nv">x</span>=
, <span class=3D"nv">y</span> <span class=3D"k">in</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">x</span> + =
<span class=3D"nv">y</span>
</li><li>}
</li><li>
</li><li><span class=3D"nv">myFunction</span> { <span class=3D"k">return</s=
pan> <span class=3D"nv">$0</span> + <span class=3D"nv">$1</span> }
</li><li>
</li><li><span class=3D"nv">myFunction</span> { <span class=3D"nv">$0</span=
> + <span class=3D"nv">$1</span> }
</li></ol></div></div></div>
<p>For information about passing a closure as an argument to a function, se=
e <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Expressions.html#ID398"><span class=3D"std std-ref">Functi=
on Call Expression</span></a>.</p>
<p>Closure expressions can be used without being stored in a variable or co=
nstant, such as when you immediately use a closure as part of a function ca=
ll. The closure expressions passed to <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">myFunction</span></code> in code above are exam=
ples of this kind of immediate use. As a result, whether a closure expressi=
on is escaping or nonescaping depends on the surrounding context of the exp=
ression. A closure expression is nonescaping if it is called immediately or=
 passed as a nonescaping function argument. Otherwise, the closure expressi=
on is escaping.</p>
<p>For more information about escaping closures, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.=
html#ID546"><span class=3D"std std-ref">Escaping Closures</span></a>.</p>
<div class=3D"section" id=3D"ID544">
<h4>Capture Lists<a class=3D"headerlink" href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Expressions.html#ID544" title=3D"Permalink to this =
headline">=C2=B6</a></h4>
<p>By default, a closure expression captures constants and variables from i=
ts surrounding scope with strong references to those values. You can use a =
<em>capture list</em> to explicitly control how values are captured in a cl=
osure.</p>
<p>A capture list is written as a comma-separated list of expressions surro=
unded by square brackets, before the list of parameters. If you use a captu=
re list, you must also use the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">in</span></code> keyword, even if you omit the paramet=
er names, parameter types, and return type.</p>
<p>The entries in the capture list are initialized when the closure is crea=
ted. For each entry in the capture list, a constant is initialized to the v=
alue of the constant or variable that has the same name in the surrounding =
scope. For example in the code below, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">a</span></code> is included in the capture list=
 but <code class=3D"docutils literal notranslate"><span class=3D"pre">b</sp=
an></code> is not, which gives them different behavior.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">a</span> =3D <span class=3D"m">0</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">b</span> =3D <span=
 class=3D"m">0</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">closure</span> =3D=
 { [<span class=3D"nv">a</span>] <span class=3D"k">in</span>
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">a</span>, <=
span class=3D"nv">b</span>)
</li><li>}
</li><li>
</li><li><span class=3D"nv">a</span> =3D <span class=3D"m">10</span>
</li><li><span class=3D"nv">b</span> =3D <span class=3D"m">10</span>
</li><li><span class=3D"nv">closure</span>()
</li><li><span class=3D"c">// Prints "0 10"</span>
</li></ol></div></div></div>
<p>There are two different things named <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">a</span></code>, the variable in the surround=
ing scope and the constant in the closure=E2=80=99s scope, but only one var=
iable named <code class=3D"docutils literal notranslate"><span class=3D"pre=
">b</span></code>. The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">a</span></code> in the inner scope is initialized with the val=
ue of the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
a</span></code> in the outer scope when the closure is created, but their v=
alues are not connected in any special way. This means that a change to the=
 value of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
a</span></code> in the outer scope does not affect the value of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">a</span></code> in th=
e inner scope, nor does a change to <code class=3D"docutils literal notrans=
late"><span class=3D"pre">a</span></code> inside the closure affect the val=
ue of <code class=3D"docutils literal notranslate"><span class=3D"pre">a</s=
pan></code> outside the closure. In contrast, there is only one variable na=
med <code class=3D"docutils literal notranslate"><span class=3D"pre">b</spa=
n></code>=E2=80=94the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">b</span></code> in the outer scope=E2=80=94so changes from insi=
de or outside the closure are visible in both places.</p>
<p>This distinction is not visible when the captured variable=E2=80=99s typ=
e has reference semantics. For example, there are two things named <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">x</span></code> in=
 the code below, a variable in the outer scope and a constant in the inner =
scope, but they both refer to the same object because of reference semantic=
s.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SimpleClass</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">value</span>: =
<span class=3D"nc">Int</span> =3D <span class=3D"m">0</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">x</span> =3D <span=
 class=3D"nv">SimpleClass</span>()
</li><li><span class=3D"k">var</span> <span class=3D"nv">y</span> =3D <span=
 class=3D"nv">SimpleClass</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">closure</span> =3D=
 { [<span class=3D"nv">x</span>] <span class=3D"k">in</span>
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">x</span>.<s=
pan class=3D"nv">value</span>, <span class=3D"nv">y</span>.<span class=3D"n=
v">value</span>)
</li><li>}
</li><li>
</li><li><span class=3D"nv">x</span>.<span class=3D"nv">value</span> =3D <s=
pan class=3D"m">10</span>
</li><li><span class=3D"nv">y</span>.<span class=3D"nv">value</span> =3D <s=
pan class=3D"m">10</span>
</li><li><span class=3D"nv">closure</span>()
</li><li><span class=3D"c">// Prints "10 10"</span>
</li></ol></div></div></div>
<p>If the type of the expression=E2=80=99s value is a class, you can mark t=
he expression in a capture list with <code class=3D"docutils literal notran=
slate"><span class=3D"pre">weak</span></code> or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">unowned</span></code> to capture a w=
eak or unowned reference to the expression=E2=80=99s value.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">m=
yFunction</span> { <span class=3D"nv">print</span>(<span class=3D"k">self</=
span>.<span class=3D"nv">title</span>) }                    <span class=3D"=
c">// implicit strong capture</span>
</li><li><span class=3D"nv">myFunction</span> { [<span class=3D"k">self</sp=
an>] <span class=3D"k">in</span> <span class=3D"nv">print</span>(<span clas=
s=3D"k">self</span>.<span class=3D"nv">title</span>) }          <span class=
=3D"c">// explicit strong capture</span>
</li><li><span class=3D"nv">myFunction</span> { [<span class=3D"k">weak</sp=
an> <span class=3D"k">self</span>] <span class=3D"k">in</span> <span class=
=3D"nv">print</span>(<span class=3D"k">self</span>!.<span class=3D"nv">titl=
e</span>) }    <span class=3D"c">// weak capture</span>
</li><li><span class=3D"nv">myFunction</span> { [<span class=3D"k">unowned<=
/span> <span class=3D"k">self</span>] <span class=3D"k">in</span> <span cla=
ss=3D"nv">print</span>(<span class=3D"k">self</span>.<span class=3D"nv">tit=
le</span>) }  <span class=3D"c">// unowned capture</span>
</li></ol></div></div></div>
<p>You can also bind an arbitrary expression to a named value in a capture =
list. The expression is evaluated when the closure is created, and the valu=
e is captured with the specified strength. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 Weak capture of "self.parent" as "parent"</span>
</li><li><span class=3D"nv">myFunction</span> { [<span class=3D"k">weak</sp=
an> <span class=3D"nv">parent</span> =3D <span class=3D"k">self</span>.<spa=
n class=3D"nv">parent</span>] <span class=3D"k">in</span> <span class=3D"nv=
">print</span>(<span class=3D"nv">parent</span>!.<span class=3D"nv">title</=
span>) }
</li></ol></div></div></div>
<p>For more information and examples of closure expressions, see <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/Closures.html#ID95"><span class=3D"std std-ref">Closure Expressions</s=
pan></a>. For more information and examples of capture lists, see <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/AutomaticReferenceCounting.html#ID57"><span class=3D"std std-ref">Reso=
lving Strong Reference Cycles for Closures</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a closure expression</p><div class=3D"syntax-group"><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_closure-expression"=
></a>closure-expression</span><span class=3D"arrow"> =E2=86=92 </span> <cod=
e>{</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Expressions.html#grammar_closure-signature"=
>closure-signature</a></span> <sub>opt</sub> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statement=
s.html#grammar_statements">statements</a></span> <sub>opt</sub> <code>}</co=
de></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_closure-signature"></a>closure-signa=
ture</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Ex=
pressions.html#grammar_capture-list">capture-list</a></span> <sub>opt</sub>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Expressions.html#grammar_closure-parameter-clause">cl=
osure-parameter-clause</a></span>  <code>throws</code><sub>opt</sub> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_function-result">function-result</=
a></span> <sub>opt</sub> <code>in</code></p><p class=3D"syntax-def"><span c=
lass=3D"syntax-def-name"><a id=3D"grammar_closure-signature_1080"></a>closu=
re-signature</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Expressions.html#grammar_capture-list">capture-list</a></span>  <code=
>in</code></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_closure-parameter-clause"></a=
>closure-parameter-clause</span><span class=3D"arrow"> =E2=86=92 </span> <c=
ode>(</code> <code>)</code> |  <code>(</code> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressi=
ons.html#grammar_closure-parameter-list">closure-parameter-list</a></span> =
 <code>)</code> |  <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_ident=
ifier-list">identifier-list</a></span> </p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_closure-parameter-list"></a>closur=
e-parameter-list</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_closure-parameter">closure-parameter</a>=
</span>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#grammar_closure-parameter=
">closure-parameter</a></span>  <code>,</code> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Express=
ions.html#grammar_closure-parameter-list">closure-parameter-list</a></span>=
 </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_closure-parameter"></a>closure-parameter</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_closure-par=
ameter-name">closure-parameter-name</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.=
html#grammar_type-annotation">type-annotation</a></span> <sub>opt</sub></p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_cl=
osure-parameter_1081"></a>closure-parameter</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_closure-par=
ameter-name">closure-parameter-name</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.=
html#grammar_type-annotation">type-annotation</a></span>  <code>...</code><=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_closure-parameter-name"></a>closure-parameter-name</span><span class=3D"ar=
row"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_=
identifier">identifier</a></span> </p></div><div class=3D"syntax-group"><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_captu=
re-list"></a>capture-list</span><span class=3D"arrow"> =E2=86=92 </span> <c=
ode>[</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Expressions.html#grammar_capture-list-ite=
ms">capture-list-items</a></span>  <code>]</code></p><p class=3D"syntax-def=
"><span class=3D"syntax-def-name"><a id=3D"grammar_capture-list-items"></a>=
capture-list-items</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Expressions.html#grammar_capture-list-item">capture-list-item</=
a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Expressions.html#grammar_capture-list-it=
em">capture-list-item</a></span>  <code>,</code> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expre=
ssions.html#grammar_capture-list-items">capture-list-items</a></span> </p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_cap=
ture-list-item"></a>capture-list-item</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#grammar_capture-specifier=
">capture-specifier</a></span> <sub>opt</sub> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressi=
ons.html#grammar_expression">expression</a></span> </p><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_capture-specifier"></a=
>capture-specifier</span><span class=3D"arrow"> =E2=86=92 </span> <code>wea=
k</code> |  <code>unowned</code> |  <code>unowned(safe)</code> |  <code>uno=
wned(unsafe)</code></p></div></div></div>
</div>
<div class=3D"section" id=3D"ID394">
<h3>Implicit Member Expression<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Expressions.html#ID394" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>An <em>implicit member expression</em> is an abbreviated way to access a=
 member of a type, such as an enumeration case or a type method, in a conte=
xt where type inference can determine the implied type. It has the followin=
g form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>.<spa=
n class=3D"gi">member name</span>
</li></ol></div></div></div>
<p>For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">x</span> =3D <span class=3D"nv">MyEnumeration</=
span>.<span class=3D"nv">someValue</span>
</li><li><span class=3D"nv">x</span> =3D .<span class=3D"nv">anotherValue</=
span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a implicit member expression</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_implicit-m=
ember-expression"></a>implicit-member-expression</span><span class=3D"arrow=
"> =E2=86=92 </span> <code>.</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.h=
tml#grammar_identifier">identifier</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID395">
<h3>Parenthesized Expression<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Expressions.html#ID395" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>A <em>parenthesized expression</em> consists of an expression surrounded=
 by parentheses. You can use parentheses to specify the precedence of opera=
tions by explicitly grouping expressions. Grouping parentheses don=E2=80=99=
t change an expression=E2=80=99s type=E2=80=94for example, the type of <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">(1)</span></co=
de> is simply <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Int</span></code>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a parenthesized expression</p><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_parenthesized=
-expression"></a>parenthesized-expression</span><span class=3D"arrow"> =E2=
=86=92 </span> <code>(</code> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar=
_expression">expression</a></span>  <code>)</code></p></div></div></div>
<div class=3D"section" id=3D"ID552">
<h3>Tuple Expression<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Expressions.html#ID552" title=3D"Permalink to th=
is headline">=C2=B6</a></h3>
<p>A <em>tuple expression</em> consists of a comma-separated list of expres=
sions surrounded by parentheses. Each expression can have an optional ident=
ifier before it, separated by a colon (<code class=3D"docutils literal notr=
anslate"><span class=3D"pre">:</span></code>). It has the following form:</=
p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>(<spa=
n class=3D"gi">identifier 1</span>: <span class=3D"gi">expression 1</span>,=
 <span class=3D"gi">identifier 2</span>: <span class=3D"gi">expression 2</s=
pan>, <span class=3D"gi">...</span>)
</li></ol></div></div></div>
<p>A tuple expression can contain zero expressions, or it can contain two o=
r more expressions. A single expression inside parentheses is a parenthesiz=
ed expression.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Both an empty tuple expression and an empty tuple type ar=
e written <code class=3D"docutils literal notranslate"><span class=3D"pre">=
()</span></code> in Swift. Because <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Void</span></code> is a type alias for <code class=
=3D"docutils literal notranslate"><span class=3D"pre">()</span></code>, you=
 can use it to write an empty tuple type. However, like all type aliases, <=
code class=3D"docutils literal notranslate"><span class=3D"pre">Void</span>=
</code> is always a type=E2=80=94you can=E2=80=99t use it to write an empty=
 tuple expression.</p>
</div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a tuple expression</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_tuple-expression"></a=
>tuple-expression</span><span class=3D"arrow"> =E2=86=92 </span> <code>(</c=
ode> <code>)</code> |  <code>(</code> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html=
#grammar_tuple-element">tuple-element</a></span>  <code>,</code> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Expressions.html#grammar_tuple-element-list">tuple-element-list<=
/a></span>  <code>)</code></p><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_tuple-element-list"></a>tuple-element-list</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions=
.html#grammar_tuple-element">tuple-element</a></span>  |  <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Expressions.html#grammar_tuple-element">tuple-element</a></span>  <code=
>,</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html#grammar_tuple-element-list"=
>tuple-element-list</a></span> </p><p class=3D"syntax-def"><span class=3D"s=
yntax-def-name"><a id=3D"grammar_tuple-element"></a>tuple-element</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html=
#grammar_expression">expression</a></span>  |  <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexical=
Structure.html#grammar_identifier">identifier</a></span>  <code>:</code> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Expressions.html#grammar_expression">expression</a></spa=
n> </p></div></div></div>
<div class=3D"section" id=3D"ID396">
<h3>Wildcard Expression<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID396" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>A <em>wildcard expression</em> is used to explicitly ignore a value duri=
ng an assignment. For example, in the following assignment 10 is assigned t=
o <code class=3D"docutils literal notranslate"><span class=3D"pre">x</span>=
</code> and 20 is ignored:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li>(<span class=3D"nv">=
x</span>, <span class=3D"k">_</span>) =3D (<span class=3D"m">10</span>, <sp=
an class=3D"m">20</span>)
</li><li><span class=3D"c">// x is 10, and 20 is ignored</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a wildcard expression</p><div class=3D"syntax-group"><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_wildcard-expressio=
n"></a>wildcard-expression</span><span class=3D"arrow"> =E2=86=92 </span> <=
code>_</code></p></div></div></div>
<div class=3D"section" id=3D"ID563">
<h3>Key-Path Expression<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID563" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>A <em>key-path expression</em> refers to a property or subscript of a ty=
pe. You use key-path expressions in dynamic programming tasks, such as key-=
value observing. They have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>\<spa=
n class=3D"gi">type name</span>.<span class=3D"gi">path</span>
</li></ol></div></div></div>
<p>The <em>type name</em> is the name of a concrete type, including any gen=
eric parameters, such as <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">String</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">[Int]</span></code>, or <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Set&lt;Int&gt;</span></code>.</p>
<p>The <em>path</em> consists of property names, subscripts, optional-chain=
ing expressions, and forced unwrapping expressions. Each of these key-path =
components can be repeated as many times as needed, in any order.</p>
<p>At compile time, a key-path expression is replaced by an instance of the=
 <a class=3D"reference external" href=3D"https://developer.apple.com/docume=
ntation/swift/keypath"><code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">KeyPath</span></code></a> class.</p>
<p>To access a value using a key path, pass the key path to the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">subscript(keyPath:)</=
span></code> subscript, which is available on all types. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">SomeStructure</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">someValue</spa=
n>: <span class=3D"nc">Int</span>
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">s</span> =3D <span=
 class=3D"nv">SomeStructure</span>(<span class=3D"nv">someValue</span>: <sp=
an class=3D"m">12</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">pathToProperty</sp=
an> =3D \<span class=3D"nv">SomeStructure</span>.<span class=3D"nv">someVal=
ue</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">value</span> =3D <=
span class=3D"nv">s</span>[<span class=3D"nv">keyPath</span>: <span class=
=3D"nv">pathToProperty</span>]
</li><li><span class=3D"c">// value is 12</span>
</li></ol></div></div></div>
<p>The <em>type name</em> can be omitted in contexts where type inference c=
an determine the implied type. The following code uses <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">\.someProperty</span></code> i=
nstead of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
\SomeClass.someProperty</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span>: <span class=3D"nc">NSObject=
</span> {
</li><li>    <span class=3D"k">@objc</span> <span class=3D"k">var</span> <s=
pan class=3D"nv">someProperty</span>: <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">someProperty<=
/span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">somePrope=
rty</span> =3D <span class=3D"nv">someProperty</span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">c</span> =3D <span=
 class=3D"nv">SomeClass</span>(<span class=3D"nv">someProperty</span>: <spa=
n class=3D"m">10</span>)
</li><li><span class=3D"nv">c</span>.<span class=3D"nv">observe</span>(\.<s=
pan class=3D"nv">someProperty</span>) { <span class=3D"nv">object</span>, <=
span class=3D"nv">change</span> <span class=3D"k">in</span>
</li><li>    <span class=3D"c">// ...</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>path</em> can refer to <code class=3D"docutils literal notransla=
te"><span class=3D"pre">self</span></code> to create the identity key path =
(<code class=3D"docutils literal notranslate"><span class=3D"pre">\.self</s=
pan></code>). The identity key path refers to a whole instance, so you can =
use it to access and change all of the data stored in a variable in a singl=
e step. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">compoundValue</span> =3D (<span class=3D"nv">a<=
/span>: <span class=3D"m">1</span>, <span class=3D"nv">b</span>: <span clas=
s=3D"m">2</span>)
</li><li><span class=3D"c">// Equivalent to compoundValue =3D (a: 10, b: 20=
)</span>
</li><li><span class=3D"nv">compoundValue</span>[<span class=3D"nv">keyPath=
</span>: \.<span class=3D"k">self</span>] =3D (<span class=3D"nv">a</span>:=
 <span class=3D"m">10</span>, <span class=3D"nv">b</span>: <span class=3D"m=
">20</span>)
</li></ol></div></div></div>
<p>The <em>path</em> can contain multiple property names, separated by peri=
ods, to refer to a property of a property=E2=80=99s value. This code uses t=
he key path expression <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">\OuterStructure.outer.someValue</span></code> to access the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">someValue</s=
pan></code> property of the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">OuterStructure</span></code> type=E2=80=99s <code class=
=3D"docutils literal notranslate"><span class=3D"pre">outer</span></code> p=
roperty:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">OuterStructure</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">outer</span>: =
<span class=3D"nc">SomeStructure</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">someValue</sp=
an>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">outer</sp=
an> =3D <span class=3D"nv">SomeStructure</span>(<span class=3D"nv">someValu=
e</span>: <span class=3D"nv">someValue</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">nested</span> =3D =
<span class=3D"nv">OuterStructure</span>(<span class=3D"nv">someValue</span=
>: <span class=3D"m">24</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">nestedKeyPath</spa=
n> =3D \<span class=3D"nv">OuterStructure</span>.<span class=3D"nv">outer</=
span>.<span class=3D"nv">someValue</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">nestedValue</span>=
 =3D <span class=3D"nv">nested</span>[<span class=3D"nv">keyPath</span>: <s=
pan class=3D"nv">nestedKeyPath</span>]
</li><li><span class=3D"c">// nestedValue is 24</span>
</li></ol></div></div></div>
<p>The <em>path</em> can include subscripts using brackets, as long as the =
subscript=E2=80=99s parameter type conforms to the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Hashable</span></code> protocol. T=
his example uses a subscript in a key path to access the second element of =
an array:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">greetings</span> =3D [<span class=3D"s">"hello"=
</span>, <span class=3D"s">"hola"</span>, <span class=3D"s">"bonjour"</span=
>, <span class=3D"s">"=EC=95=88=EB=85=95"</span>]
</li><li><span class=3D"k">let</span> <span class=3D"nv">myGreeting</span> =
=3D <span class=3D"nv">greetings</span>[<span class=3D"nv">keyPath</span>: =
\[<span class=3D"nv">String</span>].[<span class=3D"m">1</span>]]
</li><li><span class=3D"c">// myGreeting is 'hola'</span>
</li></ol></div></div></div>
<p>The value used in a subscript can be a named value or a literal. Values =
are captured in key paths using value semantics. The following code uses th=
e variable <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>index</span></code> in both a key-path expression and in a closure to acce=
ss the third element of the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">greetings</span></code> array. When <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">index</span></code> is modified=
, the key-path expression still references the third element, while the clo=
sure uses the new index.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">index</span> =3D <span class=3D"m">2</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">path</span> =3D \[=
<span class=3D"nv">String</span>].[<span class=3D"nv">index</span>]
</li><li><span class=3D"k">let</span> <span class=3D"nv">fn</span>: ([<span=
 class=3D"nc">String</span>]) -&gt; <span class=3D"nc">String</span> =3D { =
<span class=3D"nv">strings</span> <span class=3D"k">in</span> <span class=
=3D"nv">strings</span>[<span class=3D"nv">index</span>] }
</li><li>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">greetings</span=
>[<span class=3D"nv">keyPath</span>: <span class=3D"nv">path</span>])
</li><li><span class=3D"c">// Prints "bonjour"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">fn</span>(<span=
 class=3D"nv">greetings</span>))
</li><li><span class=3D"c">// Prints "bonjour"</span>
</li><li>
</li><li><span class=3D"c">// Setting 'index' to a new value doesn't affect=
 'path'</span>
</li><li><span class=3D"nv">index</span> +=3D <span class=3D"m">1</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">greetings</span=
>[<span class=3D"nv">keyPath</span>: <span class=3D"nv">path</span>])
</li><li><span class=3D"c">// Prints "bonjour"</span>
</li><li>
</li><li><span class=3D"c">// Because 'fn' closes over 'index', it uses the=
 new value</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">fn</span>(<span=
 class=3D"nv">greetings</span>))
</li><li><span class=3D"c">// Prints "=EC=95=88=EB=85=95"</span>
</li></ol></div></div></div>
<p>The <em>path</em> can use optional chaining and forced unwrapping. This =
code uses optional chaining in a key path to access a property of an option=
al string:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">firstGreeting</span>: <span class=3D"nc">String=
</span>? =3D <span class=3D"nv">greetings</span>.<span class=3D"nv">first</=
span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">firstGreeting</=
span>?.<span class=3D"nv">count</span> <span class=3D"k">as</span> <span cl=
ass=3D"k">Any</span>)
</li><li><span class=3D"c">// Prints "Optional(5)"</span>
</li><li>
</li><li><span class=3D"c">// Do the same thing using a key path.</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">count</span> =3D <=
span class=3D"nv">greetings</span>[<span class=3D"nv">keyPath</span>: \[<sp=
an class=3D"nv">String</span>].<span class=3D"nv">first</span>?.<span class=
=3D"nv">count</span>]
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">count</span> <s=
pan class=3D"k">as</span> <span class=3D"k">Any</span>)
</li><li><span class=3D"c">// Prints "Optional(5)"</span>
</li></ol></div></div></div>
<p>You can mix and match components of key paths to access values that are =
deeply nested within a type. The following code accesses different values a=
nd properties of a dictionary of arrays by using key-path expressions that =
combine these components.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">interestingNumbers</span> =3D [<span class=3D"s=
">"prime"</span>: [<span class=3D"m">2</span>, <span class=3D"m">3</span>, =
<span class=3D"m">5</span>, <span class=3D"m">7</span>, <span class=3D"m">1=
1</span>, <span class=3D"m">13</span>, <span class=3D"m">17</span>],
</li><li>                          <span class=3D"s">"triangular"</span>: [=
<span class=3D"m">1</span>, <span class=3D"m">3</span>, <span class=3D"m">6=
</span>, <span class=3D"m">10</span>, <span class=3D"m">15</span>, <span cl=
ass=3D"m">21</span>, <span class=3D"m">28</span>],
</li><li>                          <span class=3D"s">"hexagonal"</span>: [<=
span class=3D"m">1</span>, <span class=3D"m">6</span>, <span class=3D"m">15=
</span>, <span class=3D"m">28</span>, <span class=3D"m">45</span>, <span cl=
ass=3D"m">66</span>, <span class=3D"m">91</span>]]
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">interestingNumb=
ers</span>[<span class=3D"nv">keyPath</span>: \[<span class=3D"nv">String</=
span>: [<span class=3D"nv">Int</span>]].[<span class=3D"s">"prime"</span>]]=
 <span class=3D"k">as</span> <span class=3D"k">Any</span>)
</li><li><span class=3D"c">// Prints "Optional([2, 3, 5, 7, 11, 13, 17])"</=
span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">interestingNumb=
ers</span>[<span class=3D"nv">keyPath</span>: \[<span class=3D"nv">String</=
span>: [<span class=3D"nv">Int</span>]].[<span class=3D"s">"prime"</span>]!=
[<span class=3D"m">0</span>]])
</li><li><span class=3D"c">// Prints "2"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">interestingNumb=
ers</span>[<span class=3D"nv">keyPath</span>: \[<span class=3D"nv">String</=
span>: [<span class=3D"nv">Int</span>]].[<span class=3D"s">"hexagonal"</spa=
n>]!.<span class=3D"nv">count</span>])
</li><li><span class=3D"c">// Prints "7"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">interestingNumb=
ers</span>[<span class=3D"nv">keyPath</span>: \[<span class=3D"nv">String</=
span>: [<span class=3D"nv">Int</span>]].[<span class=3D"s">"hexagonal"</spa=
n>]!.<span class=3D"nv">count</span>.<span class=3D"nv">bitWidth</span>])
</li><li><span class=3D"c">// Prints "64"</span>
</li></ol></div></div></div>
<p>For more information about using key paths in code that interacts with O=
bjective-C APIs, see <a class=3D"reference external" href=3D"https://develo=
per.apple.com/documentation/swift/using_objective_c_runtime_features_in_swi=
ft">Using Objective-C Runtime Features in Swift</a>. For information about =
key-value coding and key-value observing, see <a class=3D"reference externa=
l" href=3D"https://developer.apple.com/library/content/documentation/Cocoa/=
Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i">Key-Val=
ue Coding Programming Guide</a> and <a class=3D"reference external" href=3D=
"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual=
/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i">Ke=
y-Value Observing Programming Guide</a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a key-path expression</p><div class=3D"syntax-group"><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_key-path-expressio=
n"></a>key-path-expression</span><span class=3D"arrow"> =E2=86=92 </span> <=
code>\</code> <span class=3D"syntactic-category"><a href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Types.html#grammar_type">type</a></span>=
 <sub>opt</sub> <code>.</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gram=
mar_key-path-components">key-path-components</a></span> </p><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_key-path-componen=
ts"></a>key-path-components</span><span class=3D"arrow"> =E2=86=92 </span> =
<span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Expressions.html#grammar_key-path-component">key-path-=
component</a></span>  |  <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_key-=
path-component">key-path-component</a></span>  <code>.</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#grammar_key-path-components">key-path-components=
</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a =
id=3D"grammar_key-path-component"></a>key-path-component</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gr=
ammar_identifier">identifier</a></span>  <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.h=
tml#grammar_key-path-postfixes">key-path-postfixes</a></span> <sub>opt</sub=
> |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#grammar_key-path-postfixes">key-=
path-postfixes</a></span> </p></div><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_key-path-post=
fixes"></a>key-path-postfixes</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Expressions.html#grammar_key-path-postfix">key-path-=
postfix</a></span>  <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_key-path-=
postfixes">key-path-postfixes</a></span> <sub>opt</sub></p><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_key-path-postfix">=
</a>key-path-postfix</span><span class=3D"arrow"> =E2=86=92 </span> <code>?=
</code> |  <code>!</code> |  <code>self</code> |  <code>[</code> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Expressions.html#grammar_function-call-argument-list">function-c=
all-argument-list</a></span>  <code>]</code></p></div></div></div>
<div class=3D"section" id=3D"ID547">
<h3>Selector Expression<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID547" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>A selector expression lets you access the selector used to refer to a me=
thod or to a property=E2=80=99s getter or setter in Objective-C. It has the=
 following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#selector</span>(<span class=3D"gi">method name</span>)
</li><li><span class=3D"k">#selector</span>(<span class=3D"k">getter</span>=
: <span class=3D"gi">property name</span>)
</li><li><span class=3D"k">#selector</span>(<span class=3D"k">setter</span>=
: <span class=3D"gi">property name</span>)
</li></ol></div></div></div>
<p>The <em>method name</em> and <em>property name</em> must be a reference =
to a method or a property that is available in the Objective-C runtime. The=
 value of a selector expression is an instance of the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Selector</span></code> type. Fo=
r example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span>: <span class=3D"nc">NSObject=
</span> {
</li><li>    <span class=3D"k">@objc</span> <span class=3D"k">let</span> <s=
pan class=3D"nv">property</span>: <span class=3D"nc">String</span>
</li><li>    <span class=3D"k">@objc(doSomethingWithInt:)</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">doSomething</=
span>(<span class=3D"k">_</span> <span class=3D"nv">x</span>: <span class=
=3D"nc">Int</span>) {}
</li><li>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">property</spa=
n>: <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">property<=
/span> =3D <span class=3D"nv">property</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">selectorForMethod<=
/span> =3D <span class=3D"k">#selector</span>(<span class=3D"nv">SomeClass<=
/span>.<span class=3D"nv">doSomething</span>(<span class=3D"k">_</span>:))
</li><li><span class=3D"k">let</span> <span class=3D"nv">selectorForPropert=
yGetter</span> =3D <span class=3D"k">#selector</span>(<span class=3D"k">get=
ter</span>: <span class=3D"nv">SomeClass</span>.<span class=3D"nv">property=
</span>)
</li></ol></div></div></div>
<p>When creating a selector for a property=E2=80=99s getter, the <em>proper=
ty name</em> can be a reference to a variable or constant property. In cont=
rast, when creating a selector for a property=E2=80=99s setter, the <em>pro=
perty name</em> must be a reference to a variable property only.</p>
<p>The <em>method name</em> can contain parentheses for grouping, as well t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">as</spa=
n></code> operator to disambiguate between methods that share a name but ha=
ve different type signatures. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">SomeClass</span> {
</li><li>    <span class=3D"k">@objc(doSomethingWithString:)</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">doSomething</=
span>(<span class=3D"k">_</span> <span class=3D"nv">x</span>: <span class=
=3D"nc">String</span>) { }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">anotherSelector</s=
pan> =3D <span class=3D"k">#selector</span>(<span class=3D"nv">SomeClass</s=
pan>.<span class=3D"nv">doSomething</span>(<span class=3D"k">_</span>:) <sp=
an class=3D"k">as</span> (<span class=3D"nc">SomeClass</span>) -&gt; (<span=
 class=3D"nc">String</span>) -&gt; <span class=3D"nc">Void</span>)
</li></ol></div></div></div>
<p>Because a selector is created at compile time, not at runtime, the compi=
ler can check that a method or property exists and that they=E2=80=99re exp=
osed to the Objective-C runtime.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Although the <em>method name</em> and the <em>property na=
me</em> are expressions, they=E2=80=99re never evaluated.</p>
</div>
<p>For more information about using selectors in Swift code that interacts =
with Objective-C APIs, see <a class=3D"reference external" href=3D"https://=
developer.apple.com/documentation/swift/using_objective_c_runtime_features_=
in_swift">Using Objective-C Runtime Features in Swift</a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a selector expression</p><div class=3D"syntax-group"><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_selector-expressio=
n"></a>selector-expression</span><span class=3D"arrow"> =E2=86=92 </span> <=
code>#selector</code> <code>(</code> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#=
grammar_expression">expression</a></span>  <code>)</code></p><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_selector-express=
ion_1082"></a>selector-expression</span><span class=3D"arrow"> =E2=86=92 </=
span> <code>#selector</code> <code>(</code> <code>getter:</code> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Expressions.html#grammar_expression">expression</a></span>  <cod=
e>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_selector-expression_1083"></a>selector-expression</span><span c=
lass=3D"arrow"> =E2=86=92 </span> <code>#selector</code> <code>(</code> <co=
de>setter:</code> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_expression"=
>expression</a></span>  <code>)</code></p></div></div></div>
<div class=3D"section" id=3D"ID549">
<h3>Key-Path String Expression<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Expressions.html#ID549" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>A key-path string expression lets you access the string used to refer to=
 a property in Objective-C, for use in key-value coding and key-value obser=
ving APIs. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#keyPath</span>(<span class=3D"gi">property name</span>)
</li></ol></div></div></div>
<p>The <em>property name</em> must be a reference to a property that is ava=
ilable in the Objective-C runtime. At compile time, the key-path string exp=
ression is replaced by a string literal. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span>: <span class=3D"nc">NSObject=
</span> {
</li><li>    <span class=3D"k">@objc</span> <span class=3D"k">var</span> <s=
pan class=3D"nv">someProperty</span>: <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">someProperty<=
/span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">somePrope=
rty</span> =3D <span class=3D"nv">someProperty</span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">c</span> =3D <span=
 class=3D"nv">SomeClass</span>(<span class=3D"nv">someProperty</span>: <spa=
n class=3D"m">12</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">keyPath</span> =3D=
 <span class=3D"k">#keyPath</span>(<span class=3D"nv">SomeClass</span>.<spa=
n class=3D"nv">someProperty</span>)
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">value</span> =3D <span class=3D"nv">c</span>.<span class=3D"nv">v=
alue</span>(<span class=3D"nv">forKey</span>: <span class=3D"nv">keyPath</s=
pan>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">value</span=
>)
</li><li>}
</li><li><span class=3D"c">// Prints "12"</span>
</li></ol></div></div></div>
<p>When you use a key-path string expression within a class, you can refer =
to a property of that class by writing just the property name, without the =
class name.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">SomeClass</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">getSomeKeyPat=
h</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"k">#keyPath=
</span>(<span class=3D"nv">someProperty</span>)
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">keyPath</span> =
=3D=3D <span class=3D"nv">c</span>.<span class=3D"nv">getSomeKeyPath</span>=
())
</li><li><span class=3D"c">// Prints "true"</span>
</li></ol></div></div></div>
<p>Because the key path string is created at compile time, not at runtime, =
the compiler can check that the property exists and that the property is ex=
posed to the Objective-C runtime.</p>
<p>For more information about using key paths in Swift code that interacts =
with Objective-C APIs, see <a class=3D"reference external" href=3D"https://=
developer.apple.com/documentation/swift/using_objective_c_runtime_features_=
in_swift">Using Objective-C Runtime Features in Swift</a>. For information =
about key-value coding and key-value observing, see <a class=3D"reference e=
xternal" href=3D"https://developer.apple.com/library/content/documentation/=
Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i">K=
ey-Value Coding Programming Guide</a> and <a class=3D"reference external" h=
ref=3D"https://developer.apple.com/library/content/documentation/Cocoa/Conc=
eptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/1000017=
7i">Key-Value Observing Programming Guide</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Although the <em>property name</em> is an expression, it =
is never evaluated.</p>
</div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a key-path string expression</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_key-path-s=
tring-expression"></a>key-path-string-expression</span><span class=3D"arrow=
"> =E2=86=92 </span> <code>#keyPath</code> <code>(</code> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Expressions.html#grammar_expression">expression</a></span>  <code>)</co=
de></p></div></div></div>
</div>
<div class=3D"section" id=3D"ID397">
<h2>Postfix Expressions<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#ID397" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p><em>Postfix expressions</em> are formed by applying a postfix operator o=
r other postfix syntax to an expression. Syntactically, every primary expre=
ssion is also a postfix expression.</p>
<p>For information about the behavior of these operators, see <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
BasicOperators.html"><span class=3D"doc">Basic Operators</span></a> and <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/AdvancedOperators.html"><span class=3D"doc">Advanced Operators</s=
pan></a>.</p>
<p>For information about the operators provided by the Swift standard libra=
ry, see <a class=3D"reference external" href=3D"https://developer.apple.com=
/documentation/swift/operator_declarations">Operator Declarations</a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a postfix expression</p><div class=3D"syntax-group"><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_postfix-expression"=
></a>postfix-expression</span><span class=3D"arrow"> =E2=86=92 </span> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Expressions.html#grammar_primary-expression">primary-expre=
ssion</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name=
"><a id=3D"grammar_postfix-expression_1084"></a>postfix-expression</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.htm=
l#grammar_postfix-expression">postfix-expression</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_postfix-operator">postfix-operator</a>=
</span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_postfix-expression_1085"></a>postfix-expression</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gram=
mar_function-call-expression">function-call-expression</a></span> </p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_postfix=
-expression_1086"></a>postfix-expression</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Expressions.html#grammar_initializer-ex=
pression">initializer-expression</a></span> </p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_postfix-expression_1087"></a>=
postfix-expression</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Expressions.html#grammar_explicit-member-expression">explicit-m=
ember-expression</a></span> </p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_postfix-expression_1088"></a>postfix-expressi=
on</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expr=
essions.html#grammar_postfix-self-expression">postfix-self-expression</a></=
span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"=
grammar_postfix-expression_1089"></a>postfix-expression</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar=
_subscript-expression">subscript-expression</a></span> </p><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_postfix-expression=
_1090"></a>postfix-expression</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Expressions.html#grammar_forced-value-expression">fo=
rced-value-expression</a></span> </p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_postfix-expression_1091"></a>postfix-exp=
ression</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Expressions.html#grammar_optional-chaining-expression">optional-chaining-e=
xpression</a></span> </p></div></div><div class=3D"section" id=3D"ID398">
<h3>Function Call Expression<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Expressions.html#ID398" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>A <em>function call expression</em> consists of a function name followed=
 by a comma-separated list of the function=E2=80=99s arguments in parenthes=
es. Function call expressions have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">function name</span>(<span class=3D"gi">argument value 1</spa=
n>, <span class=3D"gi">argument value 2</span>)
</li></ol></div></div></div>
<p>The <em>function name</em> can be any expression whose value is of a fun=
ction type.</p>
<p>If the function definition includes names for its parameters, the functi=
on call must include names before its argument values separated by a colon =
(<code class=3D"docutils literal notranslate"><span class=3D"pre">:</span><=
/code>). This kind of function call expression has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">function name</span>(<span class=3D"gi">argument name 1</span=
>: <span class=3D"gi">argument value 1</span>, <span class=3D"gi">argument =
name 2</span>: <span class=3D"gi">argument value 2</span>)
</li></ol></div></div></div>
<p>A function call expression can include a trailing closure in the form of=
 a closure expression immediately after the closing parenthesis. The traili=
ng closure is understood as an argument to the function, added after the la=
st parenthesized argument. The following function calls are equivalent:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 someFunction takes an integer and a closure as its arguments</span>
</li><li><span class=3D"nv">someFunction</span>(<span class=3D"nv">x</span>=
: <span class=3D"nv">x</span>, <span class=3D"nv">f</span>: {<span class=3D=
"nv">$0</span> =3D=3D <span class=3D"m">13</span>})
</li><li><span class=3D"nv">someFunction</span>(<span class=3D"nv">x</span>=
: <span class=3D"nv">x</span>) {<span class=3D"nv">$0</span> =3D=3D <span c=
lass=3D"m">13</span>}
</li></ol></div></div></div>
<p>If the trailing closure is the function=E2=80=99s only argument, the par=
entheses can be omitted.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 someMethod takes a closure as its only argument</span>
</li><li><span class=3D"nv">myData</span>.<span class=3D"nv">someMethod</sp=
an>() {<span class=3D"nv">$0</span> =3D=3D <span class=3D"m">13</span>}
</li><li><span class=3D"nv">myData</span>.<span class=3D"nv">someMethod</sp=
an> {<span class=3D"nv">$0</span> =3D=3D <span class=3D"m">13</span>}
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a function call expression</p><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_function-call=
-expression"></a>function-call-expression</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Expressions.html#grammar_postfix-expres=
sion">postfix-expression</a></span>  <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#=
grammar_function-call-argument-clause">function-call-argument-clause</a></s=
pan> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"g=
rammar_function-call-expression_1092"></a>function-call-expression</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.htm=
l#grammar_postfix-expression">postfix-expression</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Expressions.html#grammar_function-call-argument-clause">function-cal=
l-argument-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expression=
s.html#grammar_trailing-closure">trailing-closure</a></span> </p></div><div=
 class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_function-call-argument-clause"></a>function-call-argu=
ment-clause</span><span class=3D"arrow"> =E2=86=92 </span> <code>(</code> <=
code>)</code> |  <code>(</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gram=
mar_function-call-argument-list">function-call-argument-list</a></span>  <c=
ode>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a =
id=3D"grammar_function-call-argument-list"></a>function-call-argument-list<=
/span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Express=
ions.html#grammar_function-call-argument">function-call-argument</a></span>=
  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#grammar_function-call-argument">=
function-call-argument</a></span>  <code>,</code> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expr=
essions.html#grammar_function-call-argument-list">function-call-argument-li=
st</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_function-call-argument"></a>function-call-argument</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.htm=
l#grammar_expression">expression</a></span>  |  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexica=
lStructure.html#grammar_identifier">identifier</a></span>  <code>:</code> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Expressions.html#grammar_expression">expression</a></sp=
an> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gr=
ammar_function-call-argument_1093"></a>function-call-argument</span><span c=
lass=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.htm=
l#grammar_operator">operator</a></span>  |  <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStr=
ucture.html#grammar_identifier">identifier</a></span>  <code>:</code> <span=
 class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/LexicalStructure.html#grammar_operator">operator</a></span>=
 </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_trailing-closure"></a>trailing-closur=
e</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expre=
ssions.html#grammar_closure-expression">closure-expression</a></span> </p><=
/div></div></div>
<div class=3D"section" id=3D"ID399">
<h3>Initializer Expression<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#ID399" title=3D"Permalink=
 to this headline">=C2=B6</a></h3>
<p>An <em>initializer expression</em> provides access to a type=E2=80=99s i=
nitializer. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>.<span class=3D"nv">init</span>(<span class=
=3D"gi">initializer arguments</span>)
</li></ol></div></div></div>
<p>You use the initializer expression in a function call expression to init=
ialize a new instance of a type. You also use an initializer expression to =
delegate to the initializer of a superclass.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeSubClass</span>: <span class=3D"nc">SomeS=
uperClass</span> {
</li><li>    <span class=3D"k">override</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"c">// subclass initialization goes here</sp=
an>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>()
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Like a function, an initializer can be used as a value. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 Type annotation is required because String has multiple initializers.</spa=
n>
</li><li><span class=3D"k">let</span> <span class=3D"nv">initializer</span>=
: (<span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">String</span> =
=3D <span class=3D"nv">String</span>.<span class=3D"nv">init</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">oneTwoThree</span>=
 =3D [<span class=3D"m">1</span>, <span class=3D"m">2</span>, <span class=
=3D"m">3</span>].<span class=3D"nv">map</span>(<span class=3D"nv">initializ=
er</span>).<span class=3D"nv">reduce</span>(<span class=3D"s">""</span>, +)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">oneTwoThree</sp=
an>)
</li><li><span class=3D"c">// Prints "123"</span>
</li></ol></div></div></div>
<p>If you specify a type by name, you can access the type=E2=80=99s initial=
izer without using an initializer expression. In all other cases, you must =
use an initializer expression.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">s1</span> =3D <span class=3D"nv">SomeType</span=
>.<span class=3D"nv">init</span>(<span class=3D"nv">data</span>: <span clas=
s=3D"m">3</span>)  <span class=3D"c">// Valid</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">s2</span> =3D <spa=
n class=3D"nv">SomeType</span>(<span class=3D"nv">data</span>: <span class=
=3D"m">1</span>)       <span class=3D"c">// Also valid</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">s3</span> =3D <spa=
n class=3D"nv">type</span>(<span class=3D"nv">of</span>: <span class=3D"nv"=
>someValue</span>).<span class=3D"nv">init</span>(<span class=3D"nv">data</=
span>: <span class=3D"m">7</span>)  <span class=3D"c">// Valid</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">s4</span> =3D <spa=
n class=3D"nv">type</span>(<span class=3D"nv">of</span>: <span class=3D"nv"=
>someValue</span>)(<span class=3D"nv">data</span>: <span class=3D"m">5</spa=
n>)       <span class=3D"c">// Error</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an initializer expression</p><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_initializer-ex=
pression"></a>initializer-expression</span><span class=3D"arrow"> =E2=86=92=
 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Expressions.html#grammar_postfix-expression">=
postfix-expression</a></span>  <code>.</code> <code>init</code></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_initialize=
r-expression_1094"></a>initializer-expression</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_postfix-exp=
ression">postfix-expression</a></span>  <code>.</code> <code>init</code> <c=
ode>(</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Expressions.html#grammar_argument-names">=
argument-names</a></span>  <code>)</code></p></div></div></div>
<div class=3D"section" id=3D"ID400">
<h3>Explicit Member Expression<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Expressions.html#ID400" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>An <em>explicit member expression</em> allows access to the members of a=
 named type, a tuple, or a module. It consists of a period (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">.</span></code>) between =
the item and the identifier of its member.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>.<span class=3D"gi">member name</span>
</li></ol></div></div></div>
<p>The members of a named type are named as part of the type=E2=80=99s decl=
aration or extension. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">someProperty</=
span> =3D <span class=3D"m">42</span>
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">c</span> =3D <span=
 class=3D"nv">SomeClass</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">y</span> =3D <span=
 class=3D"nv">c</span>.<span class=3D"nv">someProperty</span>  <span class=
=3D"c">// Member access</span>
</li></ol></div></div></div>
<p>The members of a tuple are implicitly named using integers in the order =
they appear, starting from zero. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">t</span> =3D (<span class=3D"m">10</span>, <spa=
n class=3D"m">20</span>, <span class=3D"m">30</span>)
</li><li><span class=3D"nv">t</span>.<span class=3D"m">0</span> =3D <span c=
lass=3D"nv">t</span>.<span class=3D"m">1</span>
</li><li><span class=3D"c">// Now t is (20, 20, 30)</span>
</li></ol></div></div></div>
<p>The members of a module access the top-level declarations of that module=
.</p>
<p>Types declared with the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">dynamicMemberLookup</span></code> attribute include member=
s that are looked up at runtime, as described in <a class=3D"reference inte=
rnal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.=
html"><span class=3D"doc">Attributes</span></a>.</p>
<p>To distinguish between methods or initializers whose names differ only b=
y the names of their arguments, include the argument names in parentheses, =
with each argument name followed by a colon (<code class=3D"docutils litera=
l notranslate"><span class=3D"pre">:</span></code>). Write an underscore (<=
code class=3D"docutils literal notranslate"><span class=3D"pre">_</span></c=
ode>) for an argument with no name. To distinguish between overloaded metho=
ds, use a type annotation. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">someMethod</s=
pan>(<span class=3D"nv">x</span>: <span class=3D"nc">Int</span>, <span clas=
s=3D"nv">y</span>: <span class=3D"nc">Int</span>) {}
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">someMethod</s=
pan>(<span class=3D"nv">x</span>: <span class=3D"nc">Int</span>, <span clas=
s=3D"nv">z</span>: <span class=3D"nc">Int</span>) {}
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">overloadedMet=
hod</span>(<span class=3D"nv">x</span>: <span class=3D"nc">Int</span>, <spa=
n class=3D"nv">y</span>: <span class=3D"nc">Int</span>) {}
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">overloadedMet=
hod</span>(<span class=3D"nv">x</span>: <span class=3D"nc">Int</span>, <spa=
n class=3D"nv">y</span>: <span class=3D"nc">Bool</span>) {}
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">instance</span> =
=3D <span class=3D"nv">SomeClass</span>()
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">a</span> =3D <span=
 class=3D"nv">instance</span>.<span class=3D"nv">someMethod</span>         =
     <span class=3D"c">// Ambiguous</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">b</span> =3D <span=
 class=3D"nv">instance</span>.<span class=3D"nv">someMethod</span>(<span cl=
ass=3D"nv">x</span>:<span class=3D"nv">y</span>:)        <span class=3D"c">=
// Unambiguous</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">d</span> =3D <span=
 class=3D"nv">instance</span>.<span class=3D"nv">overloadedMethod</span>   =
     <span class=3D"c">// Ambiguous</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">d</span> =3D <span=
 class=3D"nv">instance</span>.<span class=3D"nv">overloadedMethod</span>(<s=
pan class=3D"nv">x</span>:<span class=3D"nv">y</span>:)  <span class=3D"c">=
// Still ambiguous</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">d</span>: (<span c=
lass=3D"nc">Int</span>, <span class=3D"nc">Bool</span>) -&gt; <span class=
=3D"nc">Void</span>  =3D <span class=3D"nv">instance</span>.<span class=3D"=
nv">overloadedMethod</span>(<span class=3D"nv">x</span>:<span class=3D"nv">=
y</span>:)  <span class=3D"c">// Unambiguous</span>
</li></ol></div></div></div>
<p>If a period appears at the beginning of a line, it is understood as part=
 of an explicit member expression, not as an implicit member expression. Fo=
r example, the following listing shows chained method calls split over seve=
ral lines:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">x</span> =3D [<span class=3D"m">10</span>, <spa=
n class=3D"m">3</span>, <span class=3D"m">20</span>, <span class=3D"m">15</=
span>, <span class=3D"m">4</span>]
</li><li>    .<span class=3D"nv">sorted</span>()
</li><li>    .<span class=3D"nv">filter</span> { <span class=3D"nv">$0</spa=
n> &gt; <span class=3D"m">5</span> }
</li><li>    .<span class=3D"nv">map</span> { <span class=3D"nv">$0</span> =
* <span class=3D"m">100</span> }
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an explicit member expression</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_explicit-m=
ember-expression"></a>explicit-member-expression</span><span class=3D"arrow=
"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_postfix-=
expression">postfix-expression</a></span>  <code>.</code> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/LexicalStructure.html#grammar_decimal-digits">decimal-digits</a></span>=
 </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_explicit-member-expression_1095"></a>explicit-member-expression</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.htm=
l#grammar_postfix-expression">postfix-expression</a></span>  <code>.</code>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/LexicalStructure.html#grammar_identifier">identifier<=
/a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/GenericParametersAndArguments.html#grammar=
_generic-argument-clause">generic-argument-clause</a></span> <sub>opt</sub>=
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_explicit-member-expression_1096"></a>explicit-member-expression</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html=
#grammar_postfix-expression">postfix-expression</a></span>  <code>.</code> =
<span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/LexicalStructure.html#grammar_identifier">identifier</=
a></span>  <code>(</code> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_arg=
ument-names">argument-names</a></span>  <code>)</code></p></div><div class=
=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_argument-names"></a>argument-names</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_argume=
nt-name">argument-name</a></span>  <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#gr=
ammar_argument-names">argument-names</a></span> <sub>opt</sub></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_argument-n=
ame"></a>argument-name</span><span class=3D"arrow"> =E2=86=92 </span> <span=
 class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/LexicalStructure.html#grammar_identifier">identifier</a></s=
pan>  <code>:</code></p></div></div></div>
<div class=3D"section" id=3D"ID401">
<h3>Postfix Self Expression<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Expressions.html#ID401" title=3D"Permalin=
k to this headline">=C2=B6</a></h3>
<p>A postfix <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">self</span></code> expression consists of an expression or the name of a=
 type, immediately followed by <code class=3D"docutils literal notranslate"=
><span class=3D"pre">.self</span></code>. It has the following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>.<span class=3D"k">self</span>
</li><li><span class=3D"gi">type</span>.<span class=3D"k">self</span>
</li></ol></div></div></div>
<p>The first form evaluates to the value of the <em>expression</em>. For ex=
ample, <code class=3D"docutils literal notranslate"><span class=3D"pre">x.s=
elf</span></code> evaluates to <code class=3D"docutils literal notranslate"=
><span class=3D"pre">x</span></code>.</p>
<p>The second form evaluates to the value of the <em>type</em>. Use this fo=
rm to access a type as a value. For example, because <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">SomeClass.self</span></code> eva=
luates to the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">SomeClass</span></code> type itself, you can pass it to a function or m=
ethod that accepts a type-level argument.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a postfix self expression</p><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_postfix-self-e=
xpression"></a>postfix-self-expression</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#grammar_postfix-expressio=
n">postfix-expression</a></span>  <code>.</code> <code>self</code></p></div=
></div></div>
<div class=3D"section" id=3D"ID403">
<h3>Subscript Expression<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html#ID403" title=3D"Permalink t=
o this headline">=C2=B6</a></h3>
<p>A <em>subscript expression</em> provides subscript access using the gett=
er and setter of the corresponding subscript declaration. It has the follow=
ing form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>[<span class=3D"gi">index expressions</span>=
]
</li></ol></div></div></div>
<p>To evaluate the value of a subscript expression, the subscript getter fo=
r the <em>expression</em>=E2=80=99s type is called with the <em>index expre=
ssions</em> passed as the subscript parameters. To set its value, the subsc=
ript setter is called in the same way.</p>
<p>For information about subscript declarations, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declara=
tions.html#ID373"><span class=3D"std std-ref">Protocol Subscript Declaratio=
n</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a subscript expression</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_subscript-express=
ion"></a>subscript-expression</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Expressions.html#grammar_postfix-expression">postfix=
-expression</a></span>  <code>[</code> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.htm=
l#grammar_function-call-argument-list">function-call-argument-list</a></spa=
n>  <code>]</code></p></div></div></div>
<div class=3D"section" id=3D"ID404">
<h3>Forced-Value Expression<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Expressions.html#ID404" title=3D"Permalin=
k to this headline">=C2=B6</a></h3>
<p>A <em>forced-value expression</em> unwraps an optional value that you ar=
e certain is not <code class=3D"docutils literal notranslate"><span class=
=3D"pre">nil</span></code>. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>!
</li></ol></div></div></div>
<p>If the value of the <em>expression</em> is not <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">nil</span></code>, the optional val=
ue is unwrapped and returned with the corresponding non-optional type. Othe=
rwise, a runtime error is raised.</p>
<p>The unwrapped value of a forced-value expression can be modified, either=
 by mutating the value itself, or by assigning to one of the value=E2=80=99=
s members. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">x</span>: <span class=3D"nc">Int</span>? =3D <s=
pan class=3D"m">0</span>
</li><li><span class=3D"nv">x</span>! +=3D <span class=3D"m">1</span>
</li><li><span class=3D"c">// x is now 1</span>
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">someDictionary</sp=
an> =3D [<span class=3D"s">"a"</span>: [<span class=3D"m">1</span>, <span c=
lass=3D"m">2</span>, <span class=3D"m">3</span>], <span class=3D"s">"b"</sp=
an>: [<span class=3D"m">10</span>, <span class=3D"m">20</span>]]
</li><li><span class=3D"nv">someDictionary</span>[<span class=3D"s">"a"</sp=
an>]![<span class=3D"m">0</span>] =3D <span class=3D"m">100</span>
</li><li><span class=3D"c">// someDictionary is now ["a": [100, 2, 3], "b":=
 [10, 20]]</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a forced-value expression</p><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_forced-value-e=
xpression"></a>forced-value-expression</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Expressions.html#grammar_postfix-expressio=
n">postfix-expression</a></span>  <code>!</code></p></div></div></div>
<div class=3D"section" id=3D"ID405">
<h3>Optional-Chaining Expression<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Expressions.html#ID405" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>An <em>optional-chaining expression</em> provides a simplified syntax fo=
r using optional values in postfix expressions. It has the following form:<=
/p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">expression</span>?
</li></ol></div></div></div>
<p>The postfix <code class=3D"docutils literal notranslate"><span class=3D"=
pre">?</span></code> operator makes an optional-chaining expression from an=
 expression without changing the expression=E2=80=99s value.</p>
<p>Optional-chaining expressions must appear within a postfix expression, a=
nd they cause the postfix expression to be evaluated in a special way. If t=
he value of the optional-chaining expression is <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">nil</span></code>, all of the other o=
perations in the postfix expression are ignored and the entire postfix expr=
ession evaluates to <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">nil</span></code>. If the value of the optional-chaining expressi=
on is not <code class=3D"docutils literal notranslate"><span class=3D"pre">=
nil</span></code>, the value of the optional-chaining expression is unwrapp=
ed and used to evaluate the rest of the postfix expression. In either case,=
 the value of the postfix expression is still of an optional type.</p>
<p>If a postfix expression that contains an optional-chaining expression is=
 nested inside other postfix expressions, only the outermost expression ret=
urns an optional type. In the example below, when <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">c</span></code> is not <code class=
=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>, it=
s value is unwrapped and used to evaluate <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">.property</span></code>, the value of which=
 is used to evaluate <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">.performAction()</span></code>. The entire expression <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">c?.property.performA=
ction()</span></code> has a value of an optional type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">c</span>: <span class=3D"nc">SomeClass</span>?
</li><li><span class=3D"k">var</span> <span class=3D"nv">result</span>: <sp=
an class=3D"nc">Bool</span>? =3D <span class=3D"nv">c</span>?.<span class=
=3D"nv">property</span>.<span class=3D"nv">performAction</span>()
</li></ol></div></div></div>
<p>The following example shows the behavior of the example above without us=
ing optional chaining.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">result</span>: <span class=3D"nc">Bool</span>?
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">unwrappedC</span> =3D <span class=3D"nv">c</span> {
</li><li>    <span class=3D"nv">result</span> =3D <span class=3D"nv">unwrap=
pedC</span>.<span class=3D"nv">property</span>.<span class=3D"nv">performAc=
tion</span>()
</li><li>}
</li></ol></div></div></div>
<p>The unwrapped value of an optional-chaining expression can be modified, =
either by mutating the value itself, or by assigning to one of the value=E2=
=80=99s members. If the value of the optional-chaining expression is <code =
class=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code=
>, the expression on the right-hand side of the assignment operator is not =
evaluated. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunctionWithSideEffects</span>() -&gt; <sp=
an class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">return</span> <span class=3D"m">42</span>  <=
span class=3D"c">// No actual side effects.</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">someDictionary</sp=
an> =3D [<span class=3D"s">"a"</span>: [<span class=3D"m">1</span>, <span c=
lass=3D"m">2</span>, <span class=3D"m">3</span>], <span class=3D"s">"b"</sp=
an>: [<span class=3D"m">10</span>, <span class=3D"m">20</span>]]
</li><li>
</li><li><span class=3D"nv">someDictionary</span>[<span class=3D"s">"not he=
re"</span>]?[<span class=3D"m">0</span>] =3D <span class=3D"nv">someFunctio=
nWithSideEffects</span>()
</li><li><span class=3D"c">// someFunctionWithSideEffects is not evaluated<=
/span>
</li><li><span class=3D"c">// someDictionary is still ["a": [1, 2, 3], "b":=
 [10, 20]]</span>
</li><li>
</li><li><span class=3D"nv">someDictionary</span>[<span class=3D"s">"a"</sp=
an>]?[<span class=3D"m">0</span>] =3D <span class=3D"nv">someFunctionWithSi=
deEffects</span>()
</li><li><span class=3D"c">// someFunctionWithSideEffects is evaluated and =
returns 42</span>
</li><li><span class=3D"c">// someDictionary is now ["a": [42, 2, 3], "b": =
[10, 20]]</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an optional-chaining expression</p><div class=3D"syntax-group"><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_optional=
-chaining-expression"></a>optional-chaining-expression</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_po=
stfix-expression">postfix-expression</a></span>  <code>?</code></p></div></=
div></div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Types.html">Types</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Statements.html">Statements</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAAAyCAYAAAAZUZThAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA
IGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAABIsSURBVHja7J1pVJvX
mcd/Qvu+gkDsq1hiYoPBLTZestmpm3gaJ2nSJE067UyOu85pO9OMp5OeSWc6OTNtZ6aJk9Nz0k5S
O3WmjdMmThvbSWwHHDdmCzY2ZjVgsAAjkAUyEgKh+SAQyCwBjF03ef+fhN5773Pvc5//fZYrCVEw
GESAAAGzQwJw14+OA2QDO4CHAZOgGgGfQLiA3cDz+3eWNACIgsEgd/3ouB2RqEFu1CDVyBFFRQmq
EvCJQ3A8yKjHx4jLA8Fgyv6dJR2SiWc75EY1Y1Ixw54RhLBLwCcRIpEImVSM3KBmxOXZATwx6Soe
GZOIGfGPCeQQ8Mn1IMEgI/4xAlIJwN+EcxDANDI2jkANAQLANxZAMpGHS6bHXwIECCAiihKycQEC
5oFAEAECBIIIECAQRICAZYdkWmYiaEOAAMGDCBCwBA8i+A8BAuYLsa6VixKJSDEr2JBhYGOmAYCj
zZd4r+US7f0+xoXQTsBfRg6yvAPLJVHYrSo2ZuopSdNjVEnDzx4ojGFzjpHj59wcbXbT2DvMyNj4
dV34F1Za+FSaHoBvvtYqWIKA6+NBlLIoipJ0bMjUk29To1NKZ21nVEnZepOF0nQ9pxyXea/ZTeX5
Qbz+pRPFrBSzPd9CcZqeRLMSAK8/QIPDw6kuDwcbXfR7AwCogsPYbfEfy02dTv4X/9RNTfewYOlX
T5CrcyF6hYR1GQbWZ+jJiVUjlyws/9cppaxLN1CUrONsz2XKWtwca7mE2ze2aHI8c38mZq38CsKK
WZWiZ1WKHsYD/PrUQGi1welE/HiFedPJr4nyCxnmjeBBvrrexsaspX/PSi6JYmWClpUJWvJtKv79
0PnFyV8bFybH0aoG3q1uBiA3xUpGQjR56fG8XtEECsvHflOnkz84HhCsfDkIcrW58ksHKjnXauKW
ggxSrMYljdHe6+JwTQvlzQMERdZF9V2XHTL8I1UN/NO+OmS6ib8v9DLma2XU48KUVYwoONNpfOzq
BMHI10Id5AbwIB0+FU3vX+DNqjZK7LFsXp1FXoqVqCjRvP3Gx4Ocae/lYFUTxxt76B2RIdeZkSiX
Ng/vmBiNLTP8t0yzMLI+vsbKxhwzZq0MgEaHh7fr+3njrGtG28I4FRuzDOTGayNyneo2Ny9X9tLq
Golo/8z2DOw2DS+Vd/FyrTNC1r6Kbn5+ojdi7K0rLBSm6lHKxAB82ObmwBknR9qGrnqfDn1jJQA7
9pwlySDjngIrdpsGgM5+L4fr+3m51olZKeZrpfHheUyub1f5hXAeNz283WI3kp+gJTteE5739PGu
RLpRzkNFVnJsmrDOr0Sjw8M39rVEyHms2MrqVEO4z3wybiiCSJRaJEotbr+X1+v7OXjqMGvSLNxZ
nEVxdiJSiTii/ehYgIqGTt6qaOLEOSc+iQ6ZNhG1YWnMcLqGsBi1FOfEYz7dOmMT58OTdySxzh4Z
HtptmrDhXEmS796RjFk3M9dZZzdRmKLn279tiiDJuH8Y0KDCO0NWwDsYfn13jpGv35Y8Y36rUvWs
StVjmyDYsiTyhRZKc6Ij3ks0K3m0NAGNXBwqdFhUM9aXbFbw5b1NEf22ZOl5tDRhhozJ8WL1Mn7y
niOCHD+9LwulXIzzkoe9B2rRqOTcWpyDSiELRwKtPUOAdKrP/Vlh8l0pIz1GxVOLDMsXR5Bl8MNW
rYxks5Yul56uAQ9lXQMca/4TN8ef4u6SXAoyQ4ljTfMF3jhez8kLlxlXGpGZM0g3a0g0Kmh3eukd
8i9a9juVTTxwRyEWvYpffjGXP9Ze5NWTfQsiyjq7ib0HKnjpnVp6B708VJrDdx+5I2S0+SbeqB+I
aP/a4Woy4k0crm7mzZpzAPzDPZ/mwS3FKOVituXp+Wl574yYZ2txCiq5lPpzDo7VttB50c2w1ABB
DWalmL8uDemno7ufH//6MMcaHeTFG/nWvaUU5aVyX7GVD9oHZ3ioj4y3Ztnb0pxojlQ28Is/VnDm
govPFqTxj49tRqWQsb04jmGfnx/vPsTL5Wex6pR87/Pr2VSUTaJFxd3ZhohD4xeHT1OUIOFYbQtl
de2cueAiL97Iv/3tVpLjzGzOj+HFEz3hvfhCgTlEDtcQX/yP1xiUGgkGxmjqdPKdh24FYH/1Baq6
R1CY4gD4u03xKGVihn1+nvvt0fC8Hr1tJQ9uKWad3cTd5wdn9fg3hAd5YLWVzTkmbEYFvW4f77W4
KW/W09gTzUm3i6pXKsiwhE7dFucIUn0MUms89lgNpZkGNmQYsOrlOFw+Dp4d4JWq3kXJf/bYBaxG
NZuKslHKxGwvjuMzK2MWRJS9ByrYdbwHZfwqopMk7G/vo7CygU1F2STFaGe03117ibEPupDpLETf
tB6AXcc7Kbm5n+Q4Mynm2UMGlVzKkcoGnthbgVxnIUqmJkoMEiXcm29GJQ9tx1d3HcCrTSL6pgy6
/T5++GoNb+SlopJLuTVDS2vlyFXv17DPz38fbMSjziT6JgXlAy5uPd3GxtV2APa8VcH+doi+aT2B
wBi/Km9jU1F26CBURlYYFaY4vvTsO8h1FqSa0Hjdfh+vvnea7zywAYAVMQqOdlwGwKIOhd2nz3Uz
GpOLShxa9xvn+vjOxJglKzI4PTIQDjvt8ToAnt9XHjGvXce7w3r/dIrq2hHkav2H/7KbMb8KEQpi
9Qo+X6jg9mwjlR1DHDqro67LRIc3FEOr47WsSNByR46JomQtJvWUQY35ffgvuxc9H6UlkZ37TnFb
dTMP3lFIbpotgii/OeFgz4ezhyfNriBKS2JYDzJ9NBc9gTmLwHJTHJMBVkGcCp1CAql5IBKFK0dz
zf+/DjaiS1kxI6fOi1OEvcfaoiKImgwldDBupqM7ZATR6sXtVXCOvW139HNZbSNKLCEISDVGeoem
DP+EI4BMHx3qK5bQ4TdMjRmYub7JNZmVYvJj1YCOJONUq8Cod6rPRJVNJJbBhHwm9B4OS0d94fcL
4hVTxJYa2bxSP02yibZuF8lxZpJj1Mte0F42D7K7vJnfH62mJDuObSW5rEiNxaSWsTnXTEmantou
D+82hth9q93IygQNWoUknKjXtfXw+vF6jjd0MyTWoZow2MVAY8ukbMDFwWffYXOWMYIoj5YmcrZn
mOpZLs1O9vohKvLUF0XNrZqHV1m4JdcSTtAXXMjo7mdYbWO2soVFFzKC5DgzO7eZ5xwjRq9Ylv06
1XYRkVgy55rbvDLE01Qils0tN2Mi4S5MM8zIEWZDr8tDToqVvNQYzJWDYe++KVUXbvNBy0UglAPG
aKbu1P75/oI5x7Xo1dcyB7m6gVTmREZH/bzdOsC7p99lbWY0d67JoiAzHq1CRmmGgbXpIeZHTZy0
l31+apov8NaJJt5v7mNcaUZmzEQllS15PjK1EZnaSFm/i4PPvMOXS1N4/J5QGLQ110C1YyZB3OOK
ycP/I8umP9icxLrskAHXn3NwsqmL+vZQOPiVbSUkx5nn1OewbzRkhLM8sxjU4dCn3TF3It7W7V4W
FxIlUUBw7ht2sVQxv5yJZ4U2FU/enY5KLmHY52d/2WkcTjddF93kplh5cEvxjHm8dKSJ4pxELHoV
ux6wc/TsAGq5mPXZoeLFkcoGPnSCRDHzUKg/51h4iXt5PcjVjxwllWKJtTHktXDM0U/Z7uPcnKDh
s5+yU5SdiEUXMgLn4GUqGzp584NGTnZ5iNKYkcXa0SpleEYCyzIXmcaATGNgz8lutnzaSXKcBYsm
atrYUzJEYvEsMoMzXmcY5WFyVJ5p42svlCHVGJAoQifdF3yj8++USDTn2urPOchNs9HucPLYM2/P
Uy3UoLamLu4iZFaZwQWt+aNYtzVXH86dnnhuP1XOELmiZCqkuvFZ+3QE9Dzx3H5+9u3tmLVythfH
hXVQXtvCiye6J0r1ofYnmx3kJIfCr/l0A6C/Iny9YUKsLKuK9RlGcmJVdAz4ONyop+6ChdNDbmpe
rSE7up51N4XCpmOnO2no8yHTW1HY4lkRr+MWu5Fkk4KzPcOUtbho6l2ezw8pTHGolYqI2HepSNBO
uZk/VHXM2IzkuKV/kqCt201umo3cNBuFq1bT4hrhLwEWjThs3HWj0aitmvCznCTDHGGihqcf3caw
z8/nvv+/9A56w95frrNE3GMB9EzLjb72uVvY82HfdVvfsoVY995sZtNEXT0/QcuGTAM1nR7+UOek
7oKJNo+bxvLOidPdhD5Bz4p4DVtXWChI1IQ/1JifoCVGHcWPDi6cIJvSdDxSEk9Fq4vKjiGqHaFq
SYZJzkPFsVgMoU072dIz92G6gAN5fHSq/HzX2jzef7NzIjGV8PUN8eEa/rxjzvH+qxXn2bo2B4Cd
d6bw96+10u8dm3ZJJuHOHCN7ahZpHMHFz2UxOpk8dHLTbKxJndL9pjQdW4sSZ51Hfow8HJI9+Nkt
OAZHI4Y+cm4wsqx+ysnDG0P3XPetiQ3lkhNyJrEt18iZnmFaBkauDUGuNqh5eu97HM8ycfvqTFZm
2NAppWzMMrI2XU9l+yDvNAzw4fnQrfaqJC23ZZsoStEhFYcSMP9YgNoWB29XNVPWNEDQlLZg2QGf
h0SLkkSLku1r5kqQnbxS6SCotC7ZFt5u6mfHxIVkYUY0v3xYw7B/jCSzCqVcTEd3KJRbAj9oH9Xy
831lPL59PYnRal55PJ9GR6jqp5JJSLSECgK7axZ/el5Lfhyr6yAnJaTTJ7el09nvDc93svJ2ZZ8D
p7v4q3wtuWk2Hts482J0J3Cg9iI/PtoVrm499eK7PL3jM6gUMp6+306n08uwP3SA2G2hUvy/vlZP
88ANWsUa1SfyVrOTQ3VlrEk3sXl1JquzEtBrFJSkG/hUmp66rtCGr0jQhhN1t8dHVVMXB6uaOdE6
QEBhQKZPXNR3gTsGvFSeaaMoL3XWev/rRz9kd1kzI+YsRFeV1xh56sV3efKxW7EYtWGjdbqGePY3
f6JrYIT/+dZdSxpbLFOw+1Q3g8OHuP+2ApLjLOGNn0TlmbYbLsR6qaqPWH0td61fiUouCc/5SGUD
//m7Kv7lobUz9uWbt+eQYrPMmnSn2CyoFDK2rIyhZ3Ak7DFPjZj43nP7+eLmAoryUsO6n34Atl90
A/JlXd/kr7sHvcrlGTg4HsDvGYDhAewxSjYXpnNLQQZmnSqiXf/gMIdrWjhY3UrjRS+oTMg0JkRR
4kXLDPh9DF9sY8TdR6ndhkETyjkueXwca7mIypKIwhgXUdb0Oju53BsyOEve+hljzvV8zOdhsLOe
takmDBoFlzw+3m8bQG1NRSxTcqm1BqnGiD55Kj9xd9Qx6nHNeH82jAz24e3rxG6WkRZrCK+jvNGB
XB+NNiHnI/Uxfe665BURn0dznikDQG1NDd/9LFQnc/W93NuGzu+kODOUbFc0d+MWG1BbU/F0NzPi
7gvP4+GCaB7bkITTNcRDP3yZgfHI8vGYd4jf/+BBkm0WGs738/V97RG69zo7MQQ9YVkA+6vPIVFo
0CbmzluOXgyU3hH27ywRLTtBpogyzph3iNGhPpK0cHtBKluKQ7e0ByoaebumjfNDINVGI1Fql+1f
Loz5PIyPjU6UMqXhCtNyY1LOtZIR8PsI+L3XfB3Ltt+BMUYnLoKlSu2MO5ZJPLs9hewkM3sPVfHC
qcCs7b6/XsfGwkzOtvfyjd91zStr0rMvNyYJcs2+ky6KikKq1iNV6egZGeaF8k52vVkNgFwfg1wX
h8qqYv4LiCXEjNfJkK61HLFMsWyn4fWASCxZkKF6Lg8DZlZlpyA60zHjeaFNTXFeykRRpfuqZN1Q
SfrcmhMhVqhRKdSoYlIWlQgK+PihrK6T1TmJZCdZ+L+v6DhSP3UpuiJBiz0+lMN0OJz87Ej7jDDw
ekMiWKuA64nX6gcJ/OogX7qrBItRy71rbJF5jmuIQx/U85M/nMKQVvBnt8tlvUkXIOCjINdZeP1c
H3t37iE7WhUuRABUNnfT5wuiMMZiSFt1Q9ikRNgyAdefJNHIddE4/D66nN4pY7StxCi+sUxSIIiA
Pxv+EgoRQg4iQMA8EH68WoCAhXgQwYEIECB4EAEClpqkCz5EgIC5CDIgCmISKCJAAJOf+B6YHmLt
lgbHBc0IEABIx8cBXphOkOelowGkgXFEgn4EfII9hzQwjnQsAPD89BCrEciRBQI7ZIHAI4BRUJeA
TyBcwG7g+f07S9ph4gtTAgQImB3/PwDuN9LAj5N4JQAAAABJRU5ErkJggg==

------MultipartBoundary--gXBZ8276GWXrR9LsInI4uZE3oCPRmPOI3zSfBwtMPD------
