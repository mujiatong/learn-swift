From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html
Subject: =?utf-8?Q?Enumeration=20=E2=80=94=20The=20Swift=20Programming=20Language?=
 =?utf-8?Q?=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:55:21 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----"


------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: text/html
Content-ID: <frame-F1E52A7A9AAABE13E9F05B62DD249870@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Enumeration =E2=80=94 The Swift Programming Language (Swift 5.1)=
</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#">E=
numeration</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#">Enumeration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID146">Enumeration Syntax</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID147">Matching Enumeration Values with =
a Switch Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID581">Iterating over Enumeration Cases<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID148">Associated Values</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID149">Raw Values</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID535">Implicitly Assigned Raw Values</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID150">Initializing from a Raw Value</a>=
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Enumerations.html#ID536">Recursive Enumerations</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"enumeration">
<h1>Enumeration<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/Enumerations.html#enumeration" title=3D"Permalink to th=
is headline">=C2=B6</a></h1>
<p>An <em>enumeration</em> defines a common type for a group of related val=
ues and enables you to work with those values in a type-safe way within you=
r code.</p>
<p>If you are familiar with C, you will know that C enumerations assign rel=
ated names to a set of integer values. Enumerations in Swift are much more =
flexible, and don=E2=80=99t have to provide a value for each case of the en=
umeration. If a value (known as a <em>raw</em> value) is provided for each =
enumeration case, the value can be a string, a character, or a value of any=
 integer or floating-point type.</p>
<p>Alternatively, enumeration cases can specify associated values of <em>an=
y</em> type to be stored along with each different case value, much as unio=
ns or variants do in other languages. You can define a common set of relate=
d cases as part of one enumeration, each of which has a different set of va=
lues of appropriate types associated with it.</p>
<p>Enumerations in Swift are first-class types in their own right. They ado=
pt many features traditionally supported only by classes, such as computed =
properties to provide additional information about the enumeration=E2=80=99=
s current value, and instance methods to provide functionality related to t=
he values the enumeration represents. Enumerations can also define initiali=
zers to provide an initial case value; can be extended to expand their func=
tionality beyond their original implementation; and can conform to protocol=
s to provide standard functionality.</p>
<p>For more about these capabilities, see <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/Properties.html"><sp=
an class=3D"doc">Properties</span></a>, <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/Methods.html"><span cl=
ass=3D"doc">Methods</span></a>, <a class=3D"reference internal" href=3D"htt=
ps://docs.swift.org/swift-book/LanguageGuide/Initialization.html"><span cla=
ss=3D"doc">Initialization</span></a>, <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html"><span =
class=3D"doc">Extensions</span></a>, and <a class=3D"reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html"><span=
 class=3D"doc">Protocols</span></a>.</p>
<div class=3D"section" id=3D"ID146">
<h2>Enumeration Syntax<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Enumerations.html#ID146" title=3D"Permalink to t=
his headline">=C2=B6</a></h2>
<p>You introduce enumerations with the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">enum</span></code> keyword and place their ent=
ire definition within a pair of braces:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">SomeEnumeration</span> {
</li><li>    <span class=3D"c">// enumeration definition goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>Here=E2=80=99s an example for the four main points of a compass:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">CompassPoint</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">north</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">south</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">east</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">west</span>
</li><li>}
</li></ol></div></div></div>
<p>The values defined in an enumeration (such as <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">north</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">south</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">east</span></c=
ode>, and <code class=3D"docutils literal notranslate"><span class=3D"pre">=
west</span></code>) are its <em>enumeration cases</em>. You use the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">case</span></code=
> keyword to introduce new enumeration cases.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Swift enumeration cases don=E2=80=99t have an integer val=
ue set by default, unlike languages like C and Objective-C. In the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">CompassPoint</span=
></code> example above, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">north</span></code>, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">south</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">east</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">west</span></code> don=E2=
=80=99t implicitly equal <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">0</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">1</span></code>, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">2</span></code> and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">3</span></code>. Instead, the differ=
ent enumeration cases are values in their own right, with an explicitly def=
ined type of <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">CompassPoint</span></code>.</p>
</div>
<p>Multiple cases can appear on a single line, separated by commas:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Planet</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">mercury</span=
>, <span class=3D"nv">venus</span>, <span class=3D"nv">earth</span>, <span =
class=3D"nv">mars</span>, <span class=3D"nv">jupiter</span>, <span class=3D=
"nv">saturn</span>, <span class=3D"nv">uranus</span>, <span class=3D"nv">ne=
ptune</span>
</li><li>}
</li></ol></div></div></div>
<p>Each enumeration definition defines a new type. Like other types in Swif=
t, their names (such as <code class=3D"docutils literal notranslate"><span =
class=3D"pre">CompassPoint</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Planet</span></code>) start with a capit=
al letter. Give enumeration types singular rather than plural names, so tha=
t they read as self-evident:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">directionToHead</span> =3D <span class=3D"nv">C=
ompassPoint</span>.<span class=3D"nv">west</span>
</li></ol></div></div></div>
<p>The type of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">directionToHead</span></code> is inferred when it=E2=80=99s initialize=
d with one of the possible values of <code class=3D"docutils literal notran=
slate"><span class=3D"pre">CompassPoint</span></code>. Once <code class=3D"=
docutils literal notranslate"><span class=3D"pre">directionToHead</span></c=
ode> is declared as a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">CompassPoint</span></code>, you can set it to a different <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">CompassPoint</s=
pan></code> value using a shorter dot syntax:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">d=
irectionToHead</span> =3D .<span class=3D"nv">east</span>
</li></ol></div></div></div>
<p>The type of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">directionToHead</span></code> is already known, and so you can drop th=
e type when setting its value. This makes for highly readable code when wor=
king with explicitly typed enumeration values.</p>
</div>
<div class=3D"section" id=3D"ID147">
<h2>Matching Enumeration Values with a Switch Statement<a class=3D"headerli=
nk" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.ht=
ml#ID147" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>You can match individual enumeration values with a <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">switch</span></code> statement:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">d=
irectionToHead</span> =3D .<span class=3D"nv">south</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">directionToHead=
</span> {
</li><li><span class=3D"k">case</span> .<span class=3D"nv">north</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Lots of pla=
nets have a north"</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">south</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Watch out f=
or penguins"</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">east</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Where the s=
un rises"</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">west</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Where the s=
kies are blue"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Watch out for penguins"</span>
</li></ol></div></div></div>
<p>You can read this code as:</p>
<p>=E2=80=9CConsider the value of <code class=3D"docutils literal notransla=
te"><span class=3D"pre">directionToHead</span></code>. In the case where it=
 equals <code class=3D"docutils literal notranslate"><span class=3D"pre">.n=
orth</span></code>, print <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">"Lots</span> <span class=3D"pre">of</span> <span class=3D"p=
re">planets</span> <span class=3D"pre">have</span> <span class=3D"pre">a</s=
pan> <span class=3D"pre">north"</span></code>. In the case where it equals =
<code class=3D"docutils literal notranslate"><span class=3D"pre">.south</sp=
an></code>, print <code class=3D"docutils literal notranslate"><span class=
=3D"pre">"Watch</span> <span class=3D"pre">out</span> <span class=3D"pre">f=
or</span> <span class=3D"pre">penguins"</span></code>.=E2=80=9D</p>
<p>=E2=80=A6and so on.</p>
<p>As described in <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Contr=
ol Flow</span></a>, a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">switch</span></code> statement must be exhaustive when consider=
ing an enumeration=E2=80=99s cases. If the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">case</span></code> for <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">.west</span></code> is omitte=
d, this code doesn=E2=80=99t compile, because it doesn=E2=80=99t consider t=
he complete list of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">CompassPoint</span></code> cases. Requiring exhaustiveness ensure=
s that enumeration cases aren=E2=80=99t accidentally omitted.</p>
<p>When it isn=E2=80=99t appropriate to provide a <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">case</span></code> for every enumer=
ation case, you can provide a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">default</span></code> case to cover any cases that aren=
=E2=80=99t addressed explicitly:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">somePlanet</span> =3D <span class=3D"nv">Planet=
</span>.<span class=3D"nv">earth</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">somePlanet</spa=
n> {
</li><li><span class=3D"k">case</span> .<span class=3D"nv">earth</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Mostly harm=
less"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Not a safe =
place for humans"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Mostly harmless"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID581">
<h2>Iterating over Enumeration Cases<a class=3D"headerlink" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID581" title=3D"=
Permalink to this headline">=C2=B6</a></h2>
<p>For some enumerations, it=E2=80=99s useful to have a collection of all o=
f that enumeration=E2=80=99s cases. You enable this by writing <code class=
=3D"docutils literal notranslate"><span class=3D"pre">:</span> <span class=
=3D"pre">CaseIterable</span></code> after the enumeration=E2=80=99s name. S=
wift exposes a collection of all the cases as an <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">allCases</span></code> property of t=
he enumeration type. Here=E2=80=99s an example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Beverage</span>: <span class=3D"nc">CaseIterab=
le</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">coffee</span>=
, <span class=3D"nv">tea</span>, <span class=3D"nv">juice</span>
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">numberOfChoices</s=
pan> =3D <span class=3D"nv">Beverage</span>.<span class=3D"nv">allCases</sp=
an>.<span class=3D"nv">count</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"</span>\<span c=
lass=3D"p">(</span><span class=3D"nv">numberOfChoices</span><span class=3D"=
p">)</span><span class=3D"s"> beverages available"</span>)
</li><li><span class=3D"c">// Prints "3 beverages available"</span>
</li></ol></div></div></div>
<p>In the example above, you write <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Beverage.allCases</span></code> to access a collec=
tion that contains all of the cases of the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Beverage</span></code> enumeration. You ca=
n use <code class=3D"docutils literal notranslate"><span class=3D"pre">allC=
ases</span></code> like any other collection=E2=80=94the collection=E2=80=
=99s elements are instances of the enumeration type, so in this case they=
=E2=80=99re <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Beverage</span></code> values. The example above counts how many cases th=
ere are, and the example below uses a <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">for</span></code> loop to iterate over all the =
cases.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fo=
r</span> <span class=3D"nv">beverage</span> <span class=3D"k">in</span> <sp=
an class=3D"nv">Beverage</span>.<span class=3D"nv">allCases</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">beverage</s=
pan>)
</li><li>}
</li><li><span class=3D"c">// coffee</span>
</li><li><span class=3D"c">// tea</span>
</li><li><span class=3D"c">// juice</span>
</li></ol></div></div></div>
<p>The syntax used in the examples above marks the enumeration as conformin=
g to the <a class=3D"reference external" href=3D"https://developer.apple.co=
m/documentation/swift/caseiterable"><code class=3D"docutils literal notrans=
late"><span class=3D"pre">CaseIterable</span></code></a> protocol. For info=
rmation about protocols, see <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Protocols.html"><span class=3D"do=
c">Protocols</span></a>.</p>
</div>
<div class=3D"section" id=3D"ID148">
<h2>Associated Values<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Enumerations.html#ID148" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>The examples in the previous section show how the cases of an enumeratio=
n are a defined (and typed) value in their own right. You can set a constan=
t or variable to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Planet.earth</span></code>, and check for this value later. Howeve=
r, it=E2=80=99s sometimes useful to be able to store values of other types =
alongside these case values. This additional information is called an <em>a=
ssociated value</em>, and it varies each time you use that case as a value =
in your code.</p>
<p>You can define Swift enumerations to store associated values of any give=
n type, and the value types can be different for each case of the enumerati=
on if needed. Enumerations similar to these are known as <em>discriminated =
unions</em>, <em>tagged unions</em>, or <em>variants</em> in other programm=
ing languages.</p>
<p>For example, suppose an inventory tracking system needs to track product=
s by two different types of barcode. Some products are labeled with 1D barc=
odes in UPC format, which uses the numbers <code class=3D"docutils literal =
notranslate"><span class=3D"pre">0</span></code> to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">9</span></code>. Each barcode has=
 a number system digit, followed by five manufacturer code digits and five =
product code digits. These are followed by a check digit to verify that the=
 code has been scanned correctly:</p>
<img alt=3D"../_images/barcode_UPC_2x.png" class=3D"align-center" src=3D"ht=
tps://docs.swift.org/swift-book/_images/barcode_UPC_2x.png" style=3D"width:=
 252px;">
<p>Other products are labeled with 2D barcodes in QR code format, which can=
 use any ISO 8859-1 character and can encode a string up to 2,953 character=
s long:</p>
<img alt=3D"../_images/barcode_QR_2x.png" class=3D"align-center" src=3D"htt=
ps://docs.swift.org/swift-book/_images/barcode_QR_2x.png" style=3D"width: 1=
69px;">
<p>It=E2=80=99s convenient for an inventory tracking system to store UPC ba=
rcodes as a tuple of four integers, and QR code barcodes as a string of any=
 length.</p>
<p>In Swift, an enumeration to define product barcodes of either type might=
 look like this:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Barcode</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">upc</span>(<s=
pan class=3D"nv">Int</span>, <span class=3D"nv">Int</span>, <span class=3D"=
nv">Int</span>, <span class=3D"nv">Int</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">qrCode</span>=
(<span class=3D"nv">String</span>)
</li><li>}
</li></ol></div></div></div>
<p>This can be read as:</p>
<p>=E2=80=9CDefine an enumeration type called <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">Barcode</span></code>, which can take e=
ither a value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">upc</span></code> with an associated value of type (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">Int</span></code>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Int</span></cod=
e>, <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Int</span></code>), or a value of <code class=3D"docutils literal notran=
slate"><span class=3D"pre">qrCode</span></code> with an associated value of=
 type <code class=3D"docutils literal notranslate"><span class=3D"pre">Stri=
ng</span></code>.=E2=80=9D</p>
<p>This definition doesn=E2=80=99t provide any actual <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Int</span></code> or <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">String</span></code>=
 values=E2=80=94it just defines the <em>type</em> of associated values that=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Barcode</=
span></code> constants and variables can store when they are equal to <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Barcode.upc</sp=
an></code> or <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Barcode.qrCode</span></code>.</p>
<p>You can then create new barcodes using either type:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">productBarcode</span> =3D <span class=3D"nv">Ba=
rcode</span>.<span class=3D"nv">upc</span>(<span class=3D"m">8</span>, <spa=
n class=3D"m">85909</span>, <span class=3D"m">51226</span>, <span class=3D"=
m">3</span>)
</li></ol></div></div></div>
<p>This example creates a new variable called <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">productBarcode</span></code> and assign=
s it a value of <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Barcode.upc</span></code> with an associated tuple value of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">(8,</span> <span cl=
ass=3D"pre">85909,</span> <span class=3D"pre">51226,</span> <span class=3D"=
pre">3)</span></code>.</p>
<p>You can assign the same product a different type of barcode:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
roductBarcode</span> =3D .<span class=3D"nv">qrCode</span>(<span class=3D"s=
">"ABCDEFGHIJKLMNOP"</span>)
</li></ol></div></div></div>
<p>At this point, the original <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Barcode.upc</span></code> and its integer values are r=
eplaced by the new <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Barcode.qrCode</span></code> and its string value. Constants and v=
ariables of type <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Barcode</span></code> can store either a <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">.upc</span></code> or a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">.qrCode</span></code>=
 (together with their associated values), but they can store only one of th=
em at any given time.</p>
<p>You can check the different barcode types using a switch statement, simi=
lar to the example in <a class=3D"reference internal" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/Enumerations.html#ID147"><span class=3D"=
std std-ref">Matching Enumeration Values with a Switch Statement</span></a>=
. This time, however, the associated values are extracted as part of the sw=
itch statement. You extract each associated value as a constant (with the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">let</span><=
/code> prefix) or a variable (with the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">var</span></code> prefix) for use within the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">switch</spa=
n></code> case=E2=80=99s body:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">sw=
itch</span> <span class=3D"nv">productBarcode</span> {
</li><li><span class=3D"k">case</span> .<span class=3D"nv">upc</span>(<span=
 class=3D"k">let</span> <span class=3D"nv">numberSystem</span>, <span class=
=3D"k">let</span> <span class=3D"nv">manufacturer</span>, <span class=3D"k"=
>let</span> <span class=3D"nv">product</span>, <span class=3D"k">let</span>=
 <span class=3D"nv">check</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"UPC: </span=
>\<span class=3D"p">(</span><span class=3D"nv">numberSystem</span><span cla=
ss=3D"p">)</span><span class=3D"s">, </span>\<span class=3D"p">(</span><spa=
n class=3D"nv">manufacturer</span><span class=3D"p">)</span><span class=3D"=
s">, </span>\<span class=3D"p">(</span><span class=3D"nv">product</span><sp=
an class=3D"p">)</span><span class=3D"s">, </span>\<span class=3D"p">(</spa=
n><span class=3D"nv">check</span><span class=3D"p">)</span><span class=3D"s=
">."</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">qrCode</span>(<s=
pan class=3D"k">let</span> <span class=3D"nv">productCode</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"QR code: </=
span>\<span class=3D"p">(</span><span class=3D"nv">productCode</span><span =
class=3D"p">)</span><span class=3D"s">."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "QR code: ABCDEFGHIJKLMNOP."</span>
</li></ol></div></div></div>
<p>If all of the associated values for an enumeration case are extracted as=
 constants, or if all are extracted as variables, you can place a single <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">var</span></=
code> or <code class=3D"docutils literal notranslate"><span class=3D"pre">l=
et</span></code> annotation before the case name, for brevity:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">sw=
itch</span> <span class=3D"nv">productBarcode</span> {
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> .<span =
class=3D"nv">upc</span>(<span class=3D"nv">numberSystem</span>, <span class=
=3D"nv">manufacturer</span>, <span class=3D"nv">product</span>, <span class=
=3D"nv">check</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"UPC : </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">numberSystem</span><span cl=
ass=3D"p">)</span><span class=3D"s">, </span>\<span class=3D"p">(</span><sp=
an class=3D"nv">manufacturer</span><span class=3D"p">)</span><span class=3D=
"s">, </span>\<span class=3D"p">(</span><span class=3D"nv">product</span><s=
pan class=3D"p">)</span><span class=3D"s">, </span>\<span class=3D"p">(</sp=
an><span class=3D"nv">check</span><span class=3D"p">)</span><span class=3D"=
s">."</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> .<span =
class=3D"nv">qrCode</span>(<span class=3D"nv">productCode</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"QR code: </=
span>\<span class=3D"p">(</span><span class=3D"nv">productCode</span><span =
class=3D"p">)</span><span class=3D"s">."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "QR code: ABCDEFGHIJKLMNOP."</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID149">
<h2>Raw Values<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/LanguageGuide/Enumerations.html#ID149" title=3D"Permalink to this head=
line">=C2=B6</a></h2>
<p>The barcode example in <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID148"><span class=
=3D"std std-ref">Associated Values</span></a> shows how cases of an enumera=
tion can declare that they store associated values of different types. As a=
n alternative to associated values, enumeration cases can come prepopulated=
 with default values (called <em>raw values</em>), which are all of the sam=
e type.</p>
<p>Here=E2=80=99s an example that stores raw ASCII values alongside named e=
numeration cases:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">ASCIIControlCharacter</span>: <span class=3D"n=
c">Character</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">tab</span> =
=3D <span class=3D"s">"\t"</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">lineFeed</spa=
n> =3D <span class=3D"s">"\n"</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">carriageRetur=
n</span> =3D <span class=3D"s">"\r"</span>
</li><li>}
</li></ol></div></div></div>
<p>Here, the raw values for an enumeration called <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">ASCIIControlCharacter</span></code>=
 are defined to be of type <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Character</span></code>, and are set to some of the more c=
ommon ASCII control characters. <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Character</span></code> values are described in <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Langua=
geGuide/StringsAndCharacters.html"><span class=3D"doc">Strings and Characte=
rs</span></a>.</p>
<p>Raw values can be strings, characters, or any of the integer or floating=
-point number types. Each raw value must be unique within its enumeration d=
eclaration.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Raw values are <em>not</em> the same as associated values=
. Raw values are set to prepopulated values when you first define the enume=
ration in your code, like the three ASCII codes above. The raw value for a =
particular enumeration case is always the same. Associated values are set w=
hen you create a new constant or variable based on one of the enumeration=
=E2=80=99s cases, and can be different each time you do so.</p>
</div>
<div class=3D"section" id=3D"ID535">
<h3>Implicitly Assigned Raw Values<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID535" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p>When you=E2=80=99re working with enumerations that store integer or stri=
ng raw values, you don=E2=80=99t have to explicitly assign a raw value for =
each case. When you don=E2=80=99t, Swift automatically assigns the values f=
or you.</p>
<p>For example, when integers are used for raw values, the implicit value f=
or each case is one more than the previous case. If the first case doesn=E2=
=80=99t have a value set, its value is <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">0</span></code>.</p>
<p>The enumeration below is a refinement of the earlier <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">Planet</span></code> enumerat=
ion, with integer raw values to represent each planet=E2=80=99s order from =
the sun:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Planet</span>: <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">mercury</span=
> =3D <span class=3D"m">1</span>, <span class=3D"nv">venus</span>, <span cl=
ass=3D"nv">earth</span>, <span class=3D"nv">mars</span>, <span class=3D"nv"=
>jupiter</span>, <span class=3D"nv">saturn</span>, <span class=3D"nv">uranu=
s</span>, <span class=3D"nv">neptune</span>
</li><li>}
</li></ol></div></div></div>
<p>In the example above, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Planet.mercury</span></code> has an explicit raw value of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">1</span></co=
de>, <code class=3D"docutils literal notranslate"><span class=3D"pre">Plane=
t.venus</span></code> has an implicit raw value of <code class=3D"docutils =
literal notranslate"><span class=3D"pre">2</span></code>, and so on.</p>
<p>When strings are used for raw values, the implicit value for each case i=
s the text of that case=E2=80=99s name.</p>
<p>The enumeration below is a refinement of the earlier <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">CompassPoint</span></code> en=
umeration, with string raw values to represent each direction=E2=80=99s nam=
e:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">CompassPoint</span>: <span class=3D"nc">String=
</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">north</span>,=
 <span class=3D"nv">south</span>, <span class=3D"nv">east</span>, <span cla=
ss=3D"nv">west</span>
</li><li>}
</li></ol></div></div></div>
<p>In the example above, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">CompassPoint.south</span></code> has an implicit raw value o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">"south"<=
/span></code>, and so on.</p>
<p>You access the raw value of an enumeration case with its <code class=3D"=
docutils literal notranslate"><span class=3D"pre">rawValue</span></code> pr=
operty:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">earthsOrder</span> =3D <span class=3D"nv">Plane=
t</span>.<span class=3D"nv">earth</span>.<span class=3D"nv">rawValue</span>
</li><li><span class=3D"c">// earthsOrder is 3</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">sunsetDirection</s=
pan> =3D <span class=3D"nv">CompassPoint</span>.<span class=3D"nv">west</sp=
an>.<span class=3D"nv">rawValue</span>
</li><li><span class=3D"c">// sunsetDirection is "west"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID150">
<h3>Initializing from a Raw Value<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID150" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>If you define an enumeration with a raw-value type, the enumeration auto=
matically receives an initializer that takes a value of the raw value=E2=80=
=99s type (as a parameter called <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">rawValue</span></code>) and returns either an enumer=
ation case or <code class=3D"docutils literal notranslate"><span class=3D"p=
re">nil</span></code>. You can use this initializer to try to create a new =
instance of the enumeration.</p>
<p>This example identifies Uranus from its raw value of <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">7</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">possiblePlanet</span> =3D <span class=3D"nv">Pl=
anet</span>(<span class=3D"nv">rawValue</span>: <span class=3D"m">7</span>)
</li><li><span class=3D"c">// possiblePlanet is of type Planet? and equals =
Planet.uranus</span>
</li></ol></div></div></div>
<p>Not all possible <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Int</span></code> values will find a matching planet, however. Be=
cause of this, the raw value initializer always returns an <em>optional</em=
> enumeration case. In the example above, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">possiblePlanet</span></code> is of type <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Planet?</span=
></code>, or =E2=80=9Coptional <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Planet</span></code>.=E2=80=9D</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The raw value initializer is a failable initializer, beca=
use not every raw value will return an enumeration case. For more informati=
on, see <a class=3D"reference internal" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#ID376"><span class=3D"std std-ref"=
>Failable Initializers</span></a>.</p>
</div>
<p>If you try to find a planet with a position of <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">11</span></code>, the optional <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Planet</span><=
/code> value returned by the raw value initializer will be <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">nil</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">positionToFind</span> =3D <span class=3D"m">11<=
/span>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">somePlanet</span> =3D <span class=3D"nv">Planet</span>(<span clas=
s=3D"nv">rawValue</span>: <span class=3D"nv">positionToFind</span>) {
</li><li>    <span class=3D"k">switch</span> <span class=3D"nv">somePlanet<=
/span> {
</li><li>    <span class=3D"k">case</span> .<span class=3D"nv">earth</span>=
:
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"Mostly =
harmless"</span>)
</li><li>    <span class=3D"k">default</span>:
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"Not a s=
afe place for humans"</span>)
</li><li>    }
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"There isn't=
 a planet at position </span>\<span class=3D"p">(</span><span class=3D"nv">=
positionToFind</span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "There isn't a planet at position 11"<=
/span>
</li></ol></div></div></div>
<p>This example uses optional binding to try to access a planet with a raw =
value of <code class=3D"docutils literal notranslate"><span class=3D"pre">1=
1</span></code>. The statement <code class=3D"docutils literal notranslate"=
><span class=3D"pre">if</span> <span class=3D"pre">let</span> <span class=
=3D"pre">somePlanet</span> <span class=3D"pre">=3D</span> <span class=3D"pr=
e">Planet(rawValue:</span> <span class=3D"pre">11)</span></code> creates an=
 optional <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Planet</span></code>, and sets <code class=3D"docutils literal notranslate"=
><span class=3D"pre">somePlanet</span></code> to the value of that optional=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Planet</s=
pan></code> if it can be retrieved. In this case, it isn=E2=80=99t possible=
 to retrieve a planet with a position of <code class=3D"docutils literal no=
translate"><span class=3D"pre">11</span></code>, and so the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">else</span></code> branch=
 is executed instead.</p>
</div>
</div>
<div class=3D"section" id=3D"ID536">
<h2>Recursive Enumerations<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/Enumerations.html#ID536" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>A <em>recursive enumeration</em> is an enumeration that has another inst=
ance of the enumeration as the associated value for one or more of the enum=
eration cases. You indicate that an enumeration case is recursive by writin=
g <code class=3D"docutils literal notranslate"><span class=3D"pre">indirect=
</span></code> before it, which tells the compiler to insert the necessary =
layer of indirection.</p>
<p>For example, here is an enumeration that stores simple arithmetic expres=
sions:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">ArithmeticExpression</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">number</span>=
(<span class=3D"nv">Int</span>)
</li><li>    <span class=3D"k">indirect</span> <span class=3D"k">case</span=
> <span class=3D"nv">addition</span>(<span class=3D"nv">ArithmeticExpressio=
n</span>, <span class=3D"nv">ArithmeticExpression</span>)
</li><li>    <span class=3D"k">indirect</span> <span class=3D"k">case</span=
> <span class=3D"nv">multiplication</span>(<span class=3D"nv">ArithmeticExp=
ression</span>, <span class=3D"nv">ArithmeticExpression</span>)
</li><li>}
</li></ol></div></div></div>
<p>You can also write <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">indirect</span></code> before the beginning of the enumeration =
to enable indirection for all of the enumeration=E2=80=99s cases that have =
an associated value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">in=
direct</span> <span class=3D"k">enum</span> <span class=3D"nv">ArithmeticEx=
pression</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">number</span>=
(<span class=3D"nv">Int</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">addition</spa=
n>(<span class=3D"nv">ArithmeticExpression</span>, <span class=3D"nv">Arith=
meticExpression</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">multiplicatio=
n</span>(<span class=3D"nv">ArithmeticExpression</span>, <span class=3D"nv"=
>ArithmeticExpression</span>)
</li><li>}
</li></ol></div></div></div>
<p>This enumeration can store three kinds of arithmetic expressions: a plai=
n number, the addition of two expressions, and the multiplication of two ex=
pressions. The <code class=3D"docutils literal notranslate"><span class=3D"=
pre">addition</span></code> and <code class=3D"docutils literal notranslate=
"><span class=3D"pre">multiplication</span></code> cases have associated va=
lues that are also arithmetic expressions=E2=80=94these associated values m=
ake it possible to nest expressions. For example, the expression <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">(5</span> <span clas=
s=3D"pre">+</span> <span class=3D"pre">4)</span> <span class=3D"pre">*</spa=
n> <span class=3D"pre">2</span></code> has a number on the right-hand side =
of the multiplication and another expression on the left-hand side of the m=
ultiplication. Because the data is nested, the enumeration used to store th=
e data also needs to support nesting=E2=80=94this means the enumeration nee=
ds to be recursive. The code below shows the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">ArithmeticExpression</span></code> recur=
sive enumeration being created for <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">(5</span> <span class=3D"pre">+</span> <span class=
=3D"pre">4)</span> <span class=3D"pre">*</span> <span class=3D"pre">2</span=
></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">five</span> =3D <span class=3D"nv">ArithmeticEx=
pression</span>.<span class=3D"nv">number</span>(<span class=3D"m">5</span>=
)
</li><li><span class=3D"k">let</span> <span class=3D"nv">four</span> =3D <s=
pan class=3D"nv">ArithmeticExpression</span>.<span class=3D"nv">number</spa=
n>(<span class=3D"m">4</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">sum</span> =3D <sp=
an class=3D"nv">ArithmeticExpression</span>.<span class=3D"nv">addition</sp=
an>(<span class=3D"nv">five</span>, <span class=3D"nv">four</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">product</span> =3D=
 <span class=3D"nv">ArithmeticExpression</span>.<span class=3D"nv">multipli=
cation</span>(<span class=3D"nv">sum</span>, <span class=3D"nv">ArithmeticE=
xpression</span>.<span class=3D"nv">number</span>(<span class=3D"m">2</span=
>))
</li></ol></div></div></div>
<p>A recursive function is a straightforward way to work with data that has=
 a recursive structure. For example, here=E2=80=99s a function that evaluat=
es an arithmetic expression:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">evaluate</span>(<span class=3D"k">_</span> <sp=
an class=3D"nv">expression</span>: <span class=3D"nc">ArithmeticExpression<=
/span>) -&gt; <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">switch</span> <span class=3D"nv">expression<=
/span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"k">let</span> .<s=
pan class=3D"nv">number</span>(<span class=3D"nv">value</span>):
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">value</=
span>
</li><li>    <span class=3D"k">case</span> <span class=3D"k">let</span> .<s=
pan class=3D"nv">addition</span>(<span class=3D"nv">left</span>, <span clas=
s=3D"nv">right</span>):
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">evaluat=
e</span>(<span class=3D"nv">left</span>) + <span class=3D"nv">evaluate</spa=
n>(<span class=3D"nv">right</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"k">let</span> .<s=
pan class=3D"nv">multiplication</span>(<span class=3D"nv">left</span>, <spa=
n class=3D"nv">right</span>):
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">evaluat=
e</span>(<span class=3D"nv">left</span>) * <span class=3D"nv">evaluate</spa=
n>(<span class=3D"nv">right</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">evaluate</span>=
(<span class=3D"nv">product</span>))
</li><li><span class=3D"c">// Prints "18"</span>
</li></ol></div></div></div>
<p>This function evaluates a plain number by simply returning the associate=
d value. It evaluates an addition or multiplication by evaluating the expre=
ssion on the left-hand side, evaluating the expression on the right-hand si=
de, and then adding them or multiplying them.</p>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Closures.html">Closures</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/ClassesAndStructures.html">Structures and Classes</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/barcode_UPC_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gJCAhJSEiJyMkKCQlKiYnKSUmLCgpKycoLior
MCwtLyssMy8wMi4vMS0uNTEyODQ1NzM0NjIzPDg5OTU2Pzs8Pjo7PTk6REBBRkJDRUFCTEhJS0dI
Uk5PLCkqMzAxOjc4OTY3Pzw9QT4/QD0+TElKSEVGR0RFRkNEVVJTVFFSU1BRUk9QT0xNTktMTUpL
X1xdXVpbXFlaW1hZWldYWVZXWFVWVlNUamdoaWZnaGVmZ2RlZGFiY2BhYl9gYV5fYF1efnt8fXp7
fHl6eHV2d3R1dnN0cm9wcW5vcG1ub2xtbmtshIGCf31+fnx9qaeoqKanp6WmoqChoZ+goJ6fn52e
m5mampiZmZeYmJaXk5GSkpCRkY+QjYuMjIqLi4mKhoSFhYOEhIKDvbu8vLq7t7W2trS1tbO0r62u
rqyt/Pv89fT17u3u5+bn4N/g397f2djZ2NfY0tHSy8rLysnKxMPEw8LDvby9JiMjLSoqNDExOzg4
Q0BAQj8/SkdHSUZGUU5OUE1NXltbWFVVV1RUZWJienh4eXd3dHJyc3FxbGpqa2lpnJqal5WVlZOT
kY+Pj42NioiIiYeHg4GBgX9/9vX17+7u6Ofn4uHh4eDg3Nvb29ra2tnZ1tXV1dTU1NPT09LS0M/P
z87Ozs3NzczMzMvLysnJycjIyMfHx8bGxsXFxcTEwsHBwcDAwL+/v76+vr29u7q6urm5ubi4uLe3
t7a2tLOzs7KysrGxsbCwsK+vraysrKurq6qqqqmppqWlpaSkpKOjnp2dl5aW/v7+/f39+/v7+Pj4
9/f38vLy8fHx7Ozs6urq6enp5eXl4+Pj3Nzc1tbW0NDQ////AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzSnTrQAAANZ0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////AAU78lIAABJKSURB
VHja7JxpYBRVuobfejuQsLSEiCSIohD2MawhsrqgiCAuURAHBxAQrmhAEFRswGUQieyLbCIKgiOg
oOCCiCKyJCEBQUG87l4dtxGXcaLscH90V9Wp7k7oMH256rzPH+r0V6frdD1Vp0595wTLgvhPhDoF
Ei8kXki8kHgh8ULihcQLiRcSLyRe/D7FP+/3+/3DAazz+/3+7UC6PwQA3OQ3yABG2NvtASDLjPYH
rre3e5lHGOb3+/0vlXxMv9/vv8kMF9qf1g9Vfj6i8jAArxuVe9kN7u/3+xsBQG6wwUGeNRvqrfwX
ex/np64DMNz4nU7lXHvXN83f6bS2USg60e/3NweA5n6/f1L4+U43j+ngtHaSWXli2cQnlGlvXzGA
DAAJxQAsYF+xEc1cbBS+B5rZwYMA8JO56+fA0GdC21l/MwL9ZgDwlXxMAMhcZIQt+9OfSqzcb7q3
ctbTdiuKgW8AYHMx8L1zL5gN9VbOWhr+UxMAZBi/06m8OeLrsv5mtPab0L+ri4HDAHC4GHgp/Hzv
KzaO6eC09iWz8mp19ULihcQLiRcSL/FC4oXEC4kXEi8kXki8kHgh8ULihcQLiRcSLyReSLyQeCHx
QuKFxAuJFxIvJF5IvMQLiRcSLyReSLyQeCHxQuKFxAuJFxIvJF5IvJB4IfFC4oXEC4kXEi8kXki8
kHgh8ULiJV5IvJB4IfFC4oXEC4kXEi8kXki8kHgh8ULihcQLiRcSLyReSLyQeCHxQuKFxAuJl3gh
8ULihcQLiRcSLyReSLyQeCHxQuKFxAuJFxIvJF5IvJB4IfFC4oXEC4kXEi8kXki8xAuJFxIvJF5I
vJB4IfFC4oXEC4kXEi8kXki8kHgh8ULihcQLiRcSLyReSLyQeCHxEi8kXki8kHgh8ULihcQLiRcS
LyReSLyQeCHxQuKFxAuJFxIvJF5IvJB4IfFC4oXES7xOgcQLiRcSLyReSLyQeCHx4ndDwv/hd6fn
hzaOtwHwpBk6/hqetqNLzEBxfvgnr+QDOAZglfN1ZviQ/Slal1S5GMCKqJVtxowF0DpUSMv3NMis
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
IfjfAQB7p1Xh5SROJQAAAABJRU5ErkJggg==

------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/barcode_QR_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gJCAhMCwtLyssMS0uPDg5Pjo7PTk6/v7+8vLy
8fHx5eXl5OTk////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjxr2+AAAABB0
Uk5T////////////////////AOAjXRkAAAUaSURBVHja7N3LbtswEAXQuLFsoOj//2kEo4iVbqNB
OvKIlKym5+4CW6/jUIsByTmdXqRzfiBgypSpMGXKVJgyZSpMn5zz5z+u005XHcbCl8NdhWNLn26W
0++/mU7vO5leKl8Od3Vp+HSzvBr73qdMhSlTpkyFKVOmwpQpU6nlnHz2q1+h7JaeKq/Xdcw+T5SZ
Tm/d7mBIHyav13XMPk9k7HufMmUqTJkyFaZMmQpTpkxlOefHv1qaI7ddve42zO9qXsUqFfM2eqKC
aWmO3Ib1ujnEpaF8t9ETGfvep0yZClOmTIUpU6bClClTWc75CDcxpPW6Ia0I3eelv+1qjP+Y6djw
6bDXnEBjnylTYcqUqTBlylSYMmXKVHrmEHWpll317ky/zG77BBr7TIUpU6ZMhSlTpsKUKVNhepQU
6lJDZX7Xdj0x8j33Stfd6IkKpuMx/gs67rk3Gvvep0yFKVOmwpQpU2HKlKkwfVayulTYGa8lpdl3
oZrXsa/HPk+U9uaYnvM7h2pex74e+zyRsc+UKVNhypSpMGXKVJgyZSrLmdWlhr12ZmuZfTc1fLpZ
Pj5Xx06nA/ywYc+9n2/GvjBlylSYMmXKVJgyZSpMmX73zGp9+b55YcpcaUJdfua8l25Lt9ztjk2e
d2aa75sXSpG1CXX5md/WH1u6yY7HXox971OmwpQpU2HKlClTYcqUqbQkW28a1tLmZbNb2g93u166
4SbDqa7pdfPVwfk9T+tMSzvjheWx4X6266UbF/yGU6WPkK8OHo1971OmwpQpU2HKlKkwZcpUmG6X
9fv1hQ3r8ppbSGlXvVCvKxXo8imCpfmEj1cgu+3Xl9fcQkq76l0q2/flDz5VKoHT2gqkse99ypSp
MGXKVJgyZSpMmTKV5ZxXH5kX9/JKYGm/vrz0d6+027g2VALTC51+dzEtFfdamuculP5Kq3RLxb3C
hV6Nfe9TpsKUKVOmwpQpU2HKlKnUUljDG9JSrwu5VlaYllbp5seWphem1ctZb45ua3jz5FMEL5UL
lVbpLhzbcM8JjrHvfcqUqTBlylSYMmUqTJkyleVkfXhbuuWWUpqbd08/bWkCEhJKnbdplenY8OO0
HFuam5enpQlIPFVl7bCx733KVJgyZcpUmDJlKkyZMpVaCn14O6al+0aoueWz7/KE582PfbwQWujD
2zFN3TfCEuuG/4PS847GvvcpU2HKlKkwZcpUmDJlylQ6Zv0a3lI26ni7eJO3hke4rW0vstMa3o06
3i7e5NBSCczXHRv73qdMhSlTpsKUKVOmwpQpU2lJoY9Eadbf0FBrKq3DLW3Bl6dX2bBgWpoF17BK
urYOd3jvd91OZUNj3/uUKVNhypSpMGXKVJgyZSrLOR/hJkpraUNKewzmLX0buo106sPbMS1rh0v1
0ryl78v6U+nD633KVJgyZcpUmDJlKkyZMpViDlGXCvW6MIMuTLfr2DGk1BPkmt7k4UxDvS7uyPfW
7cxRvDRT8eFWHca+9ylTpsKUKVNhypSpMGXKVJZTqEuVOu2WKnL5vL7V++Y964kKpuNmP2w+r2/1
vnnPeiJjnylTpsKUKVNhypSpMGXKVJaT1aVuQ7fL3BuOzfvw5mnZYzAcGz6d1wk/3h80naZD/OzT
wxPqvji2YY/BKd0JcDT2vU+ZClOmTIUpU6ZMhSnT/ymzGsrpdaerfsz/zK+bf/kjvVDpiVouNDvw
5P/K2GfKVJgyZSpMmTIVpky/W/4MANyjYoMnfCa8AAAAAElFTkSuQmCC

------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--UWUSXYqPKyqdZMTTvfnuo36ZXLYKWPQ9ts8M47oB3S------
