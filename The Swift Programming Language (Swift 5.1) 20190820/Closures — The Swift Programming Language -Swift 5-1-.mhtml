From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Closures.html
Subject: =?utf-8?Q?Closures=20=E2=80=94=20The=20Swift=20Programming=20Language=20(?=
 =?utf-8?Q?Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:55:05 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----"


------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: text/html
Content-ID: <frame-F1E52A7A9AAABE13E9F05B62DD249870@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Closures.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Closures =E2=80=94 The Swift Programming Language (Swift 5.1)</t=
itle>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#">Closu=
res</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#">Closures</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID95">Closure Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID96">The Sorted Method</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID97">Closure Expression Syntax</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID98">Inferring Type From Context</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID99">Implicit Returns from Single-Expressio=
n Closures</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID100">Shorthand Argument Names</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID101">Operator Methods</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID102">Trailing Closures</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID103">Capturing Values</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID104">Closures Are Reference Types</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID546">Escaping Closures</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#ID543">Autoclosures</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"closures">
<h1>Closures<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Closures.html#closures" title=3D"Permalink to this headlin=
e">=C2=B6</a></h1>
<p><em>Closures</em> are self-contained blocks of functionality that can be=
 passed around and used in your code. Closures in Swift are similar to bloc=
ks in C and Objective-C and to lambdas in other programming languages.</p>
<p>Closures can capture and store references to any constants and variables=
 from the context in which they are defined. This is known as <em>closing o=
ver</em> those constants and variables. Swift handles all of the memory man=
agement of capturing for you.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Don=E2=80=99t worry if you are not familiar with the conc=
ept of capturing. It is explained in detail below in <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.=
html#ID103"><span class=3D"std std-ref">Capturing Values</span></a>.</p>
</div>
<p>Global and nested functions, as introduced in <a class=3D"reference inte=
rnal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.htm=
l"><span class=3D"doc">Functions</span></a>, are actually special cases of =
closures. Closures take one of three forms:</p>
<ul class=3D"simple">
<li>Global functions are closures that have a name and do not capture any v=
alues.</li>
<li>Nested functions are closures that have a name and can capture values f=
rom their enclosing function.</li>
<li>Closure expressions are unnamed closures written in a lightweight synta=
x that can capture values from their surrounding context.</li>
</ul>
<p>Swift=E2=80=99s closure expressions have a clean, clear style, with opti=
mizations that encourage brief, clutter-free syntax in common scenarios. Th=
ese optimizations include:</p>
<ul class=3D"simple">
<li>Inferring parameter and return value types from context</li>
<li>Implicit returns from single-expression closures</li>
<li>Shorthand argument names</li>
<li>Trailing closure syntax</li>
</ul>
<div class=3D"section" id=3D"ID95">
<h2>Closure Expressions<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/Closures.html#ID95" title=3D"Permalink to this =
headline">=C2=B6</a></h2>
<p>Nested functions, as introduced in <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID178"><=
span class=3D"std std-ref">Nested Functions</span></a>, are a convenient me=
ans of naming and defining self-contained blocks of code as part of a large=
r function. However, it is sometimes useful to write shorter versions of fu=
nction-like constructs without a full declaration and name. This is particu=
larly true when you work with functions or methods that take functions as o=
ne or more of their arguments.</p>
<p><em>Closure expressions</em> are a way to write inline closures in a bri=
ef, focused syntax. Closure expressions provide several syntax optimization=
s for writing closures in a shortened form without loss of clarity or inten=
t. The closure expression examples below illustrate these optimizations by =
refining a single example of the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">sorted(by:)</span></code> method over several iterat=
ions, each of which expresses the same functionality in a more succinct way=
.</p>
<div class=3D"section" id=3D"ID96">
<h3>The Sorted Method<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Closures.html#ID96" title=3D"Permalink to this he=
adline">=C2=B6</a></h3>
<p>Swift=E2=80=99s standard library provides a method called <code class=3D=
"docutils literal notranslate"><span class=3D"pre">sorted(by:)</span></code=
>, which sorts an array of values of a known type, based on the output of a=
 sorting closure that you provide. Once it completes the sorting process, t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">sorted(=
by:)</span></code> method returns a new array of the same type and size as =
the old one, with its elements in the correct sorted order. The original ar=
ray is not modified by the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">sorted(by:)</span></code> method.</p>
<p>The closure expression examples below use the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">sorted(by:)</span></code> method to =
sort an array of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">String</span></code> values in reverse alphabetical order. Here=E2=
=80=99s the initial array to be sorted:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">names</span> =3D [<span class=3D"s">"Chris"</sp=
an>, <span class=3D"s">"Alex"</span>, <span class=3D"s">"Ewa"</span>, <span=
 class=3D"s">"Barry"</span>, <span class=3D"s">"Daniella"</span>]
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">sor=
ted(by:)</span></code> method accepts a closure that takes two arguments of=
 the same type as the array=E2=80=99s contents, and returns a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></code> va=
lue to say whether the first value should appear before or after the second=
 value once the values are sorted. The sorting closure needs to return <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">true</span></c=
ode> if the first value should appear <em>before</em> the second value, and=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">false</sp=
an></code> otherwise.</p>
<p>This example is sorting an array of <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">String</span></code> values, and so the sortin=
g closure needs to be a function of type <code class=3D"docutils literal no=
translate"><span class=3D"pre">(String,</span> <span class=3D"pre">String)<=
/span> <span class=3D"pre">-&gt;</span> <span class=3D"pre">Bool</span></co=
de>.</p>
<p>One way to provide the sorting closure is to write a normal function of =
the correct type, and to pass it in as an argument to the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">sorted(by:)</span></code> m=
ethod:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">backward</span>(<span class=3D"k">_</span> <sp=
an class=3D"nv">s1</span>: <span class=3D"nc">String</span>, <span class=3D=
"k">_</span> <span class=3D"nv">s2</span>: <span class=3D"nc">String</span>=
) -&gt; <span class=3D"nc">Bool</span> {
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">s1</span> &=
gt; <span class=3D"nv">s2</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">reversedNames</spa=
n> =3D <span class=3D"nv">names</span>.<span class=3D"nv">sorted</span>(<sp=
an class=3D"nv">by</span>: <span class=3D"nv">backward</span>)
</li><li><span class=3D"c">// reversedNames is equal to ["Ewa", "Daniella",=
 "Chris", "Barry", "Alex"]</span>
</li></ol></div></div></div>
<p>If the first string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">s1</span></code>) is greater than the second string (<code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">s2</span></code>),=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">backw=
ard(_:_:)</span></code> function will return <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">true</span></code>, indicating that <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">s1</span></cod=
e> should appear before <code class=3D"docutils literal notranslate"><span =
class=3D"pre">s2</span></code> in the sorted array. For characters in strin=
gs, =E2=80=9Cgreater than=E2=80=9D means =E2=80=9Cappears later in the alph=
abet than=E2=80=9D. This means that the letter <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">"B"</span></code> is =E2=80=9Cgreater =
than=E2=80=9D the letter <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">"A"</span></code>, and the string <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">"Tom"</span></code> is greater than =
the string <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>"Tim"</span></code>. This gives a reverse alphabetical sort, with <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">"Barry"</span></co=
de> being placed before <code class=3D"docutils literal notranslate"><span =
class=3D"pre">"Alex"</span></code>, and so on.</p>
<p>However, this is a rather long-winded way to write what is essentially a=
 single-expression function (<code class=3D"docutils literal notranslate"><=
span class=3D"pre">a</span> <span class=3D"pre">&gt;</span> <span class=3D"=
pre">b</span></code>). In this example, it would be preferable to write the=
 sorting closure inline, using closure expression syntax.</p>
</div>
<div class=3D"section" id=3D"ID97">
<h3>Closure Expression Syntax<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/Closures.html#ID97" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>Closure expression syntax has the following general form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>{ (<s=
pan class=3D"gi">parameters</span>) -&gt; <span class=3D"gi">return type</s=
pan> <span class=3D"k">in</span>
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>parameters</em> in closure expression syntax can be in-out param=
eters, but they can=E2=80=99t have a default value. Variadic parameters can=
 be used if you name the variadic parameter. Tuples can also be used as par=
ameter types and return types.</p>
<p>The example below shows a closure expression version of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">backward(_:_:)</span>=
</code> function from above:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: { (<span class=3D"nv">s1</span>=
: <span class=3D"nc">String</span>, <span class=3D"nv">s2</span>: <span cla=
ss=3D"nc">String</span>) -&gt; <span class=3D"nc">Bool</span> <span class=
=3D"k">in</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">s1</span> &=
gt; <span class=3D"nv">s2</span>
</li><li>})
</li></ol></div></div></div>
<p>Note that the declaration of parameters and return type for this inline =
closure is identical to the declaration from the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">backward(_:_:)</span></code> functio=
n. In both cases, it is written as <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">(s1:</span> <span class=3D"pre">String,</span> <sp=
an class=3D"pre">s2:</span> <span class=3D"pre">String)</span> <span class=
=3D"pre">-&gt;</span> <span class=3D"pre">Bool</span></code>. However, for =
the inline closure expression, the parameters and return type are written <=
em>inside</em> the curly braces, not outside of them.</p>
<p>The start of the closure=E2=80=99s body is introduced by the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">in</span></code> keyw=
ord. This keyword indicates that the definition of the closure=E2=80=99s pa=
rameters and return type has finished, and the body of the closure is about=
 to begin.</p>
<p>Because the body of the closure is so short, it can even be written on a=
 single line:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: { (<span class=3D"nv">s1</span>=
: <span class=3D"nc">String</span>, <span class=3D"nv">s2</span>: <span cla=
ss=3D"nc">String</span>) -&gt; <span class=3D"nc">Bool</span> <span class=
=3D"k">in</span> <span class=3D"k">return</span> <span class=3D"nv">s1</spa=
n> &gt; <span class=3D"nv">s2</span> } )
</li></ol></div></div></div>
<p>This illustrates that the overall call to the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">sorted(by:)</span></code> method has=
 remained the same. A pair of parentheses still wrap the entire argument fo=
r the method. However, that argument is now an inline closure.</p>
</div>
<div class=3D"section" id=3D"ID98">
<h3>Inferring Type From Context<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/LanguageGuide/Closures.html#ID98" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>Because the sorting closure is passed as an argument to a method, Swift =
can infer the types of its parameters and the type of the value it returns.=
 The <code class=3D"docutils literal notranslate"><span class=3D"pre">sorte=
d(by:)</span></code> method is being called on an array of strings, so its =
argument must be a function of type <code class=3D"docutils literal notrans=
late"><span class=3D"pre">(String,</span> <span class=3D"pre">String)</span=
> <span class=3D"pre">-&gt;</span> <span class=3D"pre">Bool</span></code>. =
This means that the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">(String,</span> <span class=3D"pre">String)</span></code> and <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></=
code> types do not need to be written as part of the closure expression=E2=
=80=99s definition. Because all of the types can be inferred, the return ar=
row (<code class=3D"docutils literal notranslate"><span class=3D"pre">-&gt;=
</span></code>) and the parentheses around the names of the parameters can =
also be omitted:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: { <span class=3D"nv">s1</span>,=
 <span class=3D"nv">s2</span> <span class=3D"k">in</span> <span class=3D"k"=
>return</span> <span class=3D"nv">s1</span> &gt; <span class=3D"nv">s2</spa=
n> } )
</li></ol></div></div></div>
<p>It is always possible to infer the parameter types and return type when =
passing a closure to a function or method as an inline closure expression. =
As a result, you never need to write an inline closure in its fullest form =
when the closure is used as a function or method argument.</p>
<p>Nonetheless, you can still make the types explicit if you wish, and doin=
g so is encouraged if it avoids ambiguity for readers of your code. In the =
case of the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">sorted(by:)</span></code> method, the purpose of the closure is clear fro=
m the fact that sorting is taking place, and it is safe for a reader to ass=
ume that the closure is likely to be working with <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">String</span></code> values, becaus=
e it is assisting with the sorting of an array of strings.</p>
</div>
<div class=3D"section" id=3D"ID99">
<h3>Implicit Returns from Single-Expression Closures<a class=3D"headerlink"=
 href=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID99=
" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Single-expression closures can implicitly return the result of their sin=
gle expression by omitting the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">return</span></code> keyword from their declaration, a=
s in this version of the previous example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: { <span class=3D"nv">s1</span>,=
 <span class=3D"nv">s2</span> <span class=3D"k">in</span> <span class=3D"nv=
">s1</span> &gt; <span class=3D"nv">s2</span> } )
</li></ol></div></div></div>
<p>Here, the function type of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">sorted(by:)</span></code> method=E2=80=99s argument=
 makes it clear that a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Bool</span></code> value must be returned by the closure. Beca=
use the closure=E2=80=99s body contains a single expression (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">s1</span> <span class=3D=
"pre">&gt;</span> <span class=3D"pre">s2</span></code>) that returns a <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></c=
ode> value, there is no ambiguity, and the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">return</span></code> keyword can be omitte=
d.</p>
</div>
<div class=3D"section" id=3D"ID100">
<h3>Shorthand Argument Names<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Closures.html#ID100" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>Swift automatically provides shorthand argument names to inline closures=
, which can be used to refer to the values of the closure=E2=80=99s argumen=
ts by the names <code class=3D"docutils literal notranslate"><span class=3D=
"pre">$0</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">$1</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">$2</span></code>, and so on.</p>
<p>If you use these shorthand argument names within your closure expression=
, you can omit the closure=E2=80=99s argument list from its definition, and=
 the number and type of the shorthand argument names will be inferred from =
the expected function type. The <code class=3D"docutils literal notranslate=
"><span class=3D"pre">in</span></code> keyword can also be omitted, because=
 the closure expression is made up entirely of its body:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: { <span class=3D"nv">$0</span> =
&gt; <span class=3D"nv">$1</span> } )
</li></ol></div></div></div>
<p>Here, <code class=3D"docutils literal notranslate"><span class=3D"pre">$=
0</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">$1</span></code> refer to the closure=E2=80=99s first and second =
<code class=3D"docutils literal notranslate"><span class=3D"pre">String</sp=
an></code> arguments.</p>
</div>
<div class=3D"section" id=3D"ID101">
<h3>Operator Methods<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Closures.html#ID101" title=3D"Permalink to this he=
adline">=C2=B6</a></h3>
<p>There=E2=80=99s actually an even <em>shorter</em> way to write the closu=
re expression above. Swift=E2=80=99s <code class=3D"docutils literal notran=
slate"><span class=3D"pre">String</span></code> type defines its string-spe=
cific implementation of the greater-than operator (<code class=3D"docutils =
literal notranslate"><span class=3D"pre">&gt;</span></code>) as a method th=
at has two parameters of type <code class=3D"docutils literal notranslate">=
<span class=3D"pre">String</span></code>, and returns a value of type <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></co=
de>. This exactly matches the method type needed by the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">sorted(by:)</span></code> met=
hod. Therefore, you can simply pass in the greater-than operator, and Swift=
 will infer that you want to use its string-specific implementation:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>(<span class=3D"nv">by</span>: &gt;)
</li></ol></div></div></div>
<p>For more about operator method, see <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#=
ID42"><span class=3D"std std-ref">Operator Methods</span></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"ID102">
<h2>Trailing Closures<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Closures.html#ID102" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p>If you need to pass a closure expression to a function as the function=
=E2=80=99s final argument and the closure expression is long, it can be use=
ful to write it as a <em>trailing closure</em> instead. A trailing closure =
is written after the function call=E2=80=99s parentheses, even though it is=
 still an argument to the function. When you use the trailing closure synta=
x, you don=E2=80=99t write the argument label for the closure as part of th=
e function call.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunctionThatTakesAClosure</span>(<span cla=
ss=3D"nv">closure</span>: () -&gt; <span class=3D"nc">Void</span>) {
</li><li>    <span class=3D"c">// function body goes here</span>
</li><li>}
</li><li>
</li><li><span class=3D"c">// Here's how you call this function without usi=
ng a trailing closure:</span>
</li><li>
</li><li><span class=3D"nv">someFunctionThatTakesAClosure</span>(<span clas=
s=3D"nv">closure</span>: {
</li><li>    <span class=3D"c">// closure's body goes here</span>
</li><li>})
</li><li>
</li><li><span class=3D"c">// Here's how you call this function with a trai=
ling closure instead:</span>
</li><li>
</li><li><span class=3D"nv">someFunctionThatTakesAClosure</span>() {
</li><li>    <span class=3D"c">// trailing closure's body goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>The string-sorting closure from the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID97"><sp=
an class=3D"std std-ref">Closure Expression Syntax</span></a> section above=
 can be written outside of the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">sorted(by:)</span></code> method=E2=80=99s parentheses=
 as a trailing closure:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span>() { <span class=3D"nv">$0</span> &gt; <span class=3D"nv">$1</=
span> }
</li></ol></div></div></div>
<p>If a closure expression is provided as the function or method=E2=80=99s =
only argument and you provide that expression as a trailing closure, you do=
 not need to write a pair of parentheses <code class=3D"docutils literal no=
translate"><span class=3D"pre">()</span></code> after the function or metho=
d=E2=80=99s name when you call the function:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">r=
eversedNames</span> =3D <span class=3D"nv">names</span>.<span class=3D"nv">=
sorted</span> { <span class=3D"nv">$0</span> &gt; <span class=3D"nv">$1</sp=
an> }
</li></ol></div></div></div>
<p>Trailing closures are most useful when the closure is sufficiently long =
that it is not possible to write it inline on a single line. As an example,=
 Swift=E2=80=99s <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Array</span></code> type has a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">map(_:)</span></code> method which takes a cl=
osure expression as its single argument. The closure is called once for eac=
h item in the array, and returns an alternative mapped value (possibly of s=
ome other type) for that item. The nature of the mapping and the type of th=
e returned value is left up to the closure to specify.</p>
<p>After applying the provided closure to each array element, the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">map(_:)</span></cod=
e> method returns a new array containing all of the new mapped values, in t=
he same order as their corresponding values in the original array.</p>
<p>Here=E2=80=99s how you can use the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">map(_:)</span></code> method with a trailing cl=
osure to convert an array of <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Int</span></code> values into an array of <code class=3D=
"docutils literal notranslate"><span class=3D"pre">String</span></code> val=
ues. The array <code class=3D"docutils literal notranslate"><span class=3D"=
pre">[16,</span> <span class=3D"pre">58,</span> <span class=3D"pre">510]</s=
pan></code> is used to create the new array <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">["OneSix",</span> <span class=3D"pre">"Fi=
veEight",</span> <span class=3D"pre">"FiveOneZero"]</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">digitNames</span> =3D [
</li><li>    <span class=3D"m">0</span>: <span class=3D"s">"Zero"</span>, <=
span class=3D"m">1</span>: <span class=3D"s">"One"</span>, <span class=3D"m=
">2</span>: <span class=3D"s">"Two"</span>,   <span class=3D"m">3</span>: <=
span class=3D"s">"Three"</span>, <span class=3D"m">4</span>: <span class=3D=
"s">"Four"</span>,
</li><li>    <span class=3D"m">5</span>: <span class=3D"s">"Five"</span>, <=
span class=3D"m">6</span>: <span class=3D"s">"Six"</span>, <span class=3D"m=
">7</span>: <span class=3D"s">"Seven"</span>, <span class=3D"m">8</span>: <=
span class=3D"s">"Eight"</span>, <span class=3D"m">9</span>: <span class=3D=
"s">"Nine"</span>
</li><li>]
</li><li><span class=3D"k">let</span> <span class=3D"nv">numbers</span> =3D=
 [<span class=3D"m">16</span>, <span class=3D"m">58</span>, <span class=3D"=
m">510</span>]
</li></ol></div></div></div>
<p>The code above creates a dictionary of mappings between the integer digi=
ts and English-language versions of their names. It also defines an array o=
f integers, ready to be converted into strings.</p>
<p>You can now use the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">numbers</span></code> array to create an array of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">String</span></code> =
values, by passing a closure expression to the array=E2=80=99s <code class=
=3D"docutils literal notranslate"><span class=3D"pre">map(_:)</span></code>=
 method as a trailing closure:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">strings</span> =3D <span class=3D"nv">numbers</=
span>.<span class=3D"nv">map</span> { (<span class=3D"nv">number</span>) -&=
gt; <span class=3D"nc">String</span> <span class=3D"k">in</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">number</span> =
=3D <span class=3D"nv">number</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">output</span> =
=3D <span class=3D"s">""</span>
</li><li>    <span class=3D"k">repeat</span> {
</li><li>        <span class=3D"nv">output</span> =3D <span class=3D"nv">di=
gitNames</span>[<span class=3D"nv">number</span> % <span class=3D"m">10</sp=
an>]! + <span class=3D"nv">output</span>
</li><li>        <span class=3D"nv">number</span> /=3D <span class=3D"m">10=
</span>
</li><li>    } <span class=3D"k">while</span> <span class=3D"nv">number</sp=
an> &gt; <span class=3D"m">0</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">output</spa=
n>
</li><li>}
</li><li><span class=3D"c">// strings is inferred to be of type [String]</s=
pan>
</li><li><span class=3D"c">// its value is ["OneSix", "FiveEight", "FiveOne=
Zero"]</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">map=
(_:)</span></code> method calls the closure expression once for each item i=
n the array. You do not need to specify the type of the closure=E2=80=99s i=
nput parameter, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">number</span></code>, because the type can be inferred from the value=
s in the array to be mapped.</p>
<p>In this example, the variable <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">number</span></code> is initialized with the value o=
f the closure=E2=80=99s <code class=3D"docutils literal notranslate"><span =
class=3D"pre">number</span></code> parameter, so that the value can be modi=
fied within the closure body. (The parameters to functions and closures are=
 always constants.) The closure expression also specifies a return type of =
<code class=3D"docutils literal notranslate"><span class=3D"pre">String</sp=
an></code>, to indicate the type that will be stored in the mapped output a=
rray.</p>
<p>The closure expression builds a string called <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">output</span></code> each time it is=
 called. It calculates the last digit of <code class=3D"docutils literal no=
translate"><span class=3D"pre">number</span></code> by using the remainder =
operator (<code class=3D"docutils literal notranslate"><span class=3D"pre">=
number</span> <span class=3D"pre">%</span> <span class=3D"pre">10</span></c=
ode>), and uses this digit to look up an appropriate string in the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">digitNames</span><=
/code> dictionary. The closure can be used to create a string representatio=
n of any integer greater than zero.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The call to the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">digitNames</span></code> dictionary=E2=80=99s subsc=
ript is followed by an exclamation mark (<code class=3D"docutils literal no=
translate"><span class=3D"pre">!</span></code>), because dictionary subscri=
pts return an optional value to indicate that the dictionary lookup can fai=
l if the key does not exist. In the example above, it is guaranteed that <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">number</span=
> <span class=3D"pre">%</span> <span class=3D"pre">10</span></code> will al=
ways be a valid subscript key for the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">digitNames</span></code> dictionary, and so an =
exclamation mark is used to force-unwrap the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">String</span></code> value stored in the=
 subscript=E2=80=99s optional return value.</p>
</div>
<p>The string retrieved from the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">digitNames</span></code> dictionary is added to the =
<em>front</em> of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">output</span></code>, effectively building a string version of the=
 number in reverse. (The expression <code class=3D"docutils literal notrans=
late"><span class=3D"pre">number</span> <span class=3D"pre">%</span> <span =
class=3D"pre">10</span></code> gives a value of <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">6</span></code> for <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">16</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">8</span></code> for=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">58</span>=
</code>, and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">0</span></code> for <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">510</span></code>.)</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">num=
ber</span></code> variable is then divided by <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">10</span></code>. Because it is an inte=
ger, it is rounded down during the division, so <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">16</span></code> becomes <code class=
=3D"docutils literal notranslate"><span class=3D"pre">1</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">58</span></cod=
e> becomes <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>5</span></code>, and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">510</span></code> becomes <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">51</span></code>.</p>
<p>The process is repeated until <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">number</span></code> is equal to <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">0</span></code>, at which poi=
nt the <code class=3D"docutils literal notranslate"><span class=3D"pre">out=
put</span></code> string is returned by the closure, and is added to the ou=
tput array by the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">map(_:)</span></code> method.</p>
<p>The use of trailing closure syntax in the example above neatly encapsula=
tes the closure=E2=80=99s functionality immediately after the function that=
 closure supports, without needing to wrap the entire closure within the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">map(_:)</spa=
n></code> method=E2=80=99s outer parentheses.</p>
</div>
<div class=3D"section" id=3D"ID103">
<h2>Capturing Values<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Closures.html#ID103" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>A closure can <em>capture</em> constants and variables from the surround=
ing context in which it is defined. The closure can then refer to and modif=
y the values of those constants and variables from within its body, even if=
 the original scope that defined the constants and variables no longer exis=
ts.</p>
<p>In Swift, the simplest form of a closure that can capture values is a ne=
sted function, written within the body of another function. A nested functi=
on can capture any of its outer function=E2=80=99s arguments and can also c=
apture any constants and variables defined within the outer function.</p>
<p>Here=E2=80=99s an example of a function called <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">makeIncrementer</span></code>, whic=
h contains a nested function called <code class=3D"docutils literal notrans=
late"><span class=3D"pre">incrementer</span></code>. The nested <code class=
=3D"docutils literal notranslate"><span class=3D"pre">incrementer()</span><=
/code> function captures two values, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">runningTotal</span></code> and <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">amount</span></code>, from =
its surrounding context. After capturing these values, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">incrementer</span></code> is r=
eturned by <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>makeIncrementer</span></code> as a closure that increments <code class=3D"=
docutils literal notranslate"><span class=3D"pre">runningTotal</span></code=
> by <code class=3D"docutils literal notranslate"><span class=3D"pre">amoun=
t</span></code> each time it is called.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">makeIncrementer</span>(<span class=3D"nv">forI=
ncrement</span> <span class=3D"nv">amount</span>: <span class=3D"nc">Int</s=
pan>) -&gt; () -&gt; <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">runningTotal</=
span> =3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">incrementer</=
span>() -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"nv">runningTotal</span> +=3D <span class=3D=
"nv">amount</span>
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">running=
Total</span>
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">incrementer=
</span>
</li><li>}
</li></ol></div></div></div>
<p>The return type of <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">makeIncrementer</span></code> is <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">()</span> <span class=3D"pre">-&gt;</spa=
n> <span class=3D"pre">Int</span></code>. This means that it returns a <em>=
function</em>, rather than a simple value. The function it returns has no p=
arameters, and returns an <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Int</span></code> value each time it is called. To learn ho=
w functions can return other functions, see <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID1=
77"><span class=3D"std std-ref">Function Types as Return Types</span></a>.<=
/p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mak=
eIncrementer(forIncrement:)</span></code> function defines an integer varia=
ble called <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>runningTotal</span></code>, to store the current running total of the incr=
ementer that will be returned. This variable is initialized with a value of=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">0</span><=
/code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mak=
eIncrementer(forIncrement:)</span></code> function has a single <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code> par=
ameter with an argument label of <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">forIncrement</span></code>, and a parameter name of =
<code class=3D"docutils literal notranslate"><span class=3D"pre">amount</sp=
an></code>. The argument value passed to this parameter specifies how much =
<code class=3D"docutils literal notranslate"><span class=3D"pre">runningTot=
al</span></code> should be incremented by each time the returned incremente=
r function is called. The <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">makeIncrementer</span></code> function defines a nested fun=
ction called <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">incrementer</span></code>, which performs the actual incrementing. This =
function simply adds <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">amount</span></code> to <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">runningTotal</span></code>, and returns the result=
.</p>
<p>When considered in isolation, the nested <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">incrementer()</span></code> function migh=
t seem unusual:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">incrementer</span>() -&gt; <span class=3D"nc">=
Int</span> {
</li><li>    <span class=3D"nv">runningTotal</span> +=3D <span class=3D"nv"=
>amount</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">runningTota=
l</span>
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">inc=
rementer()</span></code> function doesn=E2=80=99t have any parameters, and =
yet it refers to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">runningTotal</span></code> and <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">amount</span></code> from within its function=
 body. It does this by capturing a <em>reference</em> to <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">runningTotal</span></code> a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">amount<=
/span></code> from the surrounding function and using them within its own f=
unction body. Capturing by reference ensures that <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">runningTotal</span></code> and <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">amount</span><=
/code> do not disappear when the call to <code class=3D"docutils literal no=
translate"><span class=3D"pre">makeIncrementer</span></code> ends, and also=
 ensures that <code class=3D"docutils literal notranslate"><span class=3D"p=
re">runningTotal</span></code> is available the next time the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">incrementer</span></c=
ode> function is called.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>As an optimization, Swift may instead capture and store a <em>copy</em> =
of a value if that value is not mutated by a closure, and if the value is n=
ot mutated after the closure is created.</p>
<p class=3D"last">Swift also handles all memory management involved in disp=
osing of variables when they are no longer needed.</p>
</div>
<p>Here=E2=80=99s an example of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">makeIncrementer</span></code> in action:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">incrementByTen</span> =3D <span class=3D"nv">ma=
keIncrementer</span>(<span class=3D"nv">forIncrement</span>: <span class=3D=
"m">10</span>)
</li></ol></div></div></div>
<p>This example sets a constant called <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">incrementByTen</span></code> to refer to an in=
crementer function that adds <code class=3D"docutils literal notranslate"><=
span class=3D"pre">10</span></code> to its <code class=3D"docutils literal =
notranslate"><span class=3D"pre">runningTotal</span></code> variable each t=
ime it is called. Calling the function multiple times shows this behavior i=
n action:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">i=
ncrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 10</span>
</li><li><span class=3D"nv">incrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 20</span>
</li><li><span class=3D"nv">incrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 30</span>
</li></ol></div></div></div>
<p>If you create a second incrementer, it will have its own stored referenc=
e to a new, separate <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">runningTotal</span></code> variable:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">incrementBySeven</span> =3D <span class=3D"nv">=
makeIncrementer</span>(<span class=3D"nv">forIncrement</span>: <span class=
=3D"m">7</span>)
</li><li><span class=3D"nv">incrementBySeven</span>()
</li><li><span class=3D"c">// returns a value of 7</span>
</li></ol></div></div></div>
<p>Calling the original incrementer (<code class=3D"docutils literal notran=
slate"><span class=3D"pre">incrementByTen</span></code>) again continues to=
 increment its own <code class=3D"docutils literal notranslate"><span class=
=3D"pre">runningTotal</span></code> variable, and does not affect the varia=
ble captured by <code class=3D"docutils literal notranslate"><span class=3D=
"pre">incrementBySeven</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">i=
ncrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 40</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you assign a closure to a property of a class instance=
, and the closure captures that instance by referring to the instance or it=
s members, you will create a strong reference cycle between the closure and=
 the instance. Swift uses <em>capture lists</em> to break these strong refe=
rence cycles. For more information, see <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCoun=
ting.html#ID56"><span class=3D"std std-ref">Strong Reference Cycles for Clo=
sures</span></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"ID104">
<h2>Closures Are Reference Types<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/Closures.html#ID104" title=3D"Permalin=
k to this headline">=C2=B6</a></h2>
<p>In the example above, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">incrementBySeven</span></code> and <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">incrementByTen</span></code> are co=
nstants, but the closures these constants refer to are still able to increm=
ent the <code class=3D"docutils literal notranslate"><span class=3D"pre">ru=
nningTotal</span></code> variables that they have captured. This is because=
 functions and closures are <em>reference types</em>.</p>
<p>Whenever you assign a function or a closure to a constant or a variable,=
 you are actually setting that constant or variable to be a <em>reference</=
em> to the function or closure. In the example above, it is the choice of c=
losure that <code class=3D"docutils literal notranslate"><span class=3D"pre=
">incrementByTen</span></code> <em>refers to</em> that is constant, and not=
 the contents of the closure itself.</p>
<p>This also means that if you assign a closure to two different constants =
or variables, both of those constants or variables refer to the same closur=
e.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">alsoIncrementByTen</span> =3D <span class=3D"nv=
">incrementByTen</span>
</li><li><span class=3D"nv">alsoIncrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 50</span>
</li><li>
</li><li><span class=3D"nv">incrementByTen</span>()
</li><li><span class=3D"c">// returns a value of 60</span>
</li></ol></div></div></div>
<p>The example above shows that calling <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">alsoIncrementByTen</span></code> is the same =
as calling <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>incrementByTen</span></code>. Because both of them refer to the same closu=
re, they both increment and return the same running total.</p>
</div>
<div class=3D"section" id=3D"ID546">
<h2>Escaping Closures<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Closures.html#ID546" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p>A closure is said to <em>escape</em> a function when the closure is pass=
ed as an argument to the function, but is called after the function returns=
. When you declare a function that takes a closure as one of its parameters=
, you can write <code class=3D"docutils literal notranslate"><span class=3D=
"pre">@escaping</span></code> before the parameter=E2=80=99s type to indica=
te that the closure is allowed to escape.</p>
<p>One way that a closure can escape is by being stored in a variable that =
is defined outside the function. As an example, many functions that start a=
n asynchronous operation take a closure argument as a completion handler. T=
he function returns after it starts the operation, but the closure isn=E2=
=80=99t called until the operation is completed=E2=80=94the closure needs t=
o escape, to be called later. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">completionHandlers</span>: [() -&gt; <span clas=
s=3D"nc">Void</span>] =3D []
</li><li><span class=3D"k">func</span> <span class=3D"nv">someFunctionWithE=
scapingClosure</span>(<span class=3D"nv">completionHandler</span>: <span cl=
ass=3D"k">@escaping</span> () -&gt; <span class=3D"nc">Void</span>) {
</li><li>    <span class=3D"nv">completionHandlers</span>.<span class=3D"nv=
">append</span>(<span class=3D"nv">completionHandler</span>)
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">som=
eFunctionWithEscapingClosure(_:)</span></code> function takes a closure as =
its argument and adds it to an array that=E2=80=99s declared outside the fu=
nction. If you didn=E2=80=99t mark the parameter of this function with <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">@escaping</spa=
n></code>, you would get a compile-time error.</p>
<p>Marking a closure with <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">@escaping</span></code> means you have to refer to <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">self</span></code>=
 explicitly within the closure. For example, in the code below, the closure=
 passed to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>someFunctionWithEscapingClosure(_:)</span></code> is an escaping closure, =
which means it needs to refer to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">self</span></code> explicitly. In contrast, the clos=
ure passed to <code class=3D"docutils literal notranslate"><span class=3D"p=
re">someFunctionWithNonescapingClosure(_:)</span></code> is a nonescaping c=
losure, which means it can refer to <code class=3D"docutils literal notrans=
late"><span class=3D"pre">self</span></code> implicitly.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunctionWithNonescapingClosure</span>(<spa=
n class=3D"nv">closure</span>: () -&gt; <span class=3D"nc">Void</span>) {
</li><li>    <span class=3D"nv">closure</span>()
</li><li>}
</li><li>
</li><li><span class=3D"k">class</span> <span class=3D"nv">SomeClass</span>=
 {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">x</span> =3D <=
span class=3D"m">10</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">doSomething</=
span>() {
</li><li>        <span class=3D"nv">someFunctionWithEscapingClosure</span> =
{ <span class=3D"k">self</span>.<span class=3D"nv">x</span> =3D <span class=
=3D"m">100</span> }
</li><li>        <span class=3D"nv">someFunctionWithNonescapingClosure</spa=
n> { <span class=3D"nv">x</span> =3D <span class=3D"m">200</span> }
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">instance</span> =
=3D <span class=3D"nv">SomeClass</span>()
</li><li><span class=3D"nv">instance</span>.<span class=3D"nv">doSomething<=
/span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">instance</span>=
.<span class=3D"nv">x</span>)
</li><li><span class=3D"c">// Prints "200"</span>
</li><li>
</li><li><span class=3D"nv">completionHandlers</span>.<span class=3D"nv">fi=
rst</span>?()
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">instance</span>=
.<span class=3D"nv">x</span>)
</li><li><span class=3D"c">// Prints "100"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID543">
<h2>Autoclosures<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/Closures.html#ID543" title=3D"Permalink to this headli=
ne">=C2=B6</a></h2>
<p>An <em>autoclosure</em> is a closure that is automatically created to wr=
ap an expression that=E2=80=99s being passed as an argument to a function. =
It doesn=E2=80=99t take any arguments, and when it=E2=80=99s called, it ret=
urns the value of the expression that=E2=80=99s wrapped inside of it. This =
syntactic convenience lets you omit braces around a function=E2=80=99s para=
meter by writing a normal expression instead of an explicit closure.</p>
<p>It=E2=80=99s common to <em>call</em> functions that take autoclosures, b=
ut it=E2=80=99s not common to <em>implement</em> that kind of function. For=
 example, the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">assert(condition:message:file:line:)</span></code> function takes an au=
toclosure for its <code class=3D"docutils literal notranslate"><span class=
=3D"pre">condition</span></code> and <code class=3D"docutils literal notran=
slate"><span class=3D"pre">message</span></code> parameters; its <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">condition</span></co=
de> parameter is evaluated only in debug builds and its <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">message</span></code> paramet=
er is evaluated only if <code class=3D"docutils literal notranslate"><span =
class=3D"pre">condition</span></code> is <code class=3D"docutils literal no=
translate"><span class=3D"pre">false</span></code>.</p>
<p>An autoclosure lets you delay evaluation, because the code inside isn=E2=
=80=99t run until you call the closure. Delaying evaluation is useful for c=
ode that has side effects or is computationally expensive, because it lets =
you control when that code is evaluated. The code below shows how a closure=
 delays evaluation.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">customersInLine</span> =3D [<span class=3D"s">"=
Chris"</span>, <span class=3D"s">"Alex"</span>, <span class=3D"s">"Ewa"</sp=
an>, <span class=3D"s">"Barry"</span>, <span class=3D"s">"Daniella"</span>]
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">customersInLine=
</span>.<span class=3D"nv">count</span>)
</li><li><span class=3D"c">// Prints "5"</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">customerProvider</=
span> =3D { <span class=3D"nv">customersInLine</span>.<span class=3D"nv">re=
move</span>(<span class=3D"nv">at</span>: <span class=3D"m">0</span>) }
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">customersInLine=
</span>.<span class=3D"nv">count</span>)
</li><li><span class=3D"c">// Prints "5"</span>
</li><li>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Now serving </s=
pan>\<span class=3D"p">(</span><span class=3D"nv">customerProvider</span>()=
<span class=3D"p">)</span><span class=3D"s">!"</span>)
</li><li><span class=3D"c">// Prints "Now serving Chris!"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">customersInLine=
</span>.<span class=3D"nv">count</span>)
</li><li><span class=3D"c">// Prints "4"</span>
</li></ol></div></div></div>
<p>Even though the first element of the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">customersInLine</span></code> array is remove=
d by the code inside the closure, the array element isn=E2=80=99t removed u=
ntil the closure is actually called. If the closure is never called, the ex=
pression inside the closure is never evaluated, which means the array eleme=
nt is never removed. Note that the type of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">customerProvider</span></code> is not <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">String</span><=
/code> but <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>()</span> <span class=3D"pre">-&gt;</span> <span class=3D"pre">String</spa=
n></code>=E2=80=94a function with no parameters that returns a string.</p>
<p>You get the same behavior of delayed evaluation when you pass a closure =
as an argument to a function.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 customersInLine is ["Alex", "Ewa", "Barry", "Daniella"]</span>
</li><li><span class=3D"k">func</span> <span class=3D"nv">serve</span>(<spa=
n class=3D"nv">customer</span> <span class=3D"nv">customerProvider</span>: =
() -&gt; <span class=3D"nc">String</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Now serving=
 </span>\<span class=3D"p">(</span><span class=3D"nv">customerProvider</spa=
n>()<span class=3D"p">)</span><span class=3D"s">!"</span>)
</li><li>}
</li><li><span class=3D"nv">serve</span>(<span class=3D"nv">customer</span>=
: { <span class=3D"nv">customersInLine</span>.<span class=3D"nv">remove</sp=
an>(<span class=3D"nv">at</span>: <span class=3D"m">0</span>) } )
</li><li><span class=3D"c">// Prints "Now serving Alex!"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ser=
ve(customer:)</span></code> function in the listing above takes an explicit=
 closure that returns a customer=E2=80=99s name. The version of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">serve(customer:)</spa=
n></code> below performs the same operation but, instead of taking an expli=
cit closure, it takes an autoclosure by marking its parameter=E2=80=99s typ=
e with the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>@autoclosure</span></code> attribute. Now you can call the function as if =
it took a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
String</span></code> argument instead of a closure. The argument is automat=
ically converted to a closure, because the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">customerProvider</span></code> parameter=
=E2=80=99s type is marked with the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">@autoclosure</span></code> attribute.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 customersInLine is ["Ewa", "Barry", "Daniella"]</span>
</li><li><span class=3D"k">func</span> <span class=3D"nv">serve</span>(<spa=
n class=3D"nv">customer</span> <span class=3D"nv">customerProvider</span>: =
<span class=3D"k">@autoclosure</span> () -&gt; <span class=3D"nc">String</s=
pan>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Now serving=
 </span>\<span class=3D"p">(</span><span class=3D"nv">customerProvider</spa=
n>()<span class=3D"p">)</span><span class=3D"s">!"</span>)
</li><li>}
</li><li><span class=3D"nv">serve</span>(<span class=3D"nv">customer</span>=
: <span class=3D"nv">customersInLine</span>.<span class=3D"nv">remove</span=
>(<span class=3D"nv">at</span>: <span class=3D"m">0</span>))
</li><li><span class=3D"c">// Prints "Now serving Ewa!"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Overusing autoclosures can make your code hard to underst=
and. The context and function name should make it clear that evaluation is =
being deferred.</p>
</div>
<p>If you want an autoclosure that is allowed to escape, use both the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">@autoclosure</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">@escaping</span></code> attributes. The <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">@escaping</span></code> attribute is de=
scribed above in <a class=3D"reference internal" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Closures.html#ID546"><span class=3D"std std-r=
ef">Escaping Closures</span></a>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 customersInLine is ["Barry", "Daniella"]</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">customerProviders<=
/span>: [() -&gt; <span class=3D"nc">String</span>] =3D []
</li><li><span class=3D"k">func</span> <span class=3D"nv">collectCustomerPr=
oviders</span>(<span class=3D"k">_</span> <span class=3D"nv">customerProvid=
er</span>: <span class=3D"k">@autoclosure</span> <span class=3D"k">@escapin=
g</span> () -&gt; <span class=3D"nc">String</span>) {
</li><li>    <span class=3D"nv">customerProviders</span>.<span class=3D"nv"=
>append</span>(<span class=3D"nv">customerProvider</span>)
</li><li>}
</li><li><span class=3D"nv">collectCustomerProviders</span>(<span class=3D"=
nv">customersInLine</span>.<span class=3D"nv">remove</span>(<span class=3D"=
nv">at</span>: <span class=3D"m">0</span>))
</li><li><span class=3D"nv">collectCustomerProviders</span>(<span class=3D"=
nv">customersInLine</span>.<span class=3D"nv">remove</span>(<span class=3D"=
nv">at</span>: <span class=3D"m">0</span>))
</li><li>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Collected </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">customerProviders</span>.<s=
pan class=3D"nv">count</span><span class=3D"p">)</span><span class=3D"s"> c=
losures."</span>)
</li><li><span class=3D"c">// Prints "Collected 2 closures."</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">customerProvider</=
span> <span class=3D"k">in</span> <span class=3D"nv">customerProviders</spa=
n> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Now serving=
 </span>\<span class=3D"p">(</span><span class=3D"nv">customerProvider</spa=
n>()<span class=3D"p">)</span><span class=3D"s">!"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Now serving Barry!"</span>
</li><li><span class=3D"c">// Prints "Now serving Daniella!"</span>
</li></ol></div></div></div>
<p>In the code above, instead of calling the closure passed to it as its <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">customerProv=
ider</span></code> argument, the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">collectCustomerProviders(_:)</span></code> function =
appends the closure to the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">customerProviders</span></code> array. The array is declar=
ed outside the scope of the function, which means the closures in the array=
 can be executed after the function returns. As a result, the value of the =
<code class=3D"docutils literal notranslate"><span class=3D"pre">customerPr=
ovider</span></code> argument must be allowed to escape the function=E2=80=
=99s scope.</p>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Functions.html">Functions</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/Enumerations.html">Enumeration</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--rkKBWdmTYDfLh0nYSkeErawuRssC3vkANYQ1w6NkZw------
