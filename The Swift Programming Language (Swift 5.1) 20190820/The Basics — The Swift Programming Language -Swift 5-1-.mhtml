From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html
Subject: =?utf-8?Q?The=20Basics=20=E2=80=94=20The=20Swift=20Programming=20Language?=
 =?utf-8?Q?=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:53:58 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----"


------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: text/html
Content-ID: <frame-F1E52A7A9AAABE13E9F05B62DD249870@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>The Basics =E2=80=94 The Swift Programming Language (Swift 5.1)<=
/title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#">The =
Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#">The Basics</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID310">Constants and Variables</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID311">Declaring Constants and Variables</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID312">Type Annotations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID313">Naming Constants and Variables</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID314">Printing Constants and Variables</a>=
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID315">Comments</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID316">Semicolons</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID317">Integers</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID318">Integer Bounds</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID319">Int</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID320">UInt</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID321">Floating-Point Numbers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID322">Type Safety and Type Inference</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID323">Numeric Literals</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID324">Numeric Type Conversion</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID325">Integer Conversion</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID326">Integer and Floating-Point Conversio=
n</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID327">Type Aliases</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID328">Booleans</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID329">Tuples</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID330">Optionals</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID331">nil</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID332">If Statements and Forced Unwrapping<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID333">Optional Binding</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID334">Implicitly Unwrapped Optionals</a></=
li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID515">Error Handling</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID335">Assertions and Preconditions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID336">Debugging with Assertions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID554">Enforcing Preconditions</a></li>
</ul>
</li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"the-basics">
<h1>The Basics<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/LanguageGuide/TheBasics.html#the-basics" title=3D"Permalink to this he=
adline">=C2=B6</a></h1>
<p>Swift is a new programming language for iOS, macOS, watchOS, and tvOS ap=
p development. Nonetheless, many parts of Swift will be familiar from your =
experience of developing in C and Objective-C.</p>
<p>Swift provides its own versions of all fundamental C and Objective-C typ=
es, including <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Int</span></code> for integers, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Double</span></code> and <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Float</span></code> for floating-p=
oint values, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Bool</span></code> for Boolean values, and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">String</span></code> for textual data. =
Swift also provides powerful versions of the three primary collection types=
, <code class=3D"docutils literal notranslate"><span class=3D"pre">Array</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Set</span></code>, and <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Dictionary</span></code>, as described in <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Coll=
ectionTypes.html"><span class=3D"doc">Collection Types</span></a>.</p>
<p>Like C, Swift uses variables to store and refer to values by an identify=
ing name. Swift also makes extensive use of variables whose values can=E2=
=80=99t be changed. These are known as constants, and are much more powerfu=
l than constants in C. Constants are used throughout Swift to make code saf=
er and clearer in intent when you work with values that don=E2=80=99t need =
to change.</p>
<p>In addition to familiar types, Swift introduces advanced types not found=
 in Objective-C, such as tuples. Tuples enable you to create and pass aroun=
d groupings of values. You can use a tuple to return multiple values from a=
 function as a single compound value.</p>
<p>Swift also introduces optional types, which handle the absence of a valu=
e. Optionals say either =E2=80=9Cthere <em>is</em> a value, and it equals <=
em>x</em>=E2=80=9D or =E2=80=9Cthere <em>isn=E2=80=99t</em> a value at all=
=E2=80=9D. Using optionals is similar to using <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">nil</span></code> with pointers in Obj=
ective-C, but they work for any type, not just classes. Not only are option=
als safer and more expressive than <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">nil</span></code> pointers in Objective-C, they=E2=
=80=99re at the heart of many of Swift=E2=80=99s most powerful features.</p=
>
<p>Swift is a <em>type-safe</em> language, which means the language helps y=
ou to be clear about the types of values your code can work with. If part o=
f your code requires a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">String</span></code>, type safety prevents you from passing it=
 an <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code> by mistake. Likewise, type safety prevents you from accidentall=
y passing an optional <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">String</span></code> to a piece of code that requires a non-opt=
ional <code class=3D"docutils literal notranslate"><span class=3D"pre">Stri=
ng</span></code>. Type safety helps you catch and fix errors as early as po=
ssible in the development process.</p>
<div class=3D"section" id=3D"ID310">
<h2>Constants and Variables<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/TheBasics.html#ID310" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p>Constants and variables associate a name (such as <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">maximumNumberOfLoginAttempts</sp=
an></code> or <code class=3D"docutils literal notranslate"><span class=3D"p=
re">welcomeMessage</span></code>) with a value of a particular type (such a=
s the number <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">10</span></code> or the string <code class=3D"docutils literal notransla=
te"><span class=3D"pre">"Hello"</span></code>). The value of a <em>constant=
</em> can=E2=80=99t be changed once it=E2=80=99s set, whereas a <em>variabl=
e</em> can be set to a different value in the future.</p>
<div class=3D"section" id=3D"ID311">
<h3>Declaring Constants and Variables<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID311" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p>Constants and variables must be declared before they=E2=80=99re used. Yo=
u declare constants with the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">let</span></code> keyword and variables with the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">var</span></code>=
 keyword. Here=E2=80=99s an example of how constants and variables can be u=
sed to track the number of login attempts a user has made:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">maximumNumberOfLoginAttempts</span> =3D <span c=
lass=3D"m">10</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">currentLoginAttemp=
t</span> =3D <span class=3D"m">0</span>
</li></ol></div></div></div>
<p>This code can be read as:</p>
<p>=E2=80=9CDeclare a new constant called <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">maximumNumberOfLoginAttempts</span></code>,=
 and give it a value of <code class=3D"docutils literal notranslate"><span =
class=3D"pre">10</span></code>. Then, declare a new variable called <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">currentLoginAttem=
pt</span></code>, and give it an initial value of <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">0</span></code>.=E2=80=9D</p>
<p>In this example, the maximum number of allowed login attempts is declare=
d as a constant, because the maximum value never changes. The current login=
 attempt counter is declared as a variable, because this value must be incr=
emented after each failed login attempt.</p>
<p>You can declare multiple constants or multiple variables on a single lin=
e, separated by commas:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">x</span> =3D <span class=3D"m">0.0</span>, <spa=
n class=3D"nv">y</span> =3D <span class=3D"m">0.0</span>, <span class=3D"nv=
">z</span> =3D <span class=3D"m">0.0</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If a stored value in your code won=E2=80=99t change, alwa=
ys declare it as a constant with the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">let</span></code> keyword. Use variables only fo=
r storing values that need to be able to change.</p>
</div>
</div>
<div class=3D"section" id=3D"ID312">
<h3>Type Annotations<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/TheBasics.html#ID312" title=3D"Permalink to this h=
eadline">=C2=B6</a></h3>
<p>You can provide a <em>type annotation</em> when you declare a constant o=
r variable, to be clear about the kind of values the constant or variable c=
an store. Write a type annotation by placing a colon after the constant or =
variable name, followed by a space, followed by the name of the type to use=
.</p>
<p>This example provides a type annotation for a variable called <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">welcomeMessage</span=
></code>, to indicate that the variable can store <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">String</span></code> values:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">welcomeMessage</span>: <span class=3D"nc">Strin=
g</span>
</li></ol></div></div></div>
<p>The colon in the declaration means =E2=80=9C=E2=80=A6of type=E2=80=A6,=
=E2=80=9D so the code above can be read as:</p>
<p>=E2=80=9CDeclare a variable called <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">welcomeMessage</span></code> that is of type <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">String</span=
></code>.=E2=80=9D</p>
<p>The phrase =E2=80=9Cof type <code class=3D"docutils literal notranslate"=
><span class=3D"pre">String</span></code>=E2=80=9D means =E2=80=9Ccan store=
 any <code class=3D"docutils literal notranslate"><span class=3D"pre">Strin=
g</span></code> value.=E2=80=9D Think of it as meaning =E2=80=9Cthe type of=
 thing=E2=80=9D (or =E2=80=9Cthe kind of thing=E2=80=9D) that can be stored=
.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">wel=
comeMessage</span></code> variable can now be set to any string value witho=
ut error:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">w=
elcomeMessage</span> =3D <span class=3D"s">"Hello"</span>
</li></ol></div></div></div>
<p>You can define multiple related variables of the same type on a single l=
ine, separated by commas, with a single type annotation after the final var=
iable name:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">red</span>, <span class=3D"nv">green</span>, <s=
pan class=3D"nv">blue</span>: <span class=3D"nc">Double</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">It=E2=80=99s rare that you need to write type annotations=
 in practice. If you provide an initial value for a constant or variable at=
 the point that it=E2=80=99s defined, Swift can almost always infer the typ=
e to be used for that constant or variable, as described in <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Th=
eBasics.html#ID322"><span class=3D"std std-ref">Type Safety and Type Infere=
nce</span></a>. In the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">welcomeMessage</span></code> example above, no initial value i=
s provided, and so the type of the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">welcomeMessage</span></code> variable is specified=
 with a type annotation rather than being inferred from an initial value.</=
p>
</div>
</div>
<div class=3D"section" id=3D"ID313">
<h3>Naming Constants and Variables<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID313" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>Constant and variable names can contain almost any character, including =
Unicode characters:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">=CF=80</span> =3D <span class=3D"m">3.14159</sp=
an>
</li><li><span class=3D"k">let</span> <span class=3D"nv">=E4=BD=A0=E5=A5=BD=
</span> =3D <span class=3D"s">"=E4=BD=A0=E5=A5=BD=E4=B8=96=E7=95=8C"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv"><img class=3D"chro=
moji" title=3D"Dog Face" alt=3D"=F0=9F=90=B6" src=3D"chrome-extension://cah=
edbegdkagmcjfolhdlechbkeaieki/images/apple/1f436.png"><img class=3D"chromoj=
i" title=3D"Cow Face" alt=3D"=F0=9F=90=AE" src=3D"chrome-extension://cahedb=
egdkagmcjfolhdlechbkeaieki/images/apple/1f42e.png"></span> =3D <span class=
=3D"s">"dogcow"</span>
</li></ol></div></div></div>
<p>Constant and variable names can=E2=80=99t contain whitespace characters,=
 mathematical symbols, arrows, private-use Unicode scalar values, or line- =
and box-drawing characters. Nor can they begin with a number, although numb=
ers may be included elsewhere within the name.</p>
<p>Once you=E2=80=99ve declared a constant or variable of a certain type, y=
ou can=E2=80=99t declare it again with the same name, or change it to store=
 values of a different type. Nor can you change a constant into a variable =
or a variable into a constant.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you need to give a constant or variable the same name =
as a reserved Swift keyword, surround the keyword with backticks (<code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">`</span></code>) wh=
en using it as a name. However, avoid using keywords as names unless you ha=
ve absolutely no choice.</p>
</div>
<p>You can change the value of an existing variable to another value of a c=
ompatible type. In this example, the value of <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">friendlyWelcome</span></code> is change=
d from <code class=3D"docutils literal notranslate"><span class=3D"pre">"He=
llo!"</span></code> to <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">"Bonjour!"</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">friendlyWelcome</span> =3D <span class=3D"s">"H=
ello!"</span>
</li><li><span class=3D"nv">friendlyWelcome</span> =3D <span class=3D"s">"B=
onjour!"</span>
</li><li><span class=3D"c">// friendlyWelcome is now "Bonjour!"</span>
</li></ol></div></div></div>
<p>Unlike a variable, the value of a constant can=E2=80=99t be changed afte=
r it=E2=80=99s set. Attempting to do so is reported as an error when your c=
ode is compiled:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">languageName</span> =3D <span class=3D"s">"Swif=
t"</span>
</li><li><span class=3D"nv">languageName</span> =3D <span class=3D"s">"Swif=
t++"</span>
</li><li><span class=3D"c">// This is a compile-time error: languageName ca=
nnot be changed.</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID314">
<h3>Printing Constants and Variables<a class=3D"headerlink" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID314" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>You can print the current value of a constant or variable with the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">print(_:separat=
or:terminator:)</span></code> function:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"nv">friendlyWelcome</span>)
</li><li><span class=3D"c">// Prints "Bonjour!"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">pri=
nt(_:separator:terminator:)</span></code> function is a global function tha=
t prints one or more values to an appropriate output. In Xcode, for example=
, the <code class=3D"docutils literal notranslate"><span class=3D"pre">prin=
t(_:separator:terminator:)</span></code> function prints its output in Xcod=
e=E2=80=99s =E2=80=9Cconsole=E2=80=9D pane. The <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">separator</span></code> and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">terminator</span></=
code> parameter have default values, so you can omit them when you call thi=
s function. By default, the function terminates the line it prints by addin=
g a line break. To print a value without a line break after it, pass an emp=
ty string as the terminator=E2=80=94for example, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">print(someValue,</span> <span class=
=3D"pre">terminator:</span> <span class=3D"pre">"")</span></code>. For info=
rmation about parameters with default values, see <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.ht=
ml#ID169"><span class=3D"std std-ref">Default Parameter Values</span></a>.<=
/p>
<p>Swift uses <em>string interpolation</em> to include the name of a consta=
nt or variable as a placeholder in a longer string, and to prompt Swift to =
replace it with the current value of that constant or variable. Wrap the na=
me in parentheses and escape it with a backslash before the opening parenth=
esis:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">"The current value of friendlyWelcome is </sp=
an>\<span class=3D"p">(</span><span class=3D"nv">friendlyWelcome</span><spa=
n class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The current value of friendlyWelcome =
is Bonjour!"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">All options you can use with string interpolation are des=
cribed in <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/StringsAndCharacters.html#ID292"><span class=3D"std =
std-ref">String Interpolation</span></a>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID315">
<h2>Comments<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID315" title=3D"Permalink to this headline"=
>=C2=B6</a></h2>
<p>Use comments to include nonexecutable text in your code, as a note or re=
minder to yourself. Comments are ignored by the Swift compiler when your co=
de is compiled.</p>
<p>Comments in Swift are very similar to comments in C. Single-line comment=
s begin with two forward-slashes (<code class=3D"docutils literal notransla=
te"><span class=3D"pre">//</span></code>):</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 This is a comment.</span>
</li></ol></div></div></div>
<p>Multiline comments start with a forward-slash followed by an asterisk (<=
code class=3D"docutils literal notranslate"><span class=3D"pre">/*</span></=
code>) and end with an asterisk followed by a forward-slash (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">*/</span></code>):</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">/*=
 This is also a comment</span>
</li><li><span class=3D"c">but is written over multiple lines. */</span>
</li></ol></div></div></div>
<p>Unlike multiline comments in C, multiline comments in Swift can be neste=
d inside other multiline comments. You write nested comments by starting a =
multiline comment block and then starting a second multiline comment within=
 the first block. The second block is then closed, followed by the first bl=
ock:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">/*=
 This is the start of the first multiline comment.</span>
</li><li><span class=3D"c"> /* This is the second, nested multiline comment=
. */</span>
</li><li><span class=3D"c">This is the end of the first multiline comment. =
*/</span>
</li></ol></div></div></div>
<p>Nested multiline comments enable you to comment out large blocks of code=
 quickly and easily, even if the code already contains multiline comments.<=
/p>
</div>
<div class=3D"section" id=3D"ID316">
<h2>Semicolons<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/LanguageGuide/TheBasics.html#ID316" title=3D"Permalink to this headlin=
e">=C2=B6</a></h2>
<p>Unlike many other languages, Swift doesn=E2=80=99t require you to write =
a semicolon (<code class=3D"docutils literal notranslate"><span class=3D"pr=
e">;</span></code>) after each statement in your code, although you can do =
so if you wish. However, semicolons <em>are</em> required if you want to wr=
ite multiple separate statements on a single line:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">cat</span> =3D <span class=3D"s">"<img class=3D=
"chromoji" title=3D"Cat Face" alt=3D"=F0=9F=90=B1" src=3D"chrome-extension:=
//cahedbegdkagmcjfolhdlechbkeaieki/images/apple/1f431.png">"</span>; <span =
class=3D"nv">print</span>(<span class=3D"nv">cat</span>)
</li><li><span class=3D"c">// Prints "<img class=3D"chromoji" title=3D"Cat =
Face" alt=3D"=F0=9F=90=B1" src=3D"chrome-extension://cahedbegdkagmcjfolhdle=
chbkeaieki/images/apple/1f431.png">"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID317">
<h2>Integers<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID317" title=3D"Permalink to this headline"=
>=C2=B6</a></h2>
<p><em>Integers</em> are whole numbers with no fractional component, such a=
s <code class=3D"docutils literal notranslate"><span class=3D"pre">42</span=
></code> and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">-23</span></code>. Integers are either <em>signed</em> (positive, zero, =
or negative) or <em>unsigned</em> (positive or zero).</p>
<p>Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit for=
ms. These integers follow a naming convention similar to C, in that an 8-bi=
t unsigned integer is of type <code class=3D"docutils literal notranslate">=
<span class=3D"pre">UInt8</span></code>, and a 32-bit signed integer is of =
type <code class=3D"docutils literal notranslate"><span class=3D"pre">Int32=
</span></code>. Like all types in Swift, these integer types have capitaliz=
ed names.</p>
<div class=3D"section" id=3D"ID318">
<h3>Integer Bounds<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/TheBasics.html#ID318" title=3D"Permalink to this hea=
dline">=C2=B6</a></h3>
<p>You can access the minimum and maximum values of each integer type with =
its <code class=3D"docutils literal notranslate"><span class=3D"pre">min</s=
pan></code> and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">max</span></code> properties:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">minValue</span> =3D <span class=3D"nv">UInt8</s=
pan>.<span class=3D"nv">min</span>  <span class=3D"c">// minValue is equal =
to 0, and is of type UInt8</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">maxValue</span> =
=3D <span class=3D"nv">UInt8</span>.<span class=3D"nv">max</span>  <span cl=
ass=3D"c">// maxValue is equal to 255, and is of type UInt8</span>
</li></ol></div></div></div>
<p>The values of these properties are of the appropriate-sized number type =
(such as <code class=3D"docutils literal notranslate"><span class=3D"pre">U=
Int8</span></code> in the example above) and can therefore be used in expre=
ssions alongside other values of the same type.</p>
</div>
<div class=3D"section" id=3D"ID319">
<h3>Int<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/TheBasics.html#ID319" title=3D"Permalink to this headline">=C2=
=B6</a></h3>
<p>In most cases, you don=E2=80=99t need to pick a specific size of integer=
 to use in your code. Swift provides an additional integer type, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code>, w=
hich has the same size as the current platform=E2=80=99s native word size:<=
/p>
<ul class=3D"simple">
<li>On a 32-bit platform, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Int</span></code> is the same size as <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Int32</span></code>.</li>
<li>On a 64-bit platform, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Int</span></code> is the same size as <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Int64</span></code>.</li>
</ul>
<p>Unless you need to work with a specific size of integer, always use <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Int</span></co=
de> for integer values in your code. This aids code consistency and interop=
erability. Even on 32-bit platforms, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Int</span></code> can store any value between <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">-2,147,483,6=
48</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">2,147,483,647</span></code>, and is large enough for many intege=
r ranges.</p>
</div>
<div class=3D"section" id=3D"ID320">
<h3>UInt<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/L=
anguageGuide/TheBasics.html#ID320" title=3D"Permalink to this headline">=C2=
=B6</a></h3>
<p>Swift also provides an unsigned integer type, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">UInt</span></code>, which has the sa=
me size as the current platform=E2=80=99s native word size:</p>
<ul class=3D"simple">
<li>On a 32-bit platform, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">UInt</span></code> is the same size as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">UInt32</span></code>.</li>
<li>On a 64-bit platform, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">UInt</span></code> is the same size as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">UInt64</span></code>.</li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Use <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">UInt</span></code> only when you specifically need an unsigned =
integer type with the same size as the platform=E2=80=99s native word size.=
 If this isn=E2=80=99t the case, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Int</span></code> is preferred, even when the values=
 to be stored are known to be nonnegative. A consistent use of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code> for=
 integer values aids code interoperability, avoids the need to convert betw=
een different number types, and matches integer type inference, as describe=
d in <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/TheBasics.html#ID322"><span class=3D"std std-ref">Type Sa=
fety and Type Inference</span></a>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID321">
<h2>Floating-Point Numbers<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/TheBasics.html#ID321" title=3D"Permalink to =
this headline">=C2=B6</a></h2>
<p><em>Floating-point numbers</em> are numbers with a fractional component,=
 such as <code class=3D"docutils literal notranslate"><span class=3D"pre">3=
.14159</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">0.1</span></code>, and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">-273.15</span></code>.</p>
<p>Floating-point types can represent a much wider range of values than int=
eger types, and can store numbers that are much larger or smaller than can =
be stored in an <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Int</span></code>. Swift provides two signed floating-point number ty=
pes:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">Double=
</span></code> represents a 64-bit floating-point number.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">Float<=
/span></code> represents a 32-bit floating-point number.</li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code class=3D"docutils literal notranslate"><span class=
=3D"pre">Double</span></code> has a precision of at least 15 decimal digits=
, whereas the precision of <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Float</span></code> can be as little as 6 decimal digits. =
The appropriate floating-point type to use depends on the nature and range =
of values you need to work with in your code. In situations where either ty=
pe would be appropriate, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Double</span></code> is preferred.</p>
</div>
</div>
<div class=3D"section" id=3D"ID322">
<h2>Type Safety and Type Inference<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>Swift is a <em>type-safe</em> language. A type safe language encourages =
you to be clear about the types of values your code can work with. If part =
of your code requires a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">String</span></code>, you can=E2=80=99t pass it an <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code> by=
 mistake.</p>
<p>Because Swift is type safe, it performs <em>type checks</em> when compil=
ing your code and flags any mismatched types as errors. This enables you to=
 catch and fix errors as early as possible in the development process.</p>
<p>Type-checking helps you avoid errors when you=E2=80=99re working with di=
fferent types of values. However, this doesn=E2=80=99t mean that you have t=
o specify the type of every constant and variable that you declare. If you =
don=E2=80=99t specify the type of value you need, Swift uses <em>type infer=
ence</em> to work out the appropriate type. Type inference enables a compil=
er to deduce the type of a particular expression automatically when it comp=
iles your code, simply by examining the values you provide.</p>
<p>Because of type inference, Swift requires far fewer type declarations th=
an languages such as C or Objective-C. Constants and variables are still ex=
plicitly typed, but much of the work of specifying their type is done for y=
ou.</p>
<p>Type inference is particularly useful when you declare a constant or var=
iable with an initial value. This is often done by assigning a <em>literal =
value</em> (or <em>literal</em>) to the constant or variable at the point t=
hat you declare it. (A literal value is a value that appears directly in yo=
ur source code, such as <code class=3D"docutils literal notranslate"><span =
class=3D"pre">42</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">3.14159</span></code> in the examples below.)</p>
<p>For example, if you assign a literal value of <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">42</span></code> to a new constant w=
ithout saying what type it is, Swift infers that you want the constant to b=
e an <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</=
span></code>, because you have initialized it with a number that looks like=
 an integer:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">meaningOfLife</span> =3D <span class=3D"m">42</=
span>
</li><li><span class=3D"c">// meaningOfLife is inferred to be of type Int</=
span>
</li></ol></div></div></div>
<p>Likewise, if you don=E2=80=99t specify a type for a floating-point liter=
al, Swift infers that you want to create a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Double</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">pi</span> =3D <span class=3D"m">3.14159</span>
</li><li><span class=3D"c">// pi is inferred to be of type Double</span>
</li></ol></div></div></div>
<p>Swift always chooses <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Double</span></code> (rather than <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Float</span></code>) when inferring t=
he type of floating-point numbers.</p>
<p>If you combine integer and floating-point literals in an expression, a t=
ype of <code class=3D"docutils literal notranslate"><span class=3D"pre">Dou=
ble</span></code> will be inferred from the context:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">anotherPi</span> =3D <span class=3D"m">3</span>=
 + <span class=3D"m">0.14159</span>
</li><li><span class=3D"c">// anotherPi is also inferred to be of type Doub=
le</span>
</li></ol></div></div></div>
<p>The literal value of <code class=3D"docutils literal notranslate"><span =
class=3D"pre">3</span></code> has no explicit type in and of itself, and so=
 an appropriate output type of <code class=3D"docutils literal notranslate"=
><span class=3D"pre">Double</span></code> is inferred from the presence of =
a floating-point literal as part of the addition.</p>
</div>
<div class=3D"section" id=3D"ID323">
<h2>Numeric Literals<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/TheBasics.html#ID323" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p>Integer literals can be written as:</p>
<ul class=3D"simple">
<li>A <em>decimal</em> number, with no prefix</li>
<li>A <em>binary</em> number, with a <code class=3D"docutils literal notran=
slate"><span class=3D"pre">0b</span></code> prefix</li>
<li>An <em>octal</em> number, with a <code class=3D"docutils literal notran=
slate"><span class=3D"pre">0o</span></code> prefix</li>
<li>A <em>hexadecimal</em> number, with a <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">0x</span></code> prefix</li>
</ul>
<p>All of these integer literals have a decimal value of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">17</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">decimalInteger</span> =3D <span class=3D"m">17<=
/span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">binaryInteger</spa=
n> =3D <span class=3D"m">0b10001</span>       <span class=3D"c">// 17 in bi=
nary notation</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">octalInteger</span=
> =3D <span class=3D"m">0o21</span>           <span class=3D"c">// 17 in oc=
tal notation</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">hexadecimalInteger=
</span> =3D <span class=3D"m">0x11</span>     <span class=3D"c">// 17 in he=
xadecimal notation</span>
</li></ol></div></div></div>
<p>Floating-point literals can be decimal (with no prefix), or hexadecimal =
(with a <code class=3D"docutils literal notranslate"><span class=3D"pre">0x=
</span></code> prefix). They must always have a number (or hexadecimal numb=
er) on both sides of the decimal point. Decimal floats can also have an opt=
ional <em>exponent</em>, indicated by an uppercase or lowercase <code class=
=3D"docutils literal notranslate"><span class=3D"pre">e</span></code>; hexa=
decimal floats must have an exponent, indicated by an uppercase or lowercas=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">p</span>=
</code>.</p>
<p>For decimal numbers with an exponent of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">exp</span></code>, the base number is mult=
iplied by 10<sup>exp</sup>:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">1.25e2=
</span></code> means 1.25 x 10<sup>2</sup>, or <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">125.0</span></code>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">1.25e-=
2</span></code> means 1.25 x 10<sup>-2</sup>, or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">0.0125</span></code>.</li>
</ul>
<p>For hexadecimal numbers with an exponent of <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">exp</span></code>, the base number is =
multiplied by 2<sup>exp</sup>:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">0xFp2<=
/span></code> means 15 x 2<sup>2</sup>, or <code class=3D"docutils literal =
notranslate"><span class=3D"pre">60.0</span></code>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">0xFp-2=
</span></code> means 15 x 2<sup>-2</sup>, or <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">3.75</span></code>.</li>
</ul>
<p>All of these floating-point literals have a decimal value of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">12.1875</span></code>=
:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">decimalDouble</span> =3D <span class=3D"m">12.1=
875</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">exponentDouble</sp=
an> =3D <span class=3D"m">1.21875e1</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">hexadecimalDouble<=
/span> =3D <span class=3D"m">0xC.3p0</span>
</li></ol></div></div></div>
<p>Numeric literals can contain extra formatting to make them easier to rea=
d. Both integers and floats can be padded with extra zeros and can contain =
underscores to help with readability. Neither type of formatting affects th=
e underlying value of the literal:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">paddedDouble</span> =3D <span class=3D"m">00012=
3.456</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">oneMillion</span> =
=3D <span class=3D"m">1_000_000</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">justOverOneMillion=
</span> =3D <span class=3D"m">1_000_000.000_000_1</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID324">
<h2>Numeric Type Conversion<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/TheBasics.html#ID324" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p>Use the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Int</span></code> type for all general-purpose integer constants and varia=
bles in your code, even if they=E2=80=99re known to be nonnegative. Using t=
he default integer type in everyday situations means that integer constants=
 and variables are immediately interoperable in your code and will match th=
e inferred type for integer literal values.</p>
<p>Use other integer types only when they=E2=80=99re specifically needed fo=
r the task at hand, because of explicitly sized data from an external sourc=
e, or for performance, memory usage, or other necessary optimization. Using=
 explicitly sized types in these situations helps to catch any accidental v=
alue overflows and implicitly documents the nature of the data being used.<=
/p>
<div class=3D"section" id=3D"ID325">
<h3>Integer Conversion<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/TheBasics.html#ID325" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>The range of numbers that can be stored in an integer constant or variab=
le is different for each numeric type. An <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Int8</span></code> constant or variable can=
 store numbers between <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">-128</span></code> and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">127</span></code>, whereas a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">UInt8</span></code> constant o=
r variable can store numbers between <code class=3D"docutils literal notran=
slate"><span class=3D"pre">0</span></code> and <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">255</span></code>. A number that won=
=E2=80=99t fit into a constant or variable of a sized integer type is repor=
ted as an error when your code is compiled:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">cannotBeNegative</span>: <span class=3D"nc">UIn=
t8</span> =3D <span class=3D"m">-1</span>
</li><li><span class=3D"c">// UInt8 cannot store negative numbers, and so t=
his will report an error</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">tooBig</span>: <sp=
an class=3D"nc">Int8</span> =3D <span class=3D"nv">Int8</span>.<span class=
=3D"nv">max</span> + <span class=3D"m">1</span>
</li><li><span class=3D"c">// Int8 cannot store a number larger than its ma=
ximum value,</span>
</li><li><span class=3D"c">// and so this will also report an error</span>
</li></ol></div></div></div>
<p>Because each numeric type can store a different range of values, you mus=
t opt in to numeric type conversion on a case-by-case basis. This opt-in ap=
proach prevents hidden conversion errors and helps make type conversion int=
entions explicit in your code.</p>
<p>To convert one specific number type to another, you initialize a new num=
ber of the desired type with the existing value. In the example below, the =
constant <code class=3D"docutils literal notranslate"><span class=3D"pre">t=
woThousand</span></code> is of type <code class=3D"docutils literal notrans=
late"><span class=3D"pre">UInt16</span></code>, whereas the constant <code =
class=3D"docutils literal notranslate"><span class=3D"pre">one</span></code=
> is of type <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">UInt8</span></code>. They can=E2=80=99t be added together directly, beca=
use they=E2=80=99re not of the same type. Instead, this example calls <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">UInt16(one)</sp=
an></code> to create a new <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">UInt16</span></code> initialized with the value of <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">one</span></code>=
, and uses this value in place of the original:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">twoThousand</span>: <span class=3D"nc">UInt16</=
span> =3D <span class=3D"m">2_000</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">one</span>: <span =
class=3D"nc">UInt8</span> =3D <span class=3D"m">1</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">twoThousandAndOne<=
/span> =3D <span class=3D"nv">twoThousand</span> + <span class=3D"nv">UInt1=
6</span>(<span class=3D"nv">one</span>)
</li></ol></div></div></div>
<p>Because both sides of the addition are now of type <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">UInt16</span></code>, the addit=
ion is allowed. The output constant (<code class=3D"docutils literal notran=
slate"><span class=3D"pre">twoThousandAndOne</span></code>) is inferred to =
be of type <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>UInt16</span></code>, because it=E2=80=99s the sum of two <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">UInt16</span></code> value=
s.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">SomeTyp=
e(ofInitialValue)</span></code> is the default way to call the initializer =
of a Swift type and pass in an initial value. Behind the scenes, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">UInt16</span></code>=
 has an initializer that accepts a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">UInt8</span></code> value, and so this initializer=
 is used to make a new <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">UInt16</span></code> from an existing <code class=3D"docutils =
literal notranslate"><span class=3D"pre">UInt8</span></code>. You can=E2=80=
=99t pass in <em>any</em> type here, however=E2=80=94it has to be a type fo=
r which <code class=3D"docutils literal notranslate"><span class=3D"pre">UI=
nt16</span></code> provides an initializer. Extending existing types to pro=
vide initializers that accept new types (including your own type definition=
s) is covered in <a class=3D"reference internal" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Extensions.html"><span class=3D"doc">Extensio=
ns</span></a>.</p>
</div>
<div class=3D"section" id=3D"ID326">
<h3>Integer and Floating-Point Conversion<a class=3D"headerlink" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID326" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Conversions between integer and floating-point numeric types must be mad=
e explicit:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">three</span> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">pointOneFourOneFiv=
eNine</span> =3D <span class=3D"m">0.14159</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">pi</span> =3D <spa=
n class=3D"nv">Double</span>(<span class=3D"nv">three</span>) + <span class=
=3D"nv">pointOneFourOneFiveNine</span>
</li><li><span class=3D"c">// pi equals 3.14159, and is inferred to be of t=
ype Double</span>
</li></ol></div></div></div>
<p>Here, the value of the constant <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">three</span></code> is used to create a new value =
of type <code class=3D"docutils literal notranslate"><span class=3D"pre">Do=
uble</span></code>, so that both sides of the addition are of the same type=
. Without this conversion in place, the addition would not be allowed.</p>
<p>Floating-point to integer conversion must also be made explicit. An inte=
ger type can be initialized with a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Double</span></code> or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Float</span></code> value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">integerPi</span> =3D <span class=3D"nv">Int</sp=
an>(<span class=3D"nv">pi</span>)
</li><li><span class=3D"c">// integerPi equals 3, and is inferred to be of =
type Int</span>
</li></ol></div></div></div>
<p>Floating-point values are always truncated when used to initialize a new=
 integer value in this way. This means that <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">4.75</span></code> becomes <code class=3D=
"docutils literal notranslate"><span class=3D"pre">4</span></code>, and <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">-3.9</span></=
code> becomes <code class=3D"docutils literal notranslate"><span class=3D"p=
re">-3</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The rules for combining numeric constants and variables a=
re different from the rules for numeric literals. The literal value <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">3</span></code> c=
an be added directly to the literal value <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">0.14159</span></code>, because number liter=
als don=E2=80=99t have an explicit type in and of themselves. Their type is=
 inferred only at the point that they=E2=80=99re evaluated by the compiler.=
</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID327">
<h2>Type Aliases<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/TheBasics.html#ID327" title=3D"Permalink to this headl=
ine">=C2=B6</a></h2>
<p><em>Type aliases</em> define an alternative name for an existing type. Y=
ou define type aliases with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">typealias</span></code> keyword.</p>
<p>Type aliases are useful when you want to refer to an existing type by a =
name that is contextually more appropriate, such as when working with data =
of a specific size from an external source:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ty=
pealias</span> <span class=3D"nv">AudioSample</span> =3D <span class=3D"nc"=
>UInt16</span>
</li></ol></div></div></div>
<p>Once you define a type alias, you can use the alias anywhere you might u=
se the original name:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">maxAmplitudeFound</span> =3D <span class=3D"nv"=
>AudioSample</span>.<span class=3D"nv">min</span>
</li><li><span class=3D"c">// maxAmplitudeFound is now 0</span>
</li></ol></div></div></div>
<p>Here, <code class=3D"docutils literal notranslate"><span class=3D"pre">A=
udioSample</span></code> is defined as an alias for <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">UInt16</span></code>. Because it=
=E2=80=99s an alias, the call to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">AudioSample.min</span></code> actually calls <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">UInt16.min</span>=
</code>, which provides an initial value of <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">0</span></code> for the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">maxAmplitudeFound</span></c=
ode> variable.</p>
</div>
<div class=3D"section" id=3D"ID328">
<h2>Booleans<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID328" title=3D"Permalink to this headline"=
>=C2=B6</a></h2>
<p>Swift has a basic <em>Boolean</em> type, called <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Bool</span></code>. Boolean values=
 are referred to as <em>logical</em>, because they can only ever be true or=
 false. Swift provides two Boolean constant values, <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">true</span></code> and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">false</span></code>:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">orangesAreOrange</span> =3D <span class=3D"k">t=
rue</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">turnipsAreDeliciou=
s</span> =3D <span class=3D"k">false</span>
</li></ol></div></div></div>
<p>The types of <code class=3D"docutils literal notranslate"><span class=3D=
"pre">orangesAreOrange</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">turnipsAreDelicious</span></code> have been =
inferred as <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Bool</span></code> from the fact that they were initialized with Boolean =
literal values. As with <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Int</span></code> and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Double</span></code> above, you don=E2=80=99t nee=
d to declare constants or variables as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Bool</span></code> if you set them to <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">true</span></code>=
 or <code class=3D"docutils literal notranslate"><span class=3D"pre">false<=
/span></code> as soon as you create them. Type inference helps make Swift c=
ode more concise and readable when it initializes constants or variables wi=
th other values whose type is already known.</p>
<p>Boolean values are particularly useful when you work with conditional st=
atements such as the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">if</span></code> statement:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">turnipsAreDelicious</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Mmm, tasty =
turnips!"</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Eww, turnip=
s are horrible."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Eww, turnips are horrible."</span>
</li></ol></div></div></div>
<p>Conditional statements such as the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">if</span></code> statement are covered in more =
detail in <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Control Flow</=
span></a>.</p>
<p>Swift=E2=80=99s type safety prevents non-Boolean values from being subst=
ituted for <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Bool</span></code>. The following example reports a compile-time error:</p=
>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">i</span> =3D <span class=3D"m">1</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">i</span> {
</li><li>    <span class=3D"c">// this example will not compile, and will r=
eport an error</span>
</li><li>}
</li></ol></div></div></div>
<p>However, the alternative example below is valid:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">i</span> =3D <span class=3D"m">1</span>
</li><li><span class=3D"k">if</span> <span class=3D"nv">i</span> =3D=3D <sp=
an class=3D"m">1</span> {
</li><li>    <span class=3D"c">// this example will compile successfully</s=
pan>
</li><li>}
</li></ol></div></div></div>
<p>The result of the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">i</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">1=
</span></code> comparison is of type <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Bool</span></code>, and so this second example p=
asses the type-check. Comparisons like <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">i</span> <span class=3D"pre">=3D=3D</span> <sp=
an class=3D"pre">1</span></code> are discussed in <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/BasicOperato=
rs.html"><span class=3D"doc">Basic Operators</span></a>.</p>
<p>As with other examples of type safety in Swift, this approach avoids acc=
idental errors and ensures that the intention of a particular section of co=
de is always clear.</p>
</div>
<div class=3D"section" id=3D"ID329">
<h2>Tuples<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book=
/LanguageGuide/TheBasics.html#ID329" title=3D"Permalink to this headline">=
=C2=B6</a></h2>
<p><em>Tuples</em> group multiple values into a single compound value. The =
values within a tuple can be of any type and don=E2=80=99t have to be of th=
e same type as each other.</p>
<p>In this example, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">(404,</span> <span class=3D"pre">"Not</span> <span class=3D"pre">=
Found")</span></code> is a tuple that describes an <em>HTTP status code</em=
>. An HTTP status code is a special value returned by a web server whenever=
 you request a web page. A status code of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">404</span> <span class=3D"pre">Not</span> <=
span class=3D"pre">Found</span></code> is returned if you request a webpage=
 that doesn=E2=80=99t exist.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">http404Error</span> =3D (<span class=3D"m">404<=
/span>, <span class=3D"s">"Not Found"</span>)
</li><li><span class=3D"c">// http404Error is of type (Int, String), and eq=
uals (404, "Not Found")</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">(40=
4,</span> <span class=3D"pre">"Not</span> <span class=3D"pre">Found")</span=
></code> tuple groups together an <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Int</span></code> and a <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">String</span></code> to give the HTTP=
 status code two separate values: a number and a human-readable description=
. It can be described as =E2=80=9Ca tuple of type <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">(Int,</span> <span class=3D"pre">St=
ring)</span></code>=E2=80=9D.</p>
<p>You can create tuples from any permutation of types, and they can contai=
n as many different types as you like. There=E2=80=99s nothing stopping you=
 from having a tuple of type <code class=3D"docutils literal notranslate"><=
span class=3D"pre">(Int,</span> <span class=3D"pre">Int,</span> <span class=
=3D"pre">Int)</span></code>, or <code class=3D"docutils literal notranslate=
"><span class=3D"pre">(String,</span> <span class=3D"pre">Bool)</span></cod=
e>, or indeed any other permutation you require.</p>
<p>You can <em>decompose</em> a tuple=E2=80=99s contents into separate cons=
tants or variables, which you then access as usual:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> (<span class=3D"nv">statusCode</span>, <span class=3D"nv">statusMe=
ssage</span>) =3D <span class=3D"nv">http404Error</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The status code=
 is </span>\<span class=3D"p">(</span><span class=3D"nv">statusCode</span><=
span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status code is 404"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The status mess=
age is </span>\<span class=3D"p">(</span><span class=3D"nv">statusMessage</=
span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status message is Not Found"</spa=
n>
</li></ol></div></div></div>
<p>If you only need some of the tuple=E2=80=99s values, ignore parts of the=
 tuple with an underscore (<code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">_</span></code>) when you decompose the tuple:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> (<span class=3D"nv">justTheStatusCode</span>, <span class=3D"k">_<=
/span>) =3D <span class=3D"nv">http404Error</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The status code=
 is </span>\<span class=3D"p">(</span><span class=3D"nv">justTheStatusCode<=
/span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status code is 404"</span>
</li></ol></div></div></div>
<p>Alternatively, access the individual element values in a tuple using ind=
ex numbers starting at zero:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">"The status code is </span>\<span class=3D"p"=
>(</span><span class=3D"nv">http404Error</span>.<span class=3D"m">0</span><=
span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status code is 404"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The status mess=
age is </span>\<span class=3D"p">(</span><span class=3D"nv">http404Error</s=
pan>.<span class=3D"m">1</span><span class=3D"p">)</span><span class=3D"s">=
"</span>)
</li><li><span class=3D"c">// Prints "The status message is Not Found"</spa=
n>
</li></ol></div></div></div>
<p>You can name the individual elements in a tuple when the tuple is define=
d:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">http200Status</span> =3D (<span class=3D"nv">st=
atusCode</span>: <span class=3D"m">200</span>, <span class=3D"nv">descripti=
on</span>: <span class=3D"s">"OK"</span>)
</li></ol></div></div></div>
<p>If you name the elements in a tuple, you can use the element names to ac=
cess the values of those elements:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">"The status code is </span>\<span class=3D"p"=
>(</span><span class=3D"nv">http200Status</span>.<span class=3D"nv">statusC=
ode</span><span class=3D"p">)</span><span class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status code is 200"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The status mess=
age is </span>\<span class=3D"p">(</span><span class=3D"nv">http200Status</=
span>.<span class=3D"nv">description</span><span class=3D"p">)</span><span =
class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "The status message is OK"</span>
</li></ol></div></div></div>
<p>Tuples are particularly useful as the return values of functions. A func=
tion that tries to retrieve a web page might return the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">(Int,</span> <span class=3D"p=
re">String)</span></code> tuple type to describe the success or failure of =
the page retrieval. By returning a tuple with two distinct values, each of =
a different type, the function provides more useful information about its o=
utcome than if it could only return a single value of a single type. For mo=
re information, see <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Functions.html#ID164"><span class=3D"std s=
td-ref">Functions with Multiple Return Values</span></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Tuples are useful for simple groups of related values. Th=
ey=E2=80=99re not suited to the creation of complex data structures. If you=
r data structure is likely to be more complex, model it as a class or struc=
ture, rather than as a tuple. For more information, see <a class=3D"referen=
ce internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Classe=
sAndStructures.html"><span class=3D"doc">Structures and Classes</span></a>.=
</p>
</div>
</div>
<div class=3D"section" id=3D"ID330">
<h2>Optionals<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/TheBasics.html#ID330" title=3D"Permalink to this headline=
">=C2=B6</a></h2>
<p>You use <em>optionals</em> in situations where a value may be absent. An=
 optional represents two possibilities: Either there <em>is</em> a value, a=
nd you can unwrap the optional to access that value, or there <em>isn=E2=80=
=99t</em> a value at all.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The concept of optionals doesn=E2=80=99t exist in C or Ob=
jective-C. The nearest thing in Objective-C is the ability to return <code =
class=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code=
> from a method that would otherwise return an object, with <code class=3D"=
docutils literal notranslate"><span class=3D"pre">nil</span></code> meaning=
 =E2=80=9Cthe absence of a valid object.=E2=80=9D However, this only works =
for objects=E2=80=94it doesn=E2=80=99t work for structures, basic C types, =
or enumeration values. For these types, Objective-C methods typically retur=
n a special value (such as <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">NSNotFound</span></code>) to indicate the absence of a val=
ue. This approach assumes that the method=E2=80=99s caller knows there=E2=
=80=99s a special value to test against and remembers to check for it. Swif=
t=E2=80=99s optionals let you indicate the absence of a value for <em>any t=
ype at all</em>, without the need for special constants.</p>
</div>
<p>Here=E2=80=99s an example of how optionals can be used to cope with the =
absence of a value. Swift=E2=80=99s <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Int</span></code> type has an initializer which t=
ries to convert a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">String</span></code> value into an <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Int</span></code> value. However, not eve=
ry string can be converted into an integer. The string <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">"123"</span></code> can be con=
verted into the numeric value <code class=3D"docutils literal notranslate">=
<span class=3D"pre">123</span></code>, but the string <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">"hello,</span> <span class=3D"p=
re">world"</span></code> doesn=E2=80=99t have an obvious numeric value to c=
onvert to.</p>
<p>The example below uses the initializer to try to convert a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">String</span></code> =
into an <code class=3D"docutils literal notranslate"><span class=3D"pre">In=
t</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">possibleNumber</span> =3D <span class=3D"s">"12=
3"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">convertedNumber</s=
pan> =3D <span class=3D"nv">Int</span>(<span class=3D"nv">possibleNumber</s=
pan>)
</li><li><span class=3D"c">// convertedNumber is inferred to be of type "In=
t?", or "optional Int"</span>
</li></ol></div></div></div>
<p>Because the initializer might fail, it returns an <em>optional</em> <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Int</span></co=
de>, rather than an <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Int</span></code>. An optional <code class=3D"docutils literal no=
translate"><span class=3D"pre">Int</span></code> is written as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int?</span></code>, n=
ot <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</sp=
an></code>. The question mark indicates that the value it contains is optio=
nal, meaning that it might contain <em>some</em> <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Int</span></code> value, or it might=
 contain <em>no value at all</em>. (It can=E2=80=99t contain anything else,=
 such as a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Bool</span></code> value or a <code class=3D"docutils literal notranslate"=
><span class=3D"pre">String</span></code> value. It=E2=80=99s either an <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Int</span></c=
ode>, or it=E2=80=99s nothing at all.)</p>
<div class=3D"section" id=3D"ID331">
<h3>nil<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/TheBasics.html#ID331" title=3D"Permalink to this headline">=C2=
=B6</a></h3>
<p>You set an optional variable to a valueless state by assigning it the sp=
ecial value <code class=3D"docutils literal notranslate"><span class=3D"pre=
">nil</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">serverResponseCode</span>: <span class=3D"nc">I=
nt</span>? =3D <span class=3D"m">404</span>
</li><li><span class=3D"c">// serverResponseCode contains an actual Int val=
ue of 404</span>
</li><li><span class=3D"nv">serverResponseCode</span> =3D <span class=3D"k"=
>nil</span>
</li><li><span class=3D"c">// serverResponseCode now contains no value</spa=
n>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You can=E2=80=99t use <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">nil</span></code> with non-optional constants=
 and variables. If a constant or variable in your code needs to work with t=
he absence of a value under certain conditions, always declare it as an opt=
ional value of the appropriate type.</p>
</div>
<p>If you define an optional variable without providing a default value, th=
e variable is automatically set to <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">nil</span></code> for you:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">surveyAnswer</span>: <span class=3D"nc">String<=
/span>?
</li><li><span class=3D"c">// surveyAnswer is automatically set to nil</spa=
n>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Swift=E2=80=99s <code class=3D"docutils literal notransla=
te"><span class=3D"pre">nil</span></code> isn=E2=80=99t the same as <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>=
 in Objective-C. In Objective-C, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">nil</span></code> is a pointer to a nonexistent obje=
ct. In Swift, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">nil</span></code> isn=E2=80=99t a pointer=E2=80=94it=E2=80=99s the abse=
nce of a value of a certain type. Optionals of <em>any</em> type can be set=
 to <code class=3D"docutils literal notranslate"><span class=3D"pre">nil</s=
pan></code>, not just object types.</p>
</div>
</div>
<div class=3D"section" id=3D"ID332">
<h3>If Statements and Forced Unwrapping<a class=3D"headerlink" href=3D"http=
s://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID332" title=3D"=
Permalink to this headline">=C2=B6</a></h3>
<p>You can use an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">if</span></code> statement to find out whether an optional contain=
s a value by comparing the optional against <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">nil</span></code>. You perform this compa=
rison with the =E2=80=9Cequal to=E2=80=9D operator (<code class=3D"docutils=
 literal notranslate"><span class=3D"pre">=3D=3D</span></code>) or the =E2=
=80=9Cnot equal to=E2=80=9D operator (<code class=3D"docutils literal notra=
nslate"><span class=3D"pre">!=3D</span></code>).</p>
<p>If an optional has a value, it=E2=80=99s considered to be =E2=80=9Cnot e=
qual to=E2=80=9D <code class=3D"docutils literal notranslate"><span class=
=3D"pre">nil</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">convertedNumber</span> !=3D <span class=3D"k">ni=
l</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"convertedNu=
mber contains some integer value."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "convertedNumber contains some integer=
 value."</span>
</li></ol></div></div></div>
<p>Once you=E2=80=99re sure that the optional <em>does</em> contain a value=
, you can access its underlying value by adding an exclamation mark (<code =
class=3D"docutils literal notranslate"><span class=3D"pre">!</span></code>)=
 to the end of the optional=E2=80=99s name. The exclamation mark effectivel=
y says, =E2=80=9CI know that this optional definitely has a value; please u=
se it.=E2=80=9D This is known as <em>forced unwrapping</em> of the optional=
=E2=80=99s value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">convertedNumber</span> !=3D <span class=3D"k">ni=
l</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"convertedNu=
mber has an integer value of </span>\<span class=3D"p">(</span><span class=
=3D"nv">convertedNumber</span>!<span class=3D"p">)</span><span class=3D"s">=
."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "convertedNumber has an integer value =
of 123."</span>
</li></ol></div></div></div>
<p>For more about the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">if</span></code> statement, see <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html">=
<span class=3D"doc">Control Flow</span></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Trying to use <code class=3D"docutils literal notranslate=
"><span class=3D"pre">!</span></code> to access a nonexistent optional valu=
e triggers a runtime error. Always make sure that an optional contains a no=
n-<code class=3D"docutils literal notranslate"><span class=3D"pre">nil</spa=
n></code> value before using <code class=3D"docutils literal notranslate"><=
span class=3D"pre">!</span></code> to force-unwrap its value.</p>
</div>
</div>
<div class=3D"section" id=3D"ID333">
<h3>Optional Binding<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/TheBasics.html#ID333" title=3D"Permalink to this h=
eadline">=C2=B6</a></h3>
<p>You use <em>optional binding</em> to find out whether an optional contai=
ns a value, and if so, to make that value available as a temporary constant=
 or variable. Optional binding can be used with <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">if</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">while</span></code> statem=
ents to check for a value inside an optional, and to extract that value int=
o a constant or variable, as part of a single action. <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">if</span></code> and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">while</span></code> =
statements are described in more detail in <a class=3D"reference internal" =
href=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html"><=
span class=3D"doc">Control Flow</span></a>.</p>
<p>Write an optional binding for an <code class=3D"docutils literal notrans=
late"><span class=3D"pre">if</span></code> statement as follows:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"k">let</span> <span class=3D"gi">cons=
tantName</span> =3D <span class=3D"gi">someOptional</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>You can rewrite the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">possibleNumber</span></code> example from the <a class=3D"refe=
rence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/The=
Basics.html#ID330"><span class=3D"std std-ref">Optionals</span></a> section=
 to use optional binding rather than forced unwrapping:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">actualNumber</span>=
 =3D <span class=3D"nv">Int</span>(<span class=3D"nv">possibleNumber</span>=
) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The string =
\"</span>\<span class=3D"p">(</span><span class=3D"nv">possibleNumber</span=
><span class=3D"p">)</span><span class=3D"s">\" has an integer value of </s=
pan>\<span class=3D"p">(</span><span class=3D"nv">actualNumber</span><span =
class=3D"p">)</span><span class=3D"s">"</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The string =
\"</span>\<span class=3D"p">(</span><span class=3D"nv">possibleNumber</span=
><span class=3D"p">)</span><span class=3D"s">\" could not be converted to a=
n integer"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The string "123" has an integer value=
 of 123"</span>
</li></ol></div></div></div>
<p>This code can be read as:</p>
<p>=E2=80=9CIf the optional <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">Int</span></code> returned by <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Int(possibleNumber)</span></code> con=
tains a value, set a new constant called <code class=3D"docutils literal no=
translate"><span class=3D"pre">actualNumber</span></code> to the value cont=
ained in the optional.=E2=80=9D</p>
<p>If the conversion is successful, the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">actualNumber</span></code> constant becomes a=
vailable for use within the first branch of the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">if</span></code> statement. It has al=
ready been initialized with the value contained <em>within</em> the optiona=
l, and so there=E2=80=99s no need to use the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">!</span></code> suffix to access its val=
ue. In this example, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">actualNumber</span></code> is simply used to print the result of=
 the conversion.</p>
<p>You can use both constants and variables with optional binding. If you w=
anted to manipulate the value of <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">actualNumber</span></code> within the first branch o=
f the <code class=3D"docutils literal notranslate"><span class=3D"pre">if</=
span></code> statement, you could write <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">if</span> <span class=3D"pre">var</span> <spa=
n class=3D"pre">actualNumber</span></code> instead, and the value contained=
 within the optional would be made available as a variable rather than a co=
nstant.</p>
<p>You can include as many optional bindings and Boolean conditions in a si=
ngle <code class=3D"docutils literal notranslate"><span class=3D"pre">if</s=
pan></code> statement as you need to, separated by commas. If any of the va=
lues in the optional bindings are <code class=3D"docutils literal notransla=
te"><span class=3D"pre">nil</span></code> or any Boolean condition evaluate=
s to <code class=3D"docutils literal notranslate"><span class=3D"pre">false=
</span></code>, the whole <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">if</span></code> statement=E2=80=99s condition is considere=
d to be <code class=3D"docutils literal notranslate"><span class=3D"pre">fa=
lse</span></code>. The following <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">if</span></code> statements are equivalent:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">firstNumber</span> =
=3D <span class=3D"nv">Int</span>(<span class=3D"s">"4"</span>), <span clas=
s=3D"k">let</span> <span class=3D"nv">secondNumber</span> =3D <span class=
=3D"nv">Int</span>(<span class=3D"s">"42"</span>), <span class=3D"nv">first=
Number</span> &lt; <span class=3D"nv">secondNumber</span> &amp;&amp; <span =
class=3D"nv">secondNumber</span> &lt; <span class=3D"m">100</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">firstNumber</span><span class=3D"=
p">)</span><span class=3D"s"> &lt; </span>\<span class=3D"p">(</span><span =
class=3D"nv">secondNumber</span><span class=3D"p">)</span><span class=3D"s"=
> &lt; 100"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "4 &lt; 42 &lt; 100"</span>
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">firstNumber</span> =3D <span class=3D"nv">Int</span>(<span class=
=3D"s">"4"</span>) {
</li><li>    <span class=3D"k">if</span> <span class=3D"k">let</span> <span=
 class=3D"nv">secondNumber</span> =3D <span class=3D"nv">Int</span>(<span c=
lass=3D"s">"42"</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">firstNumber=
</span> &lt; <span class=3D"nv">secondNumber</span> &amp;&amp; <span class=
=3D"nv">secondNumber</span> &lt; <span class=3D"m">100</span> {
</li><li>            <span class=3D"nv">print</span>(<span class=3D"s">"</s=
pan>\<span class=3D"p">(</span><span class=3D"nv">firstNumber</span><span c=
lass=3D"p">)</span><span class=3D"s"> &lt; </span>\<span class=3D"p">(</spa=
n><span class=3D"nv">secondNumber</span><span class=3D"p">)</span><span cla=
ss=3D"s"> &lt; 100"</span>)
</li><li>        }
</li><li>    }
</li><li>}
</li><li><span class=3D"c">// Prints "4 &lt; 42 &lt; 100"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Constants and variables created with optional binding in =
an <code class=3D"docutils literal notranslate"><span class=3D"pre">if</spa=
n></code> statement are available only within the body of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">if</span></code> stat=
ement. In contrast, the constants and variables created with a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">guard</span></code> s=
tatement are available in the lines of code that follow the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">guard</span></code> state=
ment, as described in <a class=3D"reference internal" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525"><span class=3D"s=
td std-ref">Early Exit</span></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"ID334">
<h3>Implicitly Unwrapped Optionals<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID334" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>As described above, optionals indicate that a constant or variable is al=
lowed to have =E2=80=9Cno value=E2=80=9D. Optionals can be checked with an =
<code class=3D"docutils literal notranslate"><span class=3D"pre">if</span><=
/code> statement to see if a value exists, and can be conditionally unwrapp=
ed with optional binding to access the optional=E2=80=99s value if it does =
exist.</p>
<p>Sometimes it=E2=80=99s clear from a program=E2=80=99s structure that an =
optional will <em>always</em> have a value, after that value is first set. =
In these cases, it=E2=80=99s useful to remove the need to check and unwrap =
the optional=E2=80=99s value every time it=E2=80=99s accessed, because it c=
an be safely assumed to have a value all of the time.</p>
<p>These kinds of optionals are defined as <em>implicitly unwrapped optiona=
ls</em>. You write an implicitly unwrapped optional by placing an exclamati=
on mark (<code class=3D"docutils literal notranslate"><span class=3D"pre">S=
tring!</span></code>) rather than a question mark (<code class=3D"docutils =
literal notranslate"><span class=3D"pre">String?</span></code>) after the t=
ype that you want to make optional.</p>
<p>Implicitly unwrapped optionals are useful when an optional=E2=80=99s val=
ue is confirmed to exist immediately after the optional is first defined an=
d can definitely be assumed to exist at every point thereafter. The primary=
 use of implicitly unwrapped optionals in Swift is during class initializat=
ion, as described in <a class=3D"reference internal" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID55"><sp=
an class=3D"std std-ref">Unowned References and Implicitly Unwrapped Option=
al Properties</span></a>.</p>
<p>An implicitly unwrapped optional is a normal optional behind the scenes,=
 but can also be used like a non-optional value, without the need to unwrap=
 the optional value each time it=E2=80=99s accessed. The following example =
shows the difference in behavior between an optional string and an implicit=
ly unwrapped optional string when accessing their wrapped value as an expli=
cit <code class=3D"docutils literal notranslate"><span class=3D"pre">String=
</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">possibleString</span>: <span class=3D"nc">Strin=
g</span>? =3D <span class=3D"s">"An optional string."</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">forcedString</span=
>: <span class=3D"nc">String</span> =3D <span class=3D"nv">possibleString</=
span>! <span class=3D"c">// requires an exclamation mark</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">assumedString</spa=
n>: <span class=3D"nc">String</span>! =3D <span class=3D"s">"An implicitly =
unwrapped optional string."</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">implicitString</sp=
an>: <span class=3D"nc">String</span> =3D <span class=3D"nv">assumedString<=
/span> <span class=3D"c">// no need for an exclamation mark</span>
</li></ol></div></div></div>
<p>You can think of an implicitly unwrapped optional as giving permission f=
or the optional to be unwrapped automatically whenever it=E2=80=99s used. R=
ather than placing an exclamation mark after the optional=E2=80=99s name ea=
ch time you use it, you place an exclamation mark after the optional=E2=80=
=99s type when you declare it.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If an implicitly unwrapped optional is <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">nil</span></code> and you tr=
y to access its wrapped value, you=E2=80=99ll trigger a runtime error. The =
result is exactly the same as if you place an exclamation mark after a norm=
al optional that doesn=E2=80=99t contain a value.</p>
</div>
<p>You can still treat an implicitly unwrapped optional like a normal optio=
nal, to check if it contains a value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">assumedString</span> !=3D <span class=3D"k">nil<=
/span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">assumedStri=
ng</span>!)
</li><li>}
</li><li><span class=3D"c">// Prints "An implicitly unwrapped optional stri=
ng."</span>
</li></ol></div></div></div>
<p>You can also use an implicitly unwrapped optional with optional binding,=
 to check and unwrap its value in a single statement:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">definiteString</spa=
n> =3D <span class=3D"nv">assumedString</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">definiteStr=
ing</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "An implicitly unwrapped optional stri=
ng."</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Don=E2=80=99t use an implicitly unwrapped optional when t=
here=E2=80=99s a possibility of a variable becoming <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">nil</span></code> at a later poin=
t. Always use a normal optional type if you need to check for a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code> val=
ue during the lifetime of a variable.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID515">
<h2>Error Handling<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/TheBasics.html#ID515" title=3D"Permalink to this hea=
dline">=C2=B6</a></h2>
<p>You use <em>error handling</em> to respond to error conditions your prog=
ram may encounter during execution.</p>
<p>In contrast to optionals, which can use the presence or absence of a val=
ue to communicate success or failure of a function, error handling allows y=
ou to determine the underlying cause of failure, and, if necessary, propaga=
te the error to another part of your program.</p>
<p>When a function encounters an error condition, it <em>throws</em> an err=
or. That function=E2=80=99s caller can then <em>catch</em> the error and re=
spond appropriately.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">canThrowAnError</span>() <span class=3D"k">thr=
ows</span> {
</li><li>    <span class=3D"c">// this function may or may not throw an err=
or</span>
</li><li>}
</li></ol></div></div></div>
<p>A function indicates that it can throw an error by including the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">throws</span></co=
de> keyword in its declaration. When you call a function that can throw an =
error, you prepend the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">try</span></code> keyword to the expression.</p>
<p>Swift automatically propagates errors out of their current scope until t=
hey=E2=80=99re handled by a <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">catch</span></code> clause.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">do=
</span> {
</li><li>    <span class=3D"k">try</span> <span class=3D"nv">canThrowAnErro=
r</span>()
</li><li>    <span class=3D"c">// no error was thrown</span>
</li><li>} <span class=3D"k">catch</span> {
</li><li>    <span class=3D"c">// an error was thrown</span>
</li><li>}
</li></ol></div></div></div>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">do</s=
pan></code> statement creates a new containing scope, which allows errors t=
o be propagated to one or more <code class=3D"docutils literal notranslate"=
><span class=3D"pre">catch</span></code> clauses.</p>
<p>Here=E2=80=99s an example of how error handling can be used to respond t=
o different error conditions:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">makeASandwich</span>() <span class=3D"k">throw=
s</span> {
</li><li>    <span class=3D"c">// ...</span>
</li><li>}
</li><li>
</li><li><span class=3D"k">do</span> {
</li><li>    <span class=3D"k">try</span> <span class=3D"nv">makeASandwich<=
/span>()
</li><li>    <span class=3D"nv">eatASandwich</span>()
</li><li>} <span class=3D"k">catch</span> <span class=3D"nv">SandwichError<=
/span>.<span class=3D"nv">outOfCleanDishes</span> {
</li><li>    <span class=3D"nv">washDishes</span>()
</li><li>} <span class=3D"k">catch</span> <span class=3D"nv">SandwichError<=
/span>.<span class=3D"nv">missingIngredients</span>(<span class=3D"k">let</=
span> <span class=3D"nv">ingredients</span>) {
</li><li>    <span class=3D"nv">buyGroceries</span>(<span class=3D"nv">ingr=
edients</span>)
</li><li>}
</li></ol></div></div></div>
<p>In this example, the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">makeASandwich()</span></code> function will throw an error if=
 no clean dishes are available or if any ingredients are missing. Because <=
code class=3D"docutils literal notranslate"><span class=3D"pre">makeASandwi=
ch()</span></code> can throw an error, the function call is wrapped in a <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">try</span></=
code> expression. By wrapping the function call in a <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">do</span></code> statement, any =
errors that are thrown will be propagated to the provided <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">catch</span></code> clauses=
.</p>
<p>If no error is thrown, the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">eatASandwich()</span></code> function is called. If an =
error is thrown and it matches the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">SandwichError.outOfCleanDishes</span></code> case,=
 then the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
washDishes()</span></code> function will be called. If an error is thrown a=
nd it matches the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">SandwichError.missingIngredients</span></code> case, then the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">buyGroceries(_=
:)</span></code> function is called with the associated <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">[String]</span></code> value =
captured by the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">catch</span></code> pattern.</p>
<p>Throwing, catching, and propagating errors is covered in greater detail =
in <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-boo=
k/LanguageGuide/ErrorHandling.html"><span class=3D"doc">Error Handling</spa=
n></a>.</p>
</div>
<div class=3D"section" id=3D"ID335">
<h2>Assertions and Preconditions<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/TheBasics.html#ID335" title=3D"Permali=
nk to this headline">=C2=B6</a></h2>
<p><em>Assertions</em> and <em>preconditions</em> are checks that happen at=
 runtime. You use them to make sure an essential condition is satisfied bef=
ore executing any further code. If the Boolean condition in the assertion o=
r precondition evaluates to <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">true</span></code>, code execution continues as usual. If=
 the condition evaluates to <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">false</span></code>, the current state of the program is =
invalid; code execution ends, and your app is terminated.</p>
<p>You use assertions and preconditions to express the assumptions you make=
 and the expectations you have while coding, so you can include them as par=
t of your code. Assertions help you find mistakes and incorrect assumptions=
 during development, and preconditions help you detect issues in production=
.</p>
<p>In addition to verifying your expectations at runtime, assertions and pr=
econditions also become a useful form of documentation within the code. Unl=
ike the error conditions discussed in <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID515"><=
span class=3D"std std-ref">Error Handling</span></a> above, assertions and =
preconditions aren=E2=80=99t used for recoverable or expected errors. Becau=
se a failed assertion or precondition indicates an invalid program state, t=
here=E2=80=99s no way to catch a failed assertion.</p>
<p>Using assertions and preconditions isn=E2=80=99t a substitute for design=
ing your code in such a way that invalid conditions are unlikely to arise. =
However, using them to enforce valid data and state causes your app to term=
inate more predictably if an invalid state occurs, and helps make the probl=
em easier to debug. Stopping execution as soon as an invalid state is detec=
ted also helps limit the damage caused by that invalid state.</p>
<p>The difference between assertions and preconditions is in when they=E2=
=80=99re checked: Assertions are checked only in debug builds, but precondi=
tions are checked in both debug and production builds. In production builds=
, the condition inside an assertion isn=E2=80=99t evaluated. This means you=
 can use as many assertions as you want during your development process, wi=
thout impacting performance in production.</p>
<div class=3D"section" id=3D"ID336">
<h3>Debugging with Assertions<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/TheBasics.html#ID336" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>You write an assertion by calling the <a class=3D"reference external" hr=
ef=3D"https://developer.apple.com/documentation/swift/1541112-assert"><code=
 class=3D"docutils literal notranslate"><span class=3D"pre">assert(_:_:file=
:line:)</span></code></a> function from the Swift standard library. You pas=
s this function an expression that evaluates to <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">true</span></code> or <code class=3D"=
docutils literal notranslate"><span class=3D"pre">false</span></code> and a=
 message to display if the result of the condition is <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">false</span></code>. For exampl=
e:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">age</span> =3D <span class=3D"m">-3</span>
</li><li><span class=3D"nv">assert</span>(<span class=3D"nv">age</span> &gt=
;=3D <span class=3D"m">0</span>, <span class=3D"s">"A person's age can't be=
 less than zero."</span>)
</li><li><span class=3D"c">// This assertion fails because -3 is not &gt;=
=3D 0.</span>
</li></ol></div></div></div>
<p>In this example, code execution continues if <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">age</span> <span class=3D"pre">&gt;=
=3D</span> <span class=3D"pre">0</span></code> evaluates to <code class=3D"=
docutils literal notranslate"><span class=3D"pre">true</span></code>, that =
is, if the value of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">age</span></code> is nonnegative. If the value of <code class=3D"=
docutils literal notranslate"><span class=3D"pre">age</span></code> is nega=
tive, as in the code above, then <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">age</span> <span class=3D"pre">&gt;=3D</span> <span =
class=3D"pre">0</span></code> evaluates to <code class=3D"docutils literal =
notranslate"><span class=3D"pre">false</span></code>, and the assertion fai=
ls, terminating the application.</p>
<p>You can omit the assertion message=E2=80=94for example, when it would ju=
st repeat the condition as prose.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">a=
ssert</span>(<span class=3D"nv">age</span> &gt;=3D <span class=3D"m">0</spa=
n>)
</li></ol></div></div></div>
<p>If the code already checks the condition, you use the <a class=3D"refere=
nce external" href=3D"https://developer.apple.com/documentation/swift/15396=
16-assertionfailure"><code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">assertionFailure(_:file:line:)</span></code></a> function to ind=
icate that an assertion has failed. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"nv">age</span> &gt; <span class=3D"m">10</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"You can rid=
e the roller-coaster or the ferris wheel."</span>)
</li><li>} <span class=3D"k">else</span> <span class=3D"k">if</span> <span =
class=3D"nv">age</span> &gt;=3D <span class=3D"m">0</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"You can rid=
e the ferris wheel."</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">assertionFailure</span>(<span class=3D"s">"=
A person's age can't be less than zero."</span>)
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID554">
<h3>Enforcing Preconditions<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/TheBasics.html#ID554" title=3D"Permalink to=
 this headline">=C2=B6</a></h3>
<p>Use a precondition whenever a condition has the potential to be false, b=
ut must <em>definitely</em> be true for your code to continue execution. Fo=
r example, use a precondition to check that a subscript is not out of bound=
s, or to check that a function has been passed a valid value.</p>
<p>You write a precondition by calling the <a class=3D"reference external" =
href=3D"https://developer.apple.com/documentation/swift/1540960-preconditio=
n"><code class=3D"docutils literal notranslate"><span class=3D"pre">precond=
ition(_:_:file:line:)</span></code></a> function. You pass this function an=
 expression that evaluates to <code class=3D"docutils literal notranslate">=
<span class=3D"pre">true</span></code> or <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">false</span></code> and a message to displa=
y if the result of the condition is <code class=3D"docutils literal notrans=
late"><span class=3D"pre">false</span></code>. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 In the implementation of a subscript...</span>
</li><li><span class=3D"nv">precondition</span>(<span class=3D"nv">index</s=
pan> &gt; <span class=3D"m">0</span>, <span class=3D"s">"Index must be grea=
ter than zero."</span>)
</li></ol></div></div></div>
<p>You can also call the <a class=3D"reference external" href=3D"https://de=
veloper.apple.com/documentation/swift/1539374-preconditionfailure"><code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">preconditionFailur=
e(_:file:line:)</span></code></a> function to indicate that a failure has o=
ccurred=E2=80=94for example, if the default case of a switch was taken, but=
 all valid input data should have been handled by one of the switch=E2=80=
=99s other cases.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>If you compile in unchecked mode (<code class=3D"docutils literal notran=
slate"><span class=3D"pre">-Ounchecked</span></code>), preconditions aren=
=E2=80=99t checked. The compiler assumes that preconditions are always true=
, and it optimizes your code accordingly. However, the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">fatalError(_:file:line:)</span=
></code> function always halts execution, regardless of optimization settin=
gs.</p>
<p class=3D"last">You can use the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">fatalError(_:file:line:)</span></code> function dur=
ing prototyping and early development to create stubs for functionality tha=
t hasn=E2=80=99t been implemented yet, by writing <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">fatalError("Unimplemented")</span><=
/code> as the stub implementation. Because fatal errors are never optimized=
 out, unlike assertions or preconditions, you can be sure that execution al=
ways halts if it encounters a stub implementation.</p>
</div>
</div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
GuidedTour/GuidedTour.html">A Swift Tour</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/BasicOperators.html">Basic Operators</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://cahedbegdkagmcjfolhdlechbkeaieki/images/apple/1f436.png

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
LNQA5cwAAAAASUVORK5CYII=

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://cahedbegdkagmcjfolhdlechbkeaieki/images/apple/1f42e.png

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

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://cahedbegdkagmcjfolhdlechbkeaieki/images/apple/1f431.png

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
YII=

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--R8Lk7dx1ozO1O2tAvCetEFgXkNlSyR0FPWifG2EC0H------
