From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/RevisionHistory/RevisionHistory.html
Subject: =?utf-8?Q?Document=20Revision=20History=20=E2=80=94=20The=20Swift=20Progr?=
 =?utf-8?Q?amming=20Language=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 01:01:17 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----"


------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/RevisionHistory/RevisionHistory.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Document Revision History =E2=80=94 The Swift Programming Langua=
ge (Swift 5.1)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revis=
ion History</a><ul class=3D"current">
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/RevisionHistory/RevisionHistory.htm=
l#">Document Revision History</a></li>
</ul>
</li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar" style=3D"display: none;">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/RevisionHistory/RevisionHistory.html#">Document Revision History</a></li=
>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"document-revision-history">
<h1>Document Revision History<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/RevisionHistory/RevisionHistory.html#document-revision-=
history" title=3D"Permalink to this headline">=C2=B6</a></h1>
<p><strong>2019-06-03</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 5.1.</li>
<li>Added information about functions that specify a protocol that their re=
turn value conforms to, instead of providing a specific named return type, =
to the <a class=3D"reference internal" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/OpaqueTypes.html"><span class=3D"doc">Opaque Types</spa=
n></a> chapter.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Functions.html#ID607"><span class=3D"std std-ref=
">Functions With an Implicit Return</span></a> and <a class=3D"reference in=
ternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Properties.=
html#ID608"><span class=3D"std std-ref">Shorthand Getter Declaration</span>=
</a> sections with information about functions that omit <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">return</span></code>.</li>
<li>Added information about using subscripts on types to the <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/S=
ubscripts.html#ID609"><span class=3D"std std-ref">Type Subscripts</span></a=
> section.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Initialization.html#ID214"><span class=3D"std =
std-ref">Memberwise Initializers for Structure Types</span></a> section, no=
w that memberwise initializers support omitting parameters for properties t=
hat have a default value.</li>
<li>Added information about dynamic members that are looked up by key path =
at run time to the <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Attributes.html#ID585"><span class=3D"std=
 std-ref">dynamicMemberLookup</span></a> section.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Types.html#ID610"><span class=3D"std std-ref=
">Self Type</span></a> section, now that <code class=3D"docutils literal no=
translate"><span class=3D"pre">Self</span></code> can be used to refer to t=
he type introduced by the current class, structure, or enumeration declarat=
ion.</li>
</ul>
<p><strong>2019-03-25</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 5.0.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/StringsAndCharacters.html#ID606"><span class=3D"=
std std-ref">Extended String Delimiters</span></a> section and updated the =
<a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/LexicalStructure.html#ID417"><span class=3D"std std-ref">Str=
ing Literals</span></a> section with information about extended string deli=
miters.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Attributes.html#ID603"><span class=3D"std std-=
ref">dynamicCallable</span></a> section with information about dynamically =
calling instances as functions using the <code class=3D"docutils literal no=
translate"><span class=3D"pre">dynamicCallable</span></code> attribute.</li=
>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Attributes.html#ID605"><span class=3D"std std-=
ref">unknown</span></a> and <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Statements.html#ID602"><span cla=
ss=3D"std std-ref">Switching Over Future Enumeration Cases</span></a> secti=
ons with information about handling future enumeration cases in switch stat=
ements using the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">unknown</span></code> switch case attribute.</li>
<li>Added information about the identity key path (<code class=3D"docutils =
literal notranslate"><span class=3D"pre">\.self</span></code>) to the <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Expressions.html#ID563"><span class=3D"std std-ref">Key-Path Expr=
ession</span></a> section.</li>
<li>Added information about using the less than (<code class=3D"docutils li=
teral notranslate"><span class=3D"pre">&lt;</span></code>) operator in plat=
form conditions to the <a class=3D"reference internal" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Statements.html#ID539"><span class=3D=
"std std-ref">Conditional Compilation Block</span></a> section.</li>
</ul>
<p><strong>2018-09-17</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 4.2.</li>
<li>Added information about accessing all of an enumeration=E2=80=99s cases=
 to the <a class=3D"reference internal" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/Enumerations.html#ID581"><span class=3D"std std-ref">I=
terating over Enumeration Cases</span></a> section.</li>
<li>Added information about <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">#error</span></code> and <code class=3D"docutils literal =
notranslate"><span class=3D"pre">#warning</span></code> to the <a class=3D"=
reference internal" href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/Statements.html#ID582"><span class=3D"std std-ref">Compile-Time Diagnost=
ic Statement</span></a> section.</li>
<li>Added information about inlining to the <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#=
ID348"><span class=3D"std std-ref">Declaration Attributes</span></a> sectio=
n under the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">inlinable</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">usableFromInline</span></code> attributes.</li>
<li>Added information about members that are looked up by name at runtime t=
o the <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Attributes.html#ID348"><span class=3D"std std-ref">Dec=
laration Attributes</span></a> section under the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">dynamicMemberLookup</span></code> at=
tribute.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">requires_stored_property_inits</span></code> and <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">warn_unqualifi=
ed_access</span></code> attributes to the <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID=
348"><span class=3D"std std-ref">Declaration Attributes</span></a> section.=
</li>
<li>Added information about how to conditionally compile code depending on =
the Swift compiler version being used to the <a class=3D"reference internal=
" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html=
#ID539"><span class=3D"std std-ref">Conditional Compilation Block</span></a=
> section.</li>
<li>Added information about <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">#dsohandle</span></code> to the <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expression=
s.html#ID390"><span class=3D"std std-ref">Literal Expression</span></a> sec=
tion.</li>
</ul>
<p><strong>2018-03-29</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 4.1.</li>
<li>Added information about synthesized implementations of equivalence oper=
ators to the <a class=3D"reference internal" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/AdvancedOperators.html#ID45"><span class=3D"std s=
td-ref">Equivalence Operators</span></a> section.</li>
<li>Added information about conditional protocol conformance to the <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Referenc=
eManual/Declarations.html#ID378"><span class=3D"std std-ref">Extension Decl=
aration</span></a> section of the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Declarations.html"><span c=
lass=3D"doc">Declarations</span></a> chapter, and to the <a class=3D"refere=
nce internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Proto=
cols.html#ID574"><span class=3D"std std-ref">Conditionally Conforming to a =
Protocol</span></a> section of the <a class=3D"reference internal" href=3D"=
https://docs.swift.org/swift-book/LanguageGuide/Protocols.html"><span class=
=3D"doc">Protocols</span></a> chapter.</li>
<li>Added information about recursive protocol constraints to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/Generics.html#ID575"><span class=3D"std std-ref">Using a Protocol in I=
ts Associated Type=E2=80=99s Constraints</span></a> section.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">canImport()</span></code> and <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">targetEnvironment()</span></code>=
 platform conditions to <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Statements.html#ID539"><span class=
=3D"std std-ref">Conditional Compilation Block</span></a>.</li>
</ul>
<p><strong>2017-12-04</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 4.0.3.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html#ID563"><span class=3D"std s=
td-ref">Key-Path Expression</span></a> section, now that key paths support =
subscript components.</li>
</ul>
<p><strong>2017-09-19</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 4.0.</li>
<li>Added information about exclusive access to memory to the <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
MemorySafety.html"><span class=3D"doc">Memory Safety</span></a> chapter.</l=
i>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Generics.html#ID557"><span class=3D"std std-ref"=
>Associated Types with a Generic Where Clause</span></a> section, now that =
you can use generic <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">where</span></code> clauses to constrain associated types.</li>
<li>Added information about multiline string literals to the <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/S=
tringsAndCharacters.html#ID286"><span class=3D"std std-ref">String Literals=
</span></a> section of the <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html"><span cl=
ass=3D"doc">Strings and Characters</span></a> chapter, and to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#ID417"><span class=3D"std std-ref">String Lite=
rals</span></a> section of the <a class=3D"reference internal" href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html"><span =
class=3D"doc">Lexical Structure</span></a> chapter.</li>
<li>Updated the discussion of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">objc</span></code> attribute in <a class=3D"referen=
ce internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attr=
ibutes.html#ID348"><span class=3D"std std-ref">Declaration Attributes</span=
></a>, now that this attribute is inferred in fewer places.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Generics.html#ID558"><span class=3D"std std-ref"=
>Generic Subscripts</span></a> section, now that subscripts can be generic.=
</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID282"><span =
class=3D"std std-ref">Protocol Composition</span></a> section of the <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/Protocols.html"><span class=3D"doc">Protocols</span></a> chapter, an=
d in the <a class=3D"reference internal" href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Types.html#ID454"><span class=3D"std std-ref">Proto=
col Composition Type</span></a> section of the <a class=3D"reference intern=
al" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html"><=
span class=3D"doc">Types</span></a> chapter, now that protocol composition =
types can contain a superclass requirement.</li>
<li>Updated the discussion of protocol extensions in <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declara=
tions.html#ID378"><span class=3D"std std-ref">Extension Declaration</span><=
/a> now that <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">final</span></code> isn=E2=80=99t allowed in them.</li>
<li>Added information about preconditions and fatal errors to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/TheBasics.html#ID335"><span class=3D"std std-ref">Assertions and Preco=
nditions</span></a> section.</li>
</ul>
<p><strong>2017-03-27</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 3.1.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Generics.html#ID553"><span class=3D"std std-ref"=
>Extensions with a Generic Where Clause</span></a> section with information=
 about extensions that include requirements.</li>
<li>Added examples of iterating over a range to the <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlo=
w.html#ID121"><span class=3D"std std-ref">For-In Loops</span></a> section.<=
/li>
<li>Added an example of failable numeric conversions to the <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/In=
itialization.html#ID224"><span class=3D"std std-ref">Failable Initializers<=
/span></a> section.</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID348"><span cl=
ass=3D"std std-ref">Declaration Attributes</span></a> section about using t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">availab=
le</span></code> attribute with a Swift language version.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Types.html#ID449"><span cl=
ass=3D"std std-ref">Function Type</span></a> section to note that argument =
labels are not allowed when writing a function type.</li>
<li>Updated the discussion of Swift language version numbers in the <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Referenc=
eManual/Statements.html#ID539"><span class=3D"std std-ref">Conditional Comp=
ilation Block</span></a> section, now that an optional patch number is allo=
wed.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Types.html#ID449"><span cl=
ass=3D"std std-ref">Function Type</span></a> section, now that Swift distin=
guishes between functions that take multiple parameters and functions that =
take a single parameter of a tuple type.</li>
<li>Removed the Dynamic Type Expression section from the <a class=3D"refere=
nce internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Exp=
ressions.html"><span class=3D"doc">Expressions</span></a> chapter, now that=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">type(of:)=
</span></code> is a Swift standard library function.</li>
</ul>
<p><strong>2016-10-27</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 3.0.1.</li>
<li>Updated the discussion of weak and unowned references in the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/AutomaticReferenceCounting.html"><span class=3D"doc">Automatic Referen=
ce Counting</span></a> chapter.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">unowned</span></code>, <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">unowned(safe)</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">unowned(unsafe)</=
span></code> declaration modifiers in the <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
ID381"><span class=3D"std std-ref">Declaration Modifiers</span></a> section=
.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342"><span class=3D=
"std std-ref">Type Casting for Any and AnyObject</span></a> section about u=
sing an optional value when a value of type <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Any</span></code> is expected.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html"><span class=3D"doc">Expres=
sions</span></a> chapter to separate the discussion of parenthesized expres=
sions and tuple expressions.</li>
</ul>
<p><strong>2016-09-13</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 3.0.</li>
<li>Updated the discussion of functions in the <a class=3D"reference intern=
al" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.html"=
><span class=3D"doc">Functions</span></a> chapter and the <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/De=
clarations.html#ID362"><span class=3D"std std-ref">Function Declaration</sp=
an></a> section to note that all parameters get an argument label by defaul=
t.</li>
<li>Updated the discussion of operators in the <a class=3D"reference intern=
al" href=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperato=
rs.html"><span class=3D"doc">Advanced Operators</span></a> chapter, now tha=
t you implement them as type methods instead of as global functions.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">open</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">fileprivate</span></code> access-level m=
odifiers to the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/AccessControl.html"><span class=3D"doc">Access=
 Control</span></a> chapter.</li>
<li>Updated the discussion of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">inout</span></code> in the <a class=3D"reference intern=
al" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.=
html#ID362"><span class=3D"std std-ref">Function Declaration</span></a> sec=
tion to note that it appears in front of a parameter=E2=80=99s type instead=
 of in front of a parameter=E2=80=99s name.</li>
<li>Updated the discussion of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">@noescape</span></code> and <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">@autoclosure</span></code> attrib=
utes in the <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Closures.html#ID546"><span class=3D"std std-ref">E=
scaping Closures</span></a> and <a class=3D"reference internal" href=3D"htt=
ps://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID543"><span cla=
ss=3D"std std-ref">Autoclosures</span></a> sections and the <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
Attributes.html"><span class=3D"doc">Attributes</span></a> chapter now that=
 they are type attributes, rather than declaration attributes.</li>
<li>Added information about operator precedence groups to the <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
AdvancedOperators.html#ID47"><span class=3D"std std-ref">Precedence for Cus=
tom Infix Operators</span></a> section of the <a class=3D"reference interna=
l" href=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperator=
s.html"><span class=3D"doc">Advanced Operators</span></a> chapter, and to t=
he <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/Declarations.html#ID550"><span class=3D"std std-ref">Prec=
edence Group Declaration</span></a> section of the <a class=3D"reference in=
ternal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarati=
ons.html"><span class=3D"doc">Declarations</span></a> chapter.</li>
<li>Updated discussion throughout to use macOS instead of OS X, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Error</span></code> i=
nstead of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
ErrorProtocol</span></code>, and protocol names such as <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">ExpressibleByStringLiteral</s=
pan></code> instead of <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">StringLiteralConvertible</span></code>.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID192"><span c=
lass=3D"std std-ref">Generic Where Clauses</span></a> section of the <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/Generics.html"><span class=3D"doc">Generics</span></a> chapter and i=
n the <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/GenericParametersAndArguments.html"><span class=3D"doc=
">Generic Parameters and Arguments</span></a> chapter, now that generic <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">where</span><=
/code> clauses are written at the end of a declaration.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546"><span c=
lass=3D"std std-ref">Escaping Closures</span></a> section, now that closure=
s are nonescaping by default.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID333"><span =
class=3D"std std-ref">Optional Binding</span></a> section of the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/TheBasics.html"><span class=3D"doc">The Basics</span></a> chapter and =
the <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID432"><span class=3D"std std-ref">While=
 Statement</span></a> section of the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html"><spa=
n class=3D"doc">Statements</span></a> chapter, now that <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">if</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">while</span></code>, =
and <code class=3D"docutils literal notranslate"><span class=3D"pre">guard<=
/span></code> statements use a comma-separated list of conditions without <=
code class=3D"docutils literal notranslate"><span class=3D"pre">where</span=
></code> clauses.</li>
<li>Added information about switch cases that have multiple patterns to the=
 <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/ControlFlow.html#ID129"><span class=3D"std std-ref">Switch</s=
pan></a> section of the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">=
Control Flow</span></a> chapter and the <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID43=
6"><span class=3D"std std-ref">Switch Statement</span></a> section of the <=
a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Statements.html"><span class=3D"doc">Statements</span></a> ch=
apter.</li>
<li>Updated the discussion of function types in the <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.ht=
ml#ID449"><span class=3D"std std-ref">Function Type</span></a> section now =
that function argument labels are no longer part of a function=E2=80=99s ty=
pe.</li>
<li>Updated the discussion of protocol composition types in the <a class=3D=
"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuid=
e/Protocols.html#ID282"><span class=3D"std std-ref">Protocol Composition</s=
pan></a> section of the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/Protocols.html"><span class=3D"doc">Pr=
otocols</span></a> chapter and in the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID454"><sp=
an class=3D"std std-ref">Protocol Composition Type</span></a> section of th=
e <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Types.html"><span class=3D"doc">Types</span></a> chapter t=
o use the new <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Protocol1</span> <span class=3D"pre">&amp;</span> <span class=3D"pre">P=
rotocol2</span></code> syntax.</li>
<li>Updated the discussion in the Dynamic Type Expression section to use th=
e new <code class=3D"docutils literal notranslate"><span class=3D"pre">type=
(of:)</span></code> syntax for dynamic type expressions.</li>
<li>Updated the discussion of line control statements to use the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">#sourceLocation(file=
:line:)</span></code> syntax in the <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID540"><=
span class=3D"std std-ref">Line Control Statement</span></a> section.</li>
<li>Updated the discussion in <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID551"><span=
 class=3D"std std-ref">Functions that Never Return</span></a> to use the ne=
w <code class=3D"docutils literal notranslate"><span class=3D"pre">Never</s=
pan></code> type.</li>
<li>Added information about playground literals to the <a class=3D"referenc=
e internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expre=
ssions.html#ID390"><span class=3D"std std-ref">Literal Expression</span></a=
> section.</li>
<li>Updated the discussion in the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545"><=
span class=3D"std std-ref">In-Out Parameters</span></a> section to note tha=
t only nonescaping closures can capture in-out parameters.</li>
<li>Updated the discussion about default parameters in the <a class=3D"refe=
rence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Fun=
ctions.html#ID169"><span class=3D"std std-ref">Default Parameter Values</sp=
an></a> section, now that they can=E2=80=99t be reordered in function calls=
.</li>
<li>Updated attribute arguments to use a colon in the <a class=3D"reference=
 internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attrib=
utes.html"><span class=3D"doc">Attributes</span></a> chapter.</li>
<li>Added information about throwing an error inside the catch block of a r=
ethrowing function to the <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#ID531"><span cla=
ss=3D"std std-ref">Rethrowing Functions and Methods</span></a> section.</li=
>
<li>Added information about accessing the selector of an Objective-C proper=
ty=E2=80=99s getter or setter to the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID54=
7"><span class=3D"std std-ref">Selector Expression</span></a> section.</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID361"><span =
class=3D"std std-ref">Type Alias Declaration</span></a> section about gener=
ic type aliases and using type aliases inside of protocols.</li>
<li>Updated the discussion of function types in the <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.ht=
ml#ID449"><span class=3D"std std-ref">Function Type</span></a> section to n=
ote that parentheses around the parameter types are required.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Attributes.html"><span class=3D"doc">Attribu=
tes</span></a> chapter to note that the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">@IBAction</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">@IBOutlet</span></code>, and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">@NSManaged<=
/span></code> attributes imply the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">@objc</span></code> attribute.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">@GKInspectable</span></code> attribute to the <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Referenc=
eManual/Attributes.html#ID348"><span class=3D"std std-ref">Declaration Attr=
ibutes</span></a> section.</li>
<li>Updated the discussion of optional protocol requirements in the <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Language=
Guide/Protocols.html#ID284"><span class=3D"std std-ref">Optional Protocol R=
equirements</span></a> section to clarify that they are used only in code t=
hat interoperates with Objective-C.</li>
<li>Removed the discussion of explicitly using <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">let</span></code> in function paramete=
rs from the <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID362"><span class=3D"std std-=
ref">Function Declaration</span></a> section.</li>
<li>Removed the discussion of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Boolean</span></code> protocol from the <a class=3D=
"reference internal" href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Statements.html"><span class=3D"doc">Statements</span></a> chapter, now=
 that the protocol has been removed from the Swift standard library.</li>
<li>Corrected the discussion of the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">@NSApplicationMain</span></code> attribute in the=
 <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Attributes.html#ID348"><span class=3D"std std-ref">Declarat=
ion Attributes</span></a> section.</li>
</ul>
<p><strong>2016-03-21</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 2.2.</li>
<li>Added information about how to conditionally compile code depending on =
the version of Swift being used to the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID539=
"><span class=3D"std std-ref">Conditional Compilation Block</span></a> sect=
ion.</li>
<li>Added information about how to distinguish between methods or initializ=
ers whose names differ only by the names of their arguments to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Expressions.html#ID400"><span class=3D"std std-ref">Explicit Member =
Expression</span></a> section.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">#selector</span></code> syntax for Objective-C select=
ors to the <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#ID547"><span class=3D"std std-re=
f">Selector Expression</span></a> section.</li>
<li>Updated the discussion of associated types to use the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">associatedtype</span></code=
> keyword in the <a class=3D"reference internal" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Generics.html#ID189"><span class=3D"std std-r=
ef">Associated Types</span></a> and <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID374"=
><span class=3D"std std-ref">Protocol Associated Type Declaration</span></a=
> sections.</li>
<li>Updated information about initializers that return <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">nil</span></code> before the i=
nstance is fully initialized in the <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224"=
><span class=3D"std std-ref">Failable Initializers</span></a> section.</li>
<li>Added information about comparing tuples to the <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/BasicOpera=
tors.html#ID70"><span class=3D"std std-ref">Comparison Operators</span></a>=
 section.</li>
<li>Added information about using keywords as external parameter names to t=
he <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/LexicalStructure.html#ID413"><span class=3D"std std-ref">=
Keywords and Punctuation</span></a> section.</li>
<li>Updated the discussion of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">@objc</span></code> attribute in the <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Attributes.html#ID348"><span class=3D"std std-ref">Declaration Attributes<=
/span></a> section to note that enumerations and enumeration cases can use =
this attribute.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/LexicalStructure.html#ID418"><span class=3D"=
std std-ref">Operators</span></a> section with discussion of custom operato=
rs that contain a dot.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Declarations.html#ID531"><span class=
=3D"std std-ref">Rethrowing Functions and Methods</span></a> section that r=
ethrowing functions can=E2=80=99t directly throw errors.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/Properties.html#ID262"><span class=3D"=
std std-ref">Property Observers</span></a> section about property observers=
 being called when you pass a property as an in-out parameter.</li>
<li>Added a section about error handling to the <a class=3D"reference inter=
nal" href=3D"https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html">=
<span class=3D"doc">A Swift Tour</span></a> chapter.</li>
<li>Updated figures in the <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID5=
3"><span class=3D"std std-ref">Weak References</span></a> section to show t=
he deallocation process more clearly.</li>
<li>Removed discussion of C-style <code class=3D"docutils literal notransla=
te"><span class=3D"pre">for</span></code> loops, the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">++</span></code> prefix and post=
fix operators, and the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">--</span></code> prefix and postfix operators.</li>
<li>Removed discussion of variable function arguments and the special synta=
x for curried functions.</li>
</ul>
<p><strong>2015-10-20</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 2.1.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html#ID292"><span class=
=3D"std std-ref">String Interpolation</span></a> and <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lexical=
Structure.html#ID417"><span class=3D"std std-ref">String Literals</span></a=
> sections now that string interpolations can contain string literals.</li>
<li>Added the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Closures.html#ID546"><span class=3D"std std-ref"=
>Escaping Closures</span></a> section with information about the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">@noescape</span></co=
de> attribute.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Attributes.html#ID348"><span class=3D"std st=
d-ref">Declaration Attributes</span></a> and <a class=3D"reference internal=
" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html=
#ID539"><span class=3D"std std-ref">Conditional Compilation Block</span></a=
> sections with information about tvOS.</li>
<li>Added information about the behavior of in-out parameters to the <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Referen=
ceManual/Declarations.html#ID545"><span class=3D"std std-ref">In-Out Parame=
ters</span></a> section.</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID544"><span c=
lass=3D"std std-ref">Capture Lists</span></a> section about how values spec=
ified in closure capture lists are captured.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/OptionalChaining.html#ID248"><span class=3D"st=
d std-ref">Accessing Properties Through Optional Chaining</span></a> sectio=
n to clarify how assignment through optional chaining behaves.</li>
<li>Improved the discussion of autoclosures in the <a class=3D"reference in=
ternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.ht=
ml#ID543"><span class=3D"std std-ref">Autoclosures</span></a> section.</li>
<li>Added an example that uses the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">??</span></code> operator to the <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/GuidedTour/GuidedT=
our.html"><span class=3D"doc">A Swift Tour</span></a> chapter.</li>
</ul>
<p><strong>2015-09-16</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 2.0.</li>
<li>Added information about error handling to the <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/ErrorHandlin=
g.html"><span class=3D"doc">Error Handling</span></a> chapter, the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Statements.html#ID533"><span class=3D"std std-ref">Do Statement</spa=
n></a> section, the <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Statements.html#ID518"><span class=3D"st=
d std-ref">Throw Statement</span></a> section, the <a class=3D"reference in=
ternal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statement=
s.html#ID532"><span class=3D"std std-ref">Defer Statement</span></a> sectio=
n, and the <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Expressions.html#ID516"><span class=3D"std std-re=
f">Try Operator</span></a> section.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/ErrorHandling.html#ID509"><span class=3D"std s=
td-ref">Representing and Throwing Errors</span></a> section, now that all t=
ypes can conform to the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">ErrorType</span></code> protocol.</li>
<li>Added information about the new <code class=3D"docutils literal notrans=
late"><span class=3D"pre">try?</span></code> keyword to the <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Er=
rorHandling.html#ID542"><span class=3D"std std-ref">Converting Errors to Op=
tional Values</span></a> section.</li>
<li>Added information about recursive enumerations to the <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Enum=
erations.html#ID536"><span class=3D"std std-ref">Recursive Enumerations</sp=
an></a> section of the <a class=3D"reference internal" href=3D"https://docs=
.swift.org/swift-book/LanguageGuide/Enumerations.html"><span class=3D"doc">=
Enumeration</span></a> chapter and the <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID3=
65"><span class=3D"std std-ref">Enumerations with Cases of Any Type</span><=
/a> section of the <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html"><span class=3D"doc">De=
clarations</span></a> chapter.</li>
<li>Added information about API availability checking to the <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/C=
ontrolFlow.html#ID523"><span class=3D"std std-ref">Checking API Availabilit=
y</span></a> section of the <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"d=
oc">Control Flow</span></a> chapter and the <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
ID522"><span class=3D"std std-ref">Availability Condition</span></a> sectio=
n of the <a class=3D"reference internal" href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Statements.html"><span class=3D"doc">Statements</sp=
an></a> chapter.</li>
<li>Added information about the new <code class=3D"docutils literal notrans=
late"><span class=3D"pre">guard</span></code> statement to the <a class=3D"=
reference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide=
/ControlFlow.html#ID525"><span class=3D"std std-ref">Early Exit</span></a> =
section of the <a class=3D"reference internal" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Control F=
low</span></a> chapter and the <a class=3D"reference internal" href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID524"><span =
class=3D"std std-ref">Guard Statement</span></a> section of the <a class=3D=
"reference internal" href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Statements.html"><span class=3D"doc">Statements</span></a> chapter.</li=
>
<li>Added information about protocol extensions to the <a class=3D"referenc=
e internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Protoco=
ls.html#ID521"><span class=3D"std std-ref">Protocol Extensions</span></a> s=
ection of the <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Protocols.html"><span class=3D"doc">Protocols</s=
pan></a> chapter.</li>
<li>Added information about access control for unit testing to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/AccessControl.html#ID519"><span class=3D"std std-ref">Access Levels fo=
r Unit Test Targets</span></a> section of the <a class=3D"reference interna=
l" href=3D"https://docs.swift.org/swift-book/LanguageGuide/AccessControl.ht=
ml"><span class=3D"doc">Access Control</span></a> chapter.</li>
<li>Added information about the new optional pattern to the <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
Patterns.html#ID520"><span class=3D"std std-ref">Optional Pattern</span></a=
> section of the <a class=3D"reference internal" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Patterns.html"><span class=3D"doc">Patterns=
</span></a> chapter.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/ControlFlow.html#ID126"><span class=3D"std std=
-ref">Repeat-While</span></a> section with information about the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">repeat</span></code>=
-<code class=3D"docutils literal notranslate"><span class=3D"pre">while</sp=
an></code> loop.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html"><span class=3D"doc"=
>Strings and Characters</span></a> chapter, now that <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">String</span></code> no longer c=
onforms to the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">CollectionType</span></code> protocol from the Swift standard library.=
</li>
<li>Added information about the new Swift standard library <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">print(_:separator:terminat=
or)</span></code> function to the <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID314"><span =
class=3D"std std-ref">Printing Constants and Variables</span></a> section.<=
/li>
<li>Added information about the behavior of enumeration cases with <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">String</span></cod=
e> raw values to the <a class=3D"reference internal" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/Enumerations.html#ID535"><span class=3D"s=
td std-ref">Implicitly Assigned Raw Values</span></a> section of the <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/Enumerations.html"><span class=3D"doc">Enumeration</span></a> chapte=
r and the <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Declarations.html#ID366"><span class=3D"std std-re=
f">Enumerations with Cases of a Raw-Value Type</span></a> section of the <a=
 class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Declarations.html"><span class=3D"doc">Declarations</span></a>=
 chapter.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">@autoclosure</span></code> attribute=E2=80=94includin=
g its <code class=3D"docutils literal notranslate"><span class=3D"pre">@aut=
oclosure(escaping)</span></code> form=E2=80=94to the <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Closures.=
html#ID543"><span class=3D"std std-ref">Autoclosures</span></a> section.</l=
i>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Attributes.html#ID348"><span class=3D"std st=
d-ref">Declaration Attributes</span></a> section with information about the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">@availabl=
e</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">@warn_unused_result</span></code> attributes.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Attributes.html#ID350"><span class=3D"std st=
d-ref">Type Attributes</span></a> section with information about the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">@convention</spa=
n></code> attribute.</li>
<li>Added an example of using multiple optional bindings with a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">where</span></code> c=
lause to the <a class=3D"reference internal" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/TheBasics.html#ID333"><span class=3D"std std-ref"=
>Optional Binding</span></a> section.</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID417"><s=
pan class=3D"std std-ref">String Literals</span></a> section about how conc=
atenating string literals using the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">+</span></code> operator happens at compile time.=
</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Types.html#ID455"><span class=
=3D"std std-ref">Metatype Type</span></a> section about comparing metatype =
values and using them to construct instances with initializer expressions.<=
/li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/TheBasics.html#ID336"><span class=3D"s=
td std-ref">Debugging with Assertions</span></a> section about when user-de=
fined assertions are disabled.</li>
<li>Updated the discussion of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">@NSManaged</span></code> attribute in the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Attributes.html#ID348"><span class=3D"std std-ref">Declaration Attri=
butes</span></a> section, now that the attribute can be applied to certain =
instance methods.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Functions.html#ID171"><span class=3D"std std-r=
ef">Variadic Parameters</span></a> section, now that variadic parameters ca=
n be declared in any position in a function=E2=80=99s parameter list.</li>
<li>Added information to the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID229"><span =
class=3D"std std-ref">Overriding a Failable Initializer</span></a> section =
about how a nonfailable initializer can delegate up to a failable initializ=
er by force-unwrapping the result of the superclass=E2=80=99s initializer.<=
/li>
<li>Added information about using enumeration cases as functions to the <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Declarations.html#ID365"><span class=3D"std std-ref">Enumeratio=
ns with Cases of Any Type</span></a> section.</li>
<li>Added information about explicitly referencing an initializer to the <a=
 class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Expressions.html#ID399"><span class=3D"std std-ref">Initialize=
r Expression</span></a> section.</li>
<li>Added information about build configuration and line control statements=
 to the <a class=3D"reference internal" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Statements.html#ID538"><span class=3D"std std-ref">C=
ompiler Control Statements</span></a> section.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Types.html#ID455"><span class=3D"std=
 std-ref">Metatype Type</span></a> section about constructing class instanc=
es from metatype values.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID53">=
<span class=3D"std std-ref">Weak References</span></a> section about weak r=
eferences being unsuitable for caching.</li>
<li>Updated a note in the <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Properties.html#ID264"><span class=
=3D"std std-ref">Type Properties</span></a> section to mention that stored =
type properties are lazily initialized.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Closures.html#ID103"><span class=3D"std std-re=
f">Capturing Values</span></a> section to clarify how variables and constan=
ts are captured in closures.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Attributes.html#ID348"><span class=3D"std st=
d-ref">Declaration Attributes</span></a> section to describe when you can a=
pply the <code class=3D"docutils literal notranslate"><span class=3D"pre">@=
objc</span></code> attribute to classes.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512"><span class=
=3D"std std-ref">Handling Errors</span></a> section about the performance o=
f executing a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">throw</span></code> statement. Added similar information about the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">do</span></cod=
e> statement in the <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Statements.html#ID533"><span class=3D"st=
d std-ref">Do Statement</span></a> section.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Properties.html#ID264"><span class=3D"std std-=
ref">Type Properties</span></a> section with information about stored and c=
omputed type properties for classes, structures, and enumerations.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Statements.html#ID441"><span class=3D"std st=
d-ref">Break Statement</span></a> section with information about labeled br=
eak statements.</li>
<li>Updated a note in the <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Properties.html#ID262"><span class=
=3D"std std-ref">Property Observers</span></a> section to clarify the behav=
ior of <code class=3D"docutils literal notranslate"><span class=3D"pre">wil=
lSet</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">didSet</span></code> observers.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/AccessControl.html#ID5"><span class=3D=
"std std-ref">Access Levels</span></a> section with information about the s=
cope of <code class=3D"docutils literal notranslate"><span class=3D"pre">pr=
ivate</span></code> access.</li>
<li>Added a note to the <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID53">=
<span class=3D"std std-ref">Weak References</span></a> section about the di=
fferences in weak references between garbage collected systems and ARC.</li=
>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html#ID295"><span class=
=3D"std std-ref">Special Characters in String Literals</span></a> section w=
ith a more precise definition of Unicode scalars.</li>
</ul>
<p><strong>2015-04-08</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 1.2.</li>
<li>Swift now has a native <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Set</span></code> collection type. For more information, s=
ee <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-boo=
k/LanguageGuide/CollectionTypes.html#ID484"><span class=3D"std std-ref">Set=
s</span></a>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">@autoc=
losure</span></code> is now an attribute of the parameter declaration, not =
its type. There is also a new <code class=3D"docutils literal notranslate">=
<span class=3D"pre">@noescape</span></code> parameter declaration attribute=
. For more information, see <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID348"><span cla=
ss=3D"std std-ref">Declaration Attributes</span></a>.</li>
<li>Type methods and properties now use the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">static</span></code> keyword as a declara=
tion modifier. For more information see <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID=
483"><span class=3D"std std-ref">Type Variable Properties</span></a>.</li>
<li>Swift now includes the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">as?</span></code> and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">as!</span></code> failable downcast operators.=
 For more information, see <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID283"><span class=
=3D"std std-ref">Checking for Protocol Conformance</span></a>.</li>
<li>Added a new guide section about <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#=
ID534"><span class=3D"std std-ref">String Indices</span></a>.</li>
<li>Removed the overflow division (<code class=3D"docutils literal notransl=
ate"><span class=3D"pre">&amp;/</span></code>) and overflow remainder (<cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">&amp;%</span><=
/code>) operators from <a class=3D"reference internal" href=3D"https://docs=
.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"><span clas=
s=3D"std std-ref">Overflow Operators</span></a>.</li>
<li>Updated the rules for constant and constant property declaration and in=
itialization. For more information, see <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID=
355"><span class=3D"std std-ref">Constant Declaration</span></a>.</li>
<li>Updated the definition of Unicode scalars in string literals. See <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Langua=
geGuide/StringsAndCharacters.html#ID295"><span class=3D"std std-ref">Specia=
l Characters in String Literals</span></a>.</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/BasicOperators.html#ID73"><span class=3D"std std-r=
ef">Range Operators</span></a> to note that a half-open range with the same=
 start and end index will be empty.</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/Closures.html#ID104"><span class=3D"std std-ref">C=
losures Are Reference Types</span></a> to clarify the capturing rules for v=
ariables.</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/AdvancedOperators.html#ID38"><span class=3D"std st=
d-ref">Value Overflow</span></a> to clarify the overflow behavior of signed=
 and unsigned integers</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID369"><span class=3D"std std-=
ref">Protocol Declaration</span></a> to clarify protocol declaration scope =
and members.</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID58"><span class=
=3D"std std-ref">Defining a Capture List</span></a> to clarify the syntax f=
or weak and unowned references in closure capture lists.</li>
<li>Updated <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/LexicalStructure.html#ID418"><span class=3D"std =
std-ref">Operators</span></a> to explicitly mention examples of supported c=
haracters for custom operators, such as those in the Mathematical Operators=
, Miscellaneous Symbols, and Dingbats Unicode blocks.</li>
<li>Constants can now be declared without being initialized in local functi=
on scope. They must have a set value before first use. For more information=
, see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Declarations.html#ID355"><span class=3D"std std-ref">C=
onstant Declaration</span></a>.</li>
<li>In an initializer, constant properties can now only assign a value once=
. For more information, see <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID212"><span c=
lass=3D"std std-ref">Assigning Constant Properties During Initialization</s=
pan></a>.</li>
<li>Multiple optional bindings can now appear in a single <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">if</span></code> statement =
as a comma-separated list of assignment expressions. For more information, =
see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID333"><span class=3D"std std-ref">Optional=
 Binding</span></a>.</li>
<li>An <a class=3D"reference internal" href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Expressions.html#ID405"><span class=3D"std std-ref">O=
ptional-Chaining Expression</span></a> must appear within a postfix express=
ion.</li>
<li>Protocol casts are no longer limited to <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">@objc</span></code> protocols.</li>
<li>Type casts that can fail at runtime now use the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">as?</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">as!</span></code> ope=
rator, and type casts that are guaranteed not to fail use the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">as</span></code> oper=
ator. For more information, see <a class=3D"reference internal" href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID388"><spa=
n class=3D"std std-ref">Type-Casting Operators</span></a>.</li>
</ul>
<p><strong>2014-10-16</strong></p>
<ul class=3D"simple">
<li>Updated for Swift 1.1.</li>
<li>Added a full guide to <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224"><span cla=
ss=3D"std std-ref">Failable Initializers</span></a>.</li>
<li>Added a description of <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID274"><span class=
=3D"std std-ref">Failable Initializer Requirements</span></a> for protocols=
.</li>
<li>Constants and variables of type <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Any</span></code> can now contain function instan=
ces. Updated the example in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342"><span clas=
s=3D"std std-ref">Type Casting for Any and AnyObject</span></a> to show how=
 to check for and cast to a function type within a <code class=3D"docutils =
literal notranslate"><span class=3D"pre">switch</span></code> statement.</l=
i>
<li>Enumerations with raw values now have a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">rawValue</span></code> property rather th=
an a <code class=3D"docutils literal notranslate"><span class=3D"pre">toRaw=
()</span></code> method and a failable initializer with a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">rawValue</span></code> para=
meter rather than a <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">fromRaw()</span></code> method. For more information, see <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Language=
Guide/Enumerations.html#ID149"><span class=3D"std std-ref">Raw Values</span=
></a> and <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Declarations.html#ID366"><span class=3D"std std-re=
f">Enumerations with Cases of a Raw-Value Type</span></a>.</li>
<li>Added a new reference section about <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID=
376"><span class=3D"std std-ref">Failable Initializers</span></a>, which ca=
n trigger initialization failure.</li>
<li>Custom operators can now contain the <code class=3D"docutils literal no=
translate"><span class=3D"pre">?</span></code> character. Updated the <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#ID418"><span class=3D"std std-ref">Operator=
s</span></a> reference to describe the revised rules. Removed a duplicate d=
escription of the valid set of operator characters from <a class=3D"referen=
ce internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Advanc=
edOperators.html#ID46"><span class=3D"std std-ref">Custom Operators</span><=
/a>.</li>
</ul>
<p><strong>2014-08-18</strong></p>
<ul class=3D"simple">
<li>New document that describes Swift 1.0, Apple=E2=80=99s new programming =
language for building iOS and OS X apps.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID272"><span clas=
s=3D"std std-ref">Initializer Requirements</span></a> in protocols.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID281"><span clas=
s=3D"std std-ref">Class-Only Protocols</span></a>.</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID335"><span class=3D"std std-ref">Assertio=
ns and Preconditions</span></a> can now use string interpolation. Removed a=
 note to the contrary.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html#ID291"><span class=
=3D"std std-ref">Concatenating Strings and Characters</span></a> section to=
 reflect the fact that <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">String</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">Character</span></code> values can no longer be=
 combined with the addition operator (<code class=3D"docutils literal notra=
nslate"><span class=3D"pre">+</span></code>) or addition assignment operato=
r (<code class=3D"docutils literal notranslate"><span class=3D"pre">+=3D</s=
pan></code>). These operators are now used only with <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">String</span></code> values. Use=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">Strin=
g</span></code> type=E2=80=99s <code class=3D"docutils literal notranslate"=
><span class=3D"pre">append(_:)</span></code> method to append a single <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Character</sp=
an></code> value onto the end of a string.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">availability</span></code> attribute to the <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Attributes.html#ID348"><span class=3D"std std-ref">Declaration Attri=
butes</span></a> section.</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/TheBasics.html#ID330"><span class=3D"std std-ref">Optional=
s</span></a> no longer implicitly evaluate to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">true</span></code> when they have a val=
ue and <code class=3D"docutils literal notranslate"><span class=3D"pre">fal=
se</span></code> when they do not, to avoid confusion when working with opt=
ional <code class=3D"docutils literal notranslate"><span class=3D"pre">Bool=
</span></code> values. Instead, make an explicit check against <code class=
=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code> wit=
h the <code class=3D"docutils literal notranslate"><span class=3D"pre">=3D=
=3D</span></code> or <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">!=3D</span></code> operators to find out if an optional contains=
 a value.</li>
<li>Swift now has a <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/BasicOperators.html#ID72"><span class=3D"s=
td std-ref">Nil-Coalescing Operator</span></a> (<code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">a</span> <span class=3D"pre">??</span=
> <span class=3D"pre">b</span></code>), which unwraps an optional=E2=80=99s=
 value if it exists, or returns a default value if the optional is <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>.=
</li>
<li>Updated and expanded the <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID298">=
<span class=3D"std std-ref">Comparing Strings</span></a> section to reflect=
 and demonstrate that string and character comparison and prefix / suffix c=
omparison are now based on Unicode canonical equivalence of extended graphe=
me clusters.</li>
<li>You can now try to set a property=E2=80=99s value, assign to a subscrip=
t, or call a mutating method or operator through <a class=3D"reference inte=
rnal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/OptionalChain=
ing.html"><span class=3D"doc">Optional Chaining</span></a>. The information=
 about <a class=3D"reference internal" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/OptionalChaining.html#ID248"><span class=3D"std std-ref=
">Accessing Properties Through Optional Chaining</span></a> has been update=
d accordingly, and the examples of checking for method call success in <a c=
lass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Langu=
ageGuide/OptionalChaining.html#ID249"><span class=3D"std std-ref">Calling M=
ethods Through Optional Chaining</span></a> have been expanded to show how =
to check for property setting success.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html#ID251"><sp=
an class=3D"std std-ref">Accessing Subscripts of Optional Type</span></a> t=
hrough optional chaining.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/CollectionTypes.html#ID110"><span class=3D"std=
 std-ref">Accessing and Modifying an Array</span></a> section to note that =
you can no longer append a single item to an array with the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">+=3D</span></code> operat=
or. Instead, use the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">append(_:)</span></code> method, or append a single-item array w=
ith the <code class=3D"docutils literal notranslate"><span class=3D"pre">+=
=3D</span></code> operator.</li>
<li>Added a note that the start value <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">a</span></code> for the <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/BasicOpera=
tors.html#ID73"><span class=3D"std std-ref">Range Operators</span></a> <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">a...b</span></=
code> and <code class=3D"docutils literal notranslate"><span class=3D"pre">=
a..&lt;b</span></code> must not be greater than the end value <code class=
=3D"docutils literal notranslate"><span class=3D"pre">b</span></code>.</li>
<li>Rewrote the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Inheritance.html"><span class=3D"doc">Inherita=
nce</span></a> chapter to remove its introductory coverage of initializer o=
verrides. This chapter now focuses more on the addition of new functionalit=
y in a subclass, and the modification of existing functionality with overri=
des. The chapter=E2=80=99s example of <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID200"=
><span class=3D"std std-ref">Overriding Property Getters and Setters</span>=
</a> has been rewritten to show how to override a <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">description</span></code> property.=
 (The examples of modifying an inherited property=E2=80=99s default value i=
n a subclass initializer have been moved to the <a class=3D"reference inter=
nal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization=
.html"><span class=3D"doc">Initialization</span></a> chapter.)</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Initialization.html#ID221"><span class=3D"std =
std-ref">Initializer Inheritance and Overriding</span></a> section to note =
that overrides of a designated initializer must now be marked with the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">override</span=
></code> modifier.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Initialization.html#ID231"><span class=3D"std =
std-ref">Required Initializers</span></a> section to note that the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">required</span></c=
ode> modifier is now written before every subclass implementation of a requ=
ired initializer, and that the requirements for required initializers can n=
ow be satisfied by automatically inherited initializers.</li>
<li>Infix <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/AdvancedOperators.html#ID42"><span class=3D"std std-=
ref">Operator Methods</span></a> no longer require the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">@infix</span></code> attribute=
.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">@p=
refix</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">@postfix</span></code> attributes for <a class=3D"reference i=
nternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOp=
erators.html#ID43"><span class=3D"std std-ref">Prefix and Postfix Operators=
</span></a> have been replaced by <code class=3D"docutils literal notransla=
te"><span class=3D"pre">prefix</span></code> and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">postfix</span></code> declaration mo=
difiers.</li>
<li>Added a note about the order in which <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.ht=
ml#ID43"><span class=3D"std std-ref">Prefix and Postfix Operators</span></a=
> are applied when both a prefix and a postfix operator are applied to the =
same operand.</li>
<li>Operator functions for <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID44"><span =
class=3D"std std-ref">Compound Assignment Operators</span></a> no longer us=
e the <code class=3D"docutils literal notranslate"><span class=3D"pre">@ass=
ignment</span></code> attribute when defining the function.</li>
<li>The order in which modifiers are specified when defining <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/A=
dvancedOperators.html#ID46"><span class=3D"std std-ref">Custom Operators</s=
pan></a> has changed. You now write <code class=3D"docutils literal notrans=
late"><span class=3D"pre">prefix</span> <span class=3D"pre">operator</span>=
</code> rather than <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">operator</span> <span class=3D"pre">prefix</span></code>, for exa=
mple.</li>
<li>Added information about the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">dynamic</span></code> declaration modifier in <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Referenc=
eManual/Declarations.html#ID381"><span class=3D"std std-ref">Declaration Mo=
difiers</span></a>.</li>
<li>Added information about how type inference works with <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Le=
xicalStructure.html#ID414"><span class=3D"std std-ref">Literals</span></a>.=
</li>
<li>Added more information about curried functions.</li>
<li>Added a new chapter about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/AccessControl.html"><span class=
=3D"doc">Access Control</span></a>.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html"><span class=3D"doc"=
>Strings and Characters</span></a> chapter to reflect the fact that Swift=
=E2=80=99s <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Character</span></code> type now represents a single Unicode extended grap=
heme cluster. Includes a new section on <a class=3D"reference internal" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.h=
tml#ID296"><span class=3D"std std-ref">Extended Grapheme Clusters</span></a=
> and more information about <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID294">=
<span class=3D"std std-ref">Unicode Scalar Values</span></a> and <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/StringsAndCharacters.html#ID298"><span class=3D"std std-ref">Comparing=
 Strings</span></a>.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/StringsAndCharacters.html#ID286"><span class=
=3D"std std-ref">String Literals</span></a> section to note that Unicode sc=
alars inside string literals are now written as <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">\u{n}</span></code>, where <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">n</span></code> is a=
 hexadecimal number between 0 and 10FFFF, the range of Unicode=E2=80=99s co=
despace.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">NS=
String</span></code> <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">length</span></code> property is now mapped onto Swift=E2=80=99s=
 native <code class=3D"docutils literal notranslate"><span class=3D"pre">St=
ring</span></code> type as <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">utf16Count</span></code>, not <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">utf16count</span></code>.</li>
<li>Swift=E2=80=99s native <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">String</span></code> type no longer has an <code class=3D"=
docutils literal notranslate"><span class=3D"pre">uppercaseString</span></c=
ode> or <code class=3D"docutils literal notranslate"><span class=3D"pre">lo=
wercaseString</span></code> property. The corresponding section in <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/StringsAndCharacters.html"><span class=3D"doc">Strings and Characters<=
/span></a> has been removed, and various code examples have been updated.</=
li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID210"><span=
 class=3D"std std-ref">Initializer Parameters Without Argument Labels</span=
></a>.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID231"><span=
 class=3D"std std-ref">Required Initializers</span></a>.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID165"><span clas=
s=3D"std std-ref">Optional Tuple Return Types</span></a>.</li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/TheBasics.html#ID312"><span class=3D"std std-r=
ef">Type Annotations</span></a> section to note that multiple related varia=
bles can be defined on a single line with one type annotation.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">@o=
ptional</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">@lazy</span></code>, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">@final</span></code>, and <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">@required</span></code> attributes =
are now the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">optional</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">lazy</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">final</span></code>, and <code class=3D"docutils =
literal notranslate"><span class=3D"pre">required</span></code> <a class=3D=
"reference internal" href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Declarations.html#ID381"><span class=3D"std std-ref">Declaration Modifi=
ers</span></a>.</li>
<li>Updated the entire book to refer to <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">..&lt;</span></code> as the <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Basi=
cOperators.html#ID75"><span class=3D"std std-ref">Half-Open Range Operator<=
/span></a> (rather than the =E2=80=9Chalf-closed range operator=E2=80=9D).<=
/li>
<li>Updated the <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/CollectionTypes.html#ID116"><span class=3D"std=
 std-ref">Accessing and Modifying a Dictionary</span></a> section to note t=
hat <code class=3D"docutils literal notranslate"><span class=3D"pre">Dictio=
nary</span></code> now has a Boolean <code class=3D"docutils literal notran=
slate"><span class=3D"pre">isEmpty</span></code> property.</li>
<li>Clarified the full list of characters that can be used when defining <a=
 class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lan=
guageGuide/AdvancedOperators.html#ID46"><span class=3D"std std-ref">Custom =
Operators</span></a>.</li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">nil</s=
pan></code> and the Booleans <code class=3D"docutils literal notranslate"><=
span class=3D"pre">true</span></code> and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">false</span></code> are now <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
LexicalStructure.html#ID414"><span class=3D"std std-ref">Literals</span></a=
>.</li>
<li>Swift=E2=80=99s <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Array</span></code> type now has full value semantics. Updated th=
e information about <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/CollectionTypes.html#ID106"><span class=3D=
"std std-ref">Mutability of Collections</span></a> and <a class=3D"referenc=
e internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Collect=
ionTypes.html#ID107"><span class=3D"std std-ref">Arrays</span></a> to refle=
ct the new approach. Also clarified the assignment and copy behavior for st=
rings arrays and dictionaries.</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/CollectionTypes.html#ID108"><span class=3D"std std-ref">Ar=
ray Type Shorthand Syntax</span></a> is now written as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">[SomeType]</span></code> rathe=
r than <code class=3D"docutils literal notranslate"><span class=3D"pre">Som=
eType[]</span></code>.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID114"><spa=
n class=3D"std std-ref">Dictionary Type Shorthand Syntax</span></a>, which =
is written as <code class=3D"docutils literal notranslate"><span class=3D"p=
re">[KeyType:</span> <span class=3D"pre">ValueType]</span></code>.</li>
<li>Added a new section about <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID493"><spa=
n class=3D"std std-ref">Hash Values for Set Types</span></a>.</li>
<li>Examples of <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Closures.html#ID95"><span class=3D"std std-ref=
">Closure Expressions</span></a> now use the global <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">sorted(_:_:)</span></code> functi=
on rather than the global <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">sort(_:_:)</span></code> function, to reflect the new array=
 value semantics.</li>
<li>Updated the information about <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID214"><=
span class=3D"std std-ref">Memberwise Initializers for Structure Types</spa=
n></a> to clarify that the memberwise structure initializer is made availab=
le even if a structure=E2=80=99s stored properties do not have default valu=
es.</li>
<li>Updated to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">..&lt;</span></code> rather than <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">..</span></code> for the <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/BasicOper=
ators.html#ID75"><span class=3D"std std-ref">Half-Open Range Operator</span=
></a>.</li>
<li>Added an example of <a class=3D"reference internal" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/Generics.html#ID185"><span class=3D"st=
d std-ref">Extending a Generic Type</span></a>.</li>
</ul>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/zzSummaryOfTheGrammar.html">Summary of the Grammar</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--frPwTQkLd2ZNEoUtNwKNIeYbLN9E2q3iRoHAO976ni------
