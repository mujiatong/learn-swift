From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html
Subject: =?utf-8?Q?A=20Swift=20Tour=20=E2=80=94=20The=20Swift=20Programming=20Lang?=
 =?utf-8?Q?uage=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:53:46 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----"


------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: text/html
Content-ID: <frame-F1E52A7A9AAABE13E9F05B62DD249870@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>A Swift Tour =E2=80=94 The Swift Programming Language (Swift 5.1=
)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/">Welcome to Swift</a><ul class=3D"current"=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">About Swift</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/GuidedTour/Compatibility.html">Version Compatibilit=
y</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html#">A Swif=
t Tour</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#">A Swift Tour</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID461">Simple Values</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID462">Control Flow</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID463">Functions and Closures</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID464">Objects and Classes</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID465">Enumerations and Structures</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#ID466">Protocols and Extensions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#error-handling">Error Handling</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#generics">Generics</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"a-swift-tour">
<h1>A Swift Tour<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/GuidedTour/GuidedTour.html#a-swift-tour" title=3D"Permalink to this =
headline">=C2=B6</a></h1>
<p>Tradition suggests that the first program in a new language should print=
 the words =E2=80=9CHello, world!=E2=80=9D on the screen. In Swift, this ca=
n be done in a single line:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">"Hello, world!"</span>)
</li><li><span class=3D"c">// Prints "Hello, world!"</span>
</li></ol></div></div></div>
<p>If you have written code in C or Objective-C, this syntax looks familiar=
 to you=E2=80=94in Swift, this line of code is a complete program. You don=
=E2=80=99t need to import a separate library for functionality like input/o=
utput or string handling. Code written at global scope is used as the entry=
 point for the program, so you don=E2=80=99t need a <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">main()</span></code> function. Yo=
u also don=E2=80=99t need to write semicolons at the end of every statement=
.</p>
<p>This tour gives you enough information to start writing code in Swift by=
 showing you how to accomplish a variety of programming tasks. Don=E2=80=99=
t worry if you don=E2=80=99t understand something=E2=80=94everything introd=
uced in this tour is explained in detail in the rest of this book.</p>
<div class=3D"playground_link admonition">
<p class=3D"first admonition-title">Note</p>
<p>For the best experience, open this chapter as a playground in Xcode.
Playgrounds allow you to edit the code listings and see the result immediat=
ely.
</p>
<p class=3D"last"><a class=3D"reference external" href=3D"https://docs.swif=
t.org/swift-book/GuidedTour/GuidedTour.playground.zip">Download Playground<=
/a></p>
</div>
<div class=3D"section" id=3D"ID461">
<h2>Simple Values<a class=3D"headerlink" href=3D"https://docs.swift.org/swi=
ft-book/GuidedTour/GuidedTour.html#ID461" title=3D"Permalink to this headli=
ne">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">let=
</span></code> to make a constant and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">var</span></code> to make a variable. The value=
 of a constant doesn=E2=80=99t need to be known at compile time, but you mu=
st assign it a value exactly once. This means you can use constants to name=
 a value that you determine once but use in many places.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">myVariable</span> =3D <span class=3D"m">42</spa=
n>
</li><li><span class=3D"nv">myVariable</span> =3D <span class=3D"m">50</spa=
n>
</li><li><span class=3D"k">let</span> <span class=3D"nv">myConstant</span> =
=3D <span class=3D"m">42</span>
</li></ol></div></div></div>
<p>A constant or variable must have the same type as the value you want to =
assign to it. However, you don=E2=80=99t always have to write the type expl=
icitly. Providing a value when you create a constant or variable lets the c=
ompiler infer its type. In the example above, the compiler infers that <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">myVariable</sp=
an></code> is an integer because its initial value is an integer.</p>
<p>If the initial value doesn=E2=80=99t provide enough information (or if t=
here is no initial value), specify the type by writing it after the variabl=
e, separated by a colon.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">implicitInteger</span> =3D <span class=3D"m">70=
</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">implicitDouble</sp=
an> =3D <span class=3D"m">70.0</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">explicitDouble</sp=
an>: <span class=3D"nc">Double</span> =3D <span class=3D"m">70</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Create a constant with an explicit type of <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Float</span></code> and =
a value of <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>4</span></code>.</p>
</div>
<p>Values are never implicitly converted to another type. If you need to co=
nvert a value to a different type, explicitly make an instance of the desir=
ed type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">label</span> =3D <span class=3D"s">"The width i=
s "</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">width</span> =3D <=
span class=3D"m">94</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">widthLabel</span> =
=3D <span class=3D"nv">label</span> + <span class=3D"nv">String</span>(<spa=
n class=3D"nv">width</span>)
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Try removing the conversion to <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">String</span></code> from the last l=
ine. What error do you get?</p>
</div>
<p>There=E2=80=99s an even simpler way to include values in strings: Write =
the value in parentheses, and write a backslash (<code class=3D"docutils li=
teral notranslate"><span class=3D"pre">\</span></code>) before the parenthe=
ses. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">apples</span> =3D <span class=3D"m">3</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">oranges</span> =3D=
 <span class=3D"m">5</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">appleSummary</span=
> =3D <span class=3D"s">"I have </span>\<span class=3D"p">(</span><span cla=
ss=3D"nv">apples</span><span class=3D"p">)</span><span class=3D"s"> apples.=
"</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">fruitSummary</span=
> =3D <span class=3D"s">"I have </span>\<span class=3D"p">(</span><span cla=
ss=3D"nv">apples</span> + <span class=3D"nv">oranges</span><span class=3D"p=
">)</span><span class=3D"s"> pieces of fruit."</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Use <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">\()</span></code> to include a floating-point calculation in a =
string and to include someone=E2=80=99s name in a greeting.</p>
</div>
<p>Use three double quotation marks (<code class=3D"docutils literal notran=
slate"><span class=3D"pre">"""</span></code>) for strings that take up mult=
iple lines. Indentation at the start of each quoted line is removed, as lon=
g as it matches the indentation of the closing quotation marks. For example=
:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">quotation</span> =3D <span class=3D"s">"""</spa=
n>
</li><li><span class=3D"s">I said "I have </span>\<span class=3D"p">(</span=
><span class=3D"nv">apples</span><span class=3D"p">)</span><span class=3D"s=
"> apples."</span>
</li><li><span class=3D"s">And then I said "I have </span>\<span class=3D"p=
">(</span><span class=3D"nv">apples</span> + <span class=3D"nv">oranges</sp=
an><span class=3D"p">)</span><span class=3D"s"> pieces of fruit."</span>
</li><li><span class=3D"s">"""</span>
</li></ol></div></div></div>
<p>Create arrays and dictionaries using brackets (<code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">[]</span></code>), and access their=
 elements by writing the index or key in brackets. A comma is allowed after=
 the last element.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">shoppingList</span> =3D [<span class=3D"s">"cat=
fish"</span>, <span class=3D"s">"water"</span>, <span class=3D"s">"tulips"<=
/span>]
</li><li><span class=3D"nv">shoppingList</span>[<span class=3D"m">1</span>]=
 =3D <span class=3D"s">"bottle of water"</span>
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">occupations</span>=
 =3D [
</li><li>    <span class=3D"s">"Malcolm"</span>: <span class=3D"s">"Captain=
"</span>,
</li><li>    <span class=3D"s">"Kaylee"</span>: <span class=3D"s">"Mechanic=
"</span>,
</li><li>]
</li><li><span class=3D"nv">occupations</span>[<span class=3D"s">"Jayne"</s=
pan>] =3D <span class=3D"s">"Public Relations"</span>
</li></ol></div></div></div>
<p>Arrays automatically grow as you add elements.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">s=
hoppingList</span>.<span class=3D"nv">append</span>(<span class=3D"s">"blue=
 paint"</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">shoppingList</s=
pan>)
</li></ol></div></div></div>
<p>To create an empty array or dictionary, use the initializer syntax.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">emptyArray</span> =3D [<span class=3D"nv">Strin=
g</span>]()
</li><li><span class=3D"k">let</span> <span class=3D"nv">emptyDictionary</s=
pan> =3D [<span class=3D"nv">String</span>: <span class=3D"nv">Float</span>=
]()
</li></ol></div></div></div>
<p>If type information can be inferred, you can write an empty array as <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">[]</span></co=
de> and an empty dictionary as <code class=3D"docutils literal notranslate"=
><span class=3D"pre">[:]</span></code>=E2=80=94for example, when you set a =
new value for a variable or pass an argument to a function.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">s=
hoppingList</span> =3D []
</li><li><span class=3D"nv">occupations</span> =3D [:]
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID462">
<h2>Control Flow<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/GuidedTour/GuidedTour.html#ID462" title=3D"Permalink to this headlin=
e">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">if<=
/span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">switch</span></code> to make conditionals, and use <code class=3D"=
docutils literal notranslate"><span class=3D"pre">for</span></code>-<code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">in</span></code>,=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">while</sp=
an></code>, and <code class=3D"docutils literal notranslate"><span class=3D=
"pre">repeat</span></code>-<code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">while</span></code> to make loops. Parentheses around the =
condition or loop variable are optional. Braces around the body are require=
d.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">individualScores</span> =3D [<span class=3D"m">=
75</span>, <span class=3D"m">43</span>, <span class=3D"m">103</span>, <span=
 class=3D"m">87</span>, <span class=3D"m">12</span>]
</li><li><span class=3D"k">var</span> <span class=3D"nv">teamScore</span> =
=3D <span class=3D"m">0</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">score</span> <span=
 class=3D"k">in</span> <span class=3D"nv">individualScores</span> {
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">score</span> &g=
t; <span class=3D"m">50</span> {
</li><li>        <span class=3D"nv">teamScore</span> +=3D <span class=3D"m"=
>3</span>
</li><li>    } <span class=3D"k">else</span> {
</li><li>        <span class=3D"nv">teamScore</span> +=3D <span class=3D"m"=
>1</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">teamScore</span=
>)
</li><li><span class=3D"c">// Prints "11"</span>
</li></ol></div></div></div>
<p>In an <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
f</span></code> statement, the conditional must be a Boolean expression=E2=
=80=94this means that code such as <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">if</span> <span class=3D"pre">score</span> <span c=
lass=3D"pre">{</span> <span class=3D"pre">...</span> <span class=3D"pre">}<=
/span></code> is an error, not an implicit comparison to zero.</p>
<p>You can use <code class=3D"docutils literal notranslate"><span class=3D"=
pre">if</span></code> and <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">let</span></code> together to work with values that might b=
e missing. These values are represented as optionals. An optional value eit=
her contains a value or contains <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">nil</span></code> to indicate that a value is missin=
g. Write a question mark (<code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">?</span></code>) after the type of a value to mark the valu=
e as optional.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">optionalString</span>: <span class=3D"nc">Strin=
g</span>? =3D <span class=3D"s">"Hello"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">optionalString<=
/span> =3D=3D <span class=3D"k">nil</span>)
</li><li><span class=3D"c">// Prints "false"</span>
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">optionalName</span=
>: <span class=3D"nc">String</span>? =3D <span class=3D"s">"John Appleseed"=
</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">greeting</span> =
=3D <span class=3D"s">"Hello!"</span>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">name</span> =3D <span class=3D"nv">optionalName</span> {
</li><li>    <span class=3D"nv">greeting</span> =3D <span class=3D"s">"Hell=
o, </span>\<span class=3D"p">(</span><span class=3D"nv">name</span><span cl=
ass=3D"p">)</span><span class=3D"s">"</span>
</li><li>}
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Change <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">optionalName</span></code> to <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">nil</span></code>. What greeting do you =
get? Add an <code class=3D"docutils literal notranslate"><span class=3D"pre=
">else</span></code> clause that sets a different greeting if <code class=
=3D"docutils literal notranslate"><span class=3D"pre">optionalName</span></=
code> is <code class=3D"docutils literal notranslate"><span class=3D"pre">n=
il</span></code>.</p>
</div>
<p>If the optional value is <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">nil</span></code>, the conditional is <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">false</span></code> and the c=
ode in braces is skipped. Otherwise, the optional value is unwrapped and as=
signed to the constant after <code class=3D"docutils literal notranslate"><=
span class=3D"pre">let</span></code>, which makes the unwrapped value avail=
able inside the block of code.</p>
<p>Another way to handle optional values is to provide a default value usin=
g the <code class=3D"docutils literal notranslate"><span class=3D"pre">??</=
span></code> operator. If the optional value is missing, the default value =
is used instead.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">nickName</span>: <span class=3D"nc">String</spa=
n>? =3D <span class=3D"k">nil</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">fullName</span>: <=
span class=3D"nc">String</span> =3D <span class=3D"s">"John Appleseed"</spa=
n>
</li><li><span class=3D"k">let</span> <span class=3D"nv">informalGreeting</=
span> =3D <span class=3D"s">"Hi </span>\<span class=3D"p">(</span><span cla=
ss=3D"nv">nickName</span> ?? <span class=3D"nv">fullName</span><span class=
=3D"p">)</span><span class=3D"s">"</span>
</li></ol></div></div></div>
<p>Switches support any kind of data and a wide variety of comparison opera=
tions=E2=80=94they aren=E2=80=99t limited to integers and tests for equalit=
y.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">vegetable</span> =3D <span class=3D"s">"red pep=
per"</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">vegetable</span=
> {
</li><li><span class=3D"k">case</span> <span class=3D"s">"celery"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Add some ra=
isins and make ants on a log."</span>)
</li><li><span class=3D"k">case</span> <span class=3D"s">"cucumber"</span>,=
 <span class=3D"s">"watercress"</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"That would =
make a good tea sandwich."</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> <span c=
lass=3D"nv">x</span> <span class=3D"k">where</span> <span class=3D"nv">x</s=
pan>.<span class=3D"nv">hasSuffix</span>(<span class=3D"s">"pepper"</span>)=
:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Is it a spi=
cy </span>\<span class=3D"p">(</span><span class=3D"nv">x</span><span class=
=3D"p">)</span><span class=3D"s">?"</span>)
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Everything =
tastes good in soup."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Is it a spicy red pepper?"</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Try removing the default case. What error do you get?</p>
</div>
<p>Notice how <code class=3D"docutils literal notranslate"><span class=3D"p=
re">let</span></code> can be used in a pattern to assign the value that mat=
ched the pattern to a constant.</p>
<p>After executing the code inside the switch case that matched, the progra=
m exits from the switch statement. Execution doesn=E2=80=99t continue to th=
e next case, so there is no need to explicitly break out of the switch at t=
he end of each case=E2=80=99s code.</p>
<p>You use <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>for</span></code>-<code class=3D"docutils literal notranslate"><span class=
=3D"pre">in</span></code> to iterate over items in a dictionary by providin=
g a pair of names to use for each key-value pair. Dictionaries are an unord=
ered collection, so their keys and values are iterated over in an arbitrary=
 order.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">interestingNumbers</span> =3D [
</li><li>    <span class=3D"s">"Prime"</span>: [<span class=3D"m">2</span>,=
 <span class=3D"m">3</span>, <span class=3D"m">5</span>, <span class=3D"m">=
7</span>, <span class=3D"m">11</span>, <span class=3D"m">13</span>],
</li><li>    <span class=3D"s">"Fibonacci"</span>: [<span class=3D"m">1</sp=
an>, <span class=3D"m">1</span>, <span class=3D"m">2</span>, <span class=3D=
"m">3</span>, <span class=3D"m">5</span>, <span class=3D"m">8</span>],
</li><li>    <span class=3D"s">"Square"</span>: [<span class=3D"m">1</span>=
, <span class=3D"m">4</span>, <span class=3D"m">9</span>, <span class=3D"m"=
>16</span>, <span class=3D"m">25</span>],
</li><li>]
</li><li><span class=3D"k">var</span> <span class=3D"nv">largest</span> =3D=
 <span class=3D"m">0</span>
</li><li><span class=3D"k">for</span> (<span class=3D"nv">kind</span>, <spa=
n class=3D"nv">numbers</span>) <span class=3D"k">in</span> <span class=3D"n=
v">interestingNumbers</span> {
</li><li>    <span class=3D"k">for</span> <span class=3D"nv">number</span> =
<span class=3D"k">in</span> <span class=3D"nv">numbers</span> {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">number</spa=
n> &gt; <span class=3D"nv">largest</span> {
</li><li>            <span class=3D"nv">largest</span> =3D <span class=3D"n=
v">number</span>
</li><li>        }
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">largest</span>)
</li><li><span class=3D"c">// Prints "25"</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add another variable to keep track of which kind of numbe=
r was the largest, as well as what that largest number was.</p>
</div>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">whi=
le</span></code> to repeat a block of code until a condition changes. The c=
ondition of a loop can be at the end instead, ensuring that the loop is run=
 at least once.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">n</span> =3D <span class=3D"m">2</span>
</li><li><span class=3D"k">while</span> <span class=3D"nv">n</span> &lt; <s=
pan class=3D"m">100</span> {
</li><li>    <span class=3D"nv">n</span> *=3D <span class=3D"m">2</span>
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">n</span>)
</li><li><span class=3D"c">// Prints "128"</span>
</li><li>
</li><li><span class=3D"k">var</span> <span class=3D"nv">m</span> =3D <span=
 class=3D"m">2</span>
</li><li><span class=3D"k">repeat</span> {
</li><li>    <span class=3D"nv">m</span> *=3D <span class=3D"m">2</span>
</li><li>} <span class=3D"k">while</span> <span class=3D"nv">m</span> &lt; =
<span class=3D"m">100</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">m</span>)
</li><li><span class=3D"c">// Prints "128"</span>
</li></ol></div></div></div>
<p>You can keep an index in a loop by using <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">..&lt;</span></code> to make a range of i=
ndexes.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">total</span> =3D <span class=3D"m">0</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">i</span> <span cla=
ss=3D"k">in</span> <span class=3D"m">0</span>..&lt;<span class=3D"m">4</spa=
n> {
</li><li>    <span class=3D"nv">total</span> +=3D <span class=3D"nv">i</spa=
n>
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">total</span>)
</li><li><span class=3D"c">// Prints "6"</span>
</li></ol></div></div></div>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">..&=
lt;</span></code> to make a range that omits its upper value, and use <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">...</span></cod=
e> to make a range that includes both values.</p>
</div>
<div class=3D"section" id=3D"ID463">
<h2>Functions and Closures<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/GuidedTour/GuidedTour.html#ID463" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">fun=
c</span></code> to declare a function. Call a function by following its nam=
e with a list of arguments in parentheses. Use <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">-&gt;</span></code> to separate the pa=
rameter names and types from the function=E2=80=99s return type.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">greet</span>(<span class=3D"nv">person</span>:=
 <span class=3D"nc">String</span>, <span class=3D"nv">day</span>: <span cla=
ss=3D"nc">String</span>) -&gt; <span class=3D"nc">String</span> {
</li><li>    <span class=3D"k">return</span> <span class=3D"s">"Hello </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">person</span><span class=3D=
"p">)</span><span class=3D"s">, today is </span>\<span class=3D"p">(</span>=
<span class=3D"nv">day</span><span class=3D"p">)</span><span class=3D"s">."=
</span>
</li><li>}
</li><li><span class=3D"nv">greet</span>(<span class=3D"nv">person</span>: =
<span class=3D"s">"Bob"</span>, <span class=3D"nv">day</span>: <span class=
=3D"s">"Tuesday"</span>)
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Remove the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">day</span></code> parameter. Add a parameter to include =
today=E2=80=99s lunch special in the greeting.</p>
</div>
<p>By default, functions use their parameter names as labels for their argu=
ments. Write a custom argument label before the parameter name, or write <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">_</span></co=
de> to use no argument label.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">greet</span>(<span class=3D"k">_</span> <span =
class=3D"nv">person</span>: <span class=3D"nc">String</span>, <span class=
=3D"nv">on</span> <span class=3D"nv">day</span>: <span class=3D"nc">String<=
/span>) -&gt; <span class=3D"nc">String</span> {
</li><li>    <span class=3D"k">return</span> <span class=3D"s">"Hello </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">person</span><span class=3D=
"p">)</span><span class=3D"s">, today is </span>\<span class=3D"p">(</span>=
<span class=3D"nv">day</span><span class=3D"p">)</span><span class=3D"s">."=
</span>
</li><li>}
</li><li><span class=3D"nv">greet</span>(<span class=3D"s">"John"</span>, <=
span class=3D"nv">on</span>: <span class=3D"s">"Wednesday"</span>)
</li></ol></div></div></div>
<p>Use a tuple to make a compound value=E2=80=94for example, to return mult=
iple values from a function. The elements of a tuple can be referred to eit=
her by name or by number.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">calculateStatistics</span>(<span class=3D"nv">=
scores</span>: [<span class=3D"nc">Int</span>]) -&gt; (<span class=3D"nv">m=
in</span>: <span class=3D"nc">Int</span>, <span class=3D"nv">max</span>: <s=
pan class=3D"nc">Int</span>, <span class=3D"nv">sum</span>: <span class=3D"=
nc">Int</span>) {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">min</span> =3D=
 <span class=3D"nv">scores</span>[<span class=3D"m">0</span>]
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">max</span> =3D=
 <span class=3D"nv">scores</span>[<span class=3D"m">0</span>]
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">sum</span> =3D=
 <span class=3D"m">0</span>
</li><li>
</li><li>    <span class=3D"k">for</span> <span class=3D"nv">score</span> <=
span class=3D"k">in</span> <span class=3D"nv">scores</span> {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">score</span=
> &gt; <span class=3D"nv">max</span> {
</li><li>            <span class=3D"nv">max</span> =3D <span class=3D"nv">s=
core</span>
</li><li>        } <span class=3D"k">else</span> <span class=3D"k">if</span=
> <span class=3D"nv">score</span> &lt; <span class=3D"nv">min</span> {
</li><li>            <span class=3D"nv">min</span> =3D <span class=3D"nv">s=
core</span>
</li><li>        }
</li><li>        <span class=3D"nv">sum</span> +=3D <span class=3D"nv">scor=
e</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">return</span> (<span class=3D"nv">min</span>=
, <span class=3D"nv">max</span>, <span class=3D"nv">sum</span>)
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">statistics</span> =
=3D <span class=3D"nv">calculateStatistics</span>(<span class=3D"nv">scores=
</span>: [<span class=3D"m">5</span>, <span class=3D"m">3</span>, <span cla=
ss=3D"m">100</span>, <span class=3D"m">3</span>, <span class=3D"m">9</span>=
])
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">statistics</spa=
n>.<span class=3D"nv">sum</span>)
</li><li><span class=3D"c">// Prints "120"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">statistics</spa=
n>.<span class=3D"m">2</span>)
</li><li><span class=3D"c">// Prints "120"</span>
</li></ol></div></div></div>
<p>Functions can be nested. Nested functions have access to variables that =
were declared in the outer function. You can use nested functions to organi=
ze the code in a function that is long or complex.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">returnFifteen</span>() -&gt; <span class=3D"nc=
">Int</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">y</span> =3D <=
span class=3D"m">10</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">add</span>() =
{
</li><li>        <span class=3D"nv">y</span> +=3D <span class=3D"m">5</span=
>
</li><li>    }
</li><li>    <span class=3D"nv">add</span>()
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">y</span>
</li><li>}
</li><li><span class=3D"nv">returnFifteen</span>()
</li></ol></div></div></div>
<p>Functions are a first-class type. This means that a function can return =
another function as its value.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">makeIncrementer</span>() -&gt; ((<span class=
=3D"nc">Int</span>) -&gt; <span class=3D"nc">Int</span>) {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">addOne</span>=
(<span class=3D"nv">number</span>: <span class=3D"nc">Int</span>) -&gt; <sp=
an class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"m">1</span>=
 + <span class=3D"nv">number</span>
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">addOne</spa=
n>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">increment</span> =
=3D <span class=3D"nv">makeIncrementer</span>()
</li><li><span class=3D"nv">increment</span>(<span class=3D"m">7</span>)
</li></ol></div></div></div>
<p>A function can take another function as one of its arguments.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">hasAnyMatches</span>(<span class=3D"nv">list</=
span>: [<span class=3D"nc">Int</span>], <span class=3D"nv">condition</span>=
: (<span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Bool</span>) -&g=
t; <span class=3D"nc">Bool</span> {
</li><li>    <span class=3D"k">for</span> <span class=3D"nv">item</span> <s=
pan class=3D"k">in</span> <span class=3D"nv">list</span> {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">condition</=
span>(<span class=3D"nv">item</span>) {
</li><li>            <span class=3D"k">return</span> <span class=3D"k">true=
</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"k">false</span>
</li><li>}
</li><li><span class=3D"k">func</span> <span class=3D"nv">lessThanTen</span=
>(<span class=3D"nv">number</span>: <span class=3D"nc">Int</span>) -&gt; <s=
pan class=3D"nc">Bool</span> {
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">number</spa=
n> &lt; <span class=3D"m">10</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">numbers</span> =3D=
 [<span class=3D"m">20</span>, <span class=3D"m">19</span>, <span class=3D"=
m">7</span>, <span class=3D"m">12</span>]
</li><li><span class=3D"nv">hasAnyMatches</span>(<span class=3D"nv">list</s=
pan>: <span class=3D"nv">numbers</span>, <span class=3D"nv">condition</span=
>: <span class=3D"nv">lessThanTen</span>)
</li></ol></div></div></div>
<p>Functions are actually a special case of closures: blocks of code that c=
an be called later. The code in a closure has access to things like variabl=
es and functions that were available in the scope where the closure was cre=
ated, even if the closure is in a different scope when it is executed=E2=80=
=94you saw an example of this already with nested functions. You can write =
a closure without a name by surrounding code with braces (<code class=3D"do=
cutils literal notranslate"><span class=3D"pre">{}</span></code>). Use <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">in</span></cod=
e> to separate the arguments and return type from the body.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">n=
umbers</span>.<span class=3D"nv">map</span>({ (<span class=3D"nv">number</s=
pan>: <span class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Int</span> <s=
pan class=3D"k">in</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">result</span> =
=3D <span class=3D"m">3</span> * <span class=3D"nv">number</span>
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">result</spa=
n>
</li><li>})
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Rewrite the closure to return zero for all odd numbers.</=
p>
</div>
<p>You have several options for writing closures more concisely. When a clo=
sure=E2=80=99s type is already known, such as the callback for a delegate, =
you can omit the type of its parameters, its return type, or both. Single s=
tatement closures implicitly return the value of their only statement.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">mappedNumbers</span> =3D <span class=3D"nv">num=
bers</span>.<span class=3D"nv">map</span>({ <span class=3D"nv">number</span=
> <span class=3D"k">in</span> <span class=3D"m">3</span> * <span class=3D"n=
v">number</span> })
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">mappedNumbers</=
span>)
</li><li><span class=3D"c">// Prints "[60, 57, 21, 36]"</span>
</li></ol></div></div></div>
<p>You can refer to parameters by number instead of by name=E2=80=94this ap=
proach is especially useful in very short closures. A closure passed as the=
 last argument to a function can appear immediately after the parentheses. =
When a closure is the only argument to a function, you can omit the parenth=
eses entirely.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">sortedNumbers</span> =3D <span class=3D"nv">num=
bers</span>.<span class=3D"nv">sorted</span> { <span class=3D"nv">$0</span>=
 &gt; <span class=3D"nv">$1</span> }
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">sortedNumbers</=
span>)
</li><li><span class=3D"c">// Prints "[20, 19, 12, 7]"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID464">
<h2>Objects and Classes<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/GuidedTour/GuidedTour.html#ID464" title=3D"Permalink to this =
headline">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">cla=
ss</span></code> followed by the class=E2=80=99s name to create a class. A =
property declaration in a class is written the same way as a constant or va=
riable declaration, except that it is in the context of a class. Likewise, =
method and function declarations are written the same way.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Shape</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">numberOfSides<=
/span> =3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">simpleDescrip=
tion</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A shape=
 with </span>\<span class=3D"p">(</span><span class=3D"nv">numberOfSides</s=
pan><span class=3D"p">)</span><span class=3D"s"> sides."</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add a constant property with <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">let</span></code>, and add another met=
hod that takes an argument.</p>
</div>
<p>Create an instance of a class by putting parentheses after the class nam=
e. Use dot syntax to access the properties and methods of the instance.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">shape</span> =3D <span class=3D"nv">Shape</span=
>()
</li><li><span class=3D"nv">shape</span>.<span class=3D"nv">numberOfSides</=
span> =3D <span class=3D"m">7</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">shapeDescription</=
span> =3D <span class=3D"nv">shape</span>.<span class=3D"nv">simpleDescript=
ion</span>()
</li></ol></div></div></div>
<p>This version of the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Shape</span></code> class is missing something important: an i=
nitializer to set up the class when an instance is created. Use <code class=
=3D"docutils literal notranslate"><span class=3D"pre">init</span></code> to=
 create one.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">NamedShape</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">numberOfSides<=
/span>: <span class=3D"nc">Int</span> =3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">name</span>: =
<span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">simpleDescrip=
tion</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A shape=
 with </span>\<span class=3D"p">(</span><span class=3D"nv">numberOfSides</s=
pan><span class=3D"p">)</span><span class=3D"s"> sides."</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Notice how <code class=3D"docutils literal notranslate"><span class=3D"p=
re">self</span></code> is used to distinguish the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">name</span></code> property from th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">name</sp=
an></code> argument to the initializer. The arguments to the initializer ar=
e passed like a function call when you create an instance of the class. Eve=
ry property needs a value assigned=E2=80=94either in its declaration (as wi=
th <code class=3D"docutils literal notranslate"><span class=3D"pre">numberO=
fSides</span></code>) or in the initializer (as with <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">name</span></code>).</p>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">dei=
nit</span></code> to create a deinitializer if you need to perform some cle=
anup before the object is deallocated.</p>
<p>Subclasses include their superclass name after their class name, separat=
ed by a colon. There is no requirement for classes to subclass any standard=
 root class, so you can include or omit a superclass as needed.</p>
<p>Methods on a subclass that override the superclass=E2=80=99s implementat=
ion are marked with <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">override</span></code>=E2=80=94overriding a method by accident, w=
ithout <code class=3D"docutils literal notranslate"><span class=3D"pre">ove=
rride</span></code>, is detected by the compiler as an error. The compiler =
also detects methods with <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">override</span></code> that don=E2=80=99t actually override=
 any method in the superclass.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Square</span>: <span class=3D"nc">NamedShape<=
/span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">sideLength</sp=
an>: <span class=3D"nc">Double</span>
</li><li>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">sideLength</s=
pan>: <span class=3D"nc">Double</span>, <span class=3D"nv">name</span>: <sp=
an class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">sideLengt=
h</span> =3D <span class=3D"nv">sideLength</span>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">name</span>: <span class=3D"nv">name</span>)
</li><li>        <span class=3D"nv">numberOfSides</span> =3D <span class=3D=
"m">4</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">area</span>()=
 -&gt; <span class=3D"nc">Double</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">sideLen=
gth</span> * <span class=3D"nv">sideLength</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">override</span> <span class=3D"k">func</span=
> <span class=3D"nv">simpleDescription</span>() -&gt; <span class=3D"nc">St=
ring</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A squar=
e with sides of length </span>\<span class=3D"p">(</span><span class=3D"nv"=
>sideLength</span><span class=3D"p">)</span><span class=3D"s">."</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">test</span> =3D <s=
pan class=3D"nv">Square</span>(<span class=3D"nv">sideLength</span>: <span =
class=3D"m">5.2</span>, <span class=3D"nv">name</span>: <span class=3D"s">"=
my test square"</span>)
</li><li><span class=3D"nv">test</span>.<span class=3D"nv">area</span>()
</li><li><span class=3D"nv">test</span>.<span class=3D"nv">simpleDescriptio=
n</span>()
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Make another subclass of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">NamedShape</span></code> called <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Circle</span></code>=
 that takes a radius and a name as arguments to its initializer. Implement =
an <code class=3D"docutils literal notranslate"><span class=3D"pre">area()<=
/span></code> and a <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">simpleDescription()</span></code> method on the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">Circle</span></code> class.=
</p>
</div>
<p>In addition to simple properties that are stored, properties can have a =
getter and a setter.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">EquilateralTriangle</span>: <span class=3D"nc=
">NamedShape</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">sideLength</sp=
an>: <span class=3D"nc">Double</span> =3D <span class=3D"m">0.0</span>
</li><li>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">sideLength</s=
pan>: <span class=3D"nc">Double</span>, <span class=3D"nv">name</span>: <sp=
an class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">sideLengt=
h</span> =3D <span class=3D"nv">sideLength</span>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">name</span>: <span class=3D"nv">name</span>)
</li><li>        <span class=3D"nv">numberOfSides</span> =3D <span class=3D=
"m">3</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">perimeter</spa=
n>: <span class=3D"nc">Double</span> {
</li><li>        <span class=3D"k">get</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"m">3.0<=
/span> * <span class=3D"nv">sideLength</span>
</li><li>        }
</li><li>        <span class=3D"k">set</span> {
</li><li>            <span class=3D"nv">sideLength</span> =3D <span class=
=3D"nv">newValue</span> / <span class=3D"m">3.0</span>
</li><li>        }
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">override</span> <span class=3D"k">func</span=
> <span class=3D"nv">simpleDescription</span>() -&gt; <span class=3D"nc">St=
ring</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"An equi=
lateral triangle with sides of length </span>\<span class=3D"p">(</span><sp=
an class=3D"nv">sideLength</span><span class=3D"p">)</span><span class=3D"s=
">."</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">triangle</span> =
=3D <span class=3D"nv">EquilateralTriangle</span>(<span class=3D"nv">sideLe=
ngth</span>: <span class=3D"m">3.1</span>, <span class=3D"nv">name</span>: =
<span class=3D"s">"a triangle"</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">triangle</span>=
.<span class=3D"nv">perimeter</span>)
</li><li><span class=3D"c">// Prints "9.3"</span>
</li><li><span class=3D"nv">triangle</span>.<span class=3D"nv">perimeter</s=
pan> =3D <span class=3D"m">9.9</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">triangle</span>=
.<span class=3D"nv">sideLength</span>)
</li><li><span class=3D"c">// Prints "3.3000000000000003"</span>
</li></ol></div></div></div>
<p>In the setter for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">perimeter</span></code>, the new value has the implicit name <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">newValue</spa=
n></code>. You can provide an explicit name in parentheses after <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">set</span></code>.</=
p>
<p>Notice that the initializer for the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">EquilateralTriangle</span></code> class has th=
ree different steps:</p>
<ol class=3D"arabic simple">
<li>Setting the value of properties that the subclass declares.</li>
<li>Calling the superclass=E2=80=99s initializer.</li>
<li>Changing the value of properties defined by the superclass. Any additio=
nal setup work that uses methods, getters, or setters can also be done at t=
his point.</li>
</ol>
<p>If you don=E2=80=99t need to compute the property but still need to prov=
ide code that is run before and after setting a new value, use <code class=
=3D"docutils literal notranslate"><span class=3D"pre">willSet</span></code>=
 and <code class=3D"docutils literal notranslate"><span class=3D"pre">didSe=
t</span></code>. The code you provide is run any time the value changes out=
side of an initializer. For example, the class below ensures that the side =
length of its triangle is always the same as the side length of its square.=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">TriangleAndSquare</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">triangle</span=
>: <span class=3D"nc">EquilateralTriangle</span> {
</li><li>        <span class=3D"k">willSet</span> {
</li><li>            <span class=3D"nv">square</span>.<span class=3D"nv">si=
deLength</span> =3D <span class=3D"nv">newValue</span>.<span class=3D"nv">s=
ideLength</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">square</span>:=
 <span class=3D"nc">Square</span> {
</li><li>        <span class=3D"k">willSet</span> {
</li><li>            <span class=3D"nv">triangle</span>.<span class=3D"nv">=
sideLength</span> =3D <span class=3D"nv">newValue</span>.<span class=3D"nv"=
>sideLength</span>
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">size</span>: =
<span class=3D"nc">Double</span>, <span class=3D"nv">name</span>: <span cla=
ss=3D"nc">String</span>) {
</li><li>        <span class=3D"nv">square</span> =3D <span class=3D"nv">Sq=
uare</span>(<span class=3D"nv">sideLength</span>: <span class=3D"nv">size</=
span>, <span class=3D"nv">name</span>: <span class=3D"nv">name</span>)
</li><li>        <span class=3D"nv">triangle</span> =3D <span class=3D"nv">=
EquilateralTriangle</span>(<span class=3D"nv">sideLength</span>: <span clas=
s=3D"nv">size</span>, <span class=3D"nv">name</span>: <span class=3D"nv">na=
me</span>)
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">triangleAndSquare<=
/span> =3D <span class=3D"nv">TriangleAndSquare</span>(<span class=3D"nv">s=
ize</span>: <span class=3D"m">10</span>, <span class=3D"nv">name</span>: <s=
pan class=3D"s">"another test shape"</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">triangleAndSqua=
re</span>.<span class=3D"nv">square</span>.<span class=3D"nv">sideLength</s=
pan>)
</li><li><span class=3D"c">// Prints "10.0"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">triangleAndSqua=
re</span>.<span class=3D"nv">triangle</span>.<span class=3D"nv">sideLength<=
/span>)
</li><li><span class=3D"c">// Prints "10.0"</span>
</li><li><span class=3D"nv">triangleAndSquare</span>.<span class=3D"nv">squ=
are</span> =3D <span class=3D"nv">Square</span>(<span class=3D"nv">sideLeng=
th</span>: <span class=3D"m">50</span>, <span class=3D"nv">name</span>: <sp=
an class=3D"s">"larger square"</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">triangleAndSqua=
re</span>.<span class=3D"nv">triangle</span>.<span class=3D"nv">sideLength<=
/span>)
</li><li><span class=3D"c">// Prints "50.0"</span>
</li></ol></div></div></div>
<p>When working with optional values, you can write <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">?</span></code> before operations=
 like methods, properties, and subscripting. If the value before the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">?</span></code> =
is <code class=3D"docutils literal notranslate"><span class=3D"pre">nil</sp=
an></code>, everything after the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">?</span></code> is ignored and the value of the whol=
e expression is <code class=3D"docutils literal notranslate"><span class=3D=
"pre">nil</span></code>. Otherwise, the optional value is unwrapped, and ev=
erything after the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">?</span></code> acts on the unwrapped value. In both cases, the va=
lue of the whole expression is an optional value.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">optionalSquare</span>: <span class=3D"nc">Squar=
e</span>? =3D <span class=3D"nv">Square</span>(<span class=3D"nv">sideLengt=
h</span>: <span class=3D"m">2.5</span>, <span class=3D"nv">name</span>: <sp=
an class=3D"s">"optional square"</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">sideLength</span> =
=3D <span class=3D"nv">optionalSquare</span>?.<span class=3D"nv">sideLength=
</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID465">
<h2>Enumerations and Structures<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/GuidedTour/GuidedTour.html#ID465" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">enu=
m</span></code> to create an enumeration. Like classes and all other named =
types, enumerations can have methods associated with them.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Rank</span>: <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">ace</span> =
=3D <span class=3D"m">1</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">two</span>, <=
span class=3D"nv">three</span>, <span class=3D"nv">four</span>, <span class=
=3D"nv">five</span>, <span class=3D"nv">six</span>, <span class=3D"nv">seve=
n</span>, <span class=3D"nv">eight</span>, <span class=3D"nv">nine</span>, =
<span class=3D"nv">ten</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">jack</span>, =
<span class=3D"nv">queen</span>, <span class=3D"nv">king</span>
</li><li>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">simpleDescrip=
tion</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">switch</span> <span class=3D"k">self</sp=
an> {
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">ace</spa=
n>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"ace=
"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">jack</sp=
an>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"jac=
k"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">queen</s=
pan>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"que=
en"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">king</sp=
an>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"kin=
g"</span>
</li><li>        <span class=3D"k">default</span>:
</li><li>            <span class=3D"k">return</span> <span class=3D"nv">Str=
ing</span>(<span class=3D"k">self</span>.<span class=3D"nv">rawValue</span>=
)
</li><li>        }
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">ace</span> =3D <sp=
an class=3D"nv">Rank</span>.<span class=3D"nv">ace</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">aceRawValue</span>=
 =3D <span class=3D"nv">ace</span>.<span class=3D"nv">rawValue</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Write a function that compares two <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Rank</span></code> values by com=
paring their raw values.</p>
</div>
<p>By default, Swift assigns the raw values starting at zero and incrementi=
ng by one each time, but you can change this behavior by explicitly specify=
ing values. In the example above, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Ace</span></code> is explicitly given a raw value o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">1</span>=
</code>, and the rest of the raw values are assigned in order. You can also=
 use strings or floating-point numbers as the raw type of an enumeration. U=
se the <code class=3D"docutils literal notranslate"><span class=3D"pre">raw=
Value</span></code> property to access the raw value of an enumeration case=
.</p>
<p>Use the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>init?(rawValue:)</span></code> initializer to make an instance of an enume=
ration from a raw value. It returns either the enumeration case matching th=
e raw value or <code class=3D"docutils literal notranslate"><span class=3D"=
pre">nil</span></code> if there is no matching <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Rank</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">convertedRank</span=
> =3D <span class=3D"nv">Rank</span>(<span class=3D"nv">rawValue</span>: <s=
pan class=3D"m">3</span>) {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">threeDescripti=
on</span> =3D <span class=3D"nv">convertedRank</span>.<span class=3D"nv">si=
mpleDescription</span>()
</li><li>}
</li></ol></div></div></div>
<p>The case values of an enumeration are actual values, not just another wa=
y of writing their raw values. In fact, in cases where there isn=E2=80=99t =
a meaningful raw value, you don=E2=80=99t have to provide one.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Suit</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">spades</span>=
, <span class=3D"nv">hearts</span>, <span class=3D"nv">diamonds</span>, <sp=
an class=3D"nv">clubs</span>
</li><li>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">simpleDescrip=
tion</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">switch</span> <span class=3D"k">self</sp=
an> {
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">spades</=
span>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"spa=
des"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">hearts</=
span>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"hea=
rts"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">diamonds=
</span>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"dia=
monds"</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">clubs</s=
pan>:
</li><li>            <span class=3D"k">return</span> <span class=3D"s">"clu=
bs"</span>
</li><li>        }
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">hearts</span> =3D =
<span class=3D"nv">Suit</span>.<span class=3D"nv">hearts</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">heartsDescription<=
/span> =3D <span class=3D"nv">hearts</span>.<span class=3D"nv">simpleDescri=
ption</span>()
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">color()</span></code> method to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">Suit</span></code> that returns =E2=80=
=9Cblack=E2=80=9D for spades and clubs, and returns =E2=80=9Cred=E2=80=9D f=
or hearts and diamonds.</p>
</div>
<p>Notice the two ways that the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">hearts</span></code> case of the enumeration is refer=
red to above: When assigning a value to the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">hearts</span></code> constant, the enumer=
ation case <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Suit.hearts</span></code> is referred to by its full name because the cons=
tant doesn=E2=80=99t have an explicit type specified. Inside the switch, th=
e enumeration case is referred to by the abbreviated form <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">.hearts</span></code> becau=
se the value of <code class=3D"docutils literal notranslate"><span class=3D=
"pre">self</span></code> is already known to be a suit. You can use the abb=
reviated form anytime the value=E2=80=99s type is already known.</p>
<p>If an enumeration has raw values, those values are determined as part of=
 the declaration, which means every instance of a particular enumeration ca=
se always has the same raw value. Another choice for enumeration cases is t=
o have values associated with the case=E2=80=94these values are determined =
when you make the instance, and they can be different for each instance of =
an enumeration case. You can think of the associated values as behaving lik=
e stored properties of the enumeration case instance. For example, consider=
 the case of requesting the sunrise and sunset times from a server. The ser=
ver either responds with the requested information, or it responds with a d=
escription of what went wrong.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">ServerResponse</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">result</span>=
(<span class=3D"nv">String</span>, <span class=3D"nv">String</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">failure</span=
>(<span class=3D"nv">String</span>)
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">success</span> =3D=
 <span class=3D"nv">ServerResponse</span>.<span class=3D"nv">result</span>(=
<span class=3D"s">"6:00 am"</span>, <span class=3D"s">"8:09 pm"</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">failure</span> =3D=
 <span class=3D"nv">ServerResponse</span>.<span class=3D"nv">failure</span>=
(<span class=3D"s">"Out of cheese."</span>)
</li><li>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">success</span> =
{
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> .<span =
class=3D"nv">result</span>(<span class=3D"nv">sunrise</span>, <span class=
=3D"nv">sunset</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Sunrise is =
at </span>\<span class=3D"p">(</span><span class=3D"nv">sunrise</span><span=
 class=3D"p">)</span><span class=3D"s"> and sunset is at </span>\<span clas=
s=3D"p">(</span><span class=3D"nv">sunset</span><span class=3D"p">)</span><=
span class=3D"s">."</span>)
</li><li><span class=3D"k">case</span> <span class=3D"k">let</span> .<span =
class=3D"nv">failure</span>(<span class=3D"nv">message</span>):
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Failure... =
 </span>\<span class=3D"p">(</span><span class=3D"nv">message</span><span c=
lass=3D"p">)</span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Sunrise is at 6:00 am and sunset is a=
t 8:09 pm."</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add a third case to <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">ServerResponse</span></code> and to the switch.=
</p>
</div>
<p>Notice how the sunrise and sunset times are extracted from the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">ServerResponse</spa=
n></code> value as part of matching the value against the switch cases.</p>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">str=
uct</span></code> to create a structure. Structures support many of the sam=
e behaviors as classes, including methods and initializers. One of the most=
 important differences between structures and classes is that structures ar=
e always copied when they are passed around in your code, but classes are p=
assed by reference.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Card</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">rank</span>: <=
span class=3D"nc">Rank</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">suit</span>: <=
span class=3D"nc">Suit</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">simpleDescrip=
tion</span>() -&gt; <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"The </s=
pan>\<span class=3D"p">(</span><span class=3D"nv">rank</span>.<span class=
=3D"nv">simpleDescription</span>()<span class=3D"p">)</span><span class=3D"=
s"> of </span>\<span class=3D"p">(</span><span class=3D"nv">suit</span>.<sp=
an class=3D"nv">simpleDescription</span>()<span class=3D"p">)</span><span c=
lass=3D"s">"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">threeOfSpades</spa=
n> =3D <span class=3D"nv">Card</span>(<span class=3D"nv">rank</span>: .<spa=
n class=3D"nv">three</span>, <span class=3D"nv">suit</span>: .<span class=
=3D"nv">spades</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">threeOfSpadesDescr=
iption</span> =3D <span class=3D"nv">threeOfSpades</span>.<span class=3D"nv=
">simpleDescription</span>()
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Write a function that returns an array containing a full =
deck of cards, with one card of each combination of rank and suit.</p>
</div>
</div>
<div class=3D"section" id=3D"ID466">
<h2>Protocols and Extensions<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/GuidedTour/GuidedTour.html#ID466" title=3D"Permalink to =
this headline">=C2=B6</a></h2>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">pro=
tocol</span></code> to declare a protocol.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">ExampleProtocol</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">simpleDescript=
ion</span>: <span class=3D"nc">String</span> { <span class=3D"k">get</span>=
 }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">adjust</span>()
</li><li>}
</li></ol></div></div></div>
<p>Classes, enumerations, and structs can all adopt protocols.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SimpleClass</span>: <span class=3D"nc">Exampl=
eProtocol</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">simpleDescript=
ion</span>: <span class=3D"nc">String</span> =3D <span class=3D"s">"A very =
simple class."</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">anotherPropert=
y</span>: <span class=3D"nc">Int</span> =3D <span class=3D"m">69105</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">adjust</span>=
() {
</li><li>        <span class=3D"nv">simpleDescription</span> +=3D <span cla=
ss=3D"s">"  Now 100% adjusted."</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">a</span> =3D <span=
 class=3D"nv">SimpleClass</span>()
</li><li><span class=3D"nv">a</span>.<span class=3D"nv">adjust</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">aDescription</span=
> =3D <span class=3D"nv">a</span>.<span class=3D"nv">simpleDescription</spa=
n>
</li><li>
</li><li><span class=3D"k">struct</span> <span class=3D"nv">SimpleStructure=
</span>: <span class=3D"nc">ExampleProtocol</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">simpleDescript=
ion</span>: <span class=3D"nc">String</span> =3D <span class=3D"s">"A simpl=
e structure"</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">adjust</span>() {
</li><li>        <span class=3D"nv">simpleDescription</span> +=3D <span cla=
ss=3D"s">" (adjusted)"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">b</span> =3D <span=
 class=3D"nv">SimpleStructure</span>()
</li><li><span class=3D"nv">b</span>.<span class=3D"nv">adjust</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">bDescription</span=
> =3D <span class=3D"nv">b</span>.<span class=3D"nv">simpleDescription</spa=
n>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add another requirement to <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">ExampleProtocol</span></code>. What chan=
ges do you need to make to <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">SimpleClass</span></code> and <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">SimpleStructure</span></code> so that =
they still conform to the protocol?</p>
</div>
<p>Notice the use of the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">mutating</span></code> keyword in the declaration of <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">SimpleStructure</=
span></code> to mark a method that modifies the structure. The declaration =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">SimpleC=
lass</span></code> doesn=E2=80=99t need any of its methods marked as mutati=
ng because methods on a class can always modify the class.</p>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">ext=
ension</span></code> to add functionality to an existing type, such as new =
methods and computed properties. You can use an extension to add protocol c=
onformance to a type that is declared elsewhere, or even to a type that you=
 imported from a library or framework.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Int</span>: <span class=3D"nc">ExamplePro=
tocol</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">simpleDescript=
ion</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"The num=
ber </span>\<span class=3D"p">(</span><span class=3D"k">self</span><span cl=
ass=3D"p">)</span><span class=3D"s">"</span>
</li><li>    }
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">adjust</span>() {
</li><li>        <span class=3D"k">self</span> +=3D <span class=3D"m">42</s=
pan>
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"m">7</span>.<span c=
lass=3D"nv">simpleDescription</span>)
</li><li><span class=3D"c">// Prints "The number 7"</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Write an extension for the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Double</span></code> type that adds an <=
code class=3D"docutils literal notranslate"><span class=3D"pre">absoluteVal=
ue</span></code> property.</p>
</div>
<p>You can use a protocol name just like any other named type=E2=80=94for e=
xample, to create a collection of objects that have different types but tha=
t all conform to a single protocol. When you work with values whose type is=
 a protocol type, methods outside the protocol definition are not available=
.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">protocolValue</span>: <span class=3D"nc">Exampl=
eProtocol</span> =3D <span class=3D"nv">a</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">protocolValue</=
span>.<span class=3D"nv">simpleDescription</span>)
</li><li><span class=3D"c">// Prints "A very simple class.  Now 100% adjust=
ed."</span>
</li><li><span class=3D"c">// print(protocolValue.anotherProperty)  // Unco=
mment to see the error</span>
</li></ol></div></div></div>
<p>Even though the variable <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">protocolValue</span></code> has a runtime type of <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">SimpleClass</span=
></code>, the compiler treats it as the given type of <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">ExampleProtocol</span></code>. =
This means that you can=E2=80=99t accidentally access methods or properties=
 that the class implements in addition to its protocol conformance.</p>
</div>
<div class=3D"section" id=3D"error-handling">
<h2>Error Handling<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/GuidedTour/GuidedTour.html#error-handling" title=3D"Permalink to t=
his headline">=C2=B6</a></h2>
<p>You represent errors using any type that adopts the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">Error</span></code> protocol.<=
/p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">PrinterError</span>: <span class=3D"nc">Error<=
/span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">outOfPaper</s=
pan>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">noToner</span=
>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">onFire</span>
</li><li>}
</li></ol></div></div></div>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
ow</span></code> to throw an error and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">throws</span></code> to mark a function that c=
an throw an error. If you throw an error in a function, the function return=
s immediately and the code that called the function handles the error.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">send</span>(<span class=3D"nv">job</span>: <sp=
an class=3D"nc">Int</span>, <span class=3D"nv">toPrinter</span> <span class=
=3D"nv">printerName</span>: <span class=3D"nc">String</span>) <span class=
=3D"k">throws</span> -&gt; <span class=3D"nc">String</span> {
</li><li>    <span class=3D"k">if</span> <span class=3D"nv">printerName</sp=
an> =3D=3D <span class=3D"s">"Never Has Toner"</span> {
</li><li>        <span class=3D"k">throw</span> <span class=3D"nv">PrinterE=
rror</span>.<span class=3D"nv">noToner</span>
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"s">"Job sent"</=
span>
</li><li>}
</li></ol></div></div></div>
<p>There are several ways to handle errors. One way is to use <code class=
=3D"docutils literal notranslate"><span class=3D"pre">do</span></code>-<cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">catch</span></=
code>. Inside the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">do</span></code> block, you mark code that can throw an error by w=
riting <code class=3D"docutils literal notranslate"><span class=3D"pre">try=
</span></code> in front of it. Inside the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">catch</span></code> block, the error is aut=
omatically given the name <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">error</span></code> unless you give it a different name.</p=
>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">do=
</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">printerRespons=
e</span> =3D <span class=3D"k">try</span> <span class=3D"nv">send</span>(<s=
pan class=3D"nv">job</span>: <span class=3D"m">1040</span>, <span class=3D"=
nv">toPrinter</span>: <span class=3D"s">"Bi Sheng"</span>)
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">printerResp=
onse</span>)
</li><li>} <span class=3D"k">catch</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">error</span=
>)
</li><li>}
</li><li><span class=3D"c">// Prints "Job sent"</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Change the printer name to <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">"Never</span> <span class=3D"pre">Has</s=
pan> <span class=3D"pre">Toner"</span></code>, so that the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">send(job:toPrinter:)</span=
></code> function throws an error.</p>
</div>
<p>You can provide multiple <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">catch</span></code> blocks that handle specific errors. Y=
ou write a pattern after <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">catch</span></code> just as you do after <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">case</span></code> in a switc=
h.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">do=
</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">printerRespons=
e</span> =3D <span class=3D"k">try</span> <span class=3D"nv">send</span>(<s=
pan class=3D"nv">job</span>: <span class=3D"m">1440</span>, <span class=3D"=
nv">toPrinter</span>: <span class=3D"s">"Gutenberg"</span>)
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">printerResp=
onse</span>)
</li><li>} <span class=3D"k">catch</span> <span class=3D"nv">PrinterError</=
span>.<span class=3D"nv">onFire</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"I'll just p=
ut this over here, with the rest of the fire."</span>)
</li><li>} <span class=3D"k">catch</span> <span class=3D"k">let</span> <spa=
n class=3D"nv">printerError</span> <span class=3D"k">as</span> <span class=
=3D"nc">PrinterError</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Printer err=
or: </span>\<span class=3D"p">(</span><span class=3D"nv">printerError</span=
><span class=3D"p">)</span><span class=3D"s">."</span>)
</li><li>} <span class=3D"k">catch</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">error</span=
>)
</li><li>}
</li><li><span class=3D"c">// Prints "Job sent"</span>
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Add code to throw an error inside the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">do</span></code> block. What =
kind of error do you need to throw so that the error is handled by the firs=
t <code class=3D"docutils literal notranslate"><span class=3D"pre">catch</s=
pan></code> block? What about the second and third blocks?</p>
</div>
<p>Another way to handle errors is to use <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">try?</span></code> to convert the result to=
 an optional. If the function throws an error, the specific error is discar=
ded and the result is <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">nil</span></code>. Otherwise, the result is an optional contain=
ing the value that the function returned.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">printerSuccess</span> =3D <span class=3D"k">try=
</span>? <span class=3D"nv">send</span>(<span class=3D"nv">job</span>: <spa=
n class=3D"m">1884</span>, <span class=3D"nv">toPrinter</span>: <span class=
=3D"s">"Mergenthaler"</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">printerFailure</sp=
an> =3D <span class=3D"k">try</span>? <span class=3D"nv">send</span>(<span =
class=3D"nv">job</span>: <span class=3D"m">1885</span>, <span class=3D"nv">=
toPrinter</span>: <span class=3D"s">"Never Has Toner"</span>)
</li></ol></div></div></div>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">def=
er</span></code> to write a block of code that is executed after all other =
code in the function, just before the function returns. The code is execute=
d regardless of whether the function throws an error. You can use <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">defer</span></code>=
 to write setup and cleanup code next to each other, even though they need =
to be executed at different times.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">fridgeIsOpen</span> =3D <span class=3D"k">false=
</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">fridgeContent</spa=
n> =3D [<span class=3D"s">"milk"</span>, <span class=3D"s">"eggs"</span>, <=
span class=3D"s">"leftovers"</span>]
</li><li>
</li><li><span class=3D"k">func</span> <span class=3D"nv">fridgeContains</s=
pan>(<span class=3D"k">_</span> <span class=3D"nv">food</span>: <span class=
=3D"nc">String</span>) -&gt; <span class=3D"nc">Bool</span> {
</li><li>    <span class=3D"nv">fridgeIsOpen</span> =3D <span class=3D"k">t=
rue</span>
</li><li>    <span class=3D"k">defer</span> {
</li><li>        <span class=3D"nv">fridgeIsOpen</span> =3D <span class=3D"=
k">false</span>
</li><li>    }
</li><li>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">result</span> =
=3D <span class=3D"nv">fridgeContent</span>.<span class=3D"nv">contains</sp=
an>(<span class=3D"nv">food</span>)
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">result</spa=
n>
</li><li>}
</li><li><span class=3D"nv">fridgeContains</span>(<span class=3D"s">"banana=
"</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">fridgeIsOpen</s=
pan>)
</li><li><span class=3D"c">// Prints "false"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"generics">
<h2>Generics<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-bo=
ok/GuidedTour/GuidedTour.html#generics" title=3D"Permalink to this headline=
">=C2=B6</a></h2>
<p>Write a name inside angle brackets to make a generic function or type.</=
p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">makeArray</span>&lt;<span class=3D"nv">Item</s=
pan>&gt;(<span class=3D"nv">repeating</span> <span class=3D"nv">item</span>=
: <span class=3D"nc">Item</span>, <span class=3D"nv">numberOfTimes</span>: =
<span class=3D"nc">Int</span>) -&gt; [<span class=3D"nc">Item</span>] {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">result</span> =
=3D [<span class=3D"nc">Item</span>]()
</li><li>    <span class=3D"k">for</span> <span class=3D"k">_</span> <span =
class=3D"k">in</span> <span class=3D"m">0</span>..&lt;<span class=3D"nv">nu=
mberOfTimes</span> {
</li><li>        <span class=3D"nv">result</span>.<span class=3D"nv">append=
</span>(<span class=3D"nv">item</span>)
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"nv">result</spa=
n>
</li><li>}
</li><li><span class=3D"nv">makeArray</span>(<span class=3D"nv">repeating</=
span>: <span class=3D"s">"knock"</span>, <span class=3D"nv">numberOfTimes</=
span>: <span class=3D"m">4</span>)
</li></ol></div></div></div>
<p>You can make generic forms of functions and methods, as well as classes,=
 enumerations, and structures.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"c">//=
 Reimplement the Swift standard library's optional type</span>
</li><li><span class=3D"k">enum</span> <span class=3D"nv">OptionalValue</sp=
an>&lt;<span class=3D"nv">Wrapped</span>&gt; {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">none</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">some</span>(<=
span class=3D"nv">Wrapped</span>)
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">possibleInteger</s=
pan>: <span class=3D"nc">OptionalValue</span>&lt;<span class=3D"nc">Int</sp=
an>&gt; =3D .<span class=3D"nv">none</span>
</li><li><span class=3D"nv">possibleInteger</span> =3D .<span class=3D"nv">=
some</span>(<span class=3D"m">100</span>)
</li></ol></div></div></div>
<p>Use <code class=3D"docutils literal notranslate"><span class=3D"pre">whe=
re</span></code> right before the body to specify a list of requirements=E2=
=80=94for example, to require the type to implement a protocol, to require =
two types to be the same, or to require a class to have a particular superc=
lass.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">anyCommonElements</span>&lt;<span class=3D"nv"=
>T</span>: <span class=3D"nc">Sequence</span>, <span class=3D"nv">U</span>:=
 <span class=3D"nc">Sequence</span>&gt;(<span class=3D"k">_</span> <span cl=
ass=3D"nv">lhs</span>: <span class=3D"nc">T</span>, <span class=3D"k">_</sp=
an> <span class=3D"nv">rhs</span>: <span class=3D"nc">U</span>) -&gt; <span=
 class=3D"nc">Bool</span>
</li><li>    <span class=3D"k">where</span> <span class=3D"nc">T</span>.<sp=
an class=3D"nc">Element</span>: <span class=3D"nc">Equatable</span>, <span =
class=3D"nc">T</span>.<span class=3D"nc">Element</span> =3D=3D <span class=
=3D"nc">U</span>.<span class=3D"nc">Element</span>
</li><li>{
</li><li>    <span class=3D"k">for</span> <span class=3D"nv">lhsItem</span>=
 <span class=3D"k">in</span> <span class=3D"nv">lhs</span> {
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">rhsItem</s=
pan> <span class=3D"k">in</span> <span class=3D"nv">rhs</span> {
</li><li>            <span class=3D"k">if</span> <span class=3D"nv">lhsItem=
</span> =3D=3D <span class=3D"nv">rhsItem</span> {
</li><li>                <span class=3D"k">return</span> <span class=3D"k">=
true</span>
</li><li>            }
</li><li>        }
</li><li>    }
</li><li>    <span class=3D"k">return</span> <span class=3D"k">false</span>
</li><li>}
</li><li><span class=3D"nv">anyCommonElements</span>([<span class=3D"m">1</=
span>, <span class=3D"m">2</span>, <span class=3D"m">3</span>], [<span clas=
s=3D"m">3</span>])
</li></ol></div></div></div>
<div class=3D"admonition-experiment admonition">
<p class=3D"first admonition-title">Experiment</p>
<p class=3D"last">Modify the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">anyCommonElements(_:_:)</span></code> function to make a=
 function that returns an array of the elements that any two sequences have=
 in common.</p>
</div>
<p>Writing <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>&lt;T:</span> <span class=3D"pre">Equatable&gt;</span></code> is the same =
as writing <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>&lt;T&gt;</span> <span class=3D"pre">...</span> <span class=3D"pre">where<=
/span> <span class=3D"pre">T:</span> <span class=3D"pre">Equatable</span></=
code>.</p>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
GuidedTour/Compatibility.html">Version Compatibility</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/TheBasics.html">The Basics</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--B9jP4hW0TQF6Qmsd4SIJO1FqK1gq0qsRz3VHD2sy3b------
