From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Declarations.html
Subject: =?utf-8?Q?Declarations=20=E2=80=94=20The=20Swift=20Programming=20Language?=
 =?utf-8?Q?=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 01:00:03 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----"


------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Declarations.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Declarations =E2=80=94 The Swift Programming Language (Swift 5.1=
)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.h=
tml">Language Reference</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Abo=
ut the Language Reference</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/LexicalStructure.html">Lexical Stru=
cture</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Types.html">Types</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Expressions.html">Expressions</a></=
li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Statements.html">Statements</a></li=
>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#"=
>Declarations</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Attributes.html">Attributes</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Patterns.html">Patterns</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html"=
>Generic Parameters and Arguments</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html">Summary=
 of the Grammar</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#">Declarations</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID352">Top-Level Code</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID353">Code Blocks</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID354">Import Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID355">Constant Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID356">Variable Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID357">Stored Variables and Stored Var=
iable Properties</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID358">Computed Variables and Computed=
 Properties</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID359">Stored Variable Observers and P=
roperty Observers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID483">Type Variable Properties</a></l=
i>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID361">Type Alias Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID362">Function Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID471">Parameter Names</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID545">In-Out Parameters</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID472">Special Kinds of Parameters</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID473">Special Kinds of Methods</a></l=
i>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID530">Throwing Functions and Methods<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID531">Rethrowing Functions and Method=
s</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID551">Functions that Never Return</a>=
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID364">Enumeration Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID365">Enumerations with Cases of Any =
Type</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID537">Enumerations with Indirection</=
a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID366">Enumerations with Cases of a Ra=
w-Value Type</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID474">Accessing Enumeration Cases</a>=
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID367">Structure Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID368">Class Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID369">Protocol Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID370">Protocol Property Declaration</=
a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID371">Protocol Method Declaration</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID372">Protocol Initializer Declaratio=
n</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID373">Protocol Subscript Declaration<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID374">Protocol Associated Type Declar=
ation</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID375">Initializer Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID376">Failable Initializers</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID377">Deinitializer Declaration</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID378">Extension Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID576">Conditional Conformance</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID577">Overridden Requirements Aren=E2=
=80=99t Used in Some Generic Contexts</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID578">Protocol Conformance Must Not B=
e Redundant</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID579">Resolving Explicit Redundancy</=
a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID580">Resolving Implicit Redundancy</=
a></li>
</ul>
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID379">Subscript Declaration</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID611">Type Subscript Declarations</a>=
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID380">Operator Declaration</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID550">Precedence Group Declaration</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID381">Declaration Modifiers</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#ID382">Access Control Levels</a></li>
</ul>
</li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"declarations">
<h1>Declarations<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#declarations" title=3D"Permalink t=
o this headline">=C2=B6</a></h1>
<p>A <em>declaration</em> introduces a new name or construct into your prog=
ram. For example, you use declarations to introduce functions and methods, =
to introduce variables and constants, and to define enumeration, structure,=
 class, and protocol types. You can also use a declaration to extend the be=
havior of an existing named type and to import symbols into your program th=
at are declared elsewhere.</p>
<p>In Swift, most declarations are also definitions in the sense that they =
are implemented or initialized at the same time they are declared. That sai=
d, because protocols don=E2=80=99t implement their members, most protocol m=
embers are declarations only. For convenience and because the distinction i=
sn=E2=80=99t that important in Swift, the term <em>declaration</em> covers =
both declarations and definitions.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a declaration</p><div class=3D"syntax-group"><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_declaration"></a>declarati=
on</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decl=
arations.html#grammar_import-declaration">import-declaration</a></span> </p=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_d=
eclaration_1008"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Declarations.html#grammar_constant-declaration">c=
onstant-declaration</a></span> </p><p class=3D"syntax-def"><span class=3D"s=
yntax-def-name"><a id=3D"grammar_declaration_1009"></a>declaration</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.ht=
ml#grammar_variable-declaration">variable-declaration</a></span> </p><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_declarat=
ion_1010"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </span> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#grammar_typealias-declaration">typeali=
as-declaration</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_declaration_1011"></a>declaration</span><span c=
lass=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gr=
ammar_function-declaration">function-declaration</a></span> </p><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_declaration_1=
012"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Declarations.html#grammar_enum-declaration">enum-declaration<=
/a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a i=
d=3D"grammar_declaration_1013"></a>declaration</span><span class=3D"arrow">=
 =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_struct-de=
claration">struct-declaration</a></span> </p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_declaration_1014"></a>declaratio=
n</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_class-declaration">class-declaration</a></span> </p><p=
 class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_decl=
aration_1015"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#grammar_protocol-declaration">prot=
ocol-declaration</a></span> </p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_declaration_1016"></a>declaration</span><span=
 class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_initializer-declaration">initializer-declaration</a></span> </p><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_decla=
ration_1017"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </span>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Declarations.html#grammar_deinitializer-declaration">=
deinitializer-declaration</a></span> </p><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_declaration_1018"></a>declaration</s=
pan><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarati=
ons.html#grammar_extension-declaration">extension-declaration</a></span> </=
p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_=
declaration_1019"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </=
span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_subscript-declaration"=
>subscript-declaration</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_declaration_1020"></a>declaration</sp=
an><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declaratio=
ns.html#grammar_operator-declaration">operator-declaration</a></span> </p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_dec=
laration_1021"></a>declaration</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Declarations.html#grammar_precedence-group-declarat=
ion">precedence-group-declaration</a></span> </p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_declarations"></a>declaratio=
ns</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decl=
arations.html#grammar_declaration">declaration</a></span>  <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Declarations.html#grammar_declarations">declarations</a></span> <sub>o=
pt</sub></p></div></div><div class=3D"section" id=3D"ID352">
<h2>Top-Level Code<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Declarations.html#ID352" title=3D"Permalink to thi=
s headline">=C2=B6</a></h2>
<p>The top-level code in a Swift source file consists of zero or more state=
ments, declarations, and expressions. By default, variables, constants, and=
 other named declarations that are declared at the top-level of a source fi=
le are accessible to code in every source file that is part of the same mod=
ule. You can override this default behavior by marking the declaration with=
 an access-level modifier, as described in <a class=3D"reference internal" =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html=
#ID382"><span class=3D"std std-ref">Access Control Levels</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a top-level declaration</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_top-level-declar=
ation"></a>top-level-declaration</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#grammar_statements">statements</a=
></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID353">
<h2>Code Blocks<a class=3D"headerlink" href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Declarations.html#ID353" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p>A <em>code block</em> is used by a variety of declarations and control s=
tructures to group statements together. It has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li>{
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>statements</em> inside a code block include declarations, expres=
sions, and other kinds of statements and are executed in order of their app=
earance in source code.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a code block</p><div class=3D"syntax-group"><p class=3D"syntax-def"><=
span class=3D"syntax-def-name"><a id=3D"grammar_code-block"></a>code-block<=
/span><span class=3D"arrow"> =E2=86=92 </span> <code>{</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Statements.html#grammar_statements">statements</a></span> <sub>op=
t</sub> <code>}</code></p></div></div></div>
<div class=3D"section" id=3D"ID354">
<h2>Import Declaration<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Declarations.html#ID354" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p>An <em>import declaration</em> lets you access symbols that are declared=
 outside the current file. The basic form imports the entire module; it con=
sists of the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">import</span></code> keyword followed by a module name:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">import</span> <span class=3D"gi">module</span>
</li></ol></div></div></div>
<p>Providing more detail limits which symbols are imported=E2=80=94you can =
specify a specific submodule or a specific declaration within a module or s=
ubmodule. When this detailed form is used, only the imported symbol (and no=
t the module that declares it) is made available in the current scope.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">import</span> <span class=3D"gi">import kind</span> <span clas=
s=3D"gi">module</span>.<span class=3D"gi">symbol name</span>
</li><li><span class=3D"k">import</span> <span class=3D"gi">module</span>.<=
span class=3D"gi">submodule</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an import declaration</p><div class=3D"syntax-group"><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_import-declaration=
"></a>import-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></span>=
 <sub>opt</sub> <code>import</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_import-kind">import-kind</a></span> <sub>opt</sub> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Declarations.html#grammar_import-path">import-path</a></span> </p></di=
v><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_import-kind"></a>import-kind</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>typealias</code> |  <code>struct</code>=
 |  <code>class</code> |  <code>enum</code> |  <code>protocol</code> |  <co=
de>let</code> |  <code>var</code> |  <code>func</code></p><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_import-path"></a>im=
port-path</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/Declarations.html#grammar_import-path-identifier">import-path-identifier=
</a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Declarations.html#grammar_import-path-=
identifier">import-path-identifier</a></span>  <code>.</code> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_import-path">import-path</a></span> </p=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_i=
mport-path-identifier"></a>import-path-identifier</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_id=
entifier">identifier</a></span>  |  <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.h=
tml#grammar_operator">operator</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID355">
<h2>Constant Declaration<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#ID355" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>A <em>constant declaration</em> introduces a constant named value into y=
our program. Constant declarations are declared using the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">let</span></code> keyword a=
nd have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">let</span> <span class=3D"gi">constant name</span>: <span clas=
s=3D"gi">type</span> =3D <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>A constant declaration defines an immutable binding between the <em>cons=
tant name</em> and the value of the initializer <em>expression</em>; after =
the value of a constant is set, it cannot be changed. That said, if a const=
ant is initialized with a class object, the object itself can change, but t=
he binding between the constant name and the object it refers to can=E2=80=
=99t.</p>
<p>When a constant is declared at global scope, it must be initialized with=
 a value. When a constant declaration occurs in the context of a function o=
r method, it can be initialized later, as long as it is guaranteed to have =
a value set before the first time its value is read. When a constant declar=
ation occurs in the context of a class or structure declaration, it is cons=
idered a <em>constant property</em>. Constant declarations are not computed=
 properties and therefore do not have getters or setters.</p>
<p>If the <em>constant name</em> of a constant declaration is a tuple patte=
rn, the name of each item in the tuple is bound to the corresponding value =
in the initializer <em>expression</em>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> (<span class=3D"nv">firstNumber</span>, <span class=3D"nv">secondN=
umber</span>) =3D (<span class=3D"m">10</span>, <span class=3D"m">42</span>=
)
</li></ol></div></div></div>
<p>In this example, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">firstNumber</span></code> is a named constant for the value <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">10</span></code=
>, and <code class=3D"docutils literal notranslate"><span class=3D"pre">sec=
ondNumber</span></code> is a named constant for the value <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">42</span></code>. Both cons=
tants can now be used independently:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"s">"The first number is </span>\<span class=3D"p=
">(</span><span class=3D"nv">firstNumber</span><span class=3D"p">)</span><s=
pan class=3D"s">."</span>)
</li><li><span class=3D"c">// Prints "The first number is 10."</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The second numb=
er is </span>\<span class=3D"p">(</span><span class=3D"nv">secondNumber</sp=
an><span class=3D"p">)</span><span class=3D"s">."</span>)
</li><li><span class=3D"c">// Prints "The second number is 42."</span>
</li></ol></div></div></div>
<p>The type annotation (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">:</span></code> <em>type</em>) is optional in a constant decl=
aration when the type of the <em>constant name</em> can be inferred, as des=
cribed in <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Types.html#ID457"><span class=3D"std std-ref">Type=
 Inference</span></a>.</p>
<p>To declare a constant type property, mark the declaration with the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">static</span></=
code> declaration modifier. A constant type property of a class is always i=
mplicitly final; you can=E2=80=99t mark it with the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">class</span></code> or <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">final</span></code> =
declaration modifier to allow or disallow overriding by subclasses. Type pr=
operties are discussed in <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Properties.html#ID264"><span class=
=3D"std std-ref">Type Properties</span></a>.</p>
<p>For more information about constants and for guidance about when to use =
them, see <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/TheBasics.html#ID310"><span class=3D"std std-ref">Co=
nstants and Variables</span></a> and <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255">=
<span class=3D"std std-ref">Stored Properties</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a constant declaration</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_constant-declarat=
ion"></a>constant-declaration</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></=
span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_declara=
tion-modifiers">declaration-modifiers</a></span> <sub>opt</sub> <code>let</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_pattern-initializer-li=
st">pattern-initializer-list</a></span> </p></div><div class=3D"syntax-grou=
p"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_pattern-initializer-list"></a>pattern-initializer-list</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gramma=
r_pattern-initializer">pattern-initializer</a></span>  |  <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Declarations.html#grammar_pattern-initializer">pattern-initializer</a><=
/span>  <code>,</code> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_patte=
rn-initializer-list">pattern-initializer-list</a></span> </p><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_pattern-initiali=
zer"></a>pattern-initializer</span><span class=3D"arrow"> =E2=86=92 </span>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Patterns.html#grammar_pattern">pattern</a></span>  <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#grammar_initializer">initializer</a></=
span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_initializer"></a>initializer</span><span class=3D"arr=
ow"> =E2=86=92 </span> <code>=3D</code> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.ht=
ml#grammar_expression">expression</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID356">
<h2>Variable Declaration<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#ID356" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>A <em>variable declaration</em> introduces a variable named value into y=
our program and is declared using the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">var</span></code> keyword.</p>
<p>Variable declarations have several forms that declare different kinds of=
 named, mutable values, including stored and computed variables and propert=
ies, stored variable and property observers, and static variable properties=
. The appropriate form to use depends on the scope at which the variable is=
 declared and the kind of variable you intend to declare.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You can also declare properties in the context of a proto=
col declaration, as described in <a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID370"><s=
pan class=3D"std std-ref">Protocol Property Declaration</span></a>.</p>
</div>
<p>You can override a property in a subclass by marking the subclass=E2=80=
=99s property declaration with the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">override</span></code> declaration modifier, as de=
scribed in <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/Inheritance.html#ID196"><span class=3D"std std-ref"=
>Overriding</span></a>.</p>
<div class=3D"section" id=3D"ID357">
<h3>Stored Variables and Stored Variable Properties<a class=3D"headerlink" =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html=
#ID357" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The following form declares a stored variable or stored variable propert=
y:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">var</span> <span class=3D"gi">variable name</span>: <span clas=
s=3D"gi">type</span> =3D <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>You define this form of a variable declaration at global scope, the loca=
l scope of a function, or in the context of a class or structure declaratio=
n. When a variable declaration of this form is declared at global scope or =
the local scope of a function, it is referred to as a <em>stored variable</=
em>. When it is declared in the context of a class or structure declaration=
, it is referred to as a <em>stored variable property</em>.</p>
<p>The initializer <em>expression</em> can=E2=80=99t be present in a protoc=
ol declaration, but in all other contexts, the initializer <em>expression</=
em> is optional. That said, if no initializer <em>expression</em> is presen=
t, the variable declaration must include an explicit type annotation (<code=
 class=3D"docutils literal notranslate"><span class=3D"pre">:</span></code>=
 <em>type</em>).</p>
<p>As with constant declarations, if the <em>variable name</em> is a tuple =
pattern, the name of each item in the tuple is bound to the corresponding v=
alue in the initializer <em>expression</em>.</p>
<p>As their names suggest, the value of a stored variable or a stored varia=
ble property is stored in memory.</p>
</div>
<div class=3D"section" id=3D"ID358">
<h3>Computed Variables and Computed Properties<a class=3D"headerlink" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID3=
58" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The following form declares a computed variable or computed property:</p=
>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">var</span> <span class=3D"gi">variable name</span>: <span clas=
s=3D"gi">type</span> {
</li><li>    <span class=3D"k">get</span> {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>    <span class=3D"k">set</span>(<span class=3D"gi">setter name</s=
pan>) {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You define this form of a variable declaration at global scope, the loca=
l scope of a function, or in the context of a class, structure, enumeration=
, or extension declaration. When a variable declaration of this form is dec=
lared at global scope or the local scope of a function, it is referred to a=
s a <em>computed variable</em>. When it is declared in the context of a cla=
ss, structure, or extension declaration, it is referred to as a <em>compute=
d property</em>.</p>
<p>The getter is used to read the value, and the setter is used to write th=
e value. The setter clause is optional, and when only a getter is needed, y=
ou can omit both clauses and simply return the requested value directly, as=
 described in <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Properties.html#ID261"><span class=3D"std std-re=
f">Read-Only Computed Properties</span></a>. But if you provide a setter cl=
ause, you must also provide a getter clause.</p>
<p>The <em>setter name</em> and enclosing parentheses is optional. If you p=
rovide a setter name, it is used as the name of the parameter to the setter=
. If you do not provide a setter name, the default parameter name to the se=
tter is <code class=3D"docutils literal notranslate"><span class=3D"pre">ne=
wValue</span></code>, as described in <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID260">=
<span class=3D"std std-ref">Shorthand Setter Declaration</span></a>.</p>
<p>Unlike stored named values and stored variable properties, the value of =
a computed named value or a computed property is not stored in memory.</p>
<p>For more information and to see examples of computed properties, see <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/Properties.html#ID259"><span class=3D"std std-ref">Computed Prope=
rties</span></a>.</p>
</div>
<div class=3D"section" id=3D"ID359">
<h3>Stored Variable Observers and Property Observers<a class=3D"headerlink"=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.htm=
l#ID359" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can also declare a stored variable or property with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">willSet</span></code> and =
<code class=3D"docutils literal notranslate"><span class=3D"pre">didSet</sp=
an></code> observers. A stored variable or property declared with observers=
 has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">var</span> <span class=3D"gi">variable name</span>: <span clas=
s=3D"gi">type</span> =3D <span class=3D"gi">expression</span> {
</li><li>    <span class=3D"k">willSet</span>(<span class=3D"gi">setter nam=
e</span>) {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>    <span class=3D"k">didSet</span>(<span class=3D"gi">setter name=
</span>) {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You define this form of a variable declaration at global scope, the loca=
l scope of a function, or in the context of a class or structure declaratio=
n. When a variable declaration of this form is declared at global scope or =
the local scope of a function, the observers are referred to as <em>stored =
variable observers</em>. When it is declared in the context of a class or s=
tructure declaration, the observers are referred to as <em>property observe=
rs</em>.</p>
<p>You can add property observers to any stored property. You can also add =
property observers to any inherited property (whether stored or computed) b=
y overriding the property within a subclass, as described in <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/I=
nheritance.html#ID201"><span class=3D"std std-ref">Overriding Property Obse=
rvers</span></a>.</p>
<p>The initializer <em>expression</em> is optional in the context of a clas=
s or structure declaration, but required elsewhere. The <em>type</em> annot=
ation is optional when the type can be inferred from the initializer <em>ex=
pression</em>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">wil=
lSet</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">didSet</span></code> observers provide a way to observe (and t=
o respond appropriately) when the value of a variable or property is being =
set. The observers are not called when the variable or property is first in=
itialized. Instead, they are called only when the value is set outside of a=
n initialization context.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">willS=
et</span></code> observer is called just before the value of the variable o=
r property is set. The new value is passed to the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">willSet</span></code> observer as a=
 constant, and therefore it can=E2=80=99t be changed in the implementation =
of the <code class=3D"docutils literal notranslate"><span class=3D"pre">wil=
lSet</span></code> clause. The <code class=3D"docutils literal notranslate"=
><span class=3D"pre">didSet</span></code> observer is called immediately af=
ter the new value is set. In contrast to the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">willSet</span></code> observer, the old =
value of the variable or property is passed to the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">didSet</span></code> observer in c=
ase you still need access to it. That said, if you assign a value to a vari=
able or property within its own <code class=3D"docutils literal notranslate=
"><span class=3D"pre">didSet</span></code> observer clause, that new value =
that you assign will replace the one that was just set and passed to the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">willSet</spa=
n></code> observer.</p>
<p>The <em>setter name</em> and enclosing parentheses in the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">willSet</span></code> an=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">didSet</=
span></code> clauses are optional. If you provide setter names, they are us=
ed as the parameter names to the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">willSet</span></code> and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">didSet</span></code> observers. If y=
ou do not provide setter names, the default parameter name to the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">willSet</span></cod=
e> observer is <code class=3D"docutils literal notranslate"><span class=3D"=
pre">newValue</span></code> and the default parameter name to the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">didSet</span></code=
> observer is <code class=3D"docutils literal notranslate"><span class=3D"p=
re">oldValue</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">did=
Set</span></code> clause is optional when you provide a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">willSet</span></code> clause.=
 Likewise, the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">willSet</span></code> clause is optional when you provide a <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">didSet</span></code>=
 clause.</p>
<p>For more information and to see an example of how to use property observ=
ers, see <a class=3D"reference internal" href=3D"https://docs.swift.org/swi=
ft-book/LanguageGuide/Properties.html#ID262"><span class=3D"std std-ref">Pr=
operty Observers</span></a>.</p>
</div>
<div class=3D"section" id=3D"ID483">
<h3>Type Variable Properties<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Declarations.html#ID483" title=3D"Permal=
ink to this headline">=C2=B6</a></h3>
<p>To declare a type variable property, mark the declaration with the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">static</span></=
code> declaration modifier. Classes can mark type computed properties with =
the <code class=3D"docutils literal notranslate"><span class=3D"pre">class<=
/span></code> declaration modifier instead to allow subclasses to override =
the superclass=E2=80=99s implementation. Type properties are discussed in <=
a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/Properties.html#ID264"><span class=3D"std std-ref">Type Propert=
ies</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a variable declaration</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_variable-declarat=
ion"></a>variable-declaration</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#grammar_variable-declaration-head"=
>variable-declaration-head</a></span>  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.ht=
ml#grammar_pattern-initializer-list">pattern-initializer-list</a></span> </=
p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_=
variable-declaration_1022"></a>variable-declaration</span><span class=3D"ar=
row"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_vari=
able-declaration-head">variable-declaration-head</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Declarations.html#grammar_variable-name">variable-name</a></span>  <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Types.html#grammar_type-annotation">type-annotation</a>=
</span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Declarations.html#grammar_code-block">code-bl=
ock</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_variable-declaration_1023"></a>variable-declaration</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.=
html#grammar_variable-declaration-head">variable-declaration-head</a></span=
>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Declarations.html#grammar_variable-name">variable-n=
ame</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Types.html#grammar_type-annotation">ty=
pe-annotation</a></span>  <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_ge=
tter-setter-block">getter-setter-block</a></span> </p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_variable-declaration_10=
24"></a>variable-declaration</span><span class=3D"arrow"> =E2=86=92 </span>=
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Declarations.html#grammar_variable-declaration-head">=
variable-declaration-head</a></span>  <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.htm=
l#grammar_variable-name">variable-name</a></span>  <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Typ=
es.html#grammar_type-annotation">type-annotation</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Declarations.html#grammar_getter-setter-keyword-block">getter-setter=
-keyword-block</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_variable-declaration_1025"></a>variable-declara=
tion</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/De=
clarations.html#grammar_variable-declaration-head">variable-declaration-hea=
d</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Declarations.html#grammar_variable-name"=
>variable-name</a></span>  <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_i=
nitializer">initializer</a></span>  <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_willSet-didSet-block">willSet-didSet-block</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_variable-d=
eclaration_1026"></a>variable-declaration</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#grammar_variable-decl=
aration-head">variable-declaration-head</a></span>  <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/De=
clarations.html#grammar_variable-name">variable-name</a></span>  <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Types.html#grammar_type-annotation">type-annotation</a></span>  =
<span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Declarations.html#grammar_initializer">initializer</a>=
</span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_willS=
et-didSet-block">willSet-didSet-block</a></span> </p></div><div class=3D"sy=
ntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_variable-declaration-head"></a>variable-declaration-head</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.ht=
ml#grammar_attributes">attributes</a></span> <sub>opt</sub> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_declaration-modifiers">declaration-modifier=
s</a></span> <sub>opt</sub> <code>var</code></p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_variable-name"></a>variable-n=
ame</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lex=
icalStructure.html#grammar_identifier">identifier</a></span> </p></div><div=
 class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_getter-setter-block"></a>getter-setter-block</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.ht=
ml#grammar_code-block">code-block</a></span> </p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_getter-setter-block_1027"></=
a>getter-setter-block</span><span class=3D"arrow"> =E2=86=92 </span> <code>=
{</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Declarations.html#grammar_getter-clause">gett=
er-clause</a></span>  <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_setter=
-clause">setter-clause</a></span> <sub>opt</sub> <code>}</code></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_getter-set=
ter-block_1028"></a>getter-setter-block</span><span class=3D"arrow"> =E2=86=
=92 </span> <code>{</code> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_s=
etter-clause">setter-clause</a></span>  <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_getter-clause">getter-clause</a></span>  <code>}</code></p><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_getter=
-clause"></a>getter-clause</span><span class=3D"arrow"> =E2=86=92 </span> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></spa=
n> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_mutation-m=
odifier">mutation-modifier</a></span> <sub>opt</sub> <code>get</code> <span=
 class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Declarations.html#grammar_code-block">code-block</a></span>=
 </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_setter-clause"></a>setter-clause</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Attributes.html#grammar_attributes">attributes=
</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_m=
utation-modifier">mutation-modifier</a></span> <sub>opt</sub> <code>set</co=
de> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Declarations.html#grammar_setter-name">setter-name=
</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_c=
ode-block">code-block</a></span> </p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_setter-name"></a>setter-name</span><span=
 class=3D"arrow"> =E2=86=92 </span> <code>(</code> <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Lex=
icalStructure.html#grammar_identifier">identifier</a></span>  <code>)</code=
></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_getter-setter-keyword-block"></a>gett=
er-setter-keyword-block</span><span class=3D"arrow"> =E2=86=92 </span> <cod=
e>{</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#grammar_getter-keyword-cl=
ause">getter-keyword-clause</a></span>  <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_setter-keyword-clause">setter-keyword-clause</a></span> <sub>op=
t</sub> <code>}</code></p><p class=3D"syntax-def"><span class=3D"syntax-def=
-name"><a id=3D"grammar_getter-setter-keyword-block_1029"></a>getter-setter=
-keyword-block</span><span class=3D"arrow"> =E2=86=92 </span> <code>{</code=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#grammar_setter-keyword-clause">set=
ter-keyword-clause</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_getter-keyword-clause">getter-keyword-clause</a></span>  <code>}</code=
></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_getter-keyword-clause"></a>getter-keyword-clause</span><span class=3D"ar=
row"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attrib=
utes">attributes</a></span> <sub>opt</sub> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declaration=
s.html#grammar_mutation-modifier">mutation-modifier</a></span> <sub>opt</su=
b> <code>get</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-na=
me"><a id=3D"grammar_setter-keyword-clause"></a>setter-keyword-clause</span=
><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.h=
tml#grammar_attributes">attributes</a></span> <sub>opt</sub> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Declarations.html#grammar_mutation-modifier">mutation-modifier</a></=
span> <sub>opt</sub> <code>set</code></p></div><div class=3D"syntax-group">=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_wi=
llSet-didSet-block"></a>willSet-didSet-block</span><span class=3D"arrow"> =
=E2=86=92 </span> <code>{</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_willSet-clause">willSet-clause</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declar=
ations.html#grammar_didSet-clause">didSet-clause</a></span> <sub>opt</sub> =
<code>}</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_willSet-didSet-block_1030"></a>willSet-didSet-block</span><=
span class=3D"arrow"> =E2=86=92 </span> <code>{</code> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Declarations.html#grammar_didSet-clause">didSet-clause</a></span>  <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Declarations.html#grammar_willSet-clause">willSet-clause</a><=
/span> <sub>opt</sub> <code>}</code></p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_willSet-clause"></a>willSet-clause</s=
pan><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attribute=
s.html#grammar_attributes">attributes</a></span> <sub>opt</sub> <code>willS=
et</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#grammar_setter-name">sette=
r-name</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_code-block">code-block</a></span> </p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_didSet-clause"></a>didSet-clause</=
span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attribut=
es.html#grammar_attributes">attributes</a></span> <sub>opt</sub> <code>didS=
et</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#grammar_setter-name">sette=
r-name</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_code-block">code-block</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID361">
<h2>Type Alias Declaration<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#ID361" title=3D"Permalin=
k to this headline">=C2=B6</a></h2>
<p>A <em>type alias declaration</em> introduces a named alias of an existin=
g type into your program. Type alias declarations are declared using the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">typealias</s=
pan></code> keyword and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">typealias</span> <span class=3D"gi">name</span> =3D <span clas=
s=3D"gi">existing type</span>
</li></ol></div></div></div>
<p>After a type alias is declared, the aliased <em>name</em> can be used in=
stead of the <em>existing type</em> everywhere in your program. The <em>exi=
sting type</em> can be a named type or a compound type. Type aliases do not=
 create new types; they simply allow a name to refer to an existing type.</=
p>
<p>A type alias declaration can use generic parameters to give a name to an=
 existing generic type. The type alias can provide concrete types for some =
or all of the generic parameters of the existing type. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ty=
pealias</span> <span class=3D"nv">StringDictionary</span>&lt;<span class=3D=
"nv">Value</span>&gt; =3D <span class=3D"nc">Dictionary</span>&lt;<span cla=
ss=3D"nc">String</span>, <span class=3D"nc">Value</span>&gt;
</li><li>
</li><li><span class=3D"c">// The following dictionaries have the same type=
.</span>
</li><li><span class=3D"k">var</span> <span class=3D"nv">dictionary1</span>=
: <span class=3D"nc">StringDictionary</span>&lt;<span class=3D"nc">Int</spa=
n>&gt; =3D [:]
</li><li><span class=3D"k">var</span> <span class=3D"nv">dictionary2</span>=
: <span class=3D"nc">Dictionary</span>&lt;<span class=3D"nc">String</span>,=
 <span class=3D"nc">Int</span>&gt; =3D [:]
</li></ol></div></div></div>
<p>When a type alias is declared with generic parameters, the constraints o=
n those parameters must match exactly the constraints on the existing type=
=E2=80=99s generic parameters. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ty=
pealias</span> <span class=3D"nv">DictionaryOfInts</span>&lt;<span class=3D=
"nv">Key</span>: <span class=3D"nc">Hashable</span>&gt; =3D <span class=3D"=
nc">Dictionary</span>&lt;<span class=3D"nc">Key</span>, <span class=3D"nc">=
Int</span>&gt;
</li></ol></div></div></div>
<p>Because the type alias and the existing type can be used interchangeably=
, the type alias can=E2=80=99t introduce additional generic constraints.</p=
>
<p>A type alias can forward an existing type=E2=80=99s generic parameters b=
y omitting all generic parameters from the declaration. For example, the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Diccionario<=
/span></code> type alias declared here has the same generic parameters and =
constraints as <code class=3D"docutils literal notranslate"><span class=3D"=
pre">Dictionary</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ty=
pealias</span> <span class=3D"nv">Diccionario</span> =3D <span class=3D"nc"=
>Dictionary</span>
</li></ol></div></div></div>
<p>Inside a protocol declaration, a type alias can give a shorter and more =
convenient name to a type that is used frequently. For example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Sequence</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Ite=
rator</span>: <span class=3D"nc">IteratorProtocol</span>
</li><li>    <span class=3D"k">typealias</span> <span class=3D"nv">Element<=
/span> =3D <span class=3D"nc">Iterator</span>.<span class=3D"nc">Element</s=
pan>
</li><li>}
</li><li>
</li><li><span class=3D"k">func</span> <span class=3D"nv">sum</span>&lt;<sp=
an class=3D"nv">T</span>: <span class=3D"nc">Sequence</span>&gt;(<span clas=
s=3D"k">_</span> <span class=3D"nv">sequence</span>: <span class=3D"nc">T</=
span>) -&gt; <span class=3D"nc">Int</span> <span class=3D"k">where</span> <=
span class=3D"nc">T</span>.<span class=3D"nc">Element</span> =3D=3D <span c=
lass=3D"nc">Int</span> {
</li><li>    <span class=3D"c">// ...</span>
</li><li>}
</li></ol></div></div></div>
<p>Without this type alias, the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">sum</span></code> function would have to refer to the=
 associated type as <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">T.Iterator.Element</span></code> instead of <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">T.Element</span></code>.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID374"><span class=3D"std std-=
ref">Protocol Associated Type Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a type alias declaration</p><div class=3D"syntax-group"><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_typealias-decla=
ration"></a>typealias-declaration</span><span class=3D"arrow"> =E2=86=92 </=
span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Attributes.html#grammar_attributes">attributes</=
a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_acc=
ess-level-modifier">access-level-modifier</a></span> <sub>opt</sub> <code>t=
ypealias</code> <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Declarations.html#grammar_typealias-na=
me">typealias-name</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParametersAndA=
rguments.html#grammar_generic-parameter-clause">generic-parameter-clause</a=
></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_type=
alias-assignment">typealias-assignment</a></span> </p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_typealias-name"></a>typ=
ealias-name</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/LexicalStructure.html#grammar_identifier">identifier</a></span> </p><p=
 class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_type=
alias-assignment"></a>typealias-assignment</span><span class=3D"arrow"> =E2=
=86=92 </span> <code>=3D</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_ty=
pe">type</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID362">
<h2>Function Declaration<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#ID362" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>A <em>function declaration</em> introduces a function or method into you=
r program. A function declared in the context of class, structure, enumerat=
ion, or protocol is referred to as a <em>method</em>. Function declarations=
 are declared using the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">func</span></code> keyword and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">func</span> <span class=3D"gi">function name</span>(<span clas=
s=3D"gi">parameters</span>) -&gt; <span class=3D"gi">return type</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>If the function has a return type of <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">Void</span></code>, the return type can be om=
itted as follows:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">func</span> <span class=3D"gi">function name</span>(<span clas=
s=3D"gi">parameters</span>) {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The type of each parameter must be included=E2=80=94it can=E2=80=99t be =
inferred. If you write <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">inout</span></code> in front of a parameter=E2=80=99s type, th=
e parameter can be modified inside the scope of the function. In-out parame=
ters are discussed in detail in <a class=3D"reference internal" href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545"><sp=
an class=3D"std std-ref">In-Out Parameters</span></a>, below.</p>
<p>A function declaration whose <em>statements</em> include only a single e=
xpression is understood to return the value of that expression.</p>
<p>Functions can return multiple values using a tuple type as the return ty=
pe of the function.</p>
<p>A function definition can appear inside another function declaration. Th=
is kind of function is known as a <em>nested function</em>.</p>
<p>A nested function is nonescaping if it captures a value that is guarante=
ed to never escape=E2=80=94such as an in-out parameter=E2=80=94or passed as=
 a nonescaping function argument. Otherwise, the nested function is an esca=
ping function.</p>
<p>For a discussion of nested functions, see <a class=3D"reference internal=
" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID=
178"><span class=3D"std std-ref">Nested Functions</span></a>.</p>
<div class=3D"section" id=3D"ID471">
<h3>Parameter Names<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Declarations.html#ID471" title=3D"Permalink to th=
is headline">=C2=B6</a></h3>
<p>Function parameters are a comma-separated list where each parameter has =
one of several forms. The order of arguments in a function call must match =
the order of parameters in the function=E2=80=99s declaration. The simplest=
 entry in a parameter list has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">parameter name</span>: <span class=3D"gi">parameter type</spa=
n>
</li></ol></div></div></div>
<p>A parameter has a name, which is used within the function body, as well =
as an argument label, which is used when calling the function or method. By=
 default, parameter names are also used as argument labels. For example:</p=
>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">f</span>(<span class=3D"nv">x</span>: <span cl=
ass=3D"nc">Int</span>, <span class=3D"nv">y</span>: <span class=3D"nc">Int<=
/span>) -&gt; <span class=3D"nc">Int</span> { <span class=3D"k">return</spa=
n> <span class=3D"nv">x</span> + <span class=3D"nv">y</span> }
</li><li><span class=3D"nv">f</span>(<span class=3D"nv">x</span>: <span cla=
ss=3D"m">1</span>, <span class=3D"nv">y</span>: <span class=3D"m">2</span>)=
 <span class=3D"c">// both x and y are labeled</span>
</li></ol></div></div></div>
<p>You can override the default behavior for argument labels with one of th=
e following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"gi">argument label</span> <span class=3D"gi">parameter name</span=
>: <span class=3D"gi">parameter type</span>
</li><li><span class=3D"k">_</span> <span class=3D"gi">parameter name</span=
>: <span class=3D"gi">parameter type</span>
</li></ol></div></div></div>
<p>A name before the parameter name gives the parameter an explicit argumen=
t label, which can be different from the parameter name. The corresponding =
argument must use the given argument label in function or method calls.</p>
<p>An underscore (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">_</span></code>) before a parameter name suppresses the argument l=
abel. The corresponding argument must have no label in function or method c=
alls.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">repeatGreeting</span>(<span class=3D"k">_</spa=
n> <span class=3D"nv">greeting</span>: <span class=3D"nc">String</span>, <s=
pan class=3D"nv">count</span> <span class=3D"nv">n</span>: <span class=3D"n=
c">Int</span>) { <span class=3D"c">/* Greet n times */</span> }
</li><li><span class=3D"nv">repeatGreeting</span>(<span class=3D"s">"Hello,=
 world!"</span>, <span class=3D"nv">count</span>: <span class=3D"m">2</span=
>) <span class=3D"c">//  count is labeled, greeting is not</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID545">
<h3>In-Out Parameters<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Declarations.html#ID545" title=3D"Permalink to =
this headline">=C2=B6</a></h3>
<p>In-out parameters are passed as follows:</p>
<ol class=3D"arabic simple">
<li>When the function is called, the value of the argument is copied.</li>
<li>In the body of the function, the copy is modified.</li>
<li>When the function returns, the copy=E2=80=99s value is assigned to the =
original argument.</li>
</ol>
<p>This behavior is known as <em>copy-in copy-out</em> or <em>call by value=
 result</em>. For example, when a computed property or a property with obse=
rvers is passed as an in-out parameter, its getter is called as part of the=
 function call and its setter is called as part of the function return.</p>
<p>As an optimization, when the argument is a value stored at a physical ad=
dress in memory, the same memory location is used both inside and outside t=
he function body. The optimized behavior is known as <em>call by reference<=
/em>; it satisfies all of the requirements of the copy-in copy-out model wh=
ile removing the overhead of copying. Write your code using the model given=
 by copy-in copy-out, without depending on the call-by-reference optimizati=
on, so that it behaves correctly with or without the optimization.</p>
<p>Within a function, don=E2=80=99t access a value that was passed as an in=
-out argument, even if the original value is available in the current scope=
. Accessing the original is a simultaneous access of the value, which viola=
tes Swift=E2=80=99s memory exclusivity guarantee. For the same reason, you =
can=E2=80=99t pass the same value to multiple in-out parameters.</p>
<p>For more information about memory safety and memory exclusivity, see <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/MemorySafety.html"><span class=3D"doc">Memory Safety</span></a>.<=
/p>
<p>A closure or nested function that captures an in-out parameter must be n=
onescaping. If you need to capture an in-out parameter without mutating it =
or to observe changes made by other code, use a capture list to explicitly =
capture the parameter immutably.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunction</span>(<span class=3D"nv">a</span=
>: <span class=3D"k">inout</span> <span class=3D"nc">Int</span>) -&gt; () -=
&gt; <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">return</span> { [<span class=3D"nv">a</span>=
] <span class=3D"k">in</span> <span class=3D"k">return</span> <span class=
=3D"nv">a</span> + <span class=3D"m">1</span> }
</li><li>}
</li></ol></div></div></div>
<p>If you need to capture and mutate an in-out parameter, use an explicit l=
ocal copy, such as in multithreaded code that ensures all mutation has fini=
shed before the function returns.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">multithreadedFunction</span>(<span class=3D"nv=
">queue</span>: <span class=3D"nc">DispatchQueue</span>, <span class=3D"nv"=
>x</span>: <span class=3D"k">inout</span> <span class=3D"nc">Int</span>) {
</li><li>    <span class=3D"c">// Make a local copy and manually copy it ba=
ck.</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">localX</span> =
=3D <span class=3D"nv">x</span>
</li><li>    <span class=3D"k">defer</span> { <span class=3D"nv">x</span> =
=3D <span class=3D"nv">localX</span> }
</li><li>
</li><li>    <span class=3D"c">// Operate on localX asynchronously, then wa=
it before returning.</span>
</li><li>    <span class=3D"nv">queue</span>.<span class=3D"nv">async</span=
> { <span class=3D"nv">someMutatingOperation</span>(&amp;<span class=3D"nv"=
>localX</span>) }
</li><li>    <span class=3D"nv">queue</span>.<span class=3D"nv">sync</span>=
 {}
</li><li>}
</li></ol></div></div></div>
<p>For more discussion and examples of in-out parameters, see <a class=3D"r=
eference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/=
Functions.html#ID173"><span class=3D"std std-ref">In-Out Parameters</span><=
/a>.</p>
</div>
<div class=3D"section" id=3D"ID472">
<h3>Special Kinds of Parameters<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID472" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>Parameters can be ignored, take a variable number of values, and provide=
 default values using the following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">_</span> : <span class=3D"gi">parameter type</span>
</li><li><span class=3D"gi">parameter name</span>: <span class=3D"gi">param=
eter type</span>...
</li><li><span class=3D"gi">parameter name</span>: <span class=3D"gi">param=
eter type</span> =3D <span class=3D"gi">default argument value</span>
</li></ol></div></div></div>
<p>An underscore (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">_</span></code>) parameter is explicitly ignored and can=E2=80=99t=
 be accessed within the body of the function.</p>
<p>A parameter with a base type name followed immediately by three dots (<c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">...</span></=
code>) is understood as a variadic parameter. A function can have at most o=
ne variadic parameter. A variadic parameter is treated as an array that con=
tains elements of the base type name. For example, the variadic parameter <=
code class=3D"docutils literal notranslate"><span class=3D"pre">Int...</spa=
n></code> is treated as <code class=3D"docutils literal notranslate"><span =
class=3D"pre">[Int]</span></code>. For an example that uses a variadic para=
meter, see <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/Functions.html#ID171"><span class=3D"std std-ref">V=
ariadic Parameters</span></a>.</p>
<p>A parameter with an equals sign (<code class=3D"docutils literal notrans=
late"><span class=3D"pre">=3D</span></code>) and an expression after its ty=
pe is understood to have a default value of the given expression. The given=
 expression is evaluated when the function is called. If the parameter is o=
mitted when calling the function, the default value is used instead.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">f</span>(<span class=3D"nv">x</span>: <span cl=
ass=3D"nc">Int</span> =3D <span class=3D"m">42</span>) -&gt; <span class=3D=
"nc">Int</span> { <span class=3D"k">return</span> <span class=3D"nv">x</spa=
n> }
</li><li><span class=3D"nv">f</span>()       <span class=3D"c">// Valid, us=
es default value</span>
</li><li><span class=3D"nv">f</span>(<span class=3D"nv">x</span>: <span cla=
ss=3D"m">7</span>)   <span class=3D"c">// Valid, uses the value provided</s=
pan>
</li><li><span class=3D"nv">f</span>(<span class=3D"m">7</span>)      <span=
 class=3D"c">// Invalid, missing argument label</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID473">
<h3>Special Kinds of Methods<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/ReferenceManual/Declarations.html#ID473" title=3D"Permal=
ink to this headline">=C2=B6</a></h3>
<p>Methods on an enumeration or a structure that modify <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">self</span></code> must be ma=
rked with the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">mutating</span></code> declaration modifier.</p>
<p>Methods that override a superclass method must be marked with the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">override</span><=
/code> declaration modifier. It=E2=80=99s a compile-time error to override =
a method without the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">override</span></code> modifier or to use the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">override</span></code> modif=
ier on a method that doesn=E2=80=99t override a superclass method.</p>
<p>Methods associated with a type rather than an instance of a type must be=
 marked with the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">static</span></code> declaration modifier for enumerations and str=
uctures, or with either the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">static</span></code> or <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">class</span></code> declaration modifier fo=
r classes. A class type method marked with the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">class</span></code> declaration modifi=
er can be overridden by a subclass implementation; a class type method mark=
ed with <code class=3D"docutils literal notranslate"><span class=3D"pre">cl=
ass</span> <span class=3D"pre">final</span></code> or <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">static</span></code> can=E2=80=
=99t be overridden.</p>
</div>
<div class=3D"section" id=3D"ID530">
<h3>Throwing Functions and Methods<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#ID530" title=3D"=
Permalink to this headline">=C2=B6</a></h3>
<p>Functions and methods that can throw an error must be marked with the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">throws</span=
></code> keyword. These functions and methods are known as <em>throwing fun=
ctions</em> and <em>throwing methods</em>. They have the following form:</p=
>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">func</span> <span class=3D"gi">function name</span>(<span clas=
s=3D"gi">parameters</span>) <span class=3D"k">throws</span> -&gt; <span cla=
ss=3D"gi">return type</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>Calls to a throwing function or method must be wrapped in a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">try</span></code> or =
<code class=3D"docutils literal notranslate"><span class=3D"pre">try!</span=
></code> expression (that is, in the scope of a <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">try</span></code> or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">try!</span></code> operato=
r).</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
ows</span></code> keyword is part of a function=E2=80=99s type, and nonthro=
wing functions are subtypes of throwing functions. As a result, you can use=
 a nonthrowing function in the same places as a throwing one.</p>
<p>You can=E2=80=99t overload a function based only on whether the function=
 can throw an error. That said, you can overload a function based on whethe=
r a function <em>parameter</em> can throw an error.</p>
<p>A throwing method can=E2=80=99t override a nonthrowing method, and a thr=
owing method can=E2=80=99t satisfy a protocol requirement for a nonthrowing=
 method. That said, a nonthrowing method can override a throwing method, an=
d a nonthrowing method can satisfy a protocol requirement for a throwing me=
thod.</p>
</div>
<div class=3D"section" id=3D"ID531">
<h3>Rethrowing Functions and Methods<a class=3D"headerlink" href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID531" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>A function or method can be declared with the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">rethrows</span></code> keyword to in=
dicate that it throws an error only if one of its function parameters throw=
s an error. These functions and methods are known as <em>rethrowing functio=
ns</em> and <em>rethrowing methods</em>. Rethrowing functions and methods m=
ust have at least one throwing function parameter.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">someFunction</span>(<span class=3D"nv">callbac=
k</span>: () <span class=3D"k">throws</span> -&gt; <span class=3D"nv">Void<=
/span>) <span class=3D"k">rethrows</span> {
</li><li>    <span class=3D"k">try</span> <span class=3D"nv">callback</span=
>()
</li><li>}
</li></ol></div></div></div>
<p>A rethrowing function or method can contain a <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">throw</span></code> statement only i=
nside a <code class=3D"docutils literal notranslate"><span class=3D"pre">ca=
tch</span></code> clause. This lets you call the throwing function inside a=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">do</span>=
</code>-<code class=3D"docutils literal notranslate"><span class=3D"pre">ca=
tch</span></code> block and handle errors in the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">catch</span></code> clause by throwi=
ng a different error. In addition, the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">catch</span></code> clause must handle only er=
rors thrown by one of the rethrowing function=E2=80=99s throwing parameters=
. For example, the following is invalid because the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">catch</span></code> clause would =
handle the error thrown by <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">alwaysThrows()</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">alwaysThrows</span>() <span class=3D"k">throws=
</span> {
</li><li>    <span class=3D"k">throw</span> <span class=3D"nv">SomeError</s=
pan>.<span class=3D"nv">error</span>
</li><li>}
</li><li><span class=3D"k">func</span> <span class=3D"nv">someFunction</spa=
n>(<span class=3D"nv">callback</span>: () <span class=3D"k">throws</span> -=
&gt; <span class=3D"nv">Void</span>) <span class=3D"k">rethrows</span> {
</li><li>    <span class=3D"k">do</span> {
</li><li>        <span class=3D"k">try</span> <span class=3D"nv">callback</=
span>()
</li><li>        <span class=3D"k">try</span> <span class=3D"nv">alwaysThro=
ws</span>()  <span class=3D"c">// Invalid, alwaysThrows() isn't a throwing =
parameter</span>
</li><li>    } <span class=3D"k">catch</span> {
</li><li>        <span class=3D"k">throw</span> <span class=3D"nv">AnotherE=
rror</span>.<span class=3D"nv">error</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>A throwing method can=E2=80=99t override a rethrowing method, and a thro=
wing method can=E2=80=99t satisfy a protocol requirement for a rethrowing m=
ethod. That said, a rethrowing method can override a throwing method, and a=
 rethrowing method can satisfy a protocol requirement for a throwing method=
.</p>
</div>
<div class=3D"section" id=3D"ID551">
<h3>Functions that Never Return<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID551" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>Swift defines a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Never</span></code> type, which indicates that a function or metho=
d doesn=E2=80=99t return to its caller. Functions and methods with the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Never</span></=
code> return type are called <em>nonreturning</em>. Nonreturning functions =
and methods either cause an irrecoverable error or begin a sequence of work=
 that continues indefinitely. This means that code that would otherwise run=
 immediately after the call is never executed. Throwing and rethrowing func=
tions can transfer program control to an appropriate <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">catch</span></code> block, even =
when they are nonreturning.</p>
<p>A nonreturning function or method can be called to conclude the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">else</span></code>=
 clause of a guard statement, as discussed in <a class=3D"reference interna=
l" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.htm=
l#ID524"><span class=3D"std std-ref">Guard Statement</span></a>.</p>
<p>You can override a nonreturning method, but the new method must preserve=
 its return type and nonreturning behavior.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a function declaration</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_function-declarat=
ion"></a>function-declaration</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#grammar_function-head">function-he=
ad</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#grammar_function-name=
">function-name</a></span>  <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/GenericParametersAndArgume=
nts.html#grammar_generic-parameter-clause">generic-parameter-clause</a></sp=
an> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_function-=
signature">function-signature</a></span>  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParam=
etersAndArguments.html#grammar_generic-where-clause">generic-where-clause</=
a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_fun=
ction-body">function-body</a></span> <sub>opt</sub></p></div><div class=3D"=
syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_function-head"></a>function-head</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attributes">=
attributes</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html=
#grammar_declaration-modifiers">declaration-modifiers</a></span> <sub>opt</=
sub> <code>func</code></p><p class=3D"syntax-def"><span class=3D"syntax-def=
-name"><a id=3D"grammar_function-name"></a>function-name</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gr=
ammar_identifier">identifier</a></span>  |  <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStr=
ucture.html#grammar_operator">operator</a></span> </p></div><div class=3D"s=
yntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_function-signature"></a>function-signature</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_p=
arameter-clause">parameter-clause</a></span>  <code>throws</code><sub>opt</=
sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Declarations.html#grammar_function-result">functi=
on-result</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_function-signature_1031"></a>function=
-signature</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Declarations.html#grammar_parameter-clause">parameter-clause</a></span>=
  <code>rethrows</code> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_func=
tion-result">function-result</a></span> <sub>opt</sub></p><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_function-result"></=
a>function-result</span><span class=3D"arrow"> =E2=86=92 </span> <code>-&gt=
;</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Attributes.html#grammar_attributes">attribute=
s</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_type">t=
ype</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_function-body"></a>function-body</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_code-b=
lock">code-block</a></span> </p></div><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_parameter-=
clause"></a>parameter-clause</span><span class=3D"arrow"> =E2=86=92 </span>=
 <code>(</code> <code>)</code> |  <code>(</code> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_parameter-list">parameter-list</a></span>  <code>)</co=
de></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_parameter-list"></a>parameter-list</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_parameter">param=
eter</a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_paramete=
r">parameter</a></span>  <code>,</code> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_parameter-list">parameter-list</a></span> </p><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_parameter"></a>para=
meter</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntact=
ic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/D=
eclarations.html#grammar_external-parameter-name">external-parameter-name</=
a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_loc=
al-parameter-name">local-parameter-name</a></span>  <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Ty=
pes.html#grammar_type-annotation">type-annotation</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_default-argument-clause">default-argume=
nt-clause</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_parameter_1032"></a>parameter</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_external-parameter-name">external-parameter-name</a></span> <su=
b>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_local-parameter-=
name">local-parameter-name</a></span>  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#gram=
mar_type-annotation">type-annotation</a></span> </p><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_parameter_1033"></a>param=
eter</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/De=
clarations.html#grammar_external-parameter-name">external-parameter-name</a=
></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_loca=
l-parameter-name">local-parameter-name</a></span>  <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Typ=
es.html#grammar_type-annotation">type-annotation</a></span>  <code>...</cod=
e></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gram=
mar_external-parameter-name"></a>external-parameter-name</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gr=
ammar_identifier">identifier</a></span> </p><p class=3D"syntax-def"><span c=
lass=3D"syntax-def-name"><a id=3D"grammar_local-parameter-name"></a>local-p=
arameter-name</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/LexicalStructure.html#grammar_identifier">identifier</a></span> </p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_de=
fault-argument-clause"></a>default-argument-clause</span><span class=3D"arr=
ow"> =E2=86=92 </span> <code>=3D</code> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expressions.ht=
ml#grammar_expression">expression</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID364">
<h2>Enumeration Declaration<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#ID364" title=3D"Permali=
nk to this headline">=C2=B6</a></h2>
<p>An <em>enumeration declaration</em> introduces a named enumeration type =
into your program.</p>
<p>Enumeration declarations have two basic forms and are declared using the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">enum</spa=
n></code> keyword. The body of an enumeration declared using either form co=
ntains zero or more values=E2=80=94called <em>enumeration cases</em>=E2=80=
=94and any number of declarations, including computed properties, instance =
methods, type methods, initializers, type aliases, and even other enumerati=
on, structure, and class declarations. Enumeration declarations can=E2=80=
=99t contain deinitializer or protocol declarations.</p>
<p>Enumeration types can adopt any number of protocols, but can=E2=80=99t i=
nherit from classes, structures, or other enumerations.</p>
<p>Unlike classes and structures, enumeration types do not have an implicit=
ly provided default initializer; all initializers must be declared explicit=
ly. Initializers can delegate to other initializers in the enumeration, but=
 the initialization process is complete only after an initializer assigns o=
ne of the enumeration cases to <code class=3D"docutils literal notranslate"=
><span class=3D"pre">self</span></code>.</p>
<p>Like structures but unlike classes, enumerations are value types; instan=
ces of an enumeration are copied when assigned to variables or constants, o=
r when passed as arguments to a function call. For information about value =
types, see <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/ClassesAndStructures.html#ID88"><span class=3D"std =
std-ref">Structures and Enumerations Are Value Types</span></a>.</p>
<p>You can extend the behavior of an enumeration type with an extension dec=
laration, as discussed in <a class=3D"reference internal" href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#ID378"><span cla=
ss=3D"std std-ref">Extension Declaration</span></a>.</p>
<div class=3D"section" id=3D"ID365">
<h3>Enumerations with Cases of Any Type<a class=3D"headerlink" href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID365" titl=
e=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The following form declares an enumeration type that contains enumeratio=
n cases of any type:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">enum</span> <span class=3D"gi">enumeration name</span>: <span =
class=3D"gi">adopted protocols</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"gi">enumeration c=
ase 1</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"gi">enumeration c=
ase 2</span>(<span class=3D"gi">associated value types</span>)
</li><li>}
</li></ol></div></div></div>
<p>Enumerations declared in this form are sometimes called <em>discriminate=
d unions</em> in other programming languages.</p>
<p>In this form, each case block consists of the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">case</span></code> keyword followed =
by one or more enumeration cases, separated by commas. The name of each cas=
e must be unique. Each case can also specify that it stores values of a giv=
en type. These types are specified in the <em>associated value types</em> t=
uple, immediately following the name of the case.</p>
<p>Enumeration cases that store associated values can be used as functions =
that create instances of the enumeration with the specified associated valu=
es. And just like functions, you can get a reference to an enumeration case=
 and apply it later in your code.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Number</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">integer</span=
>(<span class=3D"nv">Int</span>)
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">real</span>(<=
span class=3D"nv">Double</span>)
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">f</span> =3D <span=
 class=3D"nv">Number</span>.<span class=3D"nv">integer</span>
</li><li><span class=3D"c">// f is a function of type (Int) -&gt; Number</s=
pan>
</li><li>
</li><li><span class=3D"c">// Apply f to create an array of Number instance=
s with integer values</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">evenInts</span>: [=
<span class=3D"nc">Number</span>] =3D [<span class=3D"m">0</span>, <span cl=
ass=3D"m">2</span>, <span class=3D"m">4</span>, <span class=3D"m">6</span>]=
.<span class=3D"nv">map</span>(<span class=3D"nv">f</span>)
</li></ol></div></div></div>
<p>For more information and to see examples of cases with associated value =
types, see <a class=3D"reference internal" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/Enumerations.html#ID148"><span class=3D"std std-ref=
">Associated Values</span></a>.</p>
<div class=3D"section" id=3D"ID537">
<h4>Enumerations with Indirection<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#ID537" title=3D"P=
ermalink to this headline">=C2=B6</a></h4>
<p>Enumerations can have a recursive structure, that is, they can have case=
s with associated values that are instances of the enumeration type itself.=
 However, instances of enumeration types have value semantics, which means =
they have a fixed layout in memory. To support recursion, the compiler must=
 insert a layer of indirection.</p>
<p>To enable indirection for a particular enumeration case, mark it with th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">indirect=
</span></code> declaration modifier. An indirect case must have an associat=
ed value.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">Tree</span>&lt;<span class=3D"nv">T</span>&gt;=
 {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">empty</span>
</li><li>    <span class=3D"k">indirect</span> <span class=3D"k">case</span=
> <span class=3D"nv">node</span>(<span class=3D"nv">value</span>: <span cla=
ss=3D"nv">T</span>, <span class=3D"nv">left</span>: <span class=3D"nv">Tree=
</span>, <span class=3D"nv">right</span>: <span class=3D"nv">Tree</span>)
</li><li>}
</li></ol></div></div></div>
<p>To enable indirection for all the cases of an enumeration that have an a=
ssociated value, mark the entire enumeration with the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">indirect</span></code> modifier=
=E2=80=94this is convenient when the enumeration contains many cases that w=
ould each need to be marked with the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">indirect</span></code> modifier.</p>
<p>An enumeration that is marked with the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">indirect</span></code> modifier can contain=
 a mixture of cases that have associated values and cases those that don=E2=
=80=99t. That said, it can=E2=80=99t contain any cases that are also marked=
 with the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
indirect</span></code> modifier.</p>
</div>
</div>
<div class=3D"section" id=3D"ID366">
<h3>Enumerations with Cases of a Raw-Value Type<a class=3D"headerlink" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID3=
66" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The following form declares an enumeration type that contains enumeratio=
n cases of the same basic type:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">enum</span> <span class=3D"gi">enumeration name</span>: <span =
class=3D"gi">raw-value type</span>, <span class=3D"gi">adopted protocols</s=
pan> {
</li><li>    <span class=3D"k">case</span> <span class=3D"gi">enumeration c=
ase 1</span> =3D <span class=3D"gi">raw value 1</span>
</li><li>    <span class=3D"k">case</span> <span class=3D"gi">enumeration c=
ase 2</span> =3D <span class=3D"gi">raw value 2</span>
</li><li>}
</li></ol></div></div></div>
<p>In this form, each case block consists of the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">case</span></code> keyword, followed=
 by one or more enumeration cases, separated by commas. Unlike the cases in=
 the first form, each case has an underlying value, called a <em>raw value<=
/em>, of the same basic type. The type of these values is specified in the =
<em>raw-value type</em> and must represent an integer, floating-point numbe=
r, string, or single character. In particular, the <em>raw-value type</em> =
must conform to the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Equatable</span></code> protocol and one of the following protoco=
ls: <code class=3D"docutils literal notranslate"><span class=3D"pre">Expres=
sibleByIntegerLiteral</span></code> for integer literals, <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">ExpressibleByFloatLiteral</=
span></code> for floating-point literals, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">ExpressibleByStringLiteral</span></code> fo=
r string literals that contain any number of characters, and <code class=3D=
"docutils literal notranslate"><span class=3D"pre">ExpressibleByUnicodeScal=
arLiteral</span></code> or <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">ExpressibleByExtendedGraphemeClusterLiteral</span></code> =
for string literals that contain only a single character. Each case must ha=
ve a unique name and be assigned a unique raw value.</p>
<p>If the raw-value type is specified as <code class=3D"docutils literal no=
translate"><span class=3D"pre">Int</span></code> and you don=E2=80=99t assi=
gn a value to the cases explicitly, they are implicitly assigned the values=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">0</span><=
/code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">1<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">2</span></code>, and so on. Each unassigned case of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code> is =
implicitly assigned a raw value that is automatically incremented from the =
raw value of the previous case.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">ExampleEnum</span>: <span class=3D"nc">Int</sp=
an> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">a</span>, <sp=
an class=3D"nv">b</span>, <span class=3D"nv">c</span> =3D <span class=3D"m"=
>5</span>, <span class=3D"nv">d</span>
</li><li>}
</li></ol></div></div></div>
<p>In the above example, the raw value of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">ExampleEnum.a</span></code> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">0</span></code> and t=
he value of <code class=3D"docutils literal notranslate"><span class=3D"pre=
">ExampleEnum.b</span></code> is <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">1</span></code>. And because the value of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">ExampleEnum.c</span>=
</code> is explicitly set to <code class=3D"docutils literal notranslate"><=
span class=3D"pre">5</span></code>, the value of <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">ExampleEnum.d</span></code> is autom=
atically incremented from <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">5</span></code> and is therefore <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">6</span></code>.</p>
<p>If the raw-value type is specified as <code class=3D"docutils literal no=
translate"><span class=3D"pre">String</span></code> and you don=E2=80=99t a=
ssign values to the cases explicitly, each unassigned case is implicitly as=
signed a string with the same text as the name of that case.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">GamePlayMode</span>: <span class=3D"nc">String=
</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">cooperative</=
span>, <span class=3D"nv">individual</span>, <span class=3D"nv">competitive=
</span>
</li><li>}
</li></ol></div></div></div>
<p>In the above example, the raw value of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">GamePlayMode.cooperative</span></code> is <=
code class=3D"docutils literal notranslate"><span class=3D"pre">"cooperativ=
e"</span></code>, the raw value of <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">GamePlayMode.individual</span></code> is <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">"individual"</span>=
</code>, and the raw value of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">GamePlayMode.competitive</span></code> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">"competitive"</span><=
/code>.</p>
<p>Enumerations that have cases of a raw-value type implicitly conform to t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">RawRepr=
esentable</span></code> protocol, defined in the Swift standard library. As=
 a result, they have a <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">rawValue</span></code> property and a failable initializer wit=
h the signature <code class=3D"docutils literal notranslate"><span class=3D=
"pre">init?(rawValue:</span> <span class=3D"pre">RawValue)</span></code>. Y=
ou can use the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">rawValue</span></code> property to access the raw value of an enumerat=
ion case, as in <code class=3D"docutils literal notranslate"><span class=3D=
"pre">ExampleEnum.b.rawValue</span></code>. You can also use a raw value to=
 find a corresponding case, if there is one, by calling the enumeration=E2=
=80=99s failable initializer, as in <code class=3D"docutils literal notrans=
late"><span class=3D"pre">ExampleEnum(rawValue:</span> <span class=3D"pre">=
5)</span></code>, which returns an optional case. For more information and =
to see examples of cases with raw-value types, see <a class=3D"reference in=
ternal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Enumeration=
s.html#ID149"><span class=3D"std std-ref">Raw Values</span></a>.</p>
</div>
<div class=3D"section" id=3D"ID474">
<h3>Accessing Enumeration Cases<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID474" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>To reference the case of an enumeration type, use dot (<code class=3D"do=
cutils literal notranslate"><span class=3D"pre">.</span></code>) syntax, as=
 in <code class=3D"docutils literal notranslate"><span class=3D"pre">Enumer=
ationType.enumerationCase</span></code>. When the enumeration type can be i=
nferred from context, you can omit it (the dot is still required), as descr=
ibed in <a class=3D"reference internal" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/Enumerations.html#ID146"><span class=3D"std std-ref">E=
numeration Syntax</span></a> and <a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID394"><sp=
an class=3D"std std-ref">Implicit Member Expression</span></a>.</p>
<p>To check the values of enumeration cases, use a <code class=3D"docutils =
literal notranslate"><span class=3D"pre">switch</span></code> statement, as=
 shown in <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/Enumerations.html#ID147"><span class=3D"std std-ref"=
>Matching Enumeration Values with a Switch Statement</span></a>. The enumer=
ation type is pattern-matched against the enumeration case patterns in the =
case blocks of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">switch</span></code> statement, as described in <a class=3D"refere=
nce internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Pat=
terns.html#ID424"><span class=3D"std std-ref">Enumeration Case Pattern</spa=
n></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an enumeration declaration</p><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_enum-declarat=
ion"></a>enum-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></span=
> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_access-leve=
l-modifier">access-level-modifier</a></span> <sub>opt</sub> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_union-style-enum">union-style-enum</a></spa=
n> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_enum-declaration_1034"></a>enum-declaration</span><span class=3D"arrow=
"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attribute=
s">attributes</a></span> <sub>opt</sub> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_access-level-modifier">access-level-modifier</a></span> <sub>op=
t</sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Declarations.html#grammar_raw-value-style-enum=
">raw-value-style-enum</a></span> </p></div><div class=3D"syntax-group"><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_union=
-style-enum"></a>union-style-enum</span><span class=3D"arrow"> =E2=86=92 </=
span> <code>indirect</code><sub>opt</sub> <code>enum</code> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_enum-name">enum-name</a></span>  <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/GenericParametersAndArguments.html#grammar_generic-parameter-cla=
use">generic-parameter-clause</a></span> <sub>opt</sub> <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/Types.html#grammar_type-inheritance-clause">type-inheritance-clause</a></=
span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.htm=
l#grammar_generic-where-clause">generic-where-clause</a></span> <sub>opt</s=
ub> <code>{</code> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_union-sty=
le-enum-members">union-style-enum-members</a></span> <sub>opt</sub> <code>}=
</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_union-style-enum-members"></a>union-style-enum-members</span><span=
 class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_union-style-enum-member">union-style-enum-member</a></span>  <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_union-style-enum-members">union-st=
yle-enum-members</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span=
 class=3D"syntax-def-name"><a id=3D"grammar_union-style-enum-member"></a>un=
ion-style-enum-member</span><span class=3D"arrow"> =E2=86=92 </span> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_declaration">declaration</a></span=
>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_union-style-enum-case-=
clause">union-style-enum-case-clause</a></span>  |  <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/St=
atements.html#grammar_compiler-control-statement">compiler-control-statemen=
t</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_union-style-enum-case-clause"></a>union-style-enum-case-clau=
se</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attr=
ibutes.html#grammar_attributes">attributes</a></span> <sub>opt</sub> <code>=
indirect</code><sub>opt</sub> <code>case</code> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declar=
ations.html#grammar_union-style-enum-case-list">union-style-enum-case-list<=
/a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a i=
d=3D"grammar_union-style-enum-case-list"></a>union-style-enum-case-list</sp=
an><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declaratio=
ns.html#grammar_union-style-enum-case">union-style-enum-case</a></span>  | =
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Declarations.html#grammar_union-style-enum-case">unio=
n-style-enum-case</a></span>  <code>,</code> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarati=
ons.html#grammar_union-style-enum-case-list">union-style-enum-case-list</a>=
</span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_union-style-enum-case"></a>union-style-enum-case</span><span cl=
ass=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_enum-case-name">enum-case-name</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.=
html#grammar_tuple-type">tuple-type</a></span> <sub>opt</sub></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_enum-name"=
></a>enum-name</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_identifier">identifier</a></span> <=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_enum-case-name"></a>enum-case-name</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/LexicalStructure.html#grammar_identifier">iden=
tifier</a></span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_raw-value-style-enum"=
></a>raw-value-style-enum</span><span class=3D"arrow"> =E2=86=92 </span> <c=
ode>enum</code> <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Declarations.html#grammar_enum-name">e=
num-name</a></span>  <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.htm=
l#grammar_generic-parameter-clause">generic-parameter-clause</a></span> <su=
b>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Types.html#grammar_type-inheritance-clause=
">type-inheritance-clause</a></span>  <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParameter=
sAndArguments.html#grammar_generic-where-clause">generic-where-clause</a></=
span> <sub>opt</sub> <code>{</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_raw-value-style-enum-members">raw-value-style-enum-members</a></spa=
n>  <code>}</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-nam=
e"><a id=3D"grammar_raw-value-style-enum-members"></a>raw-value-style-enum-=
members</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Declarations.html#grammar_raw-value-style-enum-member">raw-value-style-enu=
m-member</a></span>  <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_raw-val=
ue-style-enum-members">raw-value-style-enum-members</a></span> <sub>opt</su=
b></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gram=
mar_raw-value-style-enum-member"></a>raw-value-style-enum-member</span><spa=
n class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html=
#grammar_declaration">declaration</a></span>  |  <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_raw-value-style-enum-case-clause">raw-value-style-enum=
-case-clause</a></span>  |  <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_co=
mpiler-control-statement">compiler-control-statement</a></span> </p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_raw-value=
-style-enum-case-clause"></a>raw-value-style-enum-case-clause</span><span c=
lass=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hre=
f=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#gram=
mar_attributes">attributes</a></span> <sub>opt</sub> <code>case</code> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Declarations.html#grammar_raw-value-style-enum-case-list">=
raw-value-style-enum-case-list</a></span> </p><p class=3D"syntax-def"><span=
 class=3D"syntax-def-name"><a id=3D"grammar_raw-value-style-enum-case-list"=
></a>raw-value-style-enum-case-list</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Declarations.html#grammar_raw-value-style-enum=
-case">raw-value-style-enum-case</a></span>  |  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declar=
ations.html#grammar_raw-value-style-enum-case">raw-value-style-enum-case</a=
></span>  <code>,</code> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_raw=
-value-style-enum-case-list">raw-value-style-enum-case-list</a></span> </p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_ra=
w-value-style-enum-case"></a>raw-value-style-enum-case</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_e=
num-case-name">enum-case-name</a></span>  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations=
.html#grammar_raw-value-assignment">raw-value-assignment</a></span> <sub>op=
t</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_raw-value-assignment"></a>raw-value-assignment</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>=3D</code> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declara=
tions.html#grammar_raw-value-literal">raw-value-literal</a></span> </p><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_raw-va=
lue-literal"></a>raw-value-literal</span><span class=3D"arrow"> =E2=86=92 <=
/span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal">=
numeric-literal</a></span>  |  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html=
#grammar_static-string-literal">static-string-literal</a></span>  |  <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/LexicalStructure.html#grammar_boolean-literal">boolean-liter=
al</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID367">
<h2>Structure Declaration<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID367" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p>A <em>structure declaration</em> introduces a named structure type into =
your program. Structure declarations are declared using the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">struct</span></code> keyw=
ord and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">struct</span> <span class=3D"gi">structure name</span>: <span =
class=3D"gi">adopted protocols</span> {
</li><li>    <span class=3D"gi">declarations</span>
</li><li>}
</li></ol></div></div></div>
<p>The body of a structure contains zero or more <em>declarations</em>. The=
se <em>declarations</em> can include both stored and computed properties, t=
ype properties, instance methods, type methods, initializers, subscripts, t=
ype aliases, and even other structure, class, and enumeration declarations.=
 Structure declarations can=E2=80=99t contain deinitializer or protocol dec=
larations. For a discussion and several examples of structures that include=
 various kinds of declarations, see <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html"=
><span class=3D"doc">Structures and Classes</span></a>.</p>
<p>Structure types can adopt any number of protocols, but can=E2=80=99t inh=
erit from classes, enumerations, or other structures.</p>
<p>There are three ways to create an instance of a previously declared stru=
cture:</p>
<ul class=3D"simple">
<li>Call one of the initializers declared within the structure, as describe=
d in <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/Initialization.html#ID205"><span class=3D"std std-ref">In=
itializers</span></a>.</li>
<li>If no initializers are declared, call the structure=E2=80=99s memberwis=
e initializer, as described in <a class=3D"reference internal" href=3D"http=
s://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID214"><spa=
n class=3D"std std-ref">Memberwise Initializers for Structure Types</span><=
/a>.</li>
<li>If no initializers are declared, and all properties of the structure de=
claration were given initial values, call the structure=E2=80=99s default i=
nitializer, as described in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID213"><span c=
lass=3D"std std-ref">Default Initializers</span></a>.</li>
</ul>
<p>The process of initializing a structure=E2=80=99s declared properties is=
 described in <a class=3D"reference internal" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Initialization.html"><span class=3D"doc">Initial=
ization</span></a>.</p>
<p>Properties of a structure instance can be accessed using dot (<code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">.</span></code>) syn=
tax, as described in <a class=3D"reference internal" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID86"><span cla=
ss=3D"std std-ref">Accessing Properties</span></a>.</p>
<p>Structures are value types; instances of a structure are copied when ass=
igned to variables or constants, or when passed as arguments to a function =
call. For information about value types, see <a class=3D"reference internal=
" href=3D"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructu=
res.html#ID88"><span class=3D"std std-ref">Structures and Enumerations Are =
Value Types</span></a>.</p>
<p>You can extend the behavior of a structure type with an extension declar=
ation, as discussed in <a class=3D"reference internal" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID378"><span class=
=3D"std std-ref">Extension Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a structure declaration</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_struct-declarati=
on"></a>struct-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></spa=
n> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_access-lev=
el-modifier">access-level-modifier</a></span> <sub>opt</sub> <code>struct</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_struct-name">struct-na=
me</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html#gram=
mar_generic-parameter-clause">generic-parameter-clause</a></span> <sub>opt<=
/sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Types.html#grammar_type-inheritance-clause">type=
-inheritance-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericP=
arametersAndArguments.html#grammar_generic-where-clause">generic-where-clau=
se</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"=
https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar=
_struct-body">struct-body</a></span> </p><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_struct-name"></a>struct-name</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructu=
re.html#grammar_identifier">identifier</a></span> </p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_struct-body"></a>struct=
-body</span><span class=3D"arrow"> =E2=86=92 </span> <code>{</code> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Declarations.html#grammar_struct-members">struct-members</a><=
/span> <sub>opt</sub> <code>}</code></p></div><div class=3D"syntax-group"><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_str=
uct-members"></a>struct-members</span><span class=3D"arrow"> =E2=86=92 </sp=
an> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/Declarations.html#grammar_struct-member">struct-me=
mber</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_struct-memb=
ers">struct-members</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_struct-member"></a>struct-me=
mber</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/De=
clarations.html#grammar_declaration">declaration</a></span>  |  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Statements.html#grammar_compiler-control-statement">compiler-cont=
rol-statement</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID368">
<h2>Class Declaration<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Declarations.html#ID368" title=3D"Permalink to =
this headline">=C2=B6</a></h2>
<p>A <em>class declaration</em> introduces a named class type into your pro=
gram. Class declarations are declared using the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">class</span></code> keyword and have =
the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">class</span> <span class=3D"gi">class name</span>: <span class=
=3D"gi">superclass</span>, <span class=3D"gi">adopted protocols</span> {
</li><li>    <span class=3D"gi">declarations</span>
</li><li>}
</li></ol></div></div></div>
<p>The body of a class contains zero or more <em>declarations</em>. These <=
em>declarations</em> can include both stored and computed properties, insta=
nce methods, type methods, initializers, a single deinitializer, subscripts=
, type aliases, and even other class, structure, and enumeration declaratio=
ns. Class declarations can=E2=80=99t contain protocol declarations. For a d=
iscussion and several examples of classes that include various kinds of dec=
larations, see <a class=3D"reference internal" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/ClassesAndStructures.html"><span class=3D"doc">=
Structures and Classes</span></a>.</p>
<p>A class type can inherit from only one parent class, its <em>superclass<=
/em>, but can adopt any number of protocols. The <em>superclass</em> appear=
s first after the <em>class name</em> and colon, followed by any <em>adopte=
d protocols</em>. Generic classes can inherit from other generic and nongen=
eric classes, but a nongeneric class can inherit only from other nongeneric=
 classes. When you write the name of a generic superclass class after the c=
olon, you must include the full name of that generic class, including its g=
eneric parameter clause.</p>
<p>As discussed in <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#ID375"><span class=3D"s=
td std-ref">Initializer Declaration</span></a>, classes can have designated=
 and convenience initializers. The designated initializer of a class must i=
nitialize all of the class=E2=80=99s declared properties and it must do so =
before calling any of its superclass=E2=80=99s designated initializers.</p>
<p>A class can override properties, methods, subscripts, and initializers o=
f its superclass. Overridden properties, methods, subscripts, and designate=
d initializers must be marked with the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">override</span></code> declaration modifier.</=
p>
<p>To require that subclasses implement a superclass=E2=80=99s initializer,=
 mark the superclass=E2=80=99s initializer with the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">required</span></code> declaratio=
n modifier. The subclass=E2=80=99s implementation of that initializer must =
also be marked with the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">required</span></code> declaration modifier.</p>
<p>Although properties and methods declared in the <em>superclass</em> are =
inherited by the current class, designated initializers declared in the <em=
>superclass</em> are only inherited when the subclass meets the conditions =
described in <a class=3D"reference internal" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Initialization.html#ID222"><span class=3D"std std=
-ref">Automatic Initializer Inheritance</span></a>. Swift classes do not in=
herit from a universal base class.</p>
<p>There are two ways to create an instance of a previously declared class:=
</p>
<ul class=3D"simple">
<li>Call one of the initializers declared within the class, as described in=
 <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Initialization.html#ID205"><span class=3D"std std-ref">Initia=
lizers</span></a>.</li>
<li>If no initializers are declared, and all properties of the class declar=
ation were given initial values, call the class=E2=80=99s default initializ=
er, as described in <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Initialization.html#ID213"><span class=3D"=
std std-ref">Default Initializers</span></a>.</li>
</ul>
<p>Access properties of a class instance with dot (<code class=3D"docutils =
literal notranslate"><span class=3D"pre">.</span></code>) syntax, as descri=
bed in <a class=3D"reference internal" href=3D"https://docs.swift.org/swift=
-book/LanguageGuide/ClassesAndStructures.html#ID86"><span class=3D"std std-=
ref">Accessing Properties</span></a>.</p>
<p>Classes are reference types; instances of a class are referred to, rathe=
r than copied, when assigned to variables or constants, or when passed as a=
rguments to a function call. For information about reference types, see <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/ClassesAndStructures.html#ID88"><span class=3D"std std-ref">Struc=
tures and Enumerations Are Value Types</span></a>.</p>
<p>You can extend the behavior of a class type with an extension declaratio=
n, as discussed in <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#ID378"><span class=3D"s=
td std-ref">Extension Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a class declaration</p><div class=3D"syntax-group"><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_class-declaration"><=
/a>class-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Attributes.html#grammar_attributes">attributes</a></span> <su=
b>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_access-level-mod=
ifier">access-level-modifier</a></span> <sub>opt</sub> <code>final</code><s=
ub>opt</sub> <code>class</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_class-name">class-name</a></span>  <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParamet=
ersAndArguments.html#grammar_generic-parameter-clause">generic-parameter-cl=
ause</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_ty=
pe-inheritance-clause">type-inheritance-clause</a></span> <sub>opt</sub> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/GenericParametersAndArguments.html#grammar_generic-where=
-clause">generic-where-clause</a></span> <sub>opt</sub> <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/Declarations.html#grammar_class-body">class-body</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_class-decl=
aration_1035"></a>class-declaration</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Attributes.html#grammar_attributes">attributes=
</a></span> <sub>opt</sub> <code>final</code> <span class=3D"syntactic-cate=
gory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarat=
ions.html#grammar_access-level-modifier">access-level-modifier</a></span> <=
sub>opt</sub> <code>class</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_class-name">class-name</a></span>  <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParamet=
ersAndArguments.html#grammar_generic-parameter-clause">generic-parameter-cl=
ause</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_ty=
pe-inheritance-clause">type-inheritance-clause</a></span> <sub>opt</sub> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/GenericParametersAndArguments.html#grammar_generic-where=
-clause">generic-where-clause</a></span> <sub>opt</sub> <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/Declarations.html#grammar_class-body">class-body</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_class-name=
"></a>class-name</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_identifier">identifier</a></span> <=
/p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar=
_class-body"></a>class-body</span><span class=3D"arrow"> =E2=86=92 </span> =
<code>{</code> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#grammar_class-members=
">class-members</a></span> <sub>opt</sub> <code>}</code></p></div><div clas=
s=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_class-members"></a>class-members</span><span class=3D"arro=
w"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_class-=
member">class-member</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_class-members">class-members</a></span> <sub>opt</sub></p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_class-member">=
</a>class-member</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_declaration">declaration</a></span>  | =
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Statements.html#grammar_compiler-control-statement">c=
ompiler-control-statement</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID369">
<h2>Protocol Declaration<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#ID369" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>A <em>protocol declaration</em> introduces a named protocol type into yo=
ur program. Protocol declarations are declared at global scope using the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">protocol</sp=
an></code> keyword and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">protocol</span> <span class=3D"gi">protocol name</span>: <span=
 class=3D"gi">inherited protocols</span> {
</li><li>    <span class=3D"gi">protocol member declarations</span>
</li><li>}
</li></ol></div></div></div>
<p>The body of a protocol contains zero or more <em>protocol member declara=
tions</em>, which describe the conformance requirements that any type adopt=
ing the protocol must fulfill. In particular, a protocol can declare that c=
onforming types must implement certain properties, methods, initializers, a=
nd subscripts. Protocols can also declare special kinds of type aliases, ca=
lled <em>associated types</em>, that can specify relationships among the va=
rious declarations of the protocol. Protocol declarations can=E2=80=99t con=
tain class, structure, enumeration, or other protocol declarations. The <em=
>protocol member declarations</em> are discussed in detail below.</p>
<p>Protocol types can inherit from any number of other protocols. When a pr=
otocol type inherits from other protocols, the set of requirements from tho=
se other protocols are aggregated, and any type that inherits from the curr=
ent protocol must conform to all those requirements. For an example of how =
to use protocol inheritance, see <a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID280"><span c=
lass=3D"std std-ref">Protocol Inheritance</span></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You can also aggregate the conformance requirements of mu=
ltiple protocols using protocol composition types, as described in <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Types.html#ID454"><span class=3D"std std-ref">Protocol Composition T=
ype</span></a> and <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/Protocols.html#ID282"><span class=3D"std st=
d-ref">Protocol Composition</span></a>.</p>
</div>
<p>You can add protocol conformance to a previously declared type by adopti=
ng the protocol in an extension declaration of that type. In the extension,=
 you must implement all of the adopted protocol=E2=80=99s requirements. If =
the type already implements all of the requirements, you can leave the body=
 of the extension declaration empty.</p>
<p>By default, types that conform to a protocol must implement all properti=
es, methods, and subscripts declared in the protocol. That said, you can ma=
rk these protocol member declarations with the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">optional</span></code> declaration mod=
ifier to specify that their implementation by a conforming type is optional=
. The <code class=3D"docutils literal notranslate"><span class=3D"pre">opti=
onal</span></code> modifier can be applied only to members that are marked =
with the <code class=3D"docutils literal notranslate"><span class=3D"pre">o=
bjc</span></code> attribute, and only to members of protocols that are mark=
ed with the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">objc</span></code> attribute. As a result, only class types can adopt and=
 conform to a protocol that contains optional member requirements. For more=
 information about how to use the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">optional</span></code> declaration modifier and for=
 guidance about how to access optional protocol members=E2=80=94for example=
, when you=E2=80=99re not sure whether a conforming type implements them=E2=
=80=94see <a class=3D"reference internal" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/Protocols.html#ID284"><span class=3D"std std-ref">Op=
tional Protocol Requirements</span></a>.</p>
<p>To restrict the adoption of a protocol to class types only, include the =
<code class=3D"docutils literal notranslate"><span class=3D"pre">AnyObject<=
/span></code> protocol in the <em>inherited protocols</em> list after the c=
olon. For example, the following protocol can be adopted only by class type=
s:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span>: <span class=3D"nc">An=
yObject</span> {
</li><li>    <span class=3D"c">/* Protocol members go here */</span>
</li><li>}
</li></ol></div></div></div>
<p>Any protocol that inherits from a protocol that=E2=80=99s marked with th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">AnyObjec=
t</span></code> requirement can likewise be adopted only by class types.</p=
>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If a protocol is marked with the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">objc</span></code> attribute, the =
<code class=3D"docutils literal notranslate"><span class=3D"pre">AnyObject<=
/span></code> requirement is implicitly applied to that protocol; there=E2=
=80=99s no need to mark the protocol with the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">AnyObject</span></code> requirement exp=
licitly.</p>
</div>
<p>Protocols are named types, and thus they can appear in all the same plac=
es in your code as other named types, as discussed in <a class=3D"reference=
 internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocol=
s.html#ID275"><span class=3D"std std-ref">Protocols as Types</span></a>. Ho=
wever, you can=E2=80=99t construct an instance of a protocol, because proto=
cols do not actually provide the implementations for the requirements they =
specify.</p>
<p>You can use protocols to declare which methods a delegate of a class or =
structure should implement, as described in <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID2=
76"><span class=3D"std std-ref">Delegation</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol declaration</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protocol-declarat=
ion"></a>protocol-declaration</span><span class=3D"arrow"> =E2=86=92 </span=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Attributes.html#grammar_attributes">attributes</a></=
span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_access-=
level-modifier">access-level-modifier</a></span> <sub>opt</sub> <code>proto=
col</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#grammar_protocol-name">pr=
otocol-name</a></span>  <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_type-inheri=
tance-clause">type-inheritance-clause</a></span> <sub>opt</sub> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/GenericParametersAndArguments.html#grammar_generic-where-clause">=
generic-where-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declara=
tions.html#grammar_protocol-body">protocol-body</a></span> </p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protocol-name"=
></a>protocol-name</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/LexicalStructure.html#grammar_identifier">identifier</a></span>=
 </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramm=
ar_protocol-body"></a>protocol-body</span><span class=3D"arrow"> =E2=86=92 =
</span> <code>{</code> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_proto=
col-members">protocol-members</a></span> <sub>opt</sub> <code>}</code></p><=
/div><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_protocol-members"></a>protocol-members</span=
><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations=
.html#grammar_protocol-member">protocol-member</a></span>  <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Declarations.html#grammar_protocol-members">protocol-members</a></span=
> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"=
><a id=3D"grammar_protocol-member"></a>protocol-member</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_p=
rotocol-member-declaration">protocol-member-declaration</a></span>  |  <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Statements.html#grammar_compiler-control-statement">compil=
er-control-statement</a></span> </p></div><div class=3D"syntax-group"><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protoco=
l-member-declaration"></a>protocol-member-declaration</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_pr=
otocol-property-declaration">protocol-property-declaration</a></span> </p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_pro=
tocol-member-declaration_1036"></a>protocol-member-declaration</span><span =
class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#g=
rammar_protocol-method-declaration">protocol-method-declaration</a></span> =
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_protocol-member-declaration_1037"></a>protocol-member-declaration</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_protocol-initializer-declaration">protocol-initializer-declarat=
ion</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_protocol-member-declaration_1038"></a>protocol-member-decl=
aration</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Declarations.html#grammar_protocol-subscript-declaration">protocol-subscri=
pt-declaration</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_protocol-member-declaration_1039"></a>protocol-=
member-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Declarations.html#grammar_protocol-associated-type-declaration"=
>protocol-associated-type-declaration</a></span> </p><p class=3D"syntax-def=
"><span class=3D"syntax-def-name"><a id=3D"grammar_protocol-member-declarat=
ion_1040"></a>protocol-member-declaration</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#grammar_typealias-dec=
laration">typealias-declaration</a></span> </p></div></div><div class=3D"se=
ction" id=3D"ID370">
<h3>Protocol Property Declaration<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#ID370" title=3D"P=
ermalink to this headline">=C2=B6</a></h3>
<p>Protocols declare that conforming types must implement a property by inc=
luding a <em>protocol property declaration</em> in the body of the protocol=
 declaration. Protocol property declarations have a special form of a varia=
ble declaration:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">var</span> <span class=3D"gi">property name</span>: <span clas=
s=3D"gi">type</span> { <span class=3D"k">get</span> <span class=3D"nv">set<=
/span> }
</li></ol></div></div></div>
<p>As with other protocol member declarations, these property declarations =
declare only the getter and setter requirements for types that conform to t=
he protocol. As a result, you don=E2=80=99t implement the getter or setter =
directly in the protocol in which it is declared.</p>
<p>The getter and setter requirements can be satisfied by a conforming type=
 in a variety of ways. If a property declaration includes both the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">get</span></code> =
and <code class=3D"docutils literal notranslate"><span class=3D"pre">set</s=
pan></code> keywords, a conforming type can implement it with a stored vari=
able property or a computed property that is both readable and writeable (t=
hat is, one that implements both a getter and a setter). However, that prop=
erty declaration can=E2=80=99t be implemented as a constant property or a r=
ead-only computed property. If a property declaration includes only the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">get</span></c=
ode> keyword, it can be implemented as any kind of property. For examples o=
f conforming types that implement the property requirements of a protocol, =
see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID269"><span class=3D"std std-ref">Property=
 Requirements</span></a>.</p>
<p>To declare a type property requirement in a protocol declaration, mark t=
he property declaration with the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">static</span></code> keyword. Structures and enumera=
tions that conform to the protocol declare the property with the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">static</span></code>=
 keyword, and classes that conform to the protocol declare the property wit=
h either the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">static</span></code> or <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">class</span></code> keyword. Extensions that add protocol =
conformance to a structure, enumeration, or class use the same keyword as t=
he type they extend uses. Extensions that provide a default implementation =
for a type property requirement use the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">static</span></code> keyword.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID356"><span class=3D"std std-=
ref">Variable Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol property declaration</p><div class=3D"syntax-group"><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protocol=
-property-declaration"></a>protocol-property-declaration</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gramma=
r_variable-declaration-head">variable-declaration-head</a></span>  <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Declarations.html#grammar_variable-name">variable-name</a></sp=
an>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Types.html#grammar_type-annotation">type-annotati=
on</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#grammar_getter-setter=
-keyword-block">getter-setter-keyword-block</a></span> </p></div></div></di=
v>
<div class=3D"section" id=3D"ID371">
<h3>Protocol Method Declaration<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID371" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>Protocols declare that conforming types must implement a method by inclu=
ding a protocol method declaration in the body of the protocol declaration.=
 Protocol method declarations have the same form as function declarations, =
with two exceptions: They don=E2=80=99t include a function body, and you ca=
n=E2=80=99t provide any default parameter values as part of the function de=
claration. For examples of conforming types that implement the method requi=
rements of a protocol, see <a class=3D"reference internal" href=3D"https://=
docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID270"><span class=
=3D"std std-ref">Method Requirements</span></a>.</p>
<p>To declare a class or static method requirement in a protocol declaratio=
n, mark the method declaration with the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">static</span></code> declaration modifier. St=
ructures and enumerations that conform to the protocol declare the method w=
ith the <code class=3D"docutils literal notranslate"><span class=3D"pre">st=
atic</span></code> keyword, and classes that conform to the protocol declar=
e the method with either the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">static</span></code> or <code class=3D"docutils literal =
notranslate"><span class=3D"pre">class</span></code> keyword. Extensions th=
at add protocol conformance to a structure, enumeration, or class use the s=
ame keyword as the type they extend uses. Extensions that provide a default=
 implementation for a type method requirement use the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">static</span></code> keyword.</=
p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID362"><span class=3D"std std-=
ref">Function Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol method declaration</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protocol-m=
ethod-declaration"></a>protocol-method-declaration</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_funct=
ion-head">function-head</a></span>  <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#=
grammar_function-name">function-name</a></span>  <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Gener=
icParametersAndArguments.html#grammar_generic-parameter-clause">generic-par=
ameter-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#grammar_function-signature">function-signature</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/GenericParametersAndArguments.html#grammar_generic-where-clause">=
generic-where-clause</a></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID372">
<h3>Protocol Initializer Declaration<a class=3D"headerlink" href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID372" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Protocols declare that conforming types must implement an initializer by=
 including a protocol initializer declaration in the body of the protocol d=
eclaration. Protocol initializer declarations have the same form as initial=
izer declarations, except they don=E2=80=99t include the initializer=E2=80=
=99s body.</p>
<p>A conforming type can satisfy a nonfailable protocol initializer require=
ment by implementing a nonfailable initializer or an <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">init!</span></code> failable ini=
tializer. A conforming type can satisfy a failable protocol initializer req=
uirement by implementing any kind of initializer.</p>
<p>When a class implements an initializer to satisfy a protocol=E2=80=99s i=
nitializer requirement, the initializer must be marked with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">required</span></code=
> declaration modifier if the class is not already marked with the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">final</span></code=
> declaration modifier.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID375"><span class=3D"std std-=
ref">Initializer Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol initializer declaration</p><div class=3D"syntax-group"><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_proto=
col-initializer-declaration"></a>protocol-initializer-declaration</span><sp=
an class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.htm=
l#grammar_initializer-head">initializer-head</a></span>  <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/GenericParametersAndArguments.html#grammar_generic-parameter-clause">gen=
eric-parameter-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declar=
ations.html#grammar_parameter-clause">parameter-clause</a></span>  <code>th=
rows</code><sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/GenericParametersAndArgument=
s.html#grammar_generic-where-clause">generic-where-clause</a></span> <sub>o=
pt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_protocol-initializer-declaration_1041"></a>protocol-initializer=
-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_initializer-head">initializer-head</a></spa=
n>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/sw=
ift-book/ReferenceManual/GenericParametersAndArguments.html#grammar_generic=
-parameter-clause">generic-parameter-clause</a></span> <sub>opt</sub> <span=
 class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Declarations.html#grammar_parameter-clause">parameter-claus=
e</a></span>  <code>rethrows</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParametersA=
ndArguments.html#grammar_generic-where-clause">generic-where-clause</a></sp=
an> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID373">
<h3>Protocol Subscript Declaration<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#ID373" title=3D"=
Permalink to this headline">=C2=B6</a></h3>
<p>Protocols declare that conforming types must implement a subscript by in=
cluding a protocol subscript declaration in the body of the protocol declar=
ation. Protocol subscript declarations have a special form of a subscript d=
eclaration:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">subscript</span> (<span class=3D"gi">parameters</span>) -&gt; =
<span class=3D"gi">return type</span> { <span class=3D"k">get</span> <span =
class=3D"nv">set</span> }
</li></ol></div></div></div>
<p>Subscript declarations only declare the minimum getter and setter implem=
entation requirements for types that conform to the protocol. If the subscr=
ipt declaration includes both the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">get</span></code> and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">set</span></code> keywords, a conformin=
g type must implement both a getter and a setter clause. If the subscript d=
eclaration includes only the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">get</span></code> keyword, a conforming type must implem=
ent <em>at least</em> a getter clause and optionally can implement a setter=
 clause.</p>
<p>To declare a static subscript requirement in a protocol declaration, mar=
k the subscript declaration with the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">static</span></code> declaration modifier. Struc=
tures and enumerations that conform to the protocol declare the subscript w=
ith the <code class=3D"docutils literal notranslate"><span class=3D"pre">st=
atic</span></code> keyword, and classes that conform to the protocol declar=
e the subscript with either the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">static</span></code> or <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">class</span></code> keyword. Extensions=
 that add protocol conformance to a structure, enumeration, or class use th=
e same keyword as the type they extend uses. Extensions that provide a defa=
ult implementation for a static subscript requirement use the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">static</span></code> =
keyword.</p>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID379"><span class=3D"std std-=
ref">Subscript Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol subscript declaration</p><div class=3D"syntax-group"><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_protoco=
l-subscript-declaration"></a>protocol-subscript-declaration</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_subscript-head">subscript-head</a></span>  <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declar=
ations.html#grammar_subscript-result">subscript-result</a></span>  <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/GenericParametersAndArguments.html#grammar_generic-where-claus=
e">generic-where-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decl=
arations.html#grammar_getter-setter-keyword-block">getter-setter-keyword-bl=
ock</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID374">
<h3>Protocol Associated Type Declaration<a class=3D"headerlink" href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID374" tit=
le=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Protocols declare associated types using the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">associatedtype</span></code> keyword.=
 An associated type provides an alias for a type that is used as part of a =
protocol=E2=80=99s declaration. Associated types are similar to type parame=
ters in generic parameter clauses, but they=E2=80=99re associated with <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Self</span></c=
ode> in the protocol in which they=E2=80=99re declared. In that context, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Self</span><=
/code> refers to the eventual type that conforms to the protocol. For more =
information and examples, see <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189"><span class=
=3D"std std-ref">Associated Types</span></a>.</p>
<p>You use a generic <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">where</span></code> clause in a protocol declaration to add cons=
traints to an associated types inherited from another protocol, without red=
eclaring the associated types. For example, the declarations of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">SubProtocol</span></c=
ode> below are equivalent:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Som=
eType</span>
</li><li>}
</li><li>
</li><li><span class=3D"k">protocol</span> <span class=3D"nv">SubProtocolA<=
/span>: <span class=3D"nc">SomeProtocol</span> {
</li><li>    <span class=3D"c">// This syntax produces a warning.</span>
</li><li>    <span class=3D"k">associatedtype</span> <span class=3D"nv">Som=
eType</span>: <span class=3D"nc">Equatable</span>
</li><li>}
</li><li>
</li><li><span class=3D"c">// This syntax is preferred.</span>
</li><li><span class=3D"k">protocol</span> <span class=3D"nv">SubProtocolB<=
/span>: <span class=3D"nc">SomeProtocol</span> <span class=3D"k">where</spa=
n> <span class=3D"nc">SomeType</span>: <span class=3D"nc">Equatable</span> =
{ }
</li></ol></div></div></div>
<p>See also <a class=3D"reference internal" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#ID361"><span class=3D"std std-=
ref">Type Alias Declaration</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a protocol associated type declaration</p><div class=3D"syntax-group"=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_p=
rotocol-associated-type-declaration"></a>protocol-associated-type-declarati=
on</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attr=
ibutes.html#grammar_attributes">attributes</a></span> <sub>opt</sub> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_access-level-modifier">access-leve=
l-modifier</a></span> <sub>opt</sub> <code>associatedtype</code> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Declarations.html#grammar_typealias-name">typealias-name</a></sp=
an>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Types.html#grammar_type-inheritance-clause">type-=
inheritance-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarati=
ons.html#grammar_typealias-assignment">typealias-assignment</a></span> <sub=
>opt</sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/GenericParametersAndArguments.html#grammar_=
generic-where-clause">generic-where-clause</a></span> <sub>opt</sub></p></d=
iv></div></div>
</div>
<div class=3D"section" id=3D"ID375">
<h2>Initializer Declaration<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#ID375" title=3D"Permali=
nk to this headline">=C2=B6</a></h2>
<p>An <em>initializer declaration</em> introduces an initializer for a clas=
s, structure, or enumeration into your program. Initializer declarations ar=
e declared using the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">init</span></code> keyword and have two basic forms.</p>
<p>Structure, enumeration, and class types can have any number of initializ=
ers, but the rules and associated behavior for class initializers are diffe=
rent. Unlike structures and enumerations, classes have two kinds of initial=
izers: designated initializers and convenience initializers, as described i=
n <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book=
/LanguageGuide/Initialization.html"><span class=3D"doc">Initialization</spa=
n></a>.</p>
<p>The following form declares initializers for structures, enumerations, a=
nd designated initializers of classes:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">init</span>(<span class=3D"gi">parameters</span>) {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>A designated initializer of a class initializes all of the class=E2=80=
=99s properties directly. It can=E2=80=99t call any other initializers of t=
he same class, and if the class has a superclass, it must call one of the s=
uperclass=E2=80=99s designated initializers. If the class inherits any prop=
erties from its superclass, one of the superclass=E2=80=99s designated init=
ializers must be called before any of these properties can be set or modifi=
ed in the current class.</p>
<p>Designated initializers can be declared in the context of a class declar=
ation only and therefore can=E2=80=99t be added to a class using an extensi=
on declaration.</p>
<p>Initializers in structures and enumerations can call other declared init=
ializers to delegate part or all of the initialization process.</p>
<p>To declare convenience initializers for a class, mark the initializer de=
claration with the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">convenience</span></code> declaration modifier.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">convenience</span> <span class=3D"k">init</span>(<span class=
=3D"gi">parameters</span>) {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>Convenience initializers can delegate the initialization process to anot=
her convenience initializer or to one of the class=E2=80=99s designated ini=
tializers. That said, the initialization processes must end with a call to =
a designated initializer that ultimately initializes the class=E2=80=99s pr=
operties. Convenience initializers can=E2=80=99t call a superclass=E2=80=99=
s initializers.</p>
<p>You can mark designated and convenience initializers with the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">required</span></cod=
e> declaration modifier to require that every subclass implement the initia=
lizer. A subclass=E2=80=99s implementation of that initializer must also be=
 marked with the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">required</span></code> declaration modifier.</p>
<p>By default, initializers declared in a superclass are not inherited by s=
ubclasses. That said, if a subclass initializes all of its stored propertie=
s with default values and doesn=E2=80=99t define any initializers of its ow=
n, it inherits all of the superclass=E2=80=99s initializers. If the subclas=
s overrides all of the superclass=E2=80=99s designated initializers, it inh=
erits the superclass=E2=80=99s convenience initializers.</p>
<p>As with methods, properties, and subscripts, you need to mark overridden=
 designated initializers with the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">override</span></code> declaration modifier.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you mark an initializer with the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">required</span></code> declarat=
ion modifier, you don=E2=80=99t also mark the initializer with the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">override</span></c=
ode> modifier when you override the required initializer in a subclass.</p>
</div>
<p>Just like functions and methods, initializers can throw or rethrow error=
s. And just like functions and methods, you use the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">throws</span></code> or <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">rethrows</span></co=
de> keyword after an initializer=E2=80=99s parameters to indicate the appro=
priate behavior.</p>
<p>To see examples of initializers in various type declarations, see <a cla=
ss=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Languag=
eGuide/Initialization.html"><span class=3D"doc">Initialization</span></a>.<=
/p>
<div class=3D"section" id=3D"ID376">
<h3>Failable Initializers<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID376" title=3D"Permalink=
 to this headline">=C2=B6</a></h3>
<p>A <em>failable initializer</em> is a type of initializer that produces a=
n optional instance or an implicitly unwrapped optional instance of the typ=
e the initializer is declared on. As a result, a failable initializer can r=
eturn <code class=3D"docutils literal notranslate"><span class=3D"pre">nil<=
/span></code> to indicate that initialization failed.</p>
<p>To declare a failable initializer that produces an optional instance, ap=
pend a question mark to the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">init</span></code> keyword in the initializer declaration=
 (<code class=3D"docutils literal notranslate"><span class=3D"pre">init?</s=
pan></code>). To declare a failable initializer that produces an implicitly=
 unwrapped optional instance, append an exclamation mark instead (<code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">init!</span></code>=
). The example below shows an <code class=3D"docutils literal notranslate">=
<span class=3D"pre">init?</span></code> failable initializer that produces =
an optional instance of a structure.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">SomeStruct</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">property</span=
>: <span class=3D"nc">String</span>
</li><li>    <span class=3D"c">// produces an optional instance of 'SomeStr=
uct'</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">input</span>=
: <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">input</span=
>.<span class=3D"nv">isEmpty</span> {
</li><li>            <span class=3D"c">// discard 'self' and return 'nil'</=
span>
</li><li>            <span class=3D"k">return</span> <span class=3D"k">nil<=
/span>
</li><li>        }
</li><li>        <span class=3D"nv">property</span> =3D <span class=3D"nv">=
input</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You call an <code class=3D"docutils literal notranslate"><span class=3D"=
pre">init?</span></code> failable initializer in the same way that you call=
 a nonfailable initializer, except that you must deal with the optionality =
of the result.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">actualInstance</spa=
n> =3D <span class=3D"nv">SomeStruct</span>(<span class=3D"nv">input</span>=
: <span class=3D"s">"Hello"</span>) {
</li><li>    <span class=3D"c">// do something with the instance of 'SomeSt=
ruct'</span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"c">// initialization of 'SomeStruct' failed and=
 the initializer returned 'nil'</span>
</li><li>}
</li></ol></div></div></div>
<p>A failable initializer can return <code class=3D"docutils literal notran=
slate"><span class=3D"pre">nil</span></code> at any point in the implementa=
tion of the initializer=E2=80=99s body.</p>
<p>A failable initializer can delegate to any kind of initializer. A nonfai=
lable initializer can delegate to another nonfailable initializer or to an =
<code class=3D"docutils literal notranslate"><span class=3D"pre">init!</spa=
n></code> failable initializer. A nonfailable initializer can delegate to a=
n <code class=3D"docutils literal notranslate"><span class=3D"pre">init?</s=
pan></code> failable initializer by force-unwrapping the result of the supe=
rclass=E2=80=99s initializer=E2=80=94for example, by writing <code class=3D=
"docutils literal notranslate"><span class=3D"pre">super.init()!</span></co=
de>.</p>
<p>Initialization failure propagates through initializer delegation. Specif=
ically, if a failable initializer delegates to an initializer that fails an=
d returns <code class=3D"docutils literal notranslate"><span class=3D"pre">=
nil</span></code>, then the initializer that delegated also fails and impli=
citly returns <code class=3D"docutils literal notranslate"><span class=3D"p=
re">nil</span></code>. If a nonfailable initializer delegates to an <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">init!</span></cod=
e> failable initializer that fails and returns <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">nil</span></code>, then a runtime erro=
r is raised (as if you used the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">!</span></code> operator to unwrap an optional that h=
as a <code class=3D"docutils literal notranslate"><span class=3D"pre">nil</=
span></code> value).</p>
<p>A failable designated initializer can be overridden in a subclass by any=
 kind of designated initializer. A nonfailable designated initializer can b=
e overridden in a subclass by a nonfailable designated initializer only.</p=
>
<p>For more information and to see examples of failable initializers, see <=
a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/Initialization.html#ID224"><span class=3D"std std-ref">Failable=
 Initializers</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an initializer declaration</p><div class=3D"syntax-group"><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_initializer-d=
eclaration"></a>initializer-declaration</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_initializer-head=
">initializer-head</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParametersAndA=
rguments.html#grammar_generic-parameter-clause">generic-parameter-clause</a=
></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_para=
meter-clause">parameter-clause</a></span>  <code>throws</code><sub>opt</sub=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/GenericParametersAndArguments.html#grammar_generic-w=
here-clause">generic-where-clause</a></span> <sub>opt</sub> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_initializer-body">initializer-body</a></spa=
n> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_initializer-declaration_1042"></a>initializer-declaration</span><span =
class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#g=
rammar_initializer-head">initializer-head</a></span>  <span class=3D"syntac=
tic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
GenericParametersAndArguments.html#grammar_generic-parameter-clause">generi=
c-parameter-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarati=
ons.html#grammar_parameter-clause">parameter-clause</a></span>  <code>rethr=
ows</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/GenericParametersAndArguments.html#grammar_=
generic-where-clause">generic-where-clause</a></span> <sub>opt</sub> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_initializer-body">initializer-body=
</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a =
id=3D"grammar_initializer-head"></a>initializer-head</span><span class=3D"a=
rrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attri=
butes">attributes</a></span> <sub>opt</sub> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declaratio=
ns.html#grammar_declaration-modifiers">declaration-modifiers</a></span> <su=
b>opt</sub> <code>init</code></p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_initializer-head_1043"></a>initializer-head<=
/span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attribu=
tes.html#grammar_attributes">attributes</a></span> <sub>opt</sub> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Declarations.html#grammar_declaration-modifiers">declaration-mo=
difiers</a></span> <sub>opt</sub> <code>init</code> <code>?</code></p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_initial=
izer-head_1044"></a>initializer-head</span><span class=3D"arrow"> =E2=86=92=
 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Attributes.html#grammar_attributes">attribute=
s</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_=
declaration-modifiers">declaration-modifiers</a></span> <sub>opt</sub> <cod=
e>init</code> <code>!</code></p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_initializer-body"></a>initializer-body</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.=
html#grammar_code-block">code-block</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID377">
<h2>Deinitializer Declaration<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Declarations.html#ID377" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>A <em>deinitializer declaration</em> declares a deinitializer for a clas=
s type. Deinitializers take no parameters and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">deinit</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>A deinitializer is called automatically when there are no longer any ref=
erences to a class object, just before the class object is deallocated. A d=
einitializer can be declared only in the body of a class declaration=E2=80=
=94but not in an extension of a class=E2=80=94and each class can have at mo=
st one.</p>
<p>A subclass inherits its superclass=E2=80=99s deinitializer, which is imp=
licitly called just before the subclass object is deallocated. The subclass=
 object is not deallocated until all deinitializers in its inheritance chai=
n have finished executing.</p>
<p>Deinitializers are not called directly.</p>
<p>For an example of how to use a deinitializer in a class declaration, see=
 <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Deinitialization.html"><span class=3D"doc">Deinitialization</=
span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a deinitializer declaration</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_deinitiali=
zer-declaration"></a>deinitializer-declaration</span><span class=3D"arrow">=
 =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attributes"=
>attributes</a></span> <sub>opt</sub> <code>deinit</code> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Declarations.html#grammar_code-block">code-block</a></span> </p></div><=
/div></div>
<div class=3D"section" id=3D"ID378">
<h2>Extension Declaration<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID378" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p>An <em>extension declaration</em> allows you to extend the behavior of e=
xisting types. Extension declarations are declared using the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">extension</span></code> =
keyword and have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">extension</span> <span class=3D"gi">type name</span> <span cla=
ss=3D"k">where</span> <span class=3D"gi">requirements</span> {
</li><li>    <span class=3D"gi">declarations</span>
</li><li>}
</li></ol></div></div></div>
<p>The body of an extension declaration contains zero or more <em>declarati=
ons</em>. These <em>declarations</em> can include computed properties, comp=
uted type properties, instance methods, type methods, initializers, subscri=
pt declarations, and even class, structure, and enumeration declarations. E=
xtension declarations can=E2=80=99t contain deinitializer or protocol decla=
rations, stored properties, property observers, or other extension declarat=
ions. Declarations in a protocol extension can=E2=80=99t be marked <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">final</span></code=
>. For a discussion and several examples of extensions that include various=
 kinds of declarations, see <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Extensions.html"><span class=3D"do=
c">Extensions</span></a>.</p>
<p>If the <em>type name</em> is a class, structure, or enumeration type, th=
e extension extends that type. If the <em>type name</em> is a protocol type=
, the extension extends all types that conform to that protocol.</p>
<p>Extension declarations that extend a generic type or a protocol with ass=
ociated types can include <em>requirements</em>. If an instance of the exte=
nded type or of a type that conforms to the extended protocol satisfies the=
 <em>requirements</em>, the instance gains the behavior specified in the de=
claration.</p>
<p>Extension declarations can contain initializer declarations. That said, =
if the type you=E2=80=99re extending is defined in another module, an initi=
alizer declaration must delegate to an initializer already defined in that =
module to ensure members of that type are properly initialized.</p>
<p>Properties, methods, and initializers of an existing type can=E2=80=99t =
be overridden in an extension of that type.</p>
<p>Extension declarations can add protocol conformance to an existing class=
, structure, or enumeration type by specifying <em>adopted protocols</em>:<=
/p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">extension</span> <span class=3D"gi">type name</span>: <span cl=
ass=3D"gi">adopted protocols</span> <span class=3D"k">where</span> <span cl=
ass=3D"gi">requirements</span> {
</li><li>    <span class=3D"gi">declarations</span>
</li><li>}
</li></ol></div></div></div>
<p>Extension declarations can=E2=80=99t add class inheritance to an existin=
g class, and therefore you can specify only a list of protocols after the <=
em>type name</em> and colon.</p>
<div class=3D"section" id=3D"ID576">
<h3>Conditional Conformance<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#ID576" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>You can extend a generic type to conditionally conform to a protocol, so=
 that instances of the type conform to the protocol only when certain requi=
rements are met. You add conditional conformance to a protocol by including=
 <em>requirements</em> in an extension declaration.</p>
<div class=3D"section" id=3D"ID577">
<h4>Overridden Requirements Aren=E2=80=99t Used in Some Generic Contexts<a =
class=3D"headerlink" href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Declarations.html#ID577" title=3D"Permalink to this headline">=C2=B6</a=
></h4>
<p>In some generic contexts, types that get behavior from conditional confo=
rmance to a protocol don=E2=80=99t always use the specialized implementatio=
ns of that protocol=E2=80=99s requirements. To illustrate this behavior, th=
e following example defines two protocols and a generic type that condition=
ally conforms to both protocols.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Loggable</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">log</span>()
</li><li>}
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Loggable</sp=
an> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">log</span>() =
{
</li><li>        <span class=3D"nv">print</span>(<span class=3D"k">self</sp=
an>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">protocol</span> <span class=3D"nv">TitledLoggabl=
e</span>: <span class=3D"nc">Loggable</span> {
</li><li>    <span class=3D"k">static</span> <span class=3D"k">var</span> <=
span class=3D"nv">logTitle</span>: <span class=3D"nc">String</span> { <span=
 class=3D"k">get</span> }
</li><li>}
</li><li><span class=3D"k">extension</span> <span class=3D"nc">TitledLoggab=
le</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">log</span>() =
{
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"</span>=
\<span class=3D"p">(</span><span class=3D"k">Self</span>.<span class=3D"nv"=
>logTitle</span><span class=3D"p">)</span><span class=3D"s">: </span>\<span=
 class=3D"p">(</span><span class=3D"k">self</span><span class=3D"p">)</span=
><span class=3D"s">"</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">struct</span> <span class=3D"nv">Pair</span>&lt;=
<span class=3D"nv">T</span>&gt;: <span class=3D"nc">CustomStringConvertible=
</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">first</span>: =
<span class=3D"nc">T</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">second</span>:=
 <span class=3D"nc">T</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">description</s=
pan>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"(</span=
>\<span class=3D"p">(</span><span class=3D"nv">first</span><span class=3D"p=
">)</span><span class=3D"s">, </span>\<span class=3D"p">(</span><span class=
=3D"nv">second</span><span class=3D"p">)</span><span class=3D"s">)"</span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Pair</span>:=
 <span class=3D"nc">Loggable</span> <span class=3D"k">where</span> <span cl=
ass=3D"nc">T</span>: <span class=3D"nc">Loggable</span> { }
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Pair</span>:=
 <span class=3D"nc">TitledLoggable</span> <span class=3D"k">where</span> <s=
pan class=3D"nc">T</span>: <span class=3D"nc">TitledLoggable</span> {
</li><li>    <span class=3D"k">static</span> <span class=3D"k">var</span> <=
span class=3D"nv">logTitle</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"Pair of=
 '</span>\<span class=3D"p">(</span><span class=3D"nv">T</span>.<span class=
=3D"nv">logTitle</span><span class=3D"p">)</span><span class=3D"s">'"</span=
>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">String</span=
>: <span class=3D"nc">TitledLoggable</span> {
</li><li>    <span class=3D"k">static</span> <span class=3D"k">var</span> <=
span class=3D"nv">logTitle</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"String"=
</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Pai=
r</span></code> structure conforms to <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">Loggable</span></code> and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">TitledLoggable</span></code> w=
henever its generic type conforms to <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Loggable</span></code> or <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">TitledLoggable</span></code>, re=
spectively. In the example below, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">oneAndTwo</span></code> is an instance of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">Pair&lt;String&gt;<=
/span></code>, which conforms to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">TitledLoggable</span></code> because <code class=3D"=
docutils literal notranslate"><span class=3D"pre">String</span></code> conf=
orms to <code class=3D"docutils literal notranslate"><span class=3D"pre">Ti=
tledLoggable</span></code>. When the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">log()</span></code> method is called on <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">oneAndTwo</span></=
code> directly, the specialized version containing the title string is used=
.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">oneAndTwo</span> =3D <span class=3D"nv">Pair</s=
pan>(<span class=3D"nv">first</span>: <span class=3D"s">"one"</span>, <span=
 class=3D"nv">second</span>: <span class=3D"s">"two"</span>)
</li><li><span class=3D"nv">oneAndTwo</span>.<span class=3D"nv">log</span>(=
)
</li><li><span class=3D"c">// Prints "Pair of 'String': (one, two)"</span>
</li></ol></div></div></div>
<p>However, when <code class=3D"docutils literal notranslate"><span class=
=3D"pre">oneAndTwo</span></code> is used in a generic context or as an inst=
ance of the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Loggable</span></code> protocol, the specialized version isn=E2=80=99t us=
ed. Swift picks which implementation of <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">log()</span></code> to call by consulting onl=
y the minimum requirements that <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Pair</span></code> needs to conform to <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Loggable</span></code>. =
For this reason, the default implementation provided by the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Loggable</span></code> pr=
otocol is used instead.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">doSomething</span>&lt;<span class=3D"nv">T</sp=
an>: <span class=3D"nc">Loggable</span>&gt;(<span class=3D"nv">with</span> =
<span class=3D"nv">x</span>: <span class=3D"nc">T</span>) {
</li><li>    <span class=3D"nv">x</span>.<span class=3D"nv">log</span>()
</li><li>}
</li><li><span class=3D"nv">doSomething</span>(<span class=3D"nv">with</spa=
n>: <span class=3D"nv">oneAndTwo</span>)
</li><li><span class=3D"c">// Prints "(one, two)"</span>
</li></ol></div></div></div>
<p>When <code class=3D"docutils literal notranslate"><span class=3D"pre">lo=
g()</span></code> is called on the instance that=E2=80=99s passed to <code =
class=3D"docutils literal notranslate"><span class=3D"pre">doSomething(_:)<=
/span></code>, the customized title is omitted from the logged string.</p>
</div>
</div>
<div class=3D"section" id=3D"ID578">
<h3>Protocol Conformance Must Not Be Redundant<a class=3D"headerlink" href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID5=
78" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>A concrete type can conform to a particular protocol only once. Swift ma=
rks redundant protocol conformances as an error. You=E2=80=99re likely to e=
ncounter this kind of error in two kinds of situations. The first situation=
 is when you explicitly conform to the same protocol multiple times, but wi=
th different requirements. The second situation is when you implicitly inhe=
rit from the same protocol multiple times. These situations are discussed i=
n the sections below.</p>
<div class=3D"section" id=3D"ID579">
<h4>Resolving Explicit Redundancy<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#ID579" title=3D"P=
ermalink to this headline">=C2=B6</a></h4>
<p>Multiple extensions on a concrete type can=E2=80=99t add conformance to =
the same protocol, even if the extensions=E2=80=99 requirements are mutuall=
y exclusive. This restriction is demonstrated in the example below. Two ext=
ension declarations attempt to add conditional conformance to the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">Serializable</span>=
</code> protocol, one for for arrays with <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Int</span></code> elements, and one for arr=
ays with <code class=3D"docutils literal notranslate"><span class=3D"pre">S=
tring</span></code> elements.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Serializable</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">serialize</sp=
an>() -&gt; <span class=3D"k">Any</span>
</li><li>}
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">Serializable</span> <span class=3D"k">where</span> <sp=
an class=3D"nc">Element</span> =3D=3D <span class=3D"nc">Int</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">serialize</sp=
an>() -&gt; <span class=3D"k">Any</span> {
</li><li>        <span class=3D"c">// implementation</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">Serializable</span> <span class=3D"k">where</span> <sp=
an class=3D"nc">Element</span> =3D=3D <span class=3D"nc">String</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">serialize</sp=
an>() -&gt; <span class=3D"k">Any</span> {
</li><li>        <span class=3D"c">// implementation</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"c">// Error: redundant conformance of 'Array&lt;Ele=
ment&gt;' to protocol 'Serializable'</span>
</li></ol></div></div></div>
<p>If you need to add conditional conformance based on multiple concrete ty=
pes, create a new protocol that each type can conform to and use that proto=
col as the requirement when declaring conditional conformance.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SerializableInArray</span> { }
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Int</span>: =
<span class=3D"nc">SerializableInArray</span> { }
</li><li><span class=3D"k">extension</span> <span class=3D"nc">String</span=
>: <span class=3D"nc">SerializableInArray</span> { }
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">Serializable</span> <span class=3D"k">where</span> <sp=
an class=3D"nc">Element</span>: <span class=3D"nc">SerializableInArray</spa=
n> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">serialize</sp=
an>() -&gt; <span class=3D"k">Any</span> {
</li><li>        <span class=3D"c">// implementation</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID580">
<h4>Resolving Implicit Redundancy<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#ID580" title=3D"P=
ermalink to this headline">=C2=B6</a></h4>
<p>When a concrete type conditionally conforms to a protocol, that type imp=
licitly conforms to any parent protocols with the same requirements.</p>
<p>If you need a type to conditionally conform to two protocols that inheri=
t from a single parent, explicitly declare conformance to the parent protoc=
ol. This avoids implicitly conforming to the parent protocol twice with dif=
ferent requirements.</p>
<p>The following example explicitly declares the conditional conformance of=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Array</sp=
an></code> to <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Loggable</span></code> to avoid a conflict when declaring its condition=
al conformance to both <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">TitledLoggable</span></code> and the new <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">MarkedLoggable</span></code> pr=
otocol.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">MarkedLoggable</span>: <span class=3D"nc">=
Loggable</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">markAndLog</s=
pan>()
</li><li>}
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">MarkedLoggab=
le</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">markAndLog</s=
pan>() {
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"-------=
---"</span>)
</li><li>        <span class=3D"nv">log</span>()
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">Loggable</span> <span class=3D"k">where</span> <span c=
lass=3D"nc">Element</span>: <span class=3D"nc">Loggable</span> { }
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">TitledLoggable</span> <span class=3D"k">where</span> <=
span class=3D"nc">Element</span>: <span class=3D"nc">TitledLoggable</span> =
{
</li><li>    <span class=3D"k">static</span> <span class=3D"k">var</span> <=
span class=3D"nv">logTitle</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"Array o=
f '</span>\<span class=3D"p">(</span><span class=3D"nv">Element</span>.<spa=
n class=3D"nv">logTitle</span><span class=3D"p">)</span><span class=3D"s">'=
"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">MarkedLoggable</span> <span class=3D"k">where</span> <=
span class=3D"nc">Element</span>: <span class=3D"nc">MarkedLoggable</span> =
{ }
</li></ol></div></div></div>
<p>Without the extension to explicitly declare conditional conformance to <=
code class=3D"docutils literal notranslate"><span class=3D"pre">Loggable</s=
pan></code>, the other <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Array</span></code> extensions would implicitly create these d=
eclarations, resulting in an error:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Array</span>: <span class=3D"nc">Loggable=
</span> <span class=3D"k">where</span> <span class=3D"nc">Element</span>: <=
span class=3D"nc">TitledLoggable</span> { }
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Array</span>=
: <span class=3D"nc">Loggable</span> <span class=3D"k">where</span> <span c=
lass=3D"nc">Element</span>: <span class=3D"nc">MarkedLoggable</span> { }
</li><li><span class=3D"c">// Error: redundant conformance of 'Array&lt;Ele=
ment&gt;' to protocol 'Loggable'</span>
</li></ol></div></div></div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an extension declaration</p><div class=3D"syntax-group"><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_extension-decla=
ration"></a>extension-declaration</span><span class=3D"arrow"> =E2=86=92 </=
span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Attributes.html#grammar_attributes">attributes</=
a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_acc=
ess-level-modifier">access-level-modifier</a></span> <sub>opt</sub> <code>e=
xtension</code> <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Types.html#grammar_type-identifier">ty=
pe-identifier</a></span>  <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_type-inhe=
ritance-clause">type-inheritance-clause</a></span> <sub>opt</sub> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/GenericParametersAndArguments.html#grammar_generic-where-clause=
">generic-where-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_extension-body">extension-body</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_extension-=
body"></a>extension-body</span><span class=3D"arrow"> =E2=86=92 </span> <co=
de>{</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_extension-member=
s">extension-members</a></span> <sub>opt</sub> <code>}</code></p></div><div=
 class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_extension-members"></a>extension-members</span><span =
class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#g=
rammar_extension-member">extension-member</a></span>  <span class=3D"syntac=
tic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
Declarations.html#grammar_extension-members">extension-members</a></span> <=
sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_extension-member"></a>extension-member</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_de=
claration">declaration</a></span>  |  <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
grammar_compiler-control-statement">compiler-control-statement</a></span> <=
/p></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID379">
<h2>Subscript Declaration<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID379" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p>A <em>subscript</em> declaration allows you to add subscripting support =
for objects of a particular type and are typically used to provide a conven=
ient syntax for accessing the elements in a collection, list, or sequence. =
Subscript declarations are declared using the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">subscript</span></code> keyword and hav=
e the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">subscript</span> (<span class=3D"gi">parameters</span>) -&gt; =
<span class=3D"gi">return type</span> {
</li><li>    <span class=3D"k">get</span> {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>    <span class=3D"k">set</span>(<span class=3D"gi">setter name</s=
pan>) {
</li><li>        <span class=3D"gi">statements</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Subscript declarations can appear only in the context of a class, struct=
ure, enumeration, extension, or protocol declaration.</p>
<p>The <em>parameters</em> specify one or more indexes used to access eleme=
nts of the corresponding type in a subscript expression (for example, the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">i</span></c=
ode> in the expression <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">object[i]</span></code>). Although the indexes used to access =
the elements can be of any type, each parameter must include a type annotat=
ion to specify the type of each index. The <em>return type</em> specifies t=
he type of the element being accessed.</p>
<p>As with computed properties, subscript declarations support reading and =
writing the value of the accessed elements. The getter is used to read the =
value, and the setter is used to write the value. The setter clause is opti=
onal, and when only a getter is needed, you can omit both clauses and simpl=
y return the requested value directly. That said, if you provide a setter c=
lause, you must also provide a getter clause.</p>
<p>The <em>setter name</em> and enclosing parentheses are optional. If you =
provide a setter name, it is used as the name of the parameter to the sette=
r. If you do not provide a setter name, the default parameter name to the s=
etter is <code class=3D"docutils literal notranslate"><span class=3D"pre">v=
alue</span></code>. The type of the parameter to the setter is the same as =
the <em>return type</em>.</p>
<p>You can overload a subscript declaration in the type in which it is decl=
ared, as long as the <em>parameters</em> or the <em>return type</em> differ=
 from the one you=E2=80=99re overloading. You can also override a subscript=
 declaration inherited from a superclass. When you do so, you must mark the=
 overridden subscript declaration with the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">override</span></code> declaration modifie=
r.</p>
<p>Subscript parameters follow the same rules as function parameters, with =
two exceptions. By default, the parameters used in subscripting don=E2=80=
=99t have argument labels, unlike functions, methods, and initializers. How=
ever, you can provide explicit argument labels using the same syntax that f=
unctions, methods, and initializers use. In addition, subscripts can=E2=80=
=99t have in-out parameters.</p>
<p>You can also declare subscripts in the context of a protocol declaration=
, as described in <a class=3D"reference internal" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#ID373"><span class=3D"st=
d std-ref">Protocol Subscript Declaration</span></a>.</p>
<p>For more information about subscripting and to see examples of subscript=
 declarations, see <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/Subscripts.html"><span class=3D"doc">Subscr=
ipts</span></a>.</p>
<div class=3D"section" id=3D"ID611">
<h3>Type Subscript Declarations<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Declarations.html#ID611" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>To declare a subscript that=E2=80=99s exposed by the type, rather than b=
y instances of the type, mark the subscript declaration with the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">static</span></code>=
 declaration modifier. Classes can mark type computed properties with the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">class</span=
></code> declaration modifier instead to allow subclasses to override the s=
uperclass=E2=80=99s implementation. In a class declaration, the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">static</span></code> =
keyword has the same effect as marking the declaration with both the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">class</span></co=
de> and <code class=3D"docutils literal notranslate"><span class=3D"pre">fi=
nal</span></code> declaration modifiers.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a subscript declaration</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_subscript-declar=
ation"></a>subscript-declaration</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Declarations.html#grammar_subscript-head">subscri=
pt-head</a></span>  <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_subscrip=
t-result">subscript-result</a></span>  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/GenericParamete=
rsAndArguments.html#grammar_generic-where-clause">generic-where-clause</a><=
/span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_code-b=
lock">code-block</a></span> </p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_subscript-declaration_1045"></a>subscript-dec=
laration</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synt=
actic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManua=
l/Declarations.html#grammar_subscript-head">subscript-head</a></span>  <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Declarations.html#grammar_subscript-result">subscript-resu=
lt</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html#gram=
mar_generic-where-clause">generic-where-clause</a></span> <sub>opt</sub> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#grammar_getter-setter-block">getter-se=
tter-block</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def=
-name"><a id=3D"grammar_subscript-declaration_1046"></a>subscript-declarati=
on</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decl=
arations.html#grammar_subscript-head">subscript-head</a></span>  <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Declarations.html#grammar_subscript-result">subscript-result</a>=
</span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/GenericParametersAndArguments.html#grammar_ge=
neric-where-clause">generic-where-clause</a></span> <sub>opt</sub> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Declarations.html#grammar_getter-setter-keyword-block">getter-=
setter-keyword-block</a></span> </p><p class=3D"syntax-def"><span class=3D"=
syntax-def-name"><a id=3D"grammar_subscript-head"></a>subscript-head</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Attributes.ht=
ml#grammar_attributes">attributes</a></span> <sub>opt</sub> <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Declarations.html#grammar_declaration-modifiers">declaration-modifier=
s</a></span> <sub>opt</sub> <code>subscript</code> <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Gen=
ericParametersAndArguments.html#grammar_generic-parameter-clause">generic-p=
arameter-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations=
.html#grammar_parameter-clause">parameter-clause</a></span> </p><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_subscript-res=
ult"></a>subscript-result</span><span class=3D"arrow"> =E2=86=92 </span> <c=
ode>-&gt;</code> <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Attributes.html#grammar_attributes">a=
ttributes</a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar=
_type">type</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID380">
<h2>Operator Declaration<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Declarations.html#ID380" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>An <em>operator declaration</em> introduces a new infix, prefix, or post=
fix operator into your program and is declared using the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">operator</span></code> keywo=
rd.</p>
<p>You can declare operators of three different fixities: infix, prefix, an=
d postfix. The <em>fixity</em> of an operator specifies the relative positi=
on of an operator to its operands.</p>
<p>There are three basic forms of an operator declaration, one for each fix=
ity. The fixity of the operator is specified by marking the operator declar=
ation with the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">infix</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">prefix</span></code>, or <code class=3D"docutils literal no=
translate"><span class=3D"pre">postfix</span></code> declaration modifier b=
efore the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
operator</span></code> keyword. In each form, the name of the operator can =
contain only the operator characters defined in <a class=3D"reference inter=
nal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#ID418"><span class=3D"std std-ref">Operators</span></a>.</p>
<p>The following form declares a new infix operator:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"nv">infix</span> <span class=3D"k">operator</span> <span class=3D=
"gi">operator name</span>: <span class=3D"gi">precedence group</span>
</li></ol></div></div></div>
<p>An <em>infix operator</em> is a binary operator that is written between =
its two operands, such as the familiar addition operator (<code class=3D"do=
cutils literal notranslate"><span class=3D"pre">+</span></code>) in the exp=
ression <code class=3D"docutils literal notranslate"><span class=3D"pre">1<=
/span> <span class=3D"pre">+</span> <span class=3D"pre">2</span></code>.</p=
>
<p>Infix operators can optionally specify a precedence group. If you omit t=
he precedence group for an operator, Swift uses the default precedence grou=
p, <code class=3D"docutils literal notranslate"><span class=3D"pre">Default=
Precedence</span></code>, which specifies a precedence just higher than <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">TernaryPreced=
ence</span></code>. For more information, see <a class=3D"reference interna=
l" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.h=
tml#ID550"><span class=3D"std std-ref">Precedence Group Declaration</span><=
/a>.</p>
<p>The following form declares a new prefix operator:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"nv">prefix</span> <span class=3D"k">operator</span> <span class=
=3D"gi">operator name</span>
</li></ol></div></div></div>
<p>A <em>prefix operator</em> is a unary operator that is written immediate=
ly before its operand, such as the prefix logical NOT operator (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">!</span></code>) in t=
he expression <code class=3D"docutils literal notranslate"><span class=3D"p=
re">!a</span></code>.</p>
<p>Prefix operators declarations don=E2=80=99t specify a precedence level. =
Prefix operators are nonassociative.</p>
<p>The following form declares a new postfix operator:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"nv">postfix</span> <span class=3D"k">operator</span> <span class=
=3D"gi">operator name</span>
</li></ol></div></div></div>
<p>A <em>postfix operator</em> is a unary operator that is written immediat=
ely after its operand, such as the postfix forced-unwrap operator (<code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">!</span></code>) i=
n the expression <code class=3D"docutils literal notranslate"><span class=
=3D"pre">a!</span></code>.</p>
<p>As with prefix operators, postfix operator declarations don=E2=80=99t sp=
ecify a precedence level. Postfix operators are nonassociative.</p>
<p>After declaring a new operator, you implement it by declaring a static m=
ethod that has the same name as the operator. The static method is a member=
 of one of the types whose values the operator takes as an argument=E2=80=
=94for example, an operator that multiplies a <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">Double</span></code> by an <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Int</span></code> is =
implemented as a static method on either the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Double</span></code> or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">Int</span></code> structur=
e. If you=E2=80=99re implementing a prefix or postfix operator, you must al=
so mark that method declaration with the corresponding <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">prefix</span></code> or <code =
class=3D"docutils literal notranslate"><span class=3D"pre">postfix</span></=
code> declaration modifier. To see an example of how to create and implemen=
t a new operator, see <a class=3D"reference internal" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46"><span class=
=3D"std std-ref">Custom Operators</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an operator declaration</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_operator-declara=
tion"></a>operator-declaration</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/Declarations.html#grammar_prefix-operator-declarati=
on">prefix-operator-declaration</a></span>  |  <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declara=
tions.html#grammar_postfix-operator-declaration">postfix-operator-declarati=
on</a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_infix-oper=
ator-declaration">infix-operator-declaration</a></span> </p></div><div clas=
s=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name">=
<a id=3D"grammar_prefix-operator-declaration"></a>prefix-operator-declarati=
on</span><span class=3D"arrow"> =E2=86=92 </span> <code>prefix</code> <code=
>operator</code> <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_operato=
r">operator</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-de=
f-name"><a id=3D"grammar_postfix-operator-declaration"></a>postfix-operator=
-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <code>postfix</=
code> <code>operator</code> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gram=
mar_operator">operator</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_infix-operator-declaration"></a>infix=
-operator-declaration</span><span class=3D"arrow"> =E2=86=92 </span> <code>=
infix</code> <code>operator</code> <span class=3D"syntactic-category"><a hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.ht=
ml#grammar_operator">operator</a></span>  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations=
.html#grammar_infix-operator-group">infix-operator-group</a></span> <sub>op=
t</sub></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_infix-operator-group"></a>infix-=
operator-group</span><span class=3D"arrow"> =E2=86=92 </span> <code>:</code=
> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Declarations.html#grammar_precedence-group-name">pre=
cedence-group-name</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID550">
<h2>Precedence Group Declaration<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Declarations.html#ID550" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h2>
<p>A <em>precedence group declaration</em> introduces a new grouping for in=
fix operator precedence into your program. The precedence of an operator sp=
ecifies how tightly the operator binds to its operands, in the absence of g=
rouping parentheses.</p>
<p>A precedence group declaration has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">precedencegroup</span> <span class=3D"gi">precedence group nam=
e</span> {
</li><li>    <span class=3D"k">higherThan</span>: <span class=3D"gi">lower =
group names</span>
</li><li>    <span class=3D"k">lowerThan</span>: <span class=3D"gi">higher =
group names</span>
</li><li>    <span class=3D"k">associativity</span>: <span class=3D"gi">ass=
ociativity</span>
</li><li>    <span class=3D"k">assignment</span>: <span class=3D"gi">assign=
ment</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>lower group names</em> and <em>higher group names</em> lists spe=
cify the new precedence group=E2=80=99s relation to existing precedence gro=
ups. The <code class=3D"docutils literal notranslate"><span class=3D"pre">l=
owerThan</span></code> precedence group attribute may only be used to refer=
 to precedence groups declared outside of the current module. When two oper=
ators compete with each other for their operands, such as in the expression=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">2</span> =
<span class=3D"pre">+</span> <span class=3D"pre">3</span> <span class=3D"pr=
e">*</span> <span class=3D"pre">5</span></code>, the operator with the high=
er relative precedence binds more tightly to its operands.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Precedence groups related to each other using <em>lower g=
roup names</em> and <em>higher group names</em> must fit into a single rela=
tional hierarchy, but they <em>don=E2=80=99t</em> have to form a linear hie=
rarchy. This means it is possible to have precedence groups with undefined =
relative precedence. Operators from those precedence groups can=E2=80=99t b=
e used next to each other without grouping parentheses.</p>
</div>
<p>Swift defines numerous precedence groups to go along with the operators =
provided by the standard library. For example, the addition (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">+</span></code>) and sub=
traction (<code class=3D"docutils literal notranslate"><span class=3D"pre">=
-</span></code>) operators belong to the <code class=3D"docutils literal no=
translate"><span class=3D"pre">AdditionPrecedence</span></code> group, and =
the multiplication (<code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">*</span></code>) and division (<code class=3D"docutils literal no=
translate"><span class=3D"pre">/</span></code>) operators belong to the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Multiplicatio=
nPrecedence</span></code> group. For a complete list of precedence groups p=
rovided by the Swift standard library, see <a class=3D"reference external" =
href=3D"https://developer.apple.com/documentation/swift/operator_declaratio=
ns">Operator Declarations</a>.</p>
<p>The <em>associativity</em> of an operator specifies how a sequence of op=
erators with the same precedence level are grouped together in the absence =
of grouping parentheses. You specify the associativity of an operator by wr=
iting one of the context-sensitive keywords <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">left</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">right</span></code>, or <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">none</span></code=
>=E2=80=94if your omit the associativity, the default is <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">none</span></code>. Operator=
s that are left-associative group left-to-right. For example, the subtracti=
on operator (<code class=3D"docutils literal notranslate"><span class=3D"pr=
e">-</span></code>) is left-associative, so the expression <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">4</span> <span class=3D"pr=
e">-</span> <span class=3D"pre">5</span> <span class=3D"pre">-</span> <span=
 class=3D"pre">6</span></code> is grouped as <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">(4</span> <span class=3D"pre">-</span> <=
span class=3D"pre">5)</span> <span class=3D"pre">-</span> <span class=3D"pr=
e">6</span></code> and evaluates to <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-7</span></code>. Operators that are right-associ=
ative group right-to-left, and operators that are specified with an associa=
tivity of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
none</span></code> don=E2=80=99t associate at all. Nonassociative operators=
 of the same precedence level can=E2=80=99t appear adjacent to each to othe=
r. For example, the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">&lt;</span></code> operator has an associativity of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">none</span></code>, w=
hich means <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>1</span> <span class=3D"pre">&lt;</span> <span class=3D"pre">2</span> <spa=
n class=3D"pre">&lt;</span> <span class=3D"pre">3</span></code> is not a va=
lid expression.</p>
<p>The <em>assignment</em> of a precedence group specifies the precedence o=
f an operator when used in an operation that includes optional chaining. Wh=
en set to <code class=3D"docutils literal notranslate"><span class=3D"pre">=
true</span></code>, an operator in the corresponding precedence group uses =
the same grouping rules during optional chaining as the assignment operator=
s from the standard library. Otherwise, when set to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">false</span></code> or omitted, o=
perators in the precedence group follows the same optional chaining rules a=
s operators that don=E2=80=99t perform assignment.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a precedence group declaration</p><div class=3D"syntax-group"><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_precedenc=
e-group-declaration"></a>precedence-group-declaration</span><span class=3D"=
arrow"> =E2=86=92 </span> <code>precedencegroup</code> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Declarations.html#grammar_precedence-group-name">precedence-group-name</a>=
</span>  <code>{</code> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_prec=
edence-group-attributes">precedence-group-attributes</a></span> <sub>opt</s=
ub> <code>}</code></p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_precedence-group-attr=
ibutes"></a>precedence-group-attributes</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Declarations.html#grammar_precedence-group=
-attribute">precedence-group-attribute</a></span>  <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Dec=
larations.html#grammar_precedence-group-attributes">precedence-group-attrib=
utes</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_precedence-group-attribute"></a>precedence-=
group-attribute</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_precedence-group-relation">precedence-g=
roup-relation</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-=
def-name"><a id=3D"grammar_precedence-group-attribute_1047"></a>precedence-=
group-attribute</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_precedence-group-assignment">precedence=
-group-assignment</a></span> </p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_precedence-group-attribute_1048"></a>precede=
nce-group-attribute</span><span class=3D"arrow"> =E2=86=92 </span> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Declarations.html#grammar_precedence-group-associativity">prec=
edence-group-associativity</a></span> </p></div><div class=3D"syntax-group"=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_p=
recedence-group-relation"></a>precedence-group-relation</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>higherThan</code> <code>:</code> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_precedence-group-names">precedence=
-group-names</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-d=
ef-name"><a id=3D"grammar_precedence-group-relation_1049"></a>precedence-gr=
oup-relation</span><span class=3D"arrow"> =E2=86=92 </span> <code>lowerThan=
</code> <code>:</code> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_prece=
dence-group-names">precedence-group-names</a></span> </p></div><div class=
=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_precedence-group-assignment"></a>precedence-group-assignmen=
t</span><span class=3D"arrow"> =E2=86=92 </span> <code>assignment</code> <c=
ode>:</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_boolean-lit=
eral">boolean-literal</a></span> </p></div><div class=3D"syntax-group"><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_preced=
ence-group-associativity"></a>precedence-group-associativity</span><span cl=
ass=3D"arrow"> =E2=86=92 </span> <code>associativity</code> <code>:</code> =
<code>left</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name=
"><a id=3D"grammar_precedence-group-associativity_1050"></a>precedence-grou=
p-associativity</span><span class=3D"arrow"> =E2=86=92 </span> <code>associ=
ativity</code> <code>:</code> <code>right</code></p><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_precedence-group-associat=
ivity_1051"></a>precedence-group-associativity</span><span class=3D"arrow">=
 =E2=86=92 </span> <code>associativity</code> <code>:</code> <code>none</co=
de></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_precedence-group-names"></a>preceden=
ce-group-names</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Declarations.html#grammar_precedence-group-name">precedence-group=
-name</a></span>  |  <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_precede=
nce-group-name">precedence-group-name</a></span>  <code>,</code> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Declarations.html#grammar_precedence-group-names">precedence-gro=
up-names</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_precedence-group-name"></a>precedence-group-name</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStru=
cture.html#grammar_identifier">identifier</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID381">
<h2>Declaration Modifiers<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID381" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p><em>Declaration modifiers</em> are keywords or context-sensitive keyword=
s that modify the behavior or meaning of a declaration. You specify a decla=
ration modifier by writing the appropriate keyword or context-sensitive key=
word between a declaration=E2=80=99s attributes (if any) and the keyword th=
at introduces the declaration.</p>
<dl class=3D"docutils">
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">class<=
/span></code></dt>
<dd>Apply this modifier to a member of a class to indicate that the member =
is a member of the class itself, rather than a member of instances of the c=
lass. Members of a superclass that have this modifier and don=E2=80=99t hav=
e the <code class=3D"docutils literal notranslate"><span class=3D"pre">fina=
l</span></code> modifier can be overridden by subclasses.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">dynami=
c</span></code></dt>
<dd><p class=3D"first">Apply this modifier to any member of a class that ca=
n be represented by Objective-C. When you mark a member declaration with th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">dynamic<=
/span></code> modifier, access to that member is always dynamically dispatc=
hed using the Objective-C runtime. Access to that member is never inlined o=
r devirtualized by the compiler.</p>
<p class=3D"last">Because declarations marked with the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">dynamic</span></code> modifier=
 are dispatched using the Objective-C runtime, they must be marked with the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">objc</spa=
n></code> attribute.</p>
</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">final<=
/span></code></dt>
<dd>Apply this modifier to a class or to a property, method, or subscript m=
ember of a class. It=E2=80=99s applied to a class to indicate that the clas=
s can=E2=80=99t be subclassed. It=E2=80=99s applied to a property, method, =
or subscript of a class to indicate that a class member can=E2=80=99t be ov=
erridden in any subclass. For an example of how to use the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">final</span></code> attrib=
ute, see <a class=3D"reference internal" href=3D"https://docs.swift.org/swi=
ft-book/LanguageGuide/Inheritance.html#ID202"><span class=3D"std std-ref">P=
reventing Overrides</span></a>.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">lazy</=
span></code></dt>
<dd>Apply this modifier to a stored variable property of a class or structu=
re to indicate that the property=E2=80=99s initial value is calculated and =
stored at most once, when the property is first accessed. For an example of=
 how to use the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">lazy</span></code> modifier, see <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID257">=
<span class=3D"std std-ref">Lazy Stored Properties</span></a>.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">option=
al</span></code></dt>
<dd><p class=3D"first">Apply this modifier to a protocol=E2=80=99s property=
, method, or subscript members to indicate that a conforming type isn=E2=80=
=99t required to implement those members.</p>
<p class=3D"last">You can apply the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">optional</span></code> modifier only to protocols=
 that are marked with the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">objc</span></code> attribute. As a result, only class types=
 can adopt and conform to a protocol that contains optional member requirem=
ents. For more information about how to use the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">optional</span></code> modifier and f=
or guidance about how to access optional protocol members=E2=80=94for examp=
le, when you=E2=80=99re not sure whether a conforming type implements them=
=E2=80=94see <a class=3D"reference internal" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/Protocols.html#ID284"><span class=3D"std std-ref"=
>Optional Protocol Requirements</span></a>.</p>
</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">requir=
ed</span></code></dt>
<dd>Apply this modifier to a designated or convenience initializer of a cla=
ss to indicate that every subclass must implement that initializer. The sub=
class=E2=80=99s implementation of that initializer must also be marked with=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">requi=
red</span></code> modifier.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">static=
</span></code></dt>
<dd>Apply this modifier to a member of a structure, class, enumeration, or =
protocol to indicate that the member is a member of the type, rather than a=
 member of instances of that type. In the scope of a class declaration, wri=
ting the <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
tatic</span></code> modifier on a member declaration has the same effect as=
 writing the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">class</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">final</span></code> modifiers on that member declaration. =
However, constant type properties of a class are an exception: <code class=
=3D"docutils literal notranslate"><span class=3D"pre">static</span></code> =
has its normal, nonclass meaning there because you can=E2=80=99t write <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">class</span></=
code> or <code class=3D"docutils literal notranslate"><span class=3D"pre">f=
inal</span></code> on those declarations.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">unowne=
d</span></code></dt>
<dd>Apply this modifier to a stored variable, constant, or stored property =
to indicate that the variable or property has an unowned reference to the o=
bject stored as its value. If you try to access the variable or property af=
ter the object has been deallocated, a runtime error is raised. Like a weak=
 reference, the type of the property or value must be a class type; unlike =
a weak reference, the type is non-optional. For an example and more informa=
tion about the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">unowned</span></code> modifier, see <a class=3D"reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCou=
nting.html#ID54"><span class=3D"std std-ref">Unowned References</span></a>.=
</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">unowne=
d(safe)</span></code></dt>
<dd>An explicit spelling of <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">unowned</span></code>.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">unowne=
d(unsafe)</span></code></dt>
<dd>Apply this modifier to a stored variable, constant, or stored property =
to indicate that the variable or property has an unowned reference to the o=
bject stored as its value. If you try to access the variable or property af=
ter the object has been deallocated, you=E2=80=99ll access the memory at th=
e location where the object used to be, which is a memory-unsafe operation.=
 Like a weak reference, the type of the property or value must be a class t=
ype; unlike a weak reference, the type is non-optional. For an example and =
more information about the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">unowned</span></code> modifier, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Automatic=
ReferenceCounting.html#ID54"><span class=3D"std std-ref">Unowned References=
</span></a>.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">weak</=
span></code></dt>
<dd>Apply this modifier to a stored variable or stored variable property to=
 indicate that the variable or property has a weak reference to the object =
stored as its value. The type of the variable or property must be an option=
al class type. If you access the variable or property after the object has =
been deallocated, its value is <code class=3D"docutils literal notranslate"=
><span class=3D"pre">nil</span></code>. For an example and more information=
 about the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>weak</span></code> modifier, see <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.h=
tml#ID53"><span class=3D"std std-ref">Weak References</span></a>.</dd>
</dl>
<div class=3D"section" id=3D"ID382">
<h3>Access Control Levels<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Declarations.html#ID382" title=3D"Permalink=
 to this headline">=C2=B6</a></h3>
<p>Swift provides five levels of access control: open, public, internal, fi=
le private, and private. You can mark a declaration with one of the access-=
level modifiers below to specify the declaration=E2=80=99s access level. Ac=
cess control is discussed in detail in <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html"><sp=
an class=3D"doc">Access Control</span></a>.</p>
<dl class=3D"docutils">
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">open</=
span></code></dt>
<dd>Apply this modifier to a declaration to indicate the declaration can be=
 accessed and subclassed by code in the same module as the declaration. Dec=
larations marked with the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">open</span></code> access-level modifier can also be access=
ed and subclassed by code in a module that imports the module that contains=
 that declaration.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">public=
</span></code></dt>
<dd>Apply this modifier to a declaration to indicate the declaration can be=
 accessed and subclassed by code in the same module as the declaration. Dec=
larations marked with the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">public</span></code> access-level modifier can also be acce=
ssed (but not subclassed) by code in a module that imports the module that =
contains that declaration.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">intern=
al</span></code></dt>
<dd>Apply this modifier to a declaration to indicate the declaration can be=
 accessed only by code in the same module as the declaration. By default, m=
ost declarations are implicitly marked with the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">internal</span></code> access-level m=
odifier.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">filepr=
ivate</span></code></dt>
<dd>Apply this modifier to a declaration to indicate the declaration can be=
 accessed only by code in the same source file as the declaration.</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">privat=
e</span></code></dt>
<dd>Apply this modifier to a declaration to indicate the declaration can be=
 accessed only by code within the declaration=E2=80=99s immediate enclosing=
 scope.</dd>
</dl>
<p>For the purpose of access control, extensions to the same type that are =
in the same file share an access-control scope. If the type they extend is =
also in the same file, they share the type=E2=80=99s access-control scope. =
Private members declared in the type=E2=80=99s declaration can be accessed =
from extensions, and private members declared in one extension can be acces=
sed from other extensions and from the type=E2=80=99s declaration.</p>
<p>Each access-level modifier above optionally accepts a single argument, w=
hich consists of the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">set</span></code> keyword enclosed in parentheses (for example, =
<code class=3D"docutils literal notranslate"><span class=3D"pre">private(se=
t)</span></code>). Use this form of an access-level modifier when you want =
to specify an access level for the setter of a variable or subscript that=
=E2=80=99s less than or equal to the access level of the variable or subscr=
ipt itself, as discussed in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/AccessControl.html#ID18"><span cla=
ss=3D"std std-ref">Getters and Setters</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a declaration modifier</p><div class=3D"syntax-group"><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_declaration-modif=
ier"></a>declaration-modifier</span><span class=3D"arrow"> =E2=86=92 </span=
> <code>class</code> |  <code>convenience</code> |  <code>dynamic</code> | =
 <code>final</code> |  <code>infix</code> |  <code>lazy</code> |  <code>opt=
ional</code> |  <code>override</code> |  <code>postfix</code> |  <code>pref=
ix</code> |  <code>required</code> |  <code>static</code> |  <code>unowned<=
/code> |  <code>unowned</code> <code>(</code> <code>safe</code> <code>)</co=
de> |  <code>unowned</code> <code>(</code> <code>unsafe</code> <code>)</cod=
e> |  <code>weak</code></p><p class=3D"syntax-def"><span class=3D"syntax-de=
f-name"><a id=3D"grammar_declaration-modifier_1052"></a>declaration-modifie=
r</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_access-level-modifier">access-level-modifier</a></span=
> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gram=
mar_declaration-modifier_1053"></a>declaration-modifier</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gramma=
r_mutation-modifier">mutation-modifier</a></span> </p><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_declaration-modifiers">=
</a>declaration-modifiers</span><span class=3D"arrow"> =E2=86=92 </span> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Declarations.html#grammar_declaration-modifier">declarat=
ion-modifier</a></span>  <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_dec=
laration-modifiers">declaration-modifiers</a></span> <sub>opt</sub></p></di=
v><div class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax=
-def-name"><a id=3D"grammar_access-level-modifier"></a>access-level-modifie=
r</span><span class=3D"arrow"> =E2=86=92 </span> <code>private</code> |  <c=
ode>private</code> <code>(</code> <code>set</code> <code>)</code></p><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_access-l=
evel-modifier_1054"></a>access-level-modifier</span><span class=3D"arrow"> =
=E2=86=92 </span> <code>fileprivate</code> |  <code>fileprivate</code> <cod=
e>(</code> <code>set</code> <code>)</code></p><p class=3D"syntax-def"><span=
 class=3D"syntax-def-name"><a id=3D"grammar_access-level-modifier_1055"></a=
>access-level-modifier</span><span class=3D"arrow"> =E2=86=92 </span> <code=
>internal</code> |  <code>internal</code> <code>(</code> <code>set</code> <=
code>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a=
 id=3D"grammar_access-level-modifier_1056"></a>access-level-modifier</span>=
<span class=3D"arrow"> =E2=86=92 </span> <code>public</code> |  <code>publi=
c</code> <code>(</code> <code>set</code> <code>)</code></p><p class=3D"synt=
ax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_access-level-modif=
ier_1057"></a>access-level-modifier</span><span class=3D"arrow"> =E2=86=92 =
</span> <code>open</code> |  <code>open</code> <code>(</code> <code>set</co=
de> <code>)</code></p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_mutation-modifier"></=
a>mutation-modifier</span><span class=3D"arrow"> =E2=86=92 </span> <code>mu=
tating</code> |  <code>nonmutating</code></p></div></div></div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Statements.html">Statements</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Attributes.html">Attributes</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAAAyCAYAAAAZUZThAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA
IGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAABIsSURBVHja7J1pVJvX
mcd/Qvu+gkDsq1hiYoPBLTZestmpm3gaJ2nSJE067UyOu85pO9OMp5OeSWc6OTNtZ6aJk9Nz0k5S
O3WmjdMmThvbSWwHHDdmCzY2ZjVgsAAjkAUyEgKh+SAQyCwBjF03ef+fhN5773Pvc5//fZYrCVEw
GESAAAGzQwJw14+OA2QDO4CHAZOgGgGfQLiA3cDz+3eWNACIgsEgd/3ouB2RqEFu1CDVyBFFRQmq
EvCJQ3A8yKjHx4jLA8Fgyv6dJR2SiWc75EY1Y1Ixw54RhLBLwCcRIpEImVSM3KBmxOXZATwx6Soe
GZOIGfGPCeQQ8Mn1IMEgI/4xAlIJwN+EcxDANDI2jkANAQLANxZAMpGHS6bHXwIECCAiihKycQEC
5oFAEAECBIIIECAQRICAZYdkWmYiaEOAAMGDCBCwBA8i+A8BAuYLsa6VixKJSDEr2JBhYGOmAYCj
zZd4r+US7f0+xoXQTsBfRg6yvAPLJVHYrSo2ZuopSdNjVEnDzx4ojGFzjpHj59wcbXbT2DvMyNj4
dV34F1Za+FSaHoBvvtYqWIKA6+NBlLIoipJ0bMjUk29To1NKZ21nVEnZepOF0nQ9pxyXea/ZTeX5
Qbz+pRPFrBSzPd9CcZqeRLMSAK8/QIPDw6kuDwcbXfR7AwCogsPYbfEfy02dTv4X/9RNTfewYOlX
T5CrcyF6hYR1GQbWZ+jJiVUjlyws/9cppaxLN1CUrONsz2XKWtwca7mE2ze2aHI8c38mZq38CsKK
WZWiZ1WKHsYD/PrUQGi1welE/HiFedPJr4nyCxnmjeBBvrrexsaspX/PSi6JYmWClpUJWvJtKv79
0PnFyV8bFybH0aoG3q1uBiA3xUpGQjR56fG8XtEECsvHflOnkz84HhCsfDkIcrW58ksHKjnXauKW
ggxSrMYljdHe6+JwTQvlzQMERdZF9V2XHTL8I1UN/NO+OmS6ib8v9DLma2XU48KUVYwoONNpfOzq
BMHI10Id5AbwIB0+FU3vX+DNqjZK7LFsXp1FXoqVqCjRvP3Gx4Ocae/lYFUTxxt76B2RIdeZkSiX
Ng/vmBiNLTP8t0yzMLI+vsbKxhwzZq0MgEaHh7fr+3njrGtG28I4FRuzDOTGayNyneo2Ny9X9tLq
Golo/8z2DOw2DS+Vd/FyrTNC1r6Kbn5+ojdi7K0rLBSm6lHKxAB82ObmwBknR9qGrnqfDn1jJQA7
9pwlySDjngIrdpsGgM5+L4fr+3m51olZKeZrpfHheUyub1f5hXAeNz283WI3kp+gJTteE5739PGu
RLpRzkNFVnJsmrDOr0Sjw8M39rVEyHms2MrqVEO4z3wybiiCSJRaJEotbr+X1+v7OXjqMGvSLNxZ
nEVxdiJSiTii/ehYgIqGTt6qaOLEOSc+iQ6ZNhG1YWnMcLqGsBi1FOfEYz7dOmMT58OTdySxzh4Z
HtptmrDhXEmS796RjFk3M9dZZzdRmKLn279tiiDJuH8Y0KDCO0NWwDsYfn13jpGv35Y8Y36rUvWs
StVjmyDYsiTyhRZKc6Ij3ks0K3m0NAGNXBwqdFhUM9aXbFbw5b1NEf22ZOl5tDRhhozJ8WL1Mn7y
niOCHD+9LwulXIzzkoe9B2rRqOTcWpyDSiELRwKtPUOAdKrP/Vlh8l0pIz1GxVOLDMsXR5Bl8MNW
rYxks5Yul56uAQ9lXQMca/4TN8ef4u6SXAoyQ4ljTfMF3jhez8kLlxlXGpGZM0g3a0g0Kmh3eukd
8i9a9juVTTxwRyEWvYpffjGXP9Ze5NWTfQsiyjq7ib0HKnjpnVp6B708VJrDdx+5I2S0+SbeqB+I
aP/a4Woy4k0crm7mzZpzAPzDPZ/mwS3FKOVituXp+Wl574yYZ2txCiq5lPpzDo7VttB50c2w1ABB
DWalmL8uDemno7ufH//6MMcaHeTFG/nWvaUU5aVyX7GVD9oHZ3ioj4y3Ztnb0pxojlQ28Is/VnDm
govPFqTxj49tRqWQsb04jmGfnx/vPsTL5Wex6pR87/Pr2VSUTaJFxd3ZhohD4xeHT1OUIOFYbQtl
de2cueAiL97Iv/3tVpLjzGzOj+HFEz3hvfhCgTlEDtcQX/yP1xiUGgkGxmjqdPKdh24FYH/1Baq6
R1CY4gD4u03xKGVihn1+nvvt0fC8Hr1tJQ9uKWad3cTd5wdn9fg3hAd5YLWVzTkmbEYFvW4f77W4
KW/W09gTzUm3i6pXKsiwhE7dFucIUn0MUms89lgNpZkGNmQYsOrlOFw+Dp4d4JWq3kXJf/bYBaxG
NZuKslHKxGwvjuMzK2MWRJS9ByrYdbwHZfwqopMk7G/vo7CygU1F2STFaGe03117ibEPupDpLETf
tB6AXcc7Kbm5n+Q4Mynm2UMGlVzKkcoGnthbgVxnIUqmJkoMEiXcm29GJQ9tx1d3HcCrTSL6pgy6
/T5++GoNb+SlopJLuTVDS2vlyFXv17DPz38fbMSjziT6JgXlAy5uPd3GxtV2APa8VcH+doi+aT2B
wBi/Km9jU1F26CBURlYYFaY4vvTsO8h1FqSa0Hjdfh+vvnea7zywAYAVMQqOdlwGwKIOhd2nz3Uz
GpOLShxa9xvn+vjOxJglKzI4PTIQDjvt8ToAnt9XHjGvXce7w3r/dIrq2hHkav2H/7KbMb8KEQpi
9Qo+X6jg9mwjlR1DHDqro67LRIc3FEOr47WsSNByR46JomQtJvWUQY35ffgvuxc9H6UlkZ37TnFb
dTMP3lFIbpotgii/OeFgz4ezhyfNriBKS2JYDzJ9NBc9gTmLwHJTHJMBVkGcCp1CAql5IBKFK0dz
zf+/DjaiS1kxI6fOi1OEvcfaoiKImgwldDBupqM7ZATR6sXtVXCOvW139HNZbSNKLCEISDVGeoem
DP+EI4BMHx3qK5bQ4TdMjRmYub7JNZmVYvJj1YCOJONUq8Cod6rPRJVNJJbBhHwm9B4OS0d94fcL
4hVTxJYa2bxSP02yibZuF8lxZpJj1Mte0F42D7K7vJnfH62mJDuObSW5rEiNxaSWsTnXTEmantou
D+82hth9q93IygQNWoUknKjXtfXw+vF6jjd0MyTWoZow2MVAY8ukbMDFwWffYXOWMYIoj5YmcrZn
mOpZLs1O9vohKvLUF0XNrZqHV1m4JdcSTtAXXMjo7mdYbWO2soVFFzKC5DgzO7eZ5xwjRq9Ylv06
1XYRkVgy55rbvDLE01Qils0tN2Mi4S5MM8zIEWZDr8tDToqVvNQYzJWDYe++KVUXbvNBy0UglAPG
aKbu1P75/oI5x7Xo1dcyB7m6gVTmREZH/bzdOsC7p99lbWY0d67JoiAzHq1CRmmGgbXpIeZHTZy0
l31+apov8NaJJt5v7mNcaUZmzEQllS15PjK1EZnaSFm/i4PPvMOXS1N4/J5QGLQ110C1YyZB3OOK
ycP/I8umP9icxLrskAHXn3NwsqmL+vZQOPiVbSUkx5nn1OewbzRkhLM8sxjU4dCn3TF3It7W7V4W
FxIlUUBw7ht2sVQxv5yJZ4U2FU/enY5KLmHY52d/2WkcTjddF93kplh5cEvxjHm8dKSJ4pxELHoV
ux6wc/TsAGq5mPXZoeLFkcoGPnSCRDHzUKg/51h4iXt5PcjVjxwllWKJtTHktXDM0U/Z7uPcnKDh
s5+yU5SdiEUXMgLn4GUqGzp584NGTnZ5iNKYkcXa0SpleEYCyzIXmcaATGNgz8lutnzaSXKcBYsm
atrYUzJEYvEsMoMzXmcY5WFyVJ5p42svlCHVGJAoQifdF3yj8++USDTn2urPOchNs9HucPLYM2/P
Uy3UoLamLu4iZFaZwQWt+aNYtzVXH86dnnhuP1XOELmiZCqkuvFZ+3QE9Dzx3H5+9u3tmLVythfH
hXVQXtvCiye6J0r1ofYnmx3kJIfCr/l0A6C/Iny9YUKsLKuK9RlGcmJVdAz4ONyop+6ChdNDbmpe
rSE7up51N4XCpmOnO2no8yHTW1HY4lkRr+MWu5Fkk4KzPcOUtbho6l2ezw8pTHGolYqI2HepSNBO
uZk/VHXM2IzkuKV/kqCt201umo3cNBuFq1bT4hrhLwEWjThs3HWj0aitmvCznCTDHGGihqcf3caw
z8/nvv+/9A56w95frrNE3GMB9EzLjb72uVvY82HfdVvfsoVY995sZtNEXT0/QcuGTAM1nR7+UOek
7oKJNo+bxvLOidPdhD5Bz4p4DVtXWChI1IQ/1JifoCVGHcWPDi6cIJvSdDxSEk9Fq4vKjiGqHaFq
SYZJzkPFsVgMoU072dIz92G6gAN5fHSq/HzX2jzef7NzIjGV8PUN8eEa/rxjzvH+qxXn2bo2B4Cd
d6bw96+10u8dm3ZJJuHOHCN7ahZpHMHFz2UxOpk8dHLTbKxJndL9pjQdW4sSZ51Hfow8HJI9+Nkt
OAZHI4Y+cm4wsqx+ysnDG0P3XPetiQ3lkhNyJrEt18iZnmFaBkauDUGuNqh5eu97HM8ycfvqTFZm
2NAppWzMMrI2XU9l+yDvNAzw4fnQrfaqJC23ZZsoStEhFYcSMP9YgNoWB29XNVPWNEDQlLZg2QGf
h0SLkkSLku1r5kqQnbxS6SCotC7ZFt5u6mfHxIVkYUY0v3xYw7B/jCSzCqVcTEd3KJRbAj9oH9Xy
831lPL59PYnRal55PJ9GR6jqp5JJSLSECgK7axZ/el5Lfhyr6yAnJaTTJ7el09nvDc93svJ2ZZ8D
p7v4q3wtuWk2Hts482J0J3Cg9iI/PtoVrm499eK7PL3jM6gUMp6+306n08uwP3SA2G2hUvy/vlZP
88ANWsUa1SfyVrOTQ3VlrEk3sXl1JquzEtBrFJSkG/hUmp66rtCGr0jQhhN1t8dHVVMXB6uaOdE6
QEBhQKZPXNR3gTsGvFSeaaMoL3XWev/rRz9kd1kzI+YsRFeV1xh56sV3efKxW7EYtWGjdbqGePY3
f6JrYIT/+dZdSxpbLFOw+1Q3g8OHuP+2ApLjLOGNn0TlmbYbLsR6qaqPWH0td61fiUouCc/5SGUD
//m7Kv7lobUz9uWbt+eQYrPMmnSn2CyoFDK2rIyhZ3Ak7DFPjZj43nP7+eLmAoryUsO6n34Atl90
A/JlXd/kr7sHvcrlGTg4HsDvGYDhAewxSjYXpnNLQQZmnSqiXf/gMIdrWjhY3UrjRS+oTMg0JkRR
4kXLDPh9DF9sY8TdR6ndhkETyjkueXwca7mIypKIwhgXUdb0Oju53BsyOEve+hljzvV8zOdhsLOe
takmDBoFlzw+3m8bQG1NRSxTcqm1BqnGiD55Kj9xd9Qx6nHNeH82jAz24e3rxG6WkRZrCK+jvNGB
XB+NNiHnI/Uxfe665BURn0dznikDQG1NDd/9LFQnc/W93NuGzu+kODOUbFc0d+MWG1BbU/F0NzPi
7gvP4+GCaB7bkITTNcRDP3yZgfHI8vGYd4jf/+BBkm0WGs738/V97RG69zo7MQQ9YVkA+6vPIVFo
0CbmzluOXgyU3hH27ywRLTtBpogyzph3iNGhPpK0cHtBKluKQ7e0ByoaebumjfNDINVGI1Fql+1f
Loz5PIyPjU6UMqXhCtNyY1LOtZIR8PsI+L3XfB3Ltt+BMUYnLoKlSu2MO5ZJPLs9hewkM3sPVfHC
qcCs7b6/XsfGwkzOtvfyjd91zStr0rMvNyYJcs2+ky6KikKq1iNV6egZGeaF8k52vVkNgFwfg1wX
h8qqYv4LiCXEjNfJkK61HLFMsWyn4fWASCxZkKF6Lg8DZlZlpyA60zHjeaFNTXFeykRRpfuqZN1Q
SfrcmhMhVqhRKdSoYlIWlQgK+PihrK6T1TmJZCdZ+L+v6DhSP3UpuiJBiz0+lMN0OJz87Ej7jDDw
ekMiWKuA64nX6gcJ/OogX7qrBItRy71rbJF5jmuIQx/U85M/nMKQVvBnt8tlvUkXIOCjINdZeP1c
H3t37iE7WhUuRABUNnfT5wuiMMZiSFt1Q9ikRNgyAdefJNHIddE4/D66nN4pY7StxCi+sUxSIIiA
Pxv+EgoRQg4iQMA8EH68WoCAhXgQwYEIECB4EAEClpqkCz5EgIC5CDIgCmISKCJAAJOf+B6YHmLt
lgbHBc0IEABIx8cBXphOkOelowGkgXFEgn4EfII9hzQwjnQsAPD89BCrEciRBQI7ZIHAI4BRUJeA
TyBcwG7g+f07S9ph4gtTAgQImB3/PwDuN9LAj5N4JQAAAABJRU5ErkJggg==

------MultipartBoundary--iw0H4oYCKxLW7mCKonc1B3M2OgEWTK4IhVIjBNr8Zs------
