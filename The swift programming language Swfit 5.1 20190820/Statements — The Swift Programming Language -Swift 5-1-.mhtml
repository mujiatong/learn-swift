From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Statements.html
Subject: =?utf-8?Q?Statements=20=E2=80=94=20The=20Swift=20Programming=20Language?=
 =?utf-8?Q?=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:59:53 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----"


------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/ReferenceManual/Statements.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Statements =E2=80=94 The Swift Programming Language (Swift 5.1)<=
/title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guide</a></l=
i>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.h=
tml">Language Reference</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Abo=
ut the Language Reference</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/LexicalStructure.html">Lexical Stru=
cture</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Types.html">Types</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Expressions.html">Expressions</a></=
li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#">S=
tatements</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html">Declarations</a>=
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Attributes.html">Attributes</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Patterns.html">Patterns</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/GenericParametersAndArguments.html"=
>Generic Parameters and Arguments</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html">Summary=
 of the Grammar</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#">Statements</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID429">Loop Statements</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID431">For-In Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID432">While Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID433">Repeat-While Statement</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID434">Branch Statements</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID435">If Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID524">Guard Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID436">Switch Statement</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID437">Switch Statements Must Be Exhaust=
ive</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID602">Switching Over Future Enumeration=
 Cases</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID438">Execution Does Not Fall Through C=
ases Implicitly</a></li>
</ul>
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID439">Labeled Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID440">Control Transfer Statements</a><u=
l>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID441">Break Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID442">Continue Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID443">Fallthrough Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID444">Return Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID518">Throw Statement</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID532">Defer Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID533">Do Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID538">Compiler Control Statements</a><u=
l>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID539">Conditional Compilation Block</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID540">Line Control Statement</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID582">Compile-Time Diagnostic Statement=
</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#ID522">Availability Condition</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"statements">
<h1>Statements<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Statements.html#statements" title=3D"Permalink to this=
 headline">=C2=B6</a></h1>
<p>In Swift, there are three kinds of statements: simple statements, compil=
er control statements, and control flow statements. Simple statements are t=
he most common and consist of either an expression or a declaration. Compil=
er control statements allow the program to change aspects of the compiler=
=E2=80=99s behavior and include a conditional compilation block and a line =
control statement.</p>
<p>Control flow statements are used to control the flow of execution in a p=
rogram. There are several types of control flow statements in Swift, includ=
ing loop statements, branch statements, and control transfer statements. Lo=
op statements allow a block of code to be executed repeatedly, branch state=
ments allow a certain block of code to be executed only when certain condit=
ions are met, and control transfer statements provide a way to alter the or=
der in which code is executed. In addition, Swift provides a <code class=3D=
"docutils literal notranslate"><span class=3D"pre">do</span></code> stateme=
nt to introduce scope, and catch and handle errors, and a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">defer</span></code> stateme=
nt for running cleanup actions just before the current scope exits.</p>
<p>A semicolon (<code class=3D"docutils literal notranslate"><span class=3D=
"pre">;</span></code>) can optionally appear after any statement and is use=
d to separate multiple statements if they appear on the same line.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a statement</p><div class=3D"syntax-group"><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_statement"></a>statement</sp=
an><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-catego=
ry"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Expression=
s.html#grammar_expression">expression</a></span>  <code>;</code><sub>opt</s=
ub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gra=
mmar_statement_1167"></a>statement</span><span class=3D"arrow"> =E2=86=92 <=
/span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Declarations.html#grammar_declaration">declarat=
ion</a></span>  <code>;</code><sub>opt</sub></p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_statement_1168"></a>statement=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statem=
ents.html#grammar_loop-statement">loop-statement</a></span>  <code>;</code>=
<sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_statement_1169"></a>statement</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Statements.html#grammar_branch-state=
ment">branch-statement</a></span>  <code>;</code><sub>opt</sub></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_statement_=
1170"></a>statement</span><span class=3D"arrow"> =E2=86=92 </span> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Statements.html#grammar_labeled-statement">labeled-statement</=
a></span>  <code>;</code><sub>opt</sub></p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_statement_1171"></a>statement</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.=
html#grammar_control-transfer-statement">control-transfer-statement</a></sp=
an>  <code>;</code><sub>opt</sub></p><p class=3D"syntax-def"><span class=3D=
"syntax-def-name"><a id=3D"grammar_statement_1172"></a>statement</span><spa=
n class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#g=
rammar_defer-statement">defer-statement</a></span>  <code>;</code><sub>opt<=
/sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"g=
rammar_statement_1173"></a>statement</span><span class=3D"arrow"> =E2=86=92=
 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Statements.html#grammar_do-statement">do-stat=
ement</a></span>  <code>;</code><sub>opt</sub></p><p class=3D"syntax-def"><=
span class=3D"syntax-def-name"><a id=3D"grammar_statement_1174"></a>stateme=
nt</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_compiler-control-statement">compiler-control-statement<=
/a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a i=
d=3D"grammar_statements"></a>statements</span><span class=3D"arrow"> =E2=86=
=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Statements.html#grammar_statement">stateme=
nt</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Statements.html#grammar_statements">sta=
tements</a></span> <sub>opt</sub></p></div></div><div class=3D"section" id=
=3D"ID429">
<h2>Loop Statements<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID429" title=3D"Permalink to this=
 headline">=C2=B6</a></h2>
<p>Loop statements allow a block of code to be executed repeatedly, dependi=
ng on the conditions specified in the loop. Swift has three loop statements=
: a <code class=3D"docutils literal notranslate"><span class=3D"pre">for</s=
pan></code>-<code class=3D"docutils literal notranslate"><span class=3D"pre=
">in</span></code> statement, a <code class=3D"docutils literal notranslate=
"><span class=3D"pre">while</span></code> statement, and a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">repeat</span></code>-<code=
 class=3D"docutils literal notranslate"><span class=3D"pre">while</span></c=
ode> statement.</p>
<p>Control flow in a loop statement can be changed by a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">break</span></code> statement=
 and a <code class=3D"docutils literal notranslate"><span class=3D"pre">con=
tinue</span></code> statement and is discussed in <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements=
.html#ID441"><span class=3D"std std-ref">Break Statement</span></a> and <a =
class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Statements.html#ID442"><span class=3D"std std-ref">Continue Sta=
tement</span></a> below.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a loop statement</p><div class=3D"syntax-group"><p class=3D"syntax-de=
f"><span class=3D"syntax-def-name"><a id=3D"grammar_loop-statement"></a>loo=
p-statement</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Statements.html#grammar_for-in-statement">for-in-statement</a></span> =
</p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gramma=
r_loop-statement_1175"></a>loop-statement</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Statements.html#grammar_while-statement=
">while-statement</a></span> </p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_loop-statement_1176"></a>loop-statement</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.=
html#grammar_repeat-while-statement">repeat-while-statement</a></span> </p>=
</div></div><div class=3D"section" id=3D"ID431">
<h3>For-In Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#ID431" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">for</=
span></code>-<code class=3D"docutils literal notranslate"><span class=3D"pr=
e">in</span></code> statement allows a block of code to be executed once fo=
r each item in a collection (or any type) that conforms to the <a class=3D"=
reference external" href=3D"https://developer.apple.com/documentation/swift=
/sequence"><code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Sequence</span></code></a> protocol.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">for</=
span></code>-<code class=3D"docutils literal notranslate"><span class=3D"pr=
e">in</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">for</span> <span class=3D"gi">item</span> <span class=3D"k">in=
</span> <span class=3D"gi">collection</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mak=
eIterator()</span></code> method is called on the <em>collection</em> expre=
ssion to obtain a value of an iterator type=E2=80=94that is, a type that co=
nforms to the <a class=3D"reference external" href=3D"https://developer.app=
le.com/documentation/swift/iteratorprotocol"><code class=3D"docutils litera=
l notranslate"><span class=3D"pre">IteratorProtocol</span></code></a> proto=
col. The program begins executing a loop by calling the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">next()</span></code> method o=
n the iterator. If the value returned is not <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">nil</span></code>, it is assigned to the=
 <em>item</em> pattern, the program executes the <em>statements</em>, and t=
hen continues execution at the beginning of the loop. Otherwise, the progra=
m does not perform assignment or execute the <em>statements</em>, and it is=
 finished executing the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">for</span></code>-<code class=3D"docutils literal notranslate=
"><span class=3D"pre">in</span></code> statement.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a for-in statement</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_for-in-statement"></a=
>for-in-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>for<=
/code> <code>case</code><sub>opt</sub> <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Patterns.html#g=
rammar_pattern">pattern</a></span>  <code>in</code> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Ex=
pressions.html#grammar_expression">expression</a></span>  <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Statements.html#grammar_where-clause">where-clause</a></span> <sub>opt<=
/sub> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_code-block">code-block=
</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID432">
<h3>While Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID432" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> statement allows a block of code to be executed repeatedly, =
as long as a condition remains true.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">while</span> <span class=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">while=
</span></code> statement is executed as follows:</p>
<ol class=3D"arabic">
<li><p class=3D"first">The <em>condition</em> is evaluated.</p>
<p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">true=
</span></code>, execution continues to step 2. If <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">false</span></code>, the program is=
 finished executing the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">while</span></code> statement.</p>
</li>
<li><p class=3D"first">The program executes the <em>statements</em>, and ex=
ecution returns to step 1.</p>
</li>
</ol>
<p>Because the value of the <em>condition</em> is evaluated before the <em>=
statements</em> are executed, the <em>statements</em> in a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">while</span></code> statem=
ent can be executed zero or more times.</p>
<p>The value of the <em>condition</em> must be of type <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">Bool</span></code> or a type b=
ridged to <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Bool</span></code>. The condition can also be an optional binding declarati=
on, as discussed in <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/TheBasics.html#ID333"><span class=3D"std s=
td-ref">Optional Binding</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a while statement</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_while-statement"></a>w=
hile-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>while</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#grammar_condition-list">conditio=
n-list</a></span>  <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_code-bloc=
k">code-block</a></span> </p></div><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_condition-list=
"></a>condition-list</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Statements.html#grammar_condition">condition</a></span>  |  <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Statements.html#grammar_condition">condition</a></span>=
  <code>,</code> <span class=3D"syntactic-category"><a href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Statements.html#grammar_condition-lis=
t">condition-list</a></span> </p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_condition"></a>condition</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar=
_expression">expression</a></span>  |  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html=
#grammar_availability-condition">availability-condition</a></span>  |  <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Statements.html#grammar_case-condition">case-condition</a>=
</span>  |  <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Statements.html#grammar_optional-binding-c=
ondition">optional-binding-condition</a></span> </p></div><div class=3D"syn=
tax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_case-condition"></a>case-condition</span><span class=3D"arrow"> =
=E2=86=92 </span> <code>case</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Patterns.html#gram=
mar_pattern">pattern</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#gra=
mmar_initializer">initializer</a></span> </p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_optional-binding-condition"></a>=
optional-binding-condition</span><span class=3D"arrow"> =E2=86=92 </span> <=
code>let</code> <span class=3D"syntactic-category"><a href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Patterns.html#grammar_pattern">pattern=
</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swi=
ft.org/swift-book/ReferenceManual/Declarations.html#grammar_initializer">in=
itializer</a></span>  |  <code>var</code> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Patterns.htm=
l#grammar_pattern">pattern</a></span>  <span class=3D"syntactic-category"><=
a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.ht=
ml#grammar_initializer">initializer</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID433">
<h3>Repeat-While Statement<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Statements.html#ID433" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">repea=
t</span></code>-<code class=3D"docutils literal notranslate"><span class=3D=
"pre">while</span></code> statement allows a block of code to be executed o=
ne or more times, as long as a condition remains true.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">repea=
t</span></code>-<code class=3D"docutils literal notranslate"><span class=3D=
"pre">while</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">repeat</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>} <span class=3D"k">while</span> <span class=3D"gi">condition</spa=
n>
</li></ol></div></div></div>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">repea=
t</span></code>-<code class=3D"docutils literal notranslate"><span class=3D=
"pre">while</span></code> statement is executed as follows:</p>
<ol class=3D"arabic">
<li><p class=3D"first">The program executes the <em>statements</em>, and ex=
ecution continues to step 2.</p>
</li>
<li><p class=3D"first">The <em>condition</em> is evaluated.</p>
<p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">true=
</span></code>, execution returns to step 1. If <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">false</span></code>, the program is f=
inished executing the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">repeat</span></code>-<code class=3D"docutils literal notranslat=
e"><span class=3D"pre">while</span></code> statement.</p>
</li>
</ol>
<p>Because the value of the <em>condition</em> is evaluated after the <em>s=
tatements</em> are executed, the <em>statements</em> in a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">repeat</span></code>-<code =
class=3D"docutils literal notranslate"><span class=3D"pre">while</span></co=
de> statement are executed at least once.</p>
<p>The value of the <em>condition</em> must be of type <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">Bool</span></code> or a type b=
ridged to <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Bool</span></code>. The condition can also be an optional binding declarati=
on, as discussed in <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/TheBasics.html#ID333"><span class=3D"std s=
td-ref">Optional Binding</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a repeat-while statement</p><div class=3D"syntax-group"><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_repeat-while-st=
atement"></a>repeat-while-statement</span><span class=3D"arrow"> =E2=86=92 =
</span> <code>repeat</code> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_=
code-block">code-block</a></span>  <code>while</code> <span class=3D"syntac=
tic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/=
Expressions.html#grammar_expression">expression</a></span> </p></div></div>=
</div>
</div>
<div class=3D"section" id=3D"ID434">
<h2>Branch Statements<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Statements.html#ID434" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>Branch statements allow the program to execute certain parts of code dep=
ending on the value of one or more conditions. The values of the conditions=
 specified in a branch statement control how the program branches and, ther=
efore, what block of code is executed. Swift has three branch statements: a=
n <code class=3D"docutils literal notranslate"><span class=3D"pre">if</span=
></code> statement, a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">guard</span></code> statement, and a <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">switch</span></code> statement.</p>
<p>Control flow in an <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">if</span></code> statement or a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">switch</span></code> statement can be cha=
nged by a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
break</span></code> statement and is discussed in <a class=3D"reference int=
ernal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements=
.html#ID441"><span class=3D"std std-ref">Break Statement</span></a> below.<=
/p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a branch statement</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_branch-statement"></a=
>branch-statement</span><span class=3D"arrow"> =E2=86=92 </span> <span clas=
s=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refer=
enceManual/Statements.html#grammar_if-statement">if-statement</a></span> </=
p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_=
branch-statement_1177"></a>branch-statement</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Statements.html#grammar_guard-statem=
ent">guard-statement</a></span> </p><p class=3D"syntax-def"><span class=3D"=
syntax-def-name"><a id=3D"grammar_branch-statement_1178"></a>branch-stateme=
nt</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_switch-statement">switch-statement</a></span> </p></div=
></div><div class=3D"section" id=3D"ID435">
<h3>If Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Statements.html#ID435" title=3D"Permalink to this he=
adline">=C2=B6</a></h3>
<p>An <code class=3D"docutils literal notranslate"><span class=3D"pre">if</=
span></code> statement is used for executing code based on the evaluation o=
f one or more conditions.</p>
<p>There are two basic forms of an <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">if</span></code> statement. In each form, the open=
ing and closing braces are required.</p>
<p>The first form allows code to be executed only when a condition is true =
and has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The second form of an <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">if</span></code> statement provides an additional <em>else c=
lause</em> (introduced by the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">else</span></code> keyword) and is used for executing o=
ne part of code when the condition is true and another part of code when th=
e same condition is false. When a single else clause is present, an <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">if</span></code> =
statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements to execute if condition is true<=
/span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"gi">statements to execute if condition is false=
</span>
</li><li>}
</li></ol></div></div></div>
<p>The else clause of an <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">if</span></code> statement can contain another <code class=
=3D"docutils literal notranslate"><span class=3D"pre">if</span></code> stat=
ement to test more than one condition. An <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">if</span></code> statement chained together=
 in this way has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"gi">condition 1</span> {
</li><li>    <span class=3D"gi">statements to execute if condition 1 is tru=
e</span>
</li><li>} <span class=3D"k">else</span> <span class=3D"k">if</span> <span =
class=3D"gi">condition 2</span> {
</li><li>    <span class=3D"gi">statements to execute if condition 2 is tru=
e</span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"gi">statements to execute if both conditions ar=
e false</span>
</li><li>}
</li></ol></div></div></div>
<p>The value of any condition in an <code class=3D"docutils literal notrans=
late"><span class=3D"pre">if</span></code> statement must be of type <code =
class=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></cod=
e> or a type bridged to <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Bool</span></code>. The condition can also be an optional bin=
ding declaration, as discussed in <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID333"><span =
class=3D"std std-ref">Optional Binding</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an if statement</p><div class=3D"syntax-group"><p class=3D"syntax-def=
"><span class=3D"syntax-def-name"><a id=3D"grammar_if-statement"></a>if-sta=
tement</span><span class=3D"arrow"> =E2=86=92 </span> <code>if</code> <span=
 class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Statements.html#grammar_condition-list">condition-list</a><=
/span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Declarations.html#grammar_code-block">code-blo=
ck</a></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Statements.html#grammar_else-clause">el=
se-clause</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_else-clause"></a>else-clause</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <code>else</code> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/Declarations.html#grammar_code-block">code-block</a></span>  |  <code>el=
se</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Statements.html#grammar_if-statement">if-sta=
tement</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID524">
<h3>Guard Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID524" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">guard=
</span></code> statement is used to transfer program control out of a scope=
 if one or more conditions aren=E2=80=99t met.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">guard=
</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">guard</span> <span class=3D"gi">condition</span> <span class=
=3D"k">else</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The value of any condition in a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">guard</span></code> statement must be of type <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">Bool</span></c=
ode> or a type bridged to <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Bool</span></code>. The condition can also be an optional b=
inding declaration, as discussed in <a class=3D"reference internal" href=3D=
"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID333"><spa=
n class=3D"std std-ref">Optional Binding</span></a>.</p>
<p>Any constants or variables assigned a value from an optional binding dec=
laration in a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">guard</span></code> statement condition can be used for the rest of the=
 guard statement=E2=80=99s enclosing scope.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">els=
e</span></code> clause of a <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">guard</span></code> statement is required, and must eithe=
r call a function with the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Never</span></code> return type or transfer program contro=
l outside the guard statement=E2=80=99s enclosing scope using one of the fo=
llowing statements:</p>
<ul class=3D"simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">return=
</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">break<=
/span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">contin=
ue</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">throw<=
/span></code></li>
</ul>
<p>Control transfer statements are discussed in <a class=3D"reference inter=
nal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.h=
tml#ID440"><span class=3D"std std-ref">Control Transfer Statements</span></=
a> below. For more information on functions with the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Never</span></code> return type,=
 see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Declarations.html#ID551"><span class=3D"std std-ref">Fu=
nctions that Never Return</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a guard statement</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_guard-statement"></a>g=
uard-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>guard</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#grammar_condition-list">conditio=
n-list</a></span>  <code>else</code> <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html=
#grammar_code-block">code-block</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID436">
<h3>Switch Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#ID436" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> statement allows certain blocks of code to be executed depe=
nding on the value of a control expression.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">switch</span> <span class=3D"gi">control expression</span> {
</li><li><span class=3D"k">case</span> <span class=3D"gi">pattern 1</span>:
</li><li>    <span class=3D"gi">statements</span>
</li><li><span class=3D"k">case</span> <span class=3D"gi">pattern 2</span> =
<span class=3D"k">where</span> <span class=3D"gi">condition</span>:
</li><li>    <span class=3D"gi">statements</span>
</li><li><span class=3D"k">case</span> <span class=3D"gi">pattern 3</span> =
<span class=3D"k">where</span> <span class=3D"gi">condition</span>,
</li><li>     <span class=3D"gi">pattern 4</span> <span class=3D"k">where</=
span> <span class=3D"gi">condition</span>:
</li><li>    <span class=3D"gi">statements</span>
</li><li><span class=3D"k">default</span>:
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The <em>control expression</em> of the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">switch</span></code> statement is evaluated=
 and then compared with the patterns specified in each case. If a match is =
found, the program executes the <em>statements</em> listed within the scope=
 of that case. The scope of each case can=E2=80=99t be empty. As a result, =
you must include at least one statement following the colon (<code class=3D=
"docutils literal notranslate"><span class=3D"pre">:</span></code>) of each=
 case label. Use a single <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">break</span></code> statement if you don=E2=80=99t intend t=
o execute any code in the body of a matched case.</p>
<p>The values of expressions your code can branch on are very flexible. For=
 example, in addition to the values of scalar types, such as integers and c=
haracters, your code can branch on the values of any type, including floati=
ng-point numbers, strings, tuples, instances of custom classes, and optiona=
ls. The value of the <em>control expression</em> can even be matched to the=
 value of a case in an enumeration and checked for inclusion in a specified=
 range of values. For examples of how to use these various types of values =
in <code class=3D"docutils literal notranslate"><span class=3D"pre">switch<=
/span></code> statements, see <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID129"><span cl=
ass=3D"std std-ref">Switch</span></a> in <a class=3D"reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html"><sp=
an class=3D"doc">Control Flow</span></a>.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> case can optionally contain a <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">where</span></code> clause after each p=
attern. A <em>where clause</em> is introduced by the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">where</span></code> keyword foll=
owed by an expression, and is used to provide an additional condition befor=
e a pattern in a case is considered matched to the <em>control expression</=
em>. If a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
where</span></code> clause is present, the <em>statements</em> within the r=
elevant case are executed only if the value of the <em>control expression</=
em> matches one of the patterns of the case and the expression of the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">where</span></c=
ode> clause evaluates to <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">true</span></code>. For example, a <em>control expression</e=
m> matches the case in the example below only if it is a tuple that contain=
s two elements of the same value, such as <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">(1,</span> <span class=3D"pre">1)</span></c=
ode>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ca=
se</span> <span class=3D"k">let</span> (<span class=3D"nv">x</span>, <span =
class=3D"nv">y</span>) <span class=3D"k">where</span> <span class=3D"nv">x<=
/span> =3D=3D <span class=3D"nv">y</span>:
</li></ol></div></div></div>
<p>As the above example shows, patterns in a case can also bind constants u=
sing the <code class=3D"docutils literal notranslate"><span class=3D"pre">l=
et</span></code> keyword (they can also bind variables using the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">var</span></code> ke=
yword). These constants (or variables) can then be referenced in a correspo=
nding <code class=3D"docutils literal notranslate"><span class=3D"pre">wher=
e</span></code> clause and throughout the rest of the code within the scope=
 of the case. If the case contains multiple patterns that match the control=
 expression, all of the patterns must contain the same constant or variable=
 bindings, and each bound variable or constant must have the same type in a=
ll of the case=E2=80=99s patterns.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">switc=
h</span></code> statement can also include a default case, introduced by th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">default<=
/span></code> keyword. The code within a default case is executed only if n=
o other cases match the control expression. A <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">switch</span></code> statement can incl=
ude only one default case, which must appear at the end of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statement.</p>
<p>Although the actual execution order of pattern-matching operations, and =
in particular the evaluation order of patterns in cases, is unspecified, pa=
ttern matching in a <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">switch</span></code> statement behaves as if the evaluation is pe=
rformed in source order=E2=80=94that is, the order in which they appear in =
source code. As a result, if multiple cases contain patterns that evaluate =
to the same value, and thus can match the value of the control expression, =
the program executes only the code within the first matching case in source=
 order.</p>
<div class=3D"section" id=3D"ID437">
<h4>Switch Statements Must Be Exhaustive<a class=3D"headerlink" href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID437" title=
=3D"Permalink to this headline">=C2=B6</a></h4>
<p>In Swift, every possible value of the control expression=E2=80=99s type =
must match the value of at least one pattern of a case. When this simply is=
n=E2=80=99t feasible (for example, when the control expression=E2=80=99s ty=
pe is <code class=3D"docutils literal notranslate"><span class=3D"pre">Int<=
/span></code>), you can include a default case to satisfy the requirement.<=
/p>
</div>
<div class=3D"section" id=3D"ID602">
<h4>Switching Over Future Enumeration Cases<a class=3D"headerlink" href=3D"=
https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID602" ti=
tle=3D"Permalink to this headline">=C2=B6</a></h4>
<p>A <em>nonfrozen enumeration</em> is a special kind of enumeration that m=
ay gain new enumeration cases in the future=E2=80=94even after you compile =
and ship an app. Switching over a nonfrozen enumeration requires extra cons=
ideration. When a library=E2=80=99s authors mark an enumeration as nonfroze=
n, they reserve the right to add new enumeration cases, and any code that i=
nteracts with that enumeration <em>must</em> be able to handle those future=
 cases without being recompiled. Only the standard library, Swift overlays =
for Apple frameworks, and C and Objective-C code can declare nonfrozen enum=
erations. Enumerations you declare in Swift can=E2=80=99t be nonfrozen.</p>
<p>When switching over a nonfrozen enumeration value, you always need to in=
clude a default case, even if every case of the enumeration already has a c=
orresponding switch case. You can apply the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">@unknown</span></code> attribute to the d=
efault case, which indicates that the default case should match only enumer=
ation cases that are added in the future. Swift produces a warning if the d=
efault case matches any enumeration case that is known at compiler time. Th=
is future warning informs you that the library author added a new case to t=
he enumeration that doesn=E2=80=99t have a corresponding switch case.</p>
<p>The following example switches over all three existing cases of the stan=
dard library=E2=80=99s <a class=3D"reference external" href=3D"https://deve=
loper.apple.com/documentation/swift/mirror/ancestorrepresentation"><code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">Mirror.AncestorRep=
resentation</span></code></a> enumeration. If you add additional cases in t=
he future, the compiler generates a warning to indicate that you need to up=
date the switch statement to take the new cases into account.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">representation</span>: <span class=3D"nc">Mirro=
r</span>.<span class=3D"nc">AncestorRepresentation</span> =3D .<span class=
=3D"nv">generated</span>
</li><li><span class=3D"k">switch</span> <span class=3D"nv">representation<=
/span> {
</li><li><span class=3D"k">case</span> .<span class=3D"nv">customized</span=
>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Use the nea=
rest ancestor=E2=80=99s implementation."</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">generated</span>=
:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Generate a =
default mirror for all ancestor classes."</span>)
</li><li><span class=3D"k">case</span> .<span class=3D"nv">suppressed</span=
>:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Suppress th=
e representation of all ancestor classes."</span>)
</li><li><span class=3D"k">@unknown</span> <span class=3D"k">default</span>=
:
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Use a repre=
sentation that was unknown when this code was compiled."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Generate a default mirror for all anc=
estor classes."</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID438">
<h4>Execution Does Not Fall Through Cases Implicitly<a class=3D"headerlink"=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
ID438" title=3D"Permalink to this headline">=C2=B6</a></h4>
<p>After the code within a matched case has finished executing, the program=
 exits from the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">switch</span></code> statement. Program execution does not continue o=
r =E2=80=9Cfall through=E2=80=9D to the next case or default case. That sai=
d, if you want execution to continue from one case to the next, explicitly =
include a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
fallthrough</span></code> statement, which simply consists of the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">fallthrough</span><=
/code> keyword, in the case from which you want execution to continue. For =
more information about the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">fallthrough</span></code> statement, see <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/St=
atements.html#ID443"><span class=3D"std std-ref">Fallthrough Statement</spa=
n></a> below.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a switch statement</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_switch-statement"></a=
>switch-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>swit=
ch</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html#grammar_expression">express=
ion</a></span>  <code>{</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_switch-cases">switch-cases</a></span> <sub>opt</sub> <code>}</code></p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_swi=
tch-cases"></a>switch-cases</span><span class=3D"arrow"> =E2=86=92 </span> =
<span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-=
book/ReferenceManual/Statements.html#grammar_switch-case">switch-case</a></=
span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Statements.html#grammar_switch-cases">switch-ca=
ses</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syn=
tax-def-name"><a id=3D"grammar_switch-case"></a>switch-case</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_case-label">case-label</a></span>  <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
grammar_statements">statements</a></span> </p><p class=3D"syntax-def"><span=
 class=3D"syntax-def-name"><a id=3D"grammar_switch-case_1179"></a>switch-ca=
se</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_default-label">default-label</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Statements.html#grammar_statements">statements</a></span> </p><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_switch-c=
ase_1180"></a>switch-case</span><span class=3D"arrow"> =E2=86=92 </span> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#grammar_conditional-switch-case">conditi=
onal-switch-case</a></span> </p></div><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_case-label=
"></a>case-label</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Attributes.html#grammar_attributes">attributes</a></span> <sub>op=
t</sub> <code>case</code> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_case=
-item-list">case-item-list</a></span>  <code>:</code></p><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_case-item-list"></a>=
case-item-list</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Patterns.html#grammar_pattern">pattern</a></span>  <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Statements.html#grammar_where-clause">where-clause</a></span> <sub>o=
pt</sub> |  <span class=3D"syntactic-category"><a href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Patterns.html#grammar_pattern">pattern</a>=
</span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/Statements.html#grammar_where-clause">where-c=
lause</a></span> <sub>opt</sub> <code>,</code> <span class=3D"syntactic-cat=
egory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stateme=
nts.html#grammar_case-item-list">case-item-list</a></span> </p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_default-label"=
></a>default-label</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Attributes.html#grammar_attributes">attributes</a></span> <sub>=
opt</sub> <code>default</code> <code>:</code></p></div><div class=3D"syntax=
-group"><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"gr=
ammar_where-clause"></a>where-clause</span><span class=3D"arrow"> =E2=86=92=
 </span> <code>where</code> <span class=3D"syntactic-category"><a href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_wh=
ere-expression">where-expression</a></span> </p><p class=3D"syntax-def"><sp=
an class=3D"syntax-def-name"><a id=3D"grammar_where-expression"></a>where-e=
xpression</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/Expressions.html#grammar_expression">expression</a></span> </p></div><di=
v class=3D"syntax-group"><p class=3D"syntax-def"><span class=3D"syntax-def-=
name"><a id=3D"grammar_conditional-switch-case"></a>conditional-switch-case=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statem=
ents.html#grammar_switch-if-directive-clause">switch-if-directive-clause</a=
></span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Statements.html#grammar_switch-elseif-direct=
ive-clauses">switch-elseif-directive-clauses</a></span> <sub>opt</sub> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Statements.html#grammar_switch-else-directive-clause">swit=
ch-else-directive-clause</a></span> <sub>opt</sub> <span class=3D"syntactic=
-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Sta=
tements.html#grammar_endif-directive">endif-directive</a></span> </p><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_switch-i=
f-directive-clause"></a>switch-if-directive-clause</span><span class=3D"arr=
ow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_if-dire=
ctive">if-directive</a></span>  <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_compilation-condition">compilation-condition</a></span>  <span class=3D"=
syntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceM=
anual/Statements.html#grammar_switch-cases">switch-cases</a></span> <sub>op=
t</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_switch-elseif-directive-clauses"></a>switch-elseif-directive-claus=
es</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_elseif-directive-clause">elseif-directive-clause</a></s=
pan>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#grammar_switch-elseif-directive-=
clauses">switch-elseif-directive-clauses</a></span> <sub>opt</sub></p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_switch-=
elseif-directive-clause"></a>switch-elseif-directive-clause</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_elseif-directive">elseif-directive</a></span>  <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_compilation-condition">compilation-condition</a></span>=
  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Statements.html#grammar_switch-cases">switch-cases</=
a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-d=
ef-name"><a id=3D"grammar_switch-else-directive-clause"></a>switch-else-dir=
ective-clause</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Statements.html#grammar_else-directive">else-directive</a></span>  <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Statements.html#grammar_switch-cases">switch-cases</a><=
/span> <sub>opt</sub></p></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID439">
<h2>Labeled Statement<a class=3D"headerlink" href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Statements.html#ID439" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>You can prefix a loop statement, an <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">if</span></code> statement, a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">switch</span></code> state=
ment, or a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>do</span></code> statement with a <em>statement label</em>, which consists=
 of the name of the label followed immediately by a colon (:). Use statemen=
t labels with <code class=3D"docutils literal notranslate"><span class=3D"p=
re">break</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">continue</span></code> statements to be explicit about ho=
w you want to change control flow in a loop statement or a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">switch</span></code> state=
ment, as discussed in <a class=3D"reference internal" href=3D"https://docs.=
swift.org/swift-book/ReferenceManual/Statements.html#ID441"><span class=3D"=
std std-ref">Break Statement</span></a> and <a class=3D"reference internal"=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
ID442"><span class=3D"std std-ref">Continue Statement</span></a> below.</p>
<p>The scope of a labeled statement is the entire statement following the s=
tatement label. You can nest labeled statements, but the name of each state=
ment label must be unique.</p>
<p>For more information and to see examples of how to use statement labels,=
 see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/ControlFlow.html#ID141"><span class=3D"std std-ref">Label=
ed Statements</span></a> in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"d=
oc">Control Flow</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a labeled statement</p><div class=3D"syntax-group"><p class=3D"syntax=
-def"><span class=3D"syntax-def-name"><a id=3D"grammar_labeled-statement"><=
/a>labeled-statement</span><span class=3D"arrow"> =E2=86=92 </span> <span c=
lass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Re=
ferenceManual/Statements.html#grammar_statement-label">statement-label</a><=
/span>  <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Statements.html#grammar_loop-statement">loop-s=
tatement</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-n=
ame"><a id=3D"grammar_labeled-statement_1181"></a>labeled-statement</span><=
span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category">=
<a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.htm=
l#grammar_statement-label">statement-label</a></span>  <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/Statements.html#grammar_if-statement">if-statement</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_labeled-st=
atement_1182"></a>labeled-statement</span><span class=3D"arrow"> =E2=86=92 =
</span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Statements.html#grammar_statement-label">state=
ment-label</a></span>  <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_switch-=
statement">switch-statement</a></span> </p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_labeled-statement_1183"></a>labele=
d-statement</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/Statements.html#grammar_statement-label">statement-label</a></span>  <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Statements.html#grammar_do-statement">do-statement</a><=
/span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_statement-label"></a>statement-l=
abel</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/St=
atements.html#grammar_label-name">label-name</a></span>  <code>:</code></p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_la=
bel-name"></a>label-name</span><span class=3D"arrow"> =E2=86=92 </span> <sp=
an class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-boo=
k/ReferenceManual/LexicalStructure.html#grammar_identifier">identifier</a><=
/span> </p></div></div></div>
<div class=3D"section" id=3D"ID440">
<h2>Control Transfer Statements<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Statements.html#ID440" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>Control transfer statements can change the order in which code in your p=
rogram is executed by unconditionally transferring program control from one=
 piece of code to another. Swift has five control transfer statements: a <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">break</span>=
</code> statement, a <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">continue</span></code> statement, a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">fallthrough</span></code> statement, a=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">return</s=
pan></code> statement, and a <code class=3D"docutils literal notranslate"><=
span class=3D"pre">throw</span></code> statement.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a control transfer statement</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_control-tr=
ansfer-statement"></a>control-transfer-statement</span><span class=3D"arrow=
"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_break-sta=
tement">break-statement</a></span> </p><p class=3D"syntax-def"><span class=
=3D"syntax-def-name"><a id=3D"grammar_control-transfer-statement_1184"></a>=
control-transfer-statement</span><span class=3D"arrow"> =E2=86=92 </span> <=
span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-b=
ook/ReferenceManual/Statements.html#grammar_continue-statement">continue-st=
atement</a></span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-na=
me"><a id=3D"grammar_control-transfer-statement_1185"></a>control-transfer-=
statement</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syn=
tactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManu=
al/Statements.html#grammar_fallthrough-statement">fallthrough-statement</a>=
</span> </p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_control-transfer-statement_1186"></a>control-transfer-statement=
</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statem=
ents.html#grammar_return-statement">return-statement</a></span> </p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_control-t=
ransfer-statement_1187"></a>control-transfer-statement</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_thr=
ow-statement">throw-statement</a></span> </p></div></div><div class=3D"sect=
ion" id=3D"ID441">
<h3>Break Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID441" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">break=
</span></code> statement ends program execution of a loop, an <code class=
=3D"docutils literal notranslate"><span class=3D"pre">if</span></code> stat=
ement, or a <code class=3D"docutils literal notranslate"><span class=3D"pre=
">switch</span></code> statement. A <code class=3D"docutils literal notrans=
late"><span class=3D"pre">break</span></code> statement can consist of only=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">break=
</span></code> keyword, or it can consist of the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">break</span></code> keyword followed=
 by the name of a statement label, as shown below.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">break</span>
</li><li><span class=3D"k">break</span> <span class=3D"gi">label name</span=
>
</li></ol></div></div></div>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
break</span></code> statement is followed by the name of a statement label,=
 it ends program execution of the loop, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">if</span></code> statement, or <code class=3D=
"docutils literal notranslate"><span class=3D"pre">switch</span></code> sta=
tement named by that label.</p>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
break</span></code> statement is not followed by the name of a statement la=
bel, it ends program execution of the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">switch</span></code> statement or the innermost=
 enclosing loop statement in which it occurs. You can=E2=80=99t use an unla=
beled <code class=3D"docutils literal notranslate"><span class=3D"pre">brea=
k</span></code> statement to break out of an <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">if</span></code> statement.</p>
<p>In both cases, program control is then transferred to the first line of =
code following the enclosing loop or <code class=3D"docutils literal notran=
slate"><span class=3D"pre">switch</span></code> statement, if any.</p>
<p>For examples of how to use a <code class=3D"docutils literal notranslate=
"><span class=3D"pre">break</span></code> statement, see <a class=3D"refere=
nce internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Contr=
olFlow.html#ID137"><span class=3D"std std-ref">Break</span></a> and <a clas=
s=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Language=
Guide/ControlFlow.html#ID141"><span class=3D"std std-ref">Labeled Statement=
s</span></a> in <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Control =
Flow</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a break statement</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_break-statement"></a>b=
reak-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>break</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#grammar_label-name">label-name</=
a></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID442">
<h3>Continue Statement<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/ReferenceManual/Statements.html#ID442" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">conti=
nue</span></code> statement ends program execution of the current iteration=
 of a loop statement but does not stop execution of the loop statement. A <=
code class=3D"docutils literal notranslate"><span class=3D"pre">continue</s=
pan></code> statement can consist of only the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">continue</span></code> keyword, or it c=
an consist of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">continue</span></code> keyword followed by the name of a statement=
 label, as shown below.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">continue</span>
</li><li><span class=3D"k">continue</span> <span class=3D"gi">label name</s=
pan>
</li></ol></div></div></div>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
continue</span></code> statement is followed by the name of a statement lab=
el, it ends program execution of the current iteration of the loop statemen=
t named by that label.</p>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
continue</span></code> statement is not followed by the name of a statement=
 label, it ends program execution of the current iteration of the innermost=
 enclosing loop statement in which it occurs.</p>
<p>In both cases, program control is then transferred to the condition of t=
he enclosing loop statement.</p>
<p>In a <code class=3D"docutils literal notranslate"><span class=3D"pre">fo=
r</span></code> statement, the increment expression is still evaluated afte=
r the <code class=3D"docutils literal notranslate"><span class=3D"pre">cont=
inue</span></code> statement is executed, because the increment expression =
is evaluated after the execution of the loop=E2=80=99s body.</p>
<p>For examples of how to use a <code class=3D"docutils literal notranslate=
"><span class=3D"pre">continue</span></code> statement, see <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Co=
ntrolFlow.html#ID136"><span class=3D"std std-ref">Continue</span></a> and <=
a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/ControlFlow.html#ID141"><span class=3D"std std-ref">Labeled Sta=
tements</span></a> in <a class=3D"reference internal" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Co=
ntrol Flow</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a continue statement</p><div class=3D"syntax-group"><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_continue-statement"=
></a>continue-statement</span><span class=3D"arrow"> =E2=86=92 </span> <cod=
e>continue</code> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Statements.html#grammar_label-name">=
label-name</a></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID443">
<h3>Fallthrough Statement<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/ReferenceManual/Statements.html#ID443" title=3D"Permalink t=
o this headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">fallt=
hrough</span></code> statement consists of the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">fallthrough</span></code> keyword and =
occurs only in a case block of a <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">switch</span></code> statement. A <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">fallthrough</span></code> st=
atement causes program execution to continue from one case in a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code> =
statement to the next case. Program execution continues to the next case ev=
en if the patterns of the case label do not match the value of the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">switch</span></cod=
e> statement=E2=80=99s control expression.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">fallt=
hrough</span></code> statement can appear anywhere inside a <code class=3D"=
docutils literal notranslate"><span class=3D"pre">switch</span></code> stat=
ement, not just as the last statement of a case block, but it can=E2=80=99t=
 be used in the final case block. It also cannot transfer control into a ca=
se block whose pattern contains value binding patterns.</p>
<p>For an example of how to use a <code class=3D"docutils literal notransla=
te"><span class=3D"pre">fallthrough</span></code> statement in a <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">switch</span></code>=
 statement, see <a class=3D"reference internal" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/ControlFlow.html#ID135"><span class=3D"std std=
-ref">Control Transfer Statements</span></a> in <a class=3D"reference inter=
nal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.ht=
ml"><span class=3D"doc">Control Flow</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a fallthrough statement</p><div class=3D"syntax-group"><p class=3D"sy=
ntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_fallthrough-stat=
ement"></a>fallthrough-statement</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <code>fallthrough</code></p></div></div></div>
<div class=3D"section" id=3D"ID444">
<h3>Return Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#ID444" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">retur=
n</span></code> statement occurs in the body of a function or method defini=
tion and causes program execution to return to the calling function or meth=
od. Program execution continues at the point immediately following the func=
tion or method call.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">retur=
n</span></code> statement can consist of only the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">return</span></code> keyword, or it=
 can consist of the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">return</span></code> keyword followed by an expression, as shown =
below.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">return</span>
</li><li><span class=3D"k">return</span> <span class=3D"gi">expression</spa=
n>
</li></ol></div></div></div>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
return</span></code> statement is followed by an expression, the value of t=
he expression is returned to the calling function or method. If the value o=
f the expression does not match the value of the return type declared in th=
e function or method declaration, the expression=E2=80=99s value is convert=
ed to the return type before it is returned to the calling function or meth=
od.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">As described in <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID376"><=
span class=3D"std std-ref">Failable Initializers</span></a>, a special form=
 of the <code class=3D"docutils literal notranslate"><span class=3D"pre">re=
turn</span></code> statement (<code class=3D"docutils literal notranslate">=
<span class=3D"pre">return</span> <span class=3D"pre">nil</span></code>) ca=
n be used in a failable initializer to indicate initialization failure.</p>
</div>
<p>When a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
return</span></code> statement is not followed by an expression, it can be =
used only to return from a function or method that does not return a value =
(that is, when the return type of the function or method is <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Void</span></code> or <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">()</span></co=
de>).</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a return statement</p><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_return-statement"></a=
>return-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>retu=
rn</code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.=
org/swift-book/ReferenceManual/Expressions.html#grammar_expression">express=
ion</a></span> <sub>opt</sub></p></div></div></div>
<div class=3D"section" id=3D"ID518">
<h3>Throw Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID518" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">throw=
</span></code> statement occurs in the body of a throwing function or metho=
d, or in the body of a closure expression whose type is marked with the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">throws</span>=
</code> keyword.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">throw=
</span></code> statement causes a program to end execution of the current s=
cope and begin error propagation to its enclosing scope. The error that=E2=
=80=99s thrown continues to propagate until it=E2=80=99s handled by a <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">catch</span></c=
ode> clause of a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">do</span></code> statement.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">throw=
</span></code> statement consists of the <code class=3D"docutils literal no=
translate"><span class=3D"pre">throw</span></code> keyword followed by an e=
xpression, as shown below.</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">throw</span> <span class=3D"gi">expression</span>
</li></ol></div></div></div>
<p>The value of the <em>expression</em> must have a type that conforms to t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">Error</=
span></code> protocol.</p>
<p>For an example of how to use a <code class=3D"docutils literal notransla=
te"><span class=3D"pre">throw</span></code> statement, see <a class=3D"refe=
rence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Err=
orHandling.html#ID510"><span class=3D"std std-ref">Propagating Errors Using=
 Throwing Functions</span></a> in <a class=3D"reference internal" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html"><span cl=
ass=3D"doc">Error Handling</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a throw statement</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_throw-statement"></a>t=
hrow-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>throw</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Expressions.html#grammar_expression">expression<=
/a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID532">
<h2>Defer Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/ReferenceManual/Statements.html#ID532" title=3D"Permalink to this=
 headline">=C2=B6</a></h2>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">defer=
</span></code> statement is used for executing code just before transferrin=
g program control outside of the scope that the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">defer</span></code> statement appears=
 in.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">defer=
</span></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">defer</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>The statements within the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">defer</span></code> statement are executed no matter how=
 program control is transferred. This means that a <code class=3D"docutils =
literal notranslate"><span class=3D"pre">defer</span></code> statement can =
be used, for example, to perform manual resource management such as closing=
 file descriptors, and to perform actions that need to happen even if an er=
ror is thrown.</p>
<p>If multiple <code class=3D"docutils literal notranslate"><span class=3D"=
pre">defer</span></code> statements appear in the same scope, the order the=
y appear is the reverse of the order they are executed. Executing the last =
<code class=3D"docutils literal notranslate"><span class=3D"pre">defer</spa=
n></code> statement in a given scope first means that statements inside tha=
t last <code class=3D"docutils literal notranslate"><span class=3D"pre">def=
er</span></code> statement can refer to resources that will be cleaned up b=
y other <code class=3D"docutils literal notranslate"><span class=3D"pre">de=
fer</span></code> statements.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fu=
nc</span> <span class=3D"nv">f</span>() {
</li><li>    <span class=3D"k">defer</span> { <span class=3D"nv">print</spa=
n>(<span class=3D"s">"First defer"</span>) }
</li><li>    <span class=3D"k">defer</span> { <span class=3D"nv">print</spa=
n>(<span class=3D"s">"Second defer"</span>) }
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"End of func=
tion"</span>)
</li><li>}
</li><li><span class=3D"nv">f</span>()
</li><li><span class=3D"c">// Prints "End of function"</span>
</li><li><span class=3D"c">// Prints "Second defer"</span>
</li><li><span class=3D"c">// Prints "First defer"</span>
</li></ol></div></div></div>
<p>The statements in the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">defer</span></code> statement can=E2=80=99t transfer program=
 control outside of the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">defer</span></code> statement.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a defer statement</p><div class=3D"syntax-group"><p class=3D"syntax-d=
ef"><span class=3D"syntax-def-name"><a id=3D"grammar_defer-statement"></a>d=
efer-statement</span><span class=3D"arrow"> =E2=86=92 </span> <code>defer</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Declarations.html#grammar_code-block">code-block=
</a></span> </p></div></div></div>
<div class=3D"section" id=3D"ID533">
<h2>Do Statement<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/ReferenceManual/Statements.html#ID533" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">do<=
/span></code> statement is used to introduce a new scope and can optionally=
 contain one or more <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">catch</span></code> clauses, which contain patterns that match a=
gainst defined error conditions. Variables and constants declared in the sc=
ope of a <code class=3D"docutils literal notranslate"><span class=3D"pre">d=
o</span></code> statement can be accessed only within that scope.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">do</s=
pan></code> statement in Swift is similar to curly braces (<code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">{}</span></code>) in C use=
d to delimit a code block, and does not incur a performance cost at runtime=
.</p>
<p>A <code class=3D"docutils literal notranslate"><span class=3D"pre">do</s=
pan></code> statement has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">do</span> {
</li><li>    <span class=3D"k">try</span> <span class=3D"gi">expression</sp=
an>
</li><li>    <span class=3D"gi">statements</span>
</li><li>} <span class=3D"k">catch</span> <span class=3D"gi">pattern 1</spa=
n> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>} <span class=3D"k">catch</span> <span class=3D"gi">pattern 2</spa=
n> <span class=3D"k">where</span> <span class=3D"gi">condition</span> {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>Like a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
switch</span></code> statement, the compiler attempts to infer whether <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">catch</span></=
code> clauses are exhaustive. If such a determination can be made, the erro=
r is considered handled. Otherwise, the error can propagate out of the cont=
aining scope, which means the error must be handled by an enclosing <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">catch</span></cod=
e> clause or the containing function must be declared with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">throws</span></code>.</p>
<p>To ensure that an error is handled, use a <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">catch</span></code> clause with a patter=
n that matches all errors, such as a wildcard pattern (<code class=3D"docut=
ils literal notranslate"><span class=3D"pre">_</span></code>). If a <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">catch</span></cod=
e> clause does not specify a pattern, the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">catch</span></code> clause matches and bind=
s any error to a local constant named <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">error</span></code>. For more information about=
 the patterns you can use in a <code class=3D"docutils literal notranslate"=
><span class=3D"pre">catch</span></code> clause, see <a class=3D"reference =
internal" href=3D"https://docs.swift.org/swift-book/ReferenceManual/Pattern=
s.html"><span class=3D"doc">Patterns</span></a>.</p>
<p>To see an example of how to use a <code class=3D"docutils literal notran=
slate"><span class=3D"pre">do</span></code> statement with several <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">catch</span></code=
> clauses, see <a class=3D"reference internal" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/ErrorHandling.html#ID512"><span class=3D"std st=
d-ref">Handling Errors</span></a>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a do statement</p><div class=3D"syntax-group"><p class=3D"syntax-def"=
><span class=3D"syntax-def-name"><a id=3D"grammar_do-statement"></a>do-stat=
ement</span><span class=3D"arrow"> =E2=86=92 </span> <code>do</code> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Declarations.html#grammar_code-block">code-block</a></span> =
 <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift=
-book/ReferenceManual/Statements.html#grammar_catch-clauses">catch-clauses<=
/a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span class=3D"syntax-=
def-name"><a id=3D"grammar_catch-clauses"></a>catch-clauses</span><span cla=
ss=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_catch-clause">catch-clause</a></span>  <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.h=
tml#grammar_catch-clauses">catch-clauses</a></span> <sub>opt</sub></p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_catch-c=
lause"></a>catch-clause</span><span class=3D"arrow"> =E2=86=92 </span> <cod=
e>catch</code> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Patterns.html#grammar_pattern">pattern<=
/a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_wher=
e-clause">where-clause</a></span> <sub>opt</sub> <span class=3D"syntactic-c=
ategory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Decla=
rations.html#grammar_code-block">code-block</a></span> </p></div></div></di=
v>
<div class=3D"section" id=3D"ID538">
<h2>Compiler Control Statements<a class=3D"headerlink" href=3D"https://docs=
.swift.org/swift-book/ReferenceManual/Statements.html#ID538" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>Compiler control statements allow the program to change aspects of the c=
ompiler=E2=80=99s behavior. Swift has three compiler control statements: a =
conditional compilation block a line control statement, and a compile-time =
diagnostic statement.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a compiler control statement</p><div class=3D"syntax-group"><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_compiler-c=
ontrol-statement"></a>compiler-control-statement</span><span class=3D"arrow=
"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://=
docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_condition=
al-compilation-block">conditional-compilation-block</a></span> </p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_compiler-c=
ontrol-statement_1188"></a>compiler-control-statement</span><span class=3D"=
arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_line=
-control-statement">line-control-statement</a></span> </p><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_compiler-control-st=
atement_1189"></a>compiler-control-statement</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/Statements.html#grammar_diagnostic-s=
tatement">diagnostic-statement</a></span> </p></div></div><div class=3D"sec=
tion" id=3D"ID539">
<h3>Conditional Compilation Block<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Statements.html#ID539" title=3D"Per=
malink to this headline">=C2=B6</a></h3>
<p>A conditional compilation block allows code to be conditionally compiled=
 depending on the value of one or more compilation conditions.</p>
<p>Every conditional compilation block begins with the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">#if</span></code> compilation =
directive and ends with the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">#endif</span></code> compilation directive. A simple cond=
itional compilation block has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#if</span> <span class=3D"gi">compilation condition</span>
</li><li><span class=3D"gi">statements</span>
</li><li><span class=3D"k">#endif</span>
</li></ol></div></div></div>
<p>Unlike the condition of an <code class=3D"docutils literal notranslate">=
<span class=3D"pre">if</span></code> statement, the <em>compilation conditi=
on</em> is evaluated at compile time. As a result, the <em>statements</em> =
are compiled and executed only if the <em>compilation condition</em> evalua=
tes to <code class=3D"docutils literal notranslate"><span class=3D"pre">tru=
e</span></code> at compile time.</p>
<p>The <em>compilation condition</em> can include the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">true</span></code> and <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">false</span></code=
> Boolean literals, an identifier used with the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">-D</span></code> command line flag, o=
r any of the platform conditions listed in the table below.</p>
<table border=3D"1" class=3D"docutils">
<colgroup>
<col width=3D"32%">
<col width=3D"68%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">Platform condition</th>
<th class=3D"head">Valid arguments</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">os()</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">macOS<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">iOS</span></code>, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">watchOS</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">tvOS</span></code>, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Linux</span></code></td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">arch()</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">i386</=
span></code>, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">x86_64</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">arm</span></code>, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">arm64</span></code></td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">swift()</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">&gt;=
=3D</span></code> or <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">&lt;</span></code> followed by a version number</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">compiler()</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">&gt;=
=3D</span></code> or <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">&lt;</span></code> followed by a version number</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">canImport()</span></code></td>
<td>A module name</td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">targetEnvironment()</span></code></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">simula=
tor</span></code></td>
</tr>
</tbody>
</table>
<p>The version number for the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">swift()</span></code> and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">compiler()</span></code> platform condi=
tions consists of a major number, optional minor number, optional patch num=
ber, and so on, with a dot (<code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">.</span></code>) separating each part of the version numb=
er. There must not be whitespace between the comparison operator and the ve=
rsion number. The version for <code class=3D"docutils literal notranslate">=
<span class=3D"pre">compiler()</span></code> is the compiler version, regar=
dless of the Swift version setting passed to the compiler. The version for =
<code class=3D"docutils literal notranslate"><span class=3D"pre">swift()</s=
pan></code> is the language version currently being compiled. For example, =
if you compile your code using the Swift 5 compiler in Swift 4.2 mode, the =
compiler version is 5 and the language version is 4.2. With those settings,=
 the following code prints all three messages:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">#i=
f</span> <span class=3D"nv">compiler</span>(&gt;=3D<span class=3D"m">5</spa=
n>)
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Compiled with t=
he Swift 5 compiler or later"</span>)
</li><li><span class=3D"k">#endif</span>
</li><li><span class=3D"k">#if</span> <span class=3D"nv">swift</span>(&gt;=
=3D<span class=3D"m">4.2</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Compiled in Swi=
ft 4.2 mode or later"</span>)
</li><li><span class=3D"k">#endif</span>
</li><li><span class=3D"k">#if</span> <span class=3D"nv">compiler</span>(&g=
t;=3D<span class=3D"m">5</span>) &amp;&amp; <span class=3D"nv">swift</span>=
(&lt;<span class=3D"m">5</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Compiled with t=
he Swift 5 compiler or later in a Swift mode earlier than 5"</span>)
</li><li><span class=3D"k">#endif</span>
</li><li><span class=3D"c">// Prints "Compiled with the Swift 5 compiler or=
 later"</span>
</li><li><span class=3D"c">// Prints "Compiled in Swift 4.2 mode or later"<=
/span>
</li><li><span class=3D"c">// Prints "Compiled with the Swift 5 compiler or=
 later in a Swift mode earlier than 5"</span>
</li></ol></div></div></div>
<p>The argument for the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">canImport()</span></code> platform condition is the name of a=
 module that may not be present on all platforms. This condition tests whet=
her it=E2=80=99s possible to import the module, but doesn=E2=80=99t actuall=
y import it. If the module is present, the platform condition returns <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">true</span></co=
de>; otherwise, it returns <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">false</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">tar=
getEnvironment()</span></code> platform condition returns <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">true</span></code> when cod=
e is compiled for a simulator; otherwise, it returns <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">false</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">arch(arm)</span></code> platform condition does not return <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">true</span></c=
ode> for ARM 64 devices. The <code class=3D"docutils literal notranslate"><=
span class=3D"pre">arch(i386)</span></code> platform condition returns <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">true</span></c=
ode> when code is compiled for the 32=E2=80=93bit iOS simulator.</p>
</div>
<p>You can combine compilation conditions using the logical operators <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">&amp;&amp;</spa=
n></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>||</span></code>, and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">!</span></code> and use parentheses for grouping. These operat=
ors have the same associativity and precedence as the logical operators tha=
t are used to combine ordinary Boolean expressions.</p>
<p>Similar to an <code class=3D"docutils literal notranslate"><span class=
=3D"pre">if</span></code> statement, you can add multiple conditional branc=
hes to test for different compilation conditions. You can add any number of=
 additional branches using <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">#elseif</span></code> clauses. You can also add a final ad=
ditional branch using an <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">#else</span></code> clause. Conditional compilation blocks t=
hat contain multiple branches have the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#if</span> <span class=3D"gi">compilation condition 1</span>
</li><li><span class=3D"gi">statements to compile if compilation condition =
1 is true</span>
</li><li><span class=3D"k">#elseif</span> <span class=3D"gi">compilation co=
ndition 2</span>
</li><li><span class=3D"gi">statements to compile if compilation condition =
2 is true</span>
</li><li><span class=3D"k">#else</span>
</li><li><span class=3D"gi">statements to compile if both compilation condi=
tions are false</span>
</li><li><span class=3D"k">#endif</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Each statement in the body of a conditional compilation b=
lock is parsed even if it=E2=80=99s not compiled. However, there is an exce=
ption if the compilation condition includes a <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">swift()</span></code> platform conditio=
n: The statements are parsed only if the compiler=E2=80=99s version of Swif=
t matches what is specified in the platform condition. This exception ensur=
es that an older compiler doesn=E2=80=99t attempt to parse syntax introduce=
d in a newer version of Swift.</p>
</div>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a conditional compilation block</p><div class=3D"syntax-group"><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_conditio=
nal-compilation-block"></a>conditional-compilation-block</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_=
if-directive-clause">if-directive-clause</a></span>  <span class=3D"syntact=
ic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/S=
tatements.html#grammar_elseif-directive-clauses">elseif-directive-clauses</=
a></span> <sub>opt</sub> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_else-=
directive-clause">else-directive-clause</a></span> <sub>opt</sub> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Statements.html#grammar_endif-directive">endif-directive</a></s=
pan> </p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_if-directive-clause"></a>if-direct=
ive-clause</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Statements.html#grammar_if-directive">if-directive</a></span>  <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Statements.html#grammar_compilation-condition">compilation-con=
dition</a></span>  <span class=3D"syntactic-category"><a href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_statements"=
>statements</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span clas=
s=3D"syntax-def-name"><a id=3D"grammar_elseif-directive-clauses"></a>elseif=
-directive-clauses</span><span class=3D"arrow"> =E2=86=92 </span> <span cla=
ss=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Statements.html#grammar_elseif-directive-clause">elseif-directi=
ve-clause</a></span>  <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_elseif-d=
irective-clauses">elseif-directive-clauses</a></span> <sub>opt</sub></p><p =
class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_elsei=
f-directive-clause"></a>elseif-directive-clause</span><span class=3D"arrow"=
> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://d=
ocs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_elseif-dir=
ective">elseif-directive</a></span>  <span class=3D"syntactic-category"><a =
href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#g=
rammar_compilation-condition">compilation-condition</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Statements.html#grammar_statements">statements</a></span> <sub>op=
t</sub></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D=
"grammar_else-directive-clause"></a>else-directive-clause</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_=
else-directive">else-directive</a></span>  <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.=
html#grammar_statements">statements</a></span> <sub>opt</sub></p><p class=
=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_if-directi=
ve"></a>if-directive</span><span class=3D"arrow"> =E2=86=92 </span> <code>#=
if</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_elseif-directive"></a>elseif-directive</span><span class=3D"arr=
ow"> =E2=86=92 </span> <code>#elseif</code></p><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_else-directive"></a>else-direc=
tive</span><span class=3D"arrow"> =E2=86=92 </span> <code>#else</code></p><=
p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_end=
if-directive"></a>endif-directive</span><span class=3D"arrow"> =E2=86=92 </=
span> <code>#endif</code></p></div><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_compilation-co=
ndition"></a>compilation-condition</span><span class=3D"arrow"> =E2=86=92 <=
/span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org=
/swift-book/ReferenceManual/Statements.html#grammar_platform-condition">pla=
tform-condition</a></span> </p><p class=3D"syntax-def"><span class=3D"synta=
x-def-name"><a id=3D"grammar_compilation-condition_1190"></a>compilation-co=
ndition</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"synta=
ctic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual=
/LexicalStructure.html#grammar_identifier">identifier</a></span> </p><p cla=
ss=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_compilat=
ion-condition_1191"></a>compilation-condition</span><span class=3D"arrow"> =
=E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_boolea=
n-literal">boolean-literal</a></span> </p><p class=3D"syntax-def"><span cla=
ss=3D"syntax-def-name"><a id=3D"grammar_compilation-condition_1192"></a>com=
pilation-condition</span><span class=3D"arrow"> =E2=86=92 </span> <code>(</=
code> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/=
swift-book/ReferenceManual/Statements.html#grammar_compilation-condition">c=
ompilation-condition</a></span>  <code>)</code></p><p class=3D"syntax-def">=
<span class=3D"syntax-def-name"><a id=3D"grammar_compilation-condition_1193=
"></a>compilation-condition</span><span class=3D"arrow"> =E2=86=92 </span> =
<code>!</code> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Statements.html#grammar_compilation-con=
dition">compilation-condition</a></span> </p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_compilation-condition_1194"></a>=
compilation-condition</span><span class=3D"arrow"> =E2=86=92 </span> <span =
class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/R=
eferenceManual/Statements.html#grammar_compilation-condition">compilation-c=
ondition</a></span>  <code>&amp;&amp;</code> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statement=
s.html#grammar_compilation-condition">compilation-condition</a></span> </p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_co=
mpilation-condition_1195"></a>compilation-condition</span><span class=3D"ar=
row"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https=
://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_compil=
ation-condition">compilation-condition</a></span>  <code>||</code> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Statements.html#grammar_compilation-condition">compilation-con=
dition</a></span> </p></div><div class=3D"syntax-group"><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-condition"><=
/a>platform-condition</span><span class=3D"arrow"> =E2=86=92 </span> <code>=
os</code> <code>(</code> <span class=3D"syntactic-category"><a href=3D"http=
s://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_opera=
ting-system">operating-system</a></span>  <code>)</code></p><p class=3D"syn=
tax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-conditio=
n_1196"></a>platform-condition</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <code>arch</code> <code>(</code> <span class=3D"syntactic-category"><a h=
ref=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gr=
ammar_architecture">architecture</a></span>  <code>)</code></p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-condi=
tion_1197"></a>platform-condition</span><span class=3D"arrow"> =E2=86=92 </=
span> <code>swift</code> <code>(</code> <code>&gt;=3D</code> <span class=3D=
"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Reference=
Manual/Statements.html#grammar_swift-version">swift-version</a></span>  <co=
de>)</code> |  <code>swift</code> <code>(</code> <code>&lt;</code> <span cl=
ass=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Ref=
erenceManual/Statements.html#grammar_swift-version">swift-version</a></span=
>  <code>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name=
"><a id=3D"grammar_platform-condition_1198"></a>platform-condition</span><s=
pan class=3D"arrow"> =E2=86=92 </span> <code>compiler</code> <code>(</code>=
 <code>&gt;=3D</code> <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_swift-ve=
rsion">swift-version</a></span>  <code>)</code> |  <code>compiler</code> <c=
ode>(</code> <code>&lt;</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_swift-version">swift-version</a></span>  <code>)</code></p><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-condit=
ion_1199"></a>platform-condition</span><span class=3D"arrow"> =E2=86=92 </s=
pan> <code>canImport</code> <code>(</code> <span class=3D"syntactic-categor=
y"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.=
html#grammar_module-name">module-name</a></span>  <code>)</code></p><p clas=
s=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-=
condition_1200"></a>platform-condition</span><span class=3D"arrow"> =E2=86=
=92 </span> <code>targetEnvironment</code> <code>(</code> <span class=3D"sy=
ntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMan=
ual/Statements.html#grammar_environment">environment</a></span>  <code>)</c=
ode></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><span cla=
ss=3D"syntax-def-name"><a id=3D"grammar_operating-system"></a>operating-sys=
tem</span><span class=3D"arrow"> =E2=86=92 </span> <code>macOS</code> |  <c=
ode>iOS</code> |  <code>watchOS</code> |  <code>tvOS</code></p><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_architecture">=
</a>architecture</span><span class=3D"arrow"> =E2=86=92 </span> <code>i386<=
/code> |  <code>x86_64</code> |  <code>arm</code> |  <code>arm64</code></p>=
<p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_sw=
ift-version"></a>swift-version</span><span class=3D"arrow"> =E2=86=92 </spa=
n> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swi=
ft-book/ReferenceManual/LexicalStructure.html#grammar_decimal-digits">decim=
al-digits</a></span>  <span class=3D"syntactic-category"><a href=3D"https:/=
/docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_swift-ve=
rsion-continuation">swift-version-continuation</a></span> <sub>opt</sub></p=
><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_s=
wift-version-continuation"></a>swift-version-continuation</span><span class=
=3D"arrow"> =E2=86=92 </span> <code>.</code> <span class=3D"syntactic-categ=
ory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalSt=
ructure.html#grammar_decimal-digits">decimal-digits</a></span>  <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/Statements.html#grammar_swift-version-continuation">swift-version=
-continuation</a></span> <sub>opt</sub></p><p class=3D"syntax-def"><span cl=
ass=3D"syntax-def-name"><a id=3D"grammar_module-name"></a>module-name</span=
><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category=
"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/LexicalStruc=
ture.html#grammar_identifier">identifier</a></span> </p><p class=3D"syntax-=
def"><span class=3D"syntax-def-name"><a id=3D"grammar_environment"></a>envi=
ronment</span><span class=3D"arrow"> =E2=86=92 </span> <code>simulator</cod=
e></p></div></div></div>
<div class=3D"section" id=3D"ID540">
<h3>Line Control Statement<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Statements.html#ID540" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p>A line control statement is used to specify a line number and filename t=
hat can be different from the line number and filename of the source code b=
eing compiled. Use a line control statement to change the source code locat=
ion used by Swift for diagnostic and debugging purposes.</p>
<p>A line control statement has the following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#sourceLocation</span>(<span class=3D"nv">file</span>: <span c=
lass=3D"gi">filename</span>, <span class=3D"nv">line</span>: <span class=3D=
"gi">line number</span>)
</li><li><span class=3D"k">#sourceLocation</span>()
</li></ol></div></div></div>
<p>The first form of a line control statement changes the values of the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">#line</span><=
/code> and <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>#file</span></code> literal expressions, beginning with the line of code f=
ollowing the line control statement. The <em>line number</em> changes the v=
alue of <code class=3D"docutils literal notranslate"><span class=3D"pre">#l=
ine</span></code> and is any integer literal greater than zero. The <em>fil=
ename</em> changes the value of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">#file</span></code> and is a string literal.</p>
<p>The second form of a line control statement, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">#sourceLocation()</span></code>, rese=
ts the source code location back to the default line numbering and filename=
.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a line control statement</p><div class=3D"syntax-group"><p class=3D"s=
yntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_line-control-st=
atement"></a>line-control-statement</span><span class=3D"arrow"> =E2=86=92 =
</span> <code>#sourceLocation</code> <code>(</code> <code>file:</code> <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Statements.html#grammar_file-name">file-name</a></span>  <=
code>,</code> <code>line:</code> <span class=3D"syntactic-category"><a href=
=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#gramm=
ar_line-number">line-number</a></span>  <code>)</code></p><p class=3D"synta=
x-def"><span class=3D"syntax-def-name"><a id=3D"grammar_line-control-statem=
ent_1201"></a>line-control-statement</span><span class=3D"arrow"> =E2=86=92=
 </span> <code>#sourceLocation</code> <code>(</code> <code>)</code></p><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_line-n=
umber"></a>line-number</span><span class=3D"arrow"> =E2=86=92 </span> A dec=
imal integer greater than zero</p><p class=3D"syntax-def"><span class=3D"sy=
ntax-def-name"><a id=3D"grammar_file-name"></a>file-name</span><span class=
=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D=
"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gr=
ammar_static-string-literal">static-string-literal</a></span> </p></div></d=
iv></div>
<div class=3D"section" id=3D"ID582">
<h3>Compile-Time Diagnostic Statement<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/Statements.html#ID582" title=3D=
"Permalink to this headline">=C2=B6</a></h3>
<p>A compile-time diagnostic statement causes the compiler to emit an error=
 or a warning during compilation. A compile-time diagnostic statement has t=
he following forms:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">#error</span>(<span class=3D"s">"</span><span class=3D"gi">err=
or message</span><span class=3D"s">"</span>)
</li><li><span class=3D"k">#warning</span>(<span class=3D"s">"</span><span =
class=3D"gi">warning message</span><span class=3D"s">"</span>)
</li></ol></div></div></div>
<p>The first form emits the <em>error message</em> as a fatal error and ter=
minates the compilation process. The second form emits the <em>warning mess=
age</em> as a nonfatal warning and allows compilation to proceed. You write=
 the diagnostic message as a static string literal. Static string literals =
can=E2=80=99t use features like string interpolation or concatenation, but =
they can use the multiline string literal syntax.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of a compile-time diagnostic statement</p><div class=3D"syntax-group"><p=
 class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_diag=
nostic-statement"></a>diagnostic-statement</span><span class=3D"arrow"> =E2=
=86=92 </span> <code>#error</code> <code>(</code> <span class=3D"syntactic-=
category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Stat=
ements.html#grammar_diagnostic-message">diagnostic-message</a></span>  <cod=
e>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><a id=
=3D"grammar_diagnostic-statement_1202"></a>diagnostic-statement</span><span=
 class=3D"arrow"> =E2=86=92 </span> <code>#warning</code> <code>(</code> <s=
pan class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-bo=
ok/ReferenceManual/Statements.html#grammar_diagnostic-message">diagnostic-m=
essage</a></span>  <code>)</code></p></div><div class=3D"syntax-group"><p c=
lass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_diagno=
stic-message"></a>diagnostic-message</span><span class=3D"arrow"> =E2=86=92=
 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.swift.o=
rg/swift-book/ReferenceManual/LexicalStructure.html#grammar_static-string-l=
iteral">static-string-literal</a></span> </p></div></div></div>
</div>
<div class=3D"section" id=3D"ID522">
<h2>Availability Condition<a class=3D"headerlink" href=3D"https://docs.swif=
t.org/swift-book/ReferenceManual/Statements.html#ID522" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>An <em>availability condition</em> is used as a condition of an <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">if</span></code>, =
<code class=3D"docutils literal notranslate"><span class=3D"pre">while</spa=
n></code>, and <code class=3D"docutils literal notranslate"><span class=3D"=
pre">guard</span></code> statement to query the availability of APIs at run=
time, based on specified platforms arguments.</p>
<p>An availability condition has the following form:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">if</span> <span class=3D"k">#available</span>(<span class=3D"g=
i">platform name</span> <span class=3D"gi">version</span>, <span class=3D"g=
i">...</span>, *) {
</li><li>    <span class=3D"gi">statements to execute if the APIs are avail=
able</span>
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"gi">fallback statements to execute if the APIs =
are unavailable</span>
</li><li>}
</li></ol></div></div></div>
<p>You use an availability condition to execute a block of code, depending =
on whether the APIs you want to use are available at runtime. The compiler =
uses the information from the availability condition when it verifies that =
the APIs in that block of code are available.</p>
<p>The availability condition takes a comma-separated list of platform name=
s and versions. Use <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">iOS</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">macOS</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">watchOS</span></code>, and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">tvOS</span></code> for the p=
latform names, and include the corresponding version numbers. The <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">*</span></code> arg=
ument is required and specifies that on any other platform, the body of the=
 code block guarded by the availability condition executes on the minimum d=
eployment target specified by your target.</p>
<p>Unlike Boolean conditions, you can=E2=80=99t combine availability condit=
ions using logical operators such as <code class=3D"docutils literal notran=
slate"><span class=3D"pre">&amp;&amp;</span></code> and <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">||</span></code>.</p>
<div class=3D"admonition grammar"><p class=3D"first admonition-title">Gramm=
ar of an availability condition</p><div class=3D"syntax-group"><p class=3D"=
syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_availability-c=
ondition"></a>availability-condition</span><span class=3D"arrow"> =E2=86=92=
 </span> <code>#available</code> <code>(</code> <span class=3D"syntactic-ca=
tegory"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statem=
ents.html#grammar_availability-arguments">availability-arguments</a></span>=
  <code>)</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"=
><a id=3D"grammar_availability-arguments"></a>availability-arguments</span>=
<span class=3D"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"=
><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.ht=
ml#grammar_availability-argument">availability-argument</a></span>  |  <spa=
n class=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book=
/ReferenceManual/Statements.html#grammar_availability-argument">availabilit=
y-argument</a></span>  <code>,</code> <span class=3D"syntactic-category"><a=
 href=3D"https://docs.swift.org/swift-book/ReferenceManual/Statements.html#=
grammar_availability-arguments">availability-arguments</a></span> </p><p cl=
ass=3D"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_availab=
ility-argument"></a>availability-argument</span><span class=3D"arrow"> =E2=
=86=92 </span> <span class=3D"syntactic-category"><a href=3D"https://docs.s=
wift.org/swift-book/ReferenceManual/Statements.html#grammar_platform-name">=
platform-name</a></span>  <span class=3D"syntactic-category"><a href=3D"htt=
ps://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_plat=
form-version">platform-version</a></span> </p><p class=3D"syntax-def"><span=
 class=3D"syntax-def-name"><a id=3D"grammar_availability-argument_1203"></a=
>availability-argument</span><span class=3D"arrow"> =E2=86=92 </span> <code=
>*</code></p></div><div class=3D"syntax-group"><p class=3D"syntax-def"><spa=
n class=3D"syntax-def-name"><a id=3D"grammar_platform-name"></a>platform-na=
me</span><span class=3D"arrow"> =E2=86=92 </span> <code>iOS</code> |  <code=
>iOSApplicationExtension</code></p><p class=3D"syntax-def"><span class=3D"s=
yntax-def-name"><a id=3D"grammar_platform-name_1204"></a>platform-name</spa=
n><span class=3D"arrow"> =E2=86=92 </span> <code>macOS</code> |  <code>macO=
SApplicationExtension</code></p><p class=3D"syntax-def"><span class=3D"synt=
ax-def-name"><a id=3D"grammar_platform-name_1205"></a>platform-name</span><=
span class=3D"arrow"> =E2=86=92 </span> <code>watchOS</code></p><p class=3D=
"syntax-def"><span class=3D"syntax-def-name"><a id=3D"grammar_platform-name=
_1206"></a>platform-name</span><span class=3D"arrow"> =E2=86=92 </span> <co=
de>tvOS</code></p><p class=3D"syntax-def"><span class=3D"syntax-def-name"><=
a id=3D"grammar_platform-version"></a>platform-version</span><span class=3D=
"arrow"> =E2=86=92 </span> <span class=3D"syntactic-category"><a href=3D"ht=
tps://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#gramm=
ar_decimal-digits">decimal-digits</a></span> </p><p class=3D"syntax-def"><s=
pan class=3D"syntax-def-name"><a id=3D"grammar_platform-version_1207"></a>p=
latform-version</span><span class=3D"arrow"> =E2=86=92 </span> <span class=
=3D"syntactic-category"><a href=3D"https://docs.swift.org/swift-book/Refere=
nceManual/LexicalStructure.html#grammar_decimal-digits">decimal-digits</a><=
/span>  <code>.</code> <span class=3D"syntactic-category"><a href=3D"https:=
//docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_d=
ecimal-digits">decimal-digits</a></span> </p><p class=3D"syntax-def"><span =
class=3D"syntax-def-name"><a id=3D"grammar_platform-version_1208"></a>platf=
orm-version</span><span class=3D"arrow"> =E2=86=92 </span> <span class=3D"s=
yntactic-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceMa=
nual/LexicalStructure.html#grammar_decimal-digits">decimal-digits</a></span=
>  <code>.</code> <span class=3D"syntactic-category"><a href=3D"https://doc=
s.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_decima=
l-digits">decimal-digits</a></span>  <code>.</code> <span class=3D"syntacti=
c-category"><a href=3D"https://docs.swift.org/swift-book/ReferenceManual/Le=
xicalStructure.html#grammar_decimal-digits">decimal-digits</a></span> </p><=
/div></div></div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
ReferenceManual/Expressions.html">Expressions</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Refe=
renceManual/Declarations.html">Declarations</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAAAyCAYAAAAZUZThAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA
IGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAABIsSURBVHja7J1pVJvX
mcd/Qvu+gkDsq1hiYoPBLTZestmpm3gaJ2nSJE067UyOu85pO9OMp5OeSWc6OTNtZ6aJk9Nz0k5S
O3WmjdMmThvbSWwHHDdmCzY2ZjVgsAAjkAUyEgKh+SAQyCwBjF03ef+fhN5773Pvc5//fZYrCVEw
GESAAAGzQwJw14+OA2QDO4CHAZOgGgGfQLiA3cDz+3eWNACIgsEgd/3ouB2RqEFu1CDVyBFFRQmq
EvCJQ3A8yKjHx4jLA8Fgyv6dJR2SiWc75EY1Y1Ixw54RhLBLwCcRIpEImVSM3KBmxOXZATwx6Soe
GZOIGfGPCeQQ8Mn1IMEgI/4xAlIJwN+EcxDANDI2jkANAQLANxZAMpGHS6bHXwIECCAiihKycQEC
5oFAEAECBIIIECAQRICAZYdkWmYiaEOAAMGDCBCwBA8i+A8BAuYLsa6VixKJSDEr2JBhYGOmAYCj
zZd4r+US7f0+xoXQTsBfRg6yvAPLJVHYrSo2ZuopSdNjVEnDzx4ojGFzjpHj59wcbXbT2DvMyNj4
dV34F1Za+FSaHoBvvtYqWIKA6+NBlLIoipJ0bMjUk29To1NKZ21nVEnZepOF0nQ9pxyXea/ZTeX5
Qbz+pRPFrBSzPd9CcZqeRLMSAK8/QIPDw6kuDwcbXfR7AwCogsPYbfEfy02dTv4X/9RNTfewYOlX
T5CrcyF6hYR1GQbWZ+jJiVUjlyws/9cppaxLN1CUrONsz2XKWtwca7mE2ze2aHI8c38mZq38CsKK
WZWiZ1WKHsYD/PrUQGi1welE/HiFedPJr4nyCxnmjeBBvrrexsaspX/PSi6JYmWClpUJWvJtKv79
0PnFyV8bFybH0aoG3q1uBiA3xUpGQjR56fG8XtEECsvHflOnkz84HhCsfDkIcrW58ksHKjnXauKW
ggxSrMYljdHe6+JwTQvlzQMERdZF9V2XHTL8I1UN/NO+OmS6ib8v9DLma2XU48KUVYwoONNpfOzq
BMHI10Id5AbwIB0+FU3vX+DNqjZK7LFsXp1FXoqVqCjRvP3Gx4Ocae/lYFUTxxt76B2RIdeZkSiX
Ng/vmBiNLTP8t0yzMLI+vsbKxhwzZq0MgEaHh7fr+3njrGtG28I4FRuzDOTGayNyneo2Ny9X9tLq
Golo/8z2DOw2DS+Vd/FyrTNC1r6Kbn5+ojdi7K0rLBSm6lHKxAB82ObmwBknR9qGrnqfDn1jJQA7
9pwlySDjngIrdpsGgM5+L4fr+3m51olZKeZrpfHheUyub1f5hXAeNz283WI3kp+gJTteE5739PGu
RLpRzkNFVnJsmrDOr0Sjw8M39rVEyHms2MrqVEO4z3wybiiCSJRaJEotbr+X1+v7OXjqMGvSLNxZ
nEVxdiJSiTii/ehYgIqGTt6qaOLEOSc+iQ6ZNhG1YWnMcLqGsBi1FOfEYz7dOmMT58OTdySxzh4Z
HtptmrDhXEmS796RjFk3M9dZZzdRmKLn279tiiDJuH8Y0KDCO0NWwDsYfn13jpGv35Y8Y36rUvWs
StVjmyDYsiTyhRZKc6Ij3ks0K3m0NAGNXBwqdFhUM9aXbFbw5b1NEf22ZOl5tDRhhozJ8WL1Mn7y
niOCHD+9LwulXIzzkoe9B2rRqOTcWpyDSiELRwKtPUOAdKrP/Vlh8l0pIz1GxVOLDMsXR5Bl8MNW
rYxks5Yul56uAQ9lXQMca/4TN8ef4u6SXAoyQ4ljTfMF3jhez8kLlxlXGpGZM0g3a0g0Kmh3eukd
8i9a9juVTTxwRyEWvYpffjGXP9Ze5NWTfQsiyjq7ib0HKnjpnVp6B708VJrDdx+5I2S0+SbeqB+I
aP/a4Woy4k0crm7mzZpzAPzDPZ/mwS3FKOVituXp+Wl574yYZ2txCiq5lPpzDo7VttB50c2w1ABB
DWalmL8uDemno7ufH//6MMcaHeTFG/nWvaUU5aVyX7GVD9oHZ3ioj4y3Ztnb0pxojlQ28Is/VnDm
govPFqTxj49tRqWQsb04jmGfnx/vPsTL5Wex6pR87/Pr2VSUTaJFxd3ZhohD4xeHT1OUIOFYbQtl
de2cueAiL97Iv/3tVpLjzGzOj+HFEz3hvfhCgTlEDtcQX/yP1xiUGgkGxmjqdPKdh24FYH/1Baq6
R1CY4gD4u03xKGVihn1+nvvt0fC8Hr1tJQ9uKWad3cTd5wdn9fg3hAd5YLWVzTkmbEYFvW4f77W4
KW/W09gTzUm3i6pXKsiwhE7dFucIUn0MUms89lgNpZkGNmQYsOrlOFw+Dp4d4JWq3kXJf/bYBaxG
NZuKslHKxGwvjuMzK2MWRJS9ByrYdbwHZfwqopMk7G/vo7CygU1F2STFaGe03117ibEPupDpLETf
tB6AXcc7Kbm5n+Q4Mynm2UMGlVzKkcoGnthbgVxnIUqmJkoMEiXcm29GJQ9tx1d3HcCrTSL6pgy6
/T5++GoNb+SlopJLuTVDS2vlyFXv17DPz38fbMSjziT6JgXlAy5uPd3GxtV2APa8VcH+doi+aT2B
wBi/Km9jU1F26CBURlYYFaY4vvTsO8h1FqSa0Hjdfh+vvnea7zywAYAVMQqOdlwGwKIOhd2nz3Uz
GpOLShxa9xvn+vjOxJglKzI4PTIQDjvt8ToAnt9XHjGvXce7w3r/dIrq2hHkav2H/7KbMb8KEQpi
9Qo+X6jg9mwjlR1DHDqro67LRIc3FEOr47WsSNByR46JomQtJvWUQY35ffgvuxc9H6UlkZ37TnFb
dTMP3lFIbpotgii/OeFgz4ezhyfNriBKS2JYDzJ9NBc9gTmLwHJTHJMBVkGcCp1CAql5IBKFK0dz
zf+/DjaiS1kxI6fOi1OEvcfaoiKImgwldDBupqM7ZATR6sXtVXCOvW139HNZbSNKLCEISDVGeoem
DP+EI4BMHx3qK5bQ4TdMjRmYub7JNZmVYvJj1YCOJONUq8Cod6rPRJVNJJbBhHwm9B4OS0d94fcL
4hVTxJYa2bxSP02yibZuF8lxZpJj1Mte0F42D7K7vJnfH62mJDuObSW5rEiNxaSWsTnXTEmantou
D+82hth9q93IygQNWoUknKjXtfXw+vF6jjd0MyTWoZow2MVAY8ukbMDFwWffYXOWMYIoj5YmcrZn
mOpZLs1O9vohKvLUF0XNrZqHV1m4JdcSTtAXXMjo7mdYbWO2soVFFzKC5DgzO7eZ5xwjRq9Ylv06
1XYRkVgy55rbvDLE01Qils0tN2Mi4S5MM8zIEWZDr8tDToqVvNQYzJWDYe++KVUXbvNBy0UglAPG
aKbu1P75/oI5x7Xo1dcyB7m6gVTmREZH/bzdOsC7p99lbWY0d67JoiAzHq1CRmmGgbXpIeZHTZy0
l31+apov8NaJJt5v7mNcaUZmzEQllS15PjK1EZnaSFm/i4PPvMOXS1N4/J5QGLQ110C1YyZB3OOK
ycP/I8umP9icxLrskAHXn3NwsqmL+vZQOPiVbSUkx5nn1OewbzRkhLM8sxjU4dCn3TF3It7W7V4W
FxIlUUBw7ht2sVQxv5yJZ4U2FU/enY5KLmHY52d/2WkcTjddF93kplh5cEvxjHm8dKSJ4pxELHoV
ux6wc/TsAGq5mPXZoeLFkcoGPnSCRDHzUKg/51h4iXt5PcjVjxwllWKJtTHktXDM0U/Z7uPcnKDh
s5+yU5SdiEUXMgLn4GUqGzp584NGTnZ5iNKYkcXa0SpleEYCyzIXmcaATGNgz8lutnzaSXKcBYsm
atrYUzJEYvEsMoMzXmcY5WFyVJ5p42svlCHVGJAoQifdF3yj8++USDTn2urPOchNs9HucPLYM2/P
Uy3UoLamLu4iZFaZwQWt+aNYtzVXH86dnnhuP1XOELmiZCqkuvFZ+3QE9Dzx3H5+9u3tmLVythfH
hXVQXtvCiye6J0r1ofYnmx3kJIfCr/l0A6C/Iny9YUKsLKuK9RlGcmJVdAz4ONyop+6ChdNDbmpe
rSE7up51N4XCpmOnO2no8yHTW1HY4lkRr+MWu5Fkk4KzPcOUtbho6l2ezw8pTHGolYqI2HepSNBO
uZk/VHXM2IzkuKV/kqCt201umo3cNBuFq1bT4hrhLwEWjThs3HWj0aitmvCznCTDHGGihqcf3caw
z8/nvv+/9A56w95frrNE3GMB9EzLjb72uVvY82HfdVvfsoVY995sZtNEXT0/QcuGTAM1nR7+UOek
7oKJNo+bxvLOidPdhD5Bz4p4DVtXWChI1IQ/1JifoCVGHcWPDi6cIJvSdDxSEk9Fq4vKjiGqHaFq
SYZJzkPFsVgMoU072dIz92G6gAN5fHSq/HzX2jzef7NzIjGV8PUN8eEa/rxjzvH+qxXn2bo2B4Cd
d6bw96+10u8dm3ZJJuHOHCN7ahZpHMHFz2UxOpk8dHLTbKxJndL9pjQdW4sSZ51Hfow8HJI9+Nkt
OAZHI4Y+cm4wsqx+ysnDG0P3XPetiQ3lkhNyJrEt18iZnmFaBkauDUGuNqh5eu97HM8ycfvqTFZm
2NAppWzMMrI2XU9l+yDvNAzw4fnQrfaqJC23ZZsoStEhFYcSMP9YgNoWB29XNVPWNEDQlLZg2QGf
h0SLkkSLku1r5kqQnbxS6SCotC7ZFt5u6mfHxIVkYUY0v3xYw7B/jCSzCqVcTEd3KJRbAj9oH9Xy
831lPL59PYnRal55PJ9GR6jqp5JJSLSECgK7axZ/el5Lfhyr6yAnJaTTJ7el09nvDc93svJ2ZZ8D
p7v4q3wtuWk2Hts482J0J3Cg9iI/PtoVrm499eK7PL3jM6gUMp6+306n08uwP3SA2G2hUvy/vlZP
88ANWsUa1SfyVrOTQ3VlrEk3sXl1JquzEtBrFJSkG/hUmp66rtCGr0jQhhN1t8dHVVMXB6uaOdE6
QEBhQKZPXNR3gTsGvFSeaaMoL3XWev/rRz9kd1kzI+YsRFeV1xh56sV3efKxW7EYtWGjdbqGePY3
f6JrYIT/+dZdSxpbLFOw+1Q3g8OHuP+2ApLjLOGNn0TlmbYbLsR6qaqPWH0td61fiUouCc/5SGUD
//m7Kv7lobUz9uWbt+eQYrPMmnSn2CyoFDK2rIyhZ3Ak7DFPjZj43nP7+eLmAoryUsO6n34Atl90
A/JlXd/kr7sHvcrlGTg4HsDvGYDhAewxSjYXpnNLQQZmnSqiXf/gMIdrWjhY3UrjRS+oTMg0JkRR
4kXLDPh9DF9sY8TdR6ndhkETyjkueXwca7mIypKIwhgXUdb0Oju53BsyOEve+hljzvV8zOdhsLOe
takmDBoFlzw+3m8bQG1NRSxTcqm1BqnGiD55Kj9xd9Qx6nHNeH82jAz24e3rxG6WkRZrCK+jvNGB
XB+NNiHnI/Uxfe665BURn0dznikDQG1NDd/9LFQnc/W93NuGzu+kODOUbFc0d+MWG1BbU/F0NzPi
7gvP4+GCaB7bkITTNcRDP3yZgfHI8vGYd4jf/+BBkm0WGs738/V97RG69zo7MQQ9YVkA+6vPIVFo
0CbmzluOXgyU3hH27ywRLTtBpogyzph3iNGhPpK0cHtBKluKQ7e0ByoaebumjfNDINVGI1Fql+1f
Loz5PIyPjU6UMqXhCtNyY1LOtZIR8PsI+L3XfB3Ltt+BMUYnLoKlSu2MO5ZJPLs9hewkM3sPVfHC
qcCs7b6/XsfGwkzOtvfyjd91zStr0rMvNyYJcs2+ky6KikKq1iNV6egZGeaF8k52vVkNgFwfg1wX
h8qqYv4LiCXEjNfJkK61HLFMsWyn4fWASCxZkKF6Lg8DZlZlpyA60zHjeaFNTXFeykRRpfuqZN1Q
SfrcmhMhVqhRKdSoYlIWlQgK+PihrK6T1TmJZCdZ+L+v6DhSP3UpuiJBiz0+lMN0OJz87Ej7jDDw
ekMiWKuA64nX6gcJ/OogX7qrBItRy71rbJF5jmuIQx/U85M/nMKQVvBnt8tlvUkXIOCjINdZeP1c
H3t37iE7WhUuRABUNnfT5wuiMMZiSFt1Q9ikRNgyAdefJNHIddE4/D66nN4pY7StxCi+sUxSIIiA
Pxv+EgoRQg4iQMA8EH68WoCAhXgQwYEIECB4EAEClpqkCz5EgIC5CDIgCmISKCJAAJOf+B6YHmLt
lgbHBc0IEABIx8cBXphOkOelowGkgXFEgn4EfII9hzQwjnQsAPD89BCrEciRBQI7ZIHAI4BRUJeA
TyBcwG7g+f07S9ph4gtTAgQImB3/PwDuN9LAj5N4JQAAAABJRU5ErkJggg==

------MultipartBoundary--AECEVEJuy33JvxdbNHHwZK6RLyAPrrEwz1q5MGptF9------
