From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Initialization.html
Subject: =?utf-8?Q?Initialization=20=E2=80=94=20The=20Swift=20Programming=20Langua?=
 =?utf-8?Q?ge=20(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:57:01 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----"


------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Initialization.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Initialization =E2=80=94 The Swift Programming Language (Swift 5=
.1)</title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#"=
>Initialization</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html">Protocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#">Initialization</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID204">Setting Initial Values for Stor=
ed Properties</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID205">Initializers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID206">Default Property Values</a></li=
>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID207">Customizing Initialization</a><=
ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID208">Initialization Parameters</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID209">Parameter Names and Argument La=
bels</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID210">Initializer Parameters Without =
Argument Labels</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID211">Optional Property Types</a></li=
>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID212">Assigning Constant Properties D=
uring Initialization</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID213">Default Initializers</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID214">Memberwise Initializers for Str=
ucture Types</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID215">Initializer Delegation for Valu=
e Types</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID216">Class Inheritance and Initializ=
ation</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID217">Designated Initializers and Con=
venience Initializers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID218">Syntax for Designated and Conve=
nience Initializers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID219">Initializer Delegation for Clas=
s Types</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID220">Two-Phase Initialization</a></l=
i>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID221">Initializer Inheritance and Ove=
rriding</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID222">Automatic Initializer Inheritan=
ce</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID223">Designated and Convenience Init=
ializers in Action</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID224">Failable Initializers</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID225">Failable Initializers for Enume=
rations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID226">Failable Initializers for Enume=
rations with Raw Values</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID228">Propagation of Initialization F=
ailure</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID229">Overriding a Failable Initializ=
er</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID230">The init! Failable Initializer<=
/a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID231">Required Initializers</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Initialization.html#ID232">Setting a Default Property Valu=
e with a Closure or Function</a></li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"initialization">
<h1>Initialization<a class=3D"headerlink" href=3D"https://docs.swift.org/sw=
ift-book/LanguageGuide/Initialization.html#initialization" title=3D"Permali=
nk to this headline">=C2=B6</a></h1>
<p><em>Initialization</em> is the process of preparing an instance of a cla=
ss, structure, or enumeration for use. This process involves setting an ini=
tial value for each stored property on that instance and performing any oth=
er setup or initialization that is required before the new instance is read=
y for use.</p>
<p>You implement this initialization process by defining <em>initializers</=
em>, which are like special methods that can be called to create a new inst=
ance of a particular type. Unlike Objective-C initializers, Swift initializ=
ers do not return a value. Their primary role is to ensure that new instanc=
es of a type are correctly initialized before they are used for the first t=
ime.</p>
<p>Instances of class types can also implement a <em>deinitializer</em>, wh=
ich performs any custom cleanup just before an instance of that class is de=
allocated. For more information about deinitializers, see <a class=3D"refer=
ence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Dein=
itialization.html"><span class=3D"doc">Deinitialization</span></a>.</p>
<div class=3D"section" id=3D"ID204">
<h2>Setting Initial Values for Stored Properties<a class=3D"headerlink" hre=
f=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID=
204" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Classes and structures <em>must</em> set all of their stored properties =
to an appropriate initial value by the time an instance of that class or st=
ructure is created. Stored properties cannot be left in an indeterminate st=
ate.</p>
<p>You can set an initial value for a stored property within an initializer=
, or by assigning a default property value as part of the property=E2=80=99=
s definition. These actions are described in the following sections.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When you assign a default value to a stored property, or =
set its initial value within an initializer, the value of that property is =
set directly, without calling any property observers.</p>
</div>
<div class=3D"section" id=3D"ID205">
<h3>Initializers<a class=3D"headerlink" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/Initialization.html#ID205" title=3D"Permalink to this =
headline">=C2=B6</a></h3>
<p><em>Initializers</em> are called to create a new instance of a particula=
r type. In its simplest form, an initializer is like an instance method wit=
h no parameters, written using the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">init</span></code> keyword:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">in=
it</span>() {
</li><li>    <span class=3D"c">// perform some initialization here</span>
</li><li>}
</li></ol></div></div></div>
<p>The example below defines a new structure called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Fahrenheit</span></code> to store=
 temperatures expressed in the Fahrenheit scale. The <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Fahrenheit</span></code> structu=
re has one stored property, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">temperature</span></code>, which is of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Double</span></code>:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Fahrenheit</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">temperature</s=
pan>: <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>() {
</li><li>        <span class=3D"nv">temperature</span> =3D <span class=3D"m=
">32.0</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">f</span> =3D <span=
 class=3D"nv">Fahrenheit</span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"The default tem=
perature is </span>\<span class=3D"p">(</span><span class=3D"nv">f</span>.<=
span class=3D"nv">temperature</span><span class=3D"p">)</span><span class=
=3D"s">=C2=B0 Fahrenheit"</span>)
</li><li><span class=3D"c">// Prints "The default temperature is 32.0=C2=B0=
 Fahrenheit"</span>
</li></ol></div></div></div>
<p>The structure defines a single initializer, <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">init</span></code>, with no parameters=
, which initializes the stored temperature with a value of <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">32.0</span></code> (the fr=
eezing point of water in degrees Fahrenheit).</p>
</div>
<div class=3D"section" id=3D"ID206">
<h3>Default Property Values<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/Initialization.html#ID206" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>You can set the initial value of a stored property from within an initia=
lizer, as shown above. Alternatively, specify a <em>default property value<=
/em> as part of the property=E2=80=99s declaration. You specify a default p=
roperty value by assigning an initial value to the property when it is defi=
ned.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If a property always takes the same initial value, provid=
e a default value rather than setting a value within an initializer. The en=
d result is the same, but the default value ties the property=E2=80=99s ini=
tialization more closely to its declaration. It makes for shorter, clearer =
initializers and enables you to infer the type of the property from its def=
ault value. The default value also makes it easier for you to take advantag=
e of default initializers and initializer inheritance, as described later i=
n this chapter.</p>
</div>
<p>You can write the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">Fahrenheit</span></code> structure from above in a simpler form =
by providing a default value for its <code class=3D"docutils literal notran=
slate"><span class=3D"pre">temperature</span></code> property at the point =
that the property is declared:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Fahrenheit</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">temperature</s=
pan> =3D <span class=3D"m">32.0</span>
</li><li>}
</li></ol></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID207">
<h2>Customizing Initialization<a class=3D"headerlink" href=3D"https://docs.=
swift.org/swift-book/LanguageGuide/Initialization.html#ID207" title=3D"Perm=
alink to this headline">=C2=B6</a></h2>
<p>You can customize the initialization process with input parameters and o=
ptional property types, or by assigning constant properties during initiali=
zation, as described in the following sections.</p>
<div class=3D"section" id=3D"ID208">
<h3>Initialization Parameters<a class=3D"headerlink" href=3D"https://docs.s=
wift.org/swift-book/LanguageGuide/Initialization.html#ID208" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>You can provide <em>initialization parameters</em> as part of an initial=
izer=E2=80=99s definition, to define the types and names of values that cus=
tomize the initialization process. Initialization parameters have the same =
capabilities and syntax as function and method parameters.</p>
<p>The following example defines a structure called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Celsius</span></code>, which stor=
es temperatures expressed in degrees Celsius. The <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">Celsius</span></code> structure imp=
lements two custom initializers called <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">init(fromFahrenheit:)</span></code> and <code =
class=3D"docutils literal notranslate"><span class=3D"pre">init(fromKelvin:=
)</span></code>, which initialize a new instance of the structure with a va=
lue from a different temperature scale:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Celsius</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">temperatureInC=
elsius</span>: <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">fromFahrenhei=
t</span> <span class=3D"nv">fahrenheit</span>: <span class=3D"nc">Double</s=
pan>) {
</li><li>        <span class=3D"nv">temperatureInCelsius</span> =3D (<span =
class=3D"nv">fahrenheit</span> - <span class=3D"m">32.0</span>) / <span cla=
ss=3D"m">1.8</span>
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">fromKelvin</s=
pan> <span class=3D"nv">kelvin</span>: <span class=3D"nc">Double</span>) {
</li><li>        <span class=3D"nv">temperatureInCelsius</span> =3D <span c=
lass=3D"nv">kelvin</span> - <span class=3D"m">273.15</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">boilingPointOfWate=
r</span> =3D <span class=3D"nv">Celsius</span>(<span class=3D"nv">fromFahre=
nheit</span>: <span class=3D"m">212.0</span>)
</li><li><span class=3D"c">// boilingPointOfWater.temperatureInCelsius is 1=
00.0</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">freezingPointOfWat=
er</span> =3D <span class=3D"nv">Celsius</span>(<span class=3D"nv">fromKelv=
in</span>: <span class=3D"m">273.15</span>)
</li><li><span class=3D"c">// freezingPointOfWater.temperatureInCelsius is =
0.0</span>
</li></ol></div></div></div>
<p>The first initializer has a single initialization parameter with an argu=
ment label of <code class=3D"docutils literal notranslate"><span class=3D"p=
re">fromFahrenheit</span></code> and a parameter name of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">fahrenheit</span></code>. Th=
e second initializer has a single initialization parameter with an argument=
 label of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
fromKelvin</span></code> and a parameter name of <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">kelvin</span></code>. Both initializ=
ers convert their single argument into the corresponding Celsius value and =
store this value in a property called <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">temperatureInCelsius</span></code>.</p>
</div>
<div class=3D"section" id=3D"ID209">
<h3>Parameter Names and Argument Labels<a class=3D"headerlink" href=3D"http=
s://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID209" titl=
e=3D"Permalink to this headline">=C2=B6</a></h3>
<p>As with function and method parameters, initialization parameters can ha=
ve both a parameter name for use within the initializer=E2=80=99s body and =
an argument label for use when calling the initializer.</p>
<p>However, initializers do not have an identifying function name before th=
eir parentheses in the way that functions and methods do. Therefore, the na=
mes and types of an initializer=E2=80=99s parameters play a particularly im=
portant role in identifying which initializer should be called. Because of =
this, Swift provides an automatic argument label for <em>every</em> paramet=
er in an initializer if you don=E2=80=99t provide one.</p>
<p>The following example defines a structure called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Color</span></code>, with three c=
onstant properties called <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">red</span></code>, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">green</span></code>, and <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">blue</span></code>. These propertie=
s store a value between <code class=3D"docutils literal notranslate"><span =
class=3D"pre">0.0</span></code> and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">1.0</span></code> to indicate the amount of red, =
green, and blue in the color.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">Color</=
span></code> provides an initializer with three appropriately named paramet=
ers of type <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Double</span></code> for its red, green, and blue components. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Color</span></code> a=
lso provides a second initializer with a single <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">white</span></code> parameter, which =
is used to provide the same value for all three color components.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Color</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">red</span>, <s=
pan class=3D"nv">green</span>, <span class=3D"nv">blue</span>: <span class=
=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">red</span>: <=
span class=3D"nc">Double</span>, <span class=3D"nv">green</span>: <span cla=
ss=3D"nc">Double</span>, <span class=3D"nv">blue</span>: <span class=3D"nc"=
>Double</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">red</span=
>   =3D <span class=3D"nv">red</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">green</sp=
an> =3D <span class=3D"nv">green</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">blue</spa=
n>  =3D <span class=3D"nv">blue</span>
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">white</span>:=
 <span class=3D"nc">Double</span>) {
</li><li>        <span class=3D"nv">red</span>   =3D <span class=3D"nv">whi=
te</span>
</li><li>        <span class=3D"nv">green</span> =3D <span class=3D"nv">whi=
te</span>
</li><li>        <span class=3D"nv">blue</span>  =3D <span class=3D"nv">whi=
te</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Both initializers can be used to create a new <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Color</span></code> instance, by pro=
viding named values for each initializer parameter:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">magenta</span> =3D <span class=3D"nv">Color</sp=
an>(<span class=3D"nv">red</span>: <span class=3D"m">1.0</span>, <span clas=
s=3D"nv">green</span>: <span class=3D"m">0.0</span>, <span class=3D"nv">blu=
e</span>: <span class=3D"m">1.0</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">halfGray</span> =
=3D <span class=3D"nv">Color</span>(<span class=3D"nv">white</span>: <span =
class=3D"m">0.5</span>)
</li></ol></div></div></div>
<p>Note that it is not possible to call these initializers without using ar=
gument labels. Argument labels must always be used in an initializer if the=
y are defined, and omitting them is a compile-time error:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">veryGreen</span> =3D <span class=3D"nv">Color</=
span>(<span class=3D"m">0.0</span>, <span class=3D"m">1.0</span>, <span cla=
ss=3D"m">0.0</span>)
</li><li><span class=3D"c">// this reports a compile-time error - argument =
labels are required</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID210">
<h3>Initializer Parameters Without Argument Labels<a class=3D"headerlink" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#=
ID210" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>If you do not want to use an argument label for an initializer parameter=
, write an underscore (<code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">_</span></code>) instead of an explicit argument label for tha=
t parameter to override the default behavior.</p>
<p>Here=E2=80=99s an expanded version of the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Celsius</span></code> example from <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Langua=
geGuide/Initialization.html#ID208"><span class=3D"std std-ref">Initializati=
on Parameters</span></a> above, with an additional initializer to create a =
new <code class=3D"docutils literal notranslate"><span class=3D"pre">Celsiu=
s</span></code> instance from a <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Double</span></code> value that is already in the Cel=
sius scale:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Celsius</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">temperatureInC=
elsius</span>: <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">fromFahrenhei=
t</span> <span class=3D"nv">fahrenheit</span>: <span class=3D"nc">Double</s=
pan>) {
</li><li>        <span class=3D"nv">temperatureInCelsius</span> =3D (<span =
class=3D"nv">fahrenheit</span> - <span class=3D"m">32.0</span>) / <span cla=
ss=3D"m">1.8</span>
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">fromKelvin</s=
pan> <span class=3D"nv">kelvin</span>: <span class=3D"nc">Double</span>) {
</li><li>        <span class=3D"nv">temperatureInCelsius</span> =3D <span c=
lass=3D"nv">kelvin</span> - <span class=3D"m">273.15</span>
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"k">_</span> <span=
 class=3D"nv">celsius</span>: <span class=3D"nc">Double</span>) {
</li><li>        <span class=3D"nv">temperatureInCelsius</span> =3D <span c=
lass=3D"nv">celsius</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">bodyTemperature</s=
pan> =3D <span class=3D"nv">Celsius</span>(<span class=3D"m">37.0</span>)
</li><li><span class=3D"c">// bodyTemperature.temperatureInCelsius is 37.0<=
/span>
</li></ol></div></div></div>
<p>The initializer call <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Celsius(37.0)</span></code> is clear in its intent without th=
e need for an argument label. It is therefore appropriate to write this ini=
tializer as <code class=3D"docutils literal notranslate"><span class=3D"pre=
">init(_</span> <span class=3D"pre">celsius:</span> <span class=3D"pre">Dou=
ble)</span></code> so that it can be called by providing an unnamed <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Double</span></co=
de> value.</p>
</div>
<div class=3D"section" id=3D"ID211">
<h3>Optional Property Types<a class=3D"headerlink" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/Initialization.html#ID211" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>If your custom type has a stored property that is logically allowed to h=
ave =E2=80=9Cno value=E2=80=9D=E2=80=94perhaps because its value cannot be =
set during initialization, or because it is allowed to have =E2=80=9Cno val=
ue=E2=80=9D at some later point=E2=80=94declare the property with an <em>op=
tional</em> type. Properties of optional type are automatically initialized=
 with a value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">nil</span></code>, indicating that the property is deliberately in=
tended to have =E2=80=9Cno value yet=E2=80=9D during initialization.</p>
<p>The following example defines a class called <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">SurveyQuestion</span></code>, with an=
 optional <code class=3D"docutils literal notranslate"><span class=3D"pre">=
String</span></code> property called <code class=3D"docutils literal notran=
slate"><span class=3D"pre">response</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SurveyQuestion</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">text</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">response</span=
>: <span class=3D"nc">String</span>?
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">text</span>: =
<span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">text</spa=
n> =3D <span class=3D"nv">text</span>
</li><li>    }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">ask</span>() =
{
</li><li>        <span class=3D"nv">print</span>(<span class=3D"nv">text</s=
pan>)
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">cheeseQuestion</sp=
an> =3D <span class=3D"nv">SurveyQuestion</span>(<span class=3D"nv">text</s=
pan>: <span class=3D"s">"Do you like cheese?"</span>)
</li><li><span class=3D"nv">cheeseQuestion</span>.<span class=3D"nv">ask</s=
pan>()
</li><li><span class=3D"c">// Prints "Do you like cheese?"</span>
</li><li><span class=3D"nv">cheeseQuestion</span>.<span class=3D"nv">respon=
se</span> =3D <span class=3D"s">"Yes, I do like cheese."</span>
</li></ol></div></div></div>
<p>The response to a survey question cannot be known until it is asked, and=
 so the <code class=3D"docutils literal notranslate"><span class=3D"pre">re=
sponse</span></code> property is declared with a type of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">String?</span></code>, or =
=E2=80=9Coptional <code class=3D"docutils literal notranslate"><span class=
=3D"pre">String</span></code>=E2=80=9D. It is automatically assigned a defa=
ult value of <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">nil</span></code>, meaning =E2=80=9Cno string yet=E2=80=9D, when a new i=
nstance of <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>SurveyQuestion</span></code> is initialized.</p>
</div>
<div class=3D"section" id=3D"ID212">
<h3>Assigning Constant Properties During Initialization<a class=3D"headerli=
nk" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.=
html#ID212" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can assign a value to a constant property at any point during initia=
lization, as long as it is set to a definite value by the time initializati=
on finishes. Once a constant property is assigned a value, it can=E2=80=99t=
 be further modified.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">For class instances, a constant property can be modified =
during initialization only by the class that introduces it. It cannot be mo=
dified by a subclass.</p>
</div>
<p>You can revise the <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">SurveyQuestion</span></code> example from above to use a consta=
nt property rather than a variable property for the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">text</span></code> property of th=
e question, to indicate that the question does not change once an instance =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">SurveyQ=
uestion</span></code> is created. Even though the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">text</span></code> property is now =
a constant, it can still be set within the class=E2=80=99s initializer:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SurveyQuestion</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">text</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">response</span=
>: <span class=3D"nc">String</span>?
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">text</span>: =
<span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">text</spa=
n> =3D <span class=3D"nv">text</span>
</li><li>    }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">ask</span>() =
{
</li><li>        <span class=3D"nv">print</span>(<span class=3D"nv">text</s=
pan>)
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">beetsQuestion</spa=
n> =3D <span class=3D"nv">SurveyQuestion</span>(<span class=3D"nv">text</sp=
an>: <span class=3D"s">"How about beets?"</span>)
</li><li><span class=3D"nv">beetsQuestion</span>.<span class=3D"nv">ask</sp=
an>()
</li><li><span class=3D"c">// Prints "How about beets?"</span>
</li><li><span class=3D"nv">beetsQuestion</span>.<span class=3D"nv">respons=
e</span> =3D <span class=3D"s">"I also like beets. (But not with cheese.)"<=
/span>
</li></ol></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID213">
<h2>Default Initializers<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Initialization.html#ID213" title=3D"Permalink =
to this headline">=C2=B6</a></h2>
<p>Swift provides a <em>default initializer</em> for any structure or class=
 that provides default values for all of its properties and does not provid=
e at least one initializer itself. The default initializer simply creates a=
 new instance with all of its properties set to their default values.</p>
<p>This example defines a class called <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">ShoppingListItem</span></code>, which encapsul=
ates the name, quantity, and purchase state of an item in a shopping list:<=
/p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">ShoppingListItem</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>?
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">quantity</span=
> =3D <span class=3D"m">1</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">purchased</spa=
n> =3D <span class=3D"k">false</span>
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">item</span> =3D <s=
pan class=3D"nv">ShoppingListItem</span>()
</li></ol></div></div></div>
<p>Because all properties of the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">ShoppingListItem</span></code> class have default va=
lues, and because it is a base class with no superclass, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">ShoppingListItem</span></cod=
e> automatically gains a default initializer implementation that creates a =
new instance with all of its properties set to their default values. (The <=
code class=3D"docutils literal notranslate"><span class=3D"pre">name</span>=
</code> property is an optional <code class=3D"docutils literal notranslate=
"><span class=3D"pre">String</span></code> property, and so it automaticall=
y receives a default value of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">nil</span></code>, even though this value is not writte=
n in the code.) The example above uses the default initializer for the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">ShoppingListIt=
em</span></code> class to create a new instance of the class with initializ=
er syntax, written as <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">ShoppingListItem()</span></code>, and assigns this new instance=
 to a variable called <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">item</span></code>.</p>
<div class=3D"section" id=3D"ID214">
<h3>Memberwise Initializers for Structure Types<a class=3D"headerlink" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID2=
14" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Structure types automatically receive a <em>memberwise initializer</em> =
if they don=E2=80=99t define any of their own custom initializers. Unlike a=
 default initializer, the structure receives a memberwise initializer even =
if it has stored properties that don=E2=80=99t have default values.</p>
<p>The memberwise initializer is a shorthand way to initialize the member p=
roperties of new structure instances. Initial values for the properties of =
the new instance can be passed to the memberwise initializer by name.</p>
<p>The example below defines a structure called <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Size</span></code> with two propertie=
s called <code class=3D"docutils literal notranslate"><span class=3D"pre">w=
idth</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">height</span></code>. Both properties are inferred to be of ty=
pe <code class=3D"docutils literal notranslate"><span class=3D"pre">Double<=
/span></code> by assigning a default value of <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">0.0</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Siz=
e</span></code> structure automatically receives an <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">init(width:height:)</span></code>=
 memberwise initializer, which you can use to initialize a new <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Size</span></code> in=
stance:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Size</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">width</span> =
=3D <span class=3D"m">0.0</span>, <span class=3D"nv">height</span> =3D <spa=
n class=3D"m">0.0</span>
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">twoByTwo</span> =
=3D <span class=3D"nv">Size</span>(<span class=3D"nv">width</span>: <span c=
lass=3D"m">2.0</span>, <span class=3D"nv">height</span>: <span class=3D"m">=
2.0</span>)
</li></ol></div></div></div>
<p>When you call a memberwise initializer, you can omit values for any prop=
erties that have default values. In the example above, the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">Size</span></code> structu=
re has a default value for both its <code class=3D"docutils literal notrans=
late"><span class=3D"pre">height</span></code> and <code class=3D"docutils =
literal notranslate"><span class=3D"pre">width</span></code> properties. Yo=
u can omit either property or both properties, and the initializer uses the=
 default value for anything you omit=E2=80=94for example:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">zeroByTwo</span> =3D <span class=3D"nv">Size</s=
pan>(<span class=3D"nv">height</span>: <span class=3D"m">2.0</span>)
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">zeroByTwo</span=
>.<span class=3D"nv">width</span>, <span class=3D"nv">zeroByTwo</span>.<spa=
n class=3D"nv">height</span>)
</li><li><span class=3D"c">// Prints "0.0 2.0"</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">zeroByZero</span> =
=3D <span class=3D"nv">Size</span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">zeroByZero</spa=
n>.<span class=3D"nv">width</span>, <span class=3D"nv">zeroByZero</span>.<s=
pan class=3D"nv">height</span>)
</li><li><span class=3D"c">// Prints "0.0 0.0"</span>
</li></ol></div></div></div>
</div>
</div>
<div class=3D"section" id=3D"ID215">
<h2>Initializer Delegation for Value Types<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID215" t=
itle=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Initializers can call other initializers to perform part of an instance=
=E2=80=99s initialization. This process, known as <em>initializer delegatio=
n</em>, avoids duplicating code across multiple initializers.</p>
<p>The rules for how initializer delegation works, and for what forms of de=
legation are allowed, are different for value types and class types. Value =
types (structures and enumerations) do not support inheritance, and so thei=
r initializer delegation process is relatively simple, because they can onl=
y delegate to another initializer that they provide themselves. Classes, ho=
wever, can inherit from other classes, as described in <a class=3D"referenc=
e internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Inherit=
ance.html"><span class=3D"doc">Inheritance</span></a>. This means that clas=
ses have additional responsibilities for ensuring that all stored propertie=
s they inherit are assigned a suitable value during initialization. These r=
esponsibilities are described in <a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216"><s=
pan class=3D"std std-ref">Class Inheritance and Initialization</span></a> b=
elow.</p>
<p>For value types, you use <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">self.init</span></code> to refer to other initializers fr=
om the same value type when writing your own custom initializers. You can c=
all <code class=3D"docutils literal notranslate"><span class=3D"pre">self.i=
nit</span></code> only from within an initializer.</p>
<p>Note that if you define a custom initializer for a value type, you will =
no longer have access to the default initializer (or the memberwise initial=
izer, if it is a structure) for that type. This constraint prevents a situa=
tion in which additional essential setup provided in a more complex initial=
izer is accidentally circumvented by someone using one of the automatic ini=
tializers.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you want your custom value type to be initializable wi=
th the default initializer and memberwise initializer, and also with your o=
wn custom initializers, write your custom initializers in an extension rath=
er than as part of the value type=E2=80=99s original implementation. For mo=
re information, see <a class=3D"reference internal" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Extensions.html"><span class=3D"doc">Exten=
sions</span></a>.</p>
</div>
<p>The following example defines a custom <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Rect</span></code> structure to represent a=
 geometric rectangle. The example requires two supporting structures called=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">Size</spa=
n></code> and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Point</span></code>, both of which provide default values of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">0.0</span></code> fo=
r all of their properties:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Size</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">width</span> =
=3D <span class=3D"m">0.0</span>, <span class=3D"nv">height</span> =3D <spa=
n class=3D"m">0.0</span>
</li><li>}
</li><li><span class=3D"k">struct</span> <span class=3D"nv">Point</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">x</span> =3D <=
span class=3D"m">0.0</span>, <span class=3D"nv">y</span> =3D <span class=3D=
"m">0.0</span>
</li><li>}
</li></ol></div></div></div>
<p>You can initialize the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Rect</span></code> structure below in one of three ways=E2=
=80=94by using its default zero-initialized <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">origin</span></code> and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">size</span></code> propert=
y values, by providing a specific origin point and size, or by providing a =
specific center point and size. These initialization options are represente=
d by three custom initializers that are part of the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Rect</span></code> structure=E2=
=80=99s definition:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Rect</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">origin</span> =
=3D <span class=3D"nv">Point</span>()
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">size</span> =
=3D <span class=3D"nv">Size</span>()
</li><li>    <span class=3D"k">init</span>() {}
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">origin</span>=
: <span class=3D"nc">Point</span>, <span class=3D"nv">size</span>: <span cl=
ass=3D"nc">Size</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">origin</s=
pan> =3D <span class=3D"nv">origin</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">size</spa=
n> =3D <span class=3D"nv">size</span>
</li><li>    }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">center</span>=
: <span class=3D"nc">Point</span>, <span class=3D"nv">size</span>: <span cl=
ass=3D"nc">Size</span>) {
</li><li>        <span class=3D"k">let</span> <span class=3D"nv">originX</s=
pan> =3D <span class=3D"nv">center</span>.<span class=3D"nv">x</span> - (<s=
pan class=3D"nv">size</span>.<span class=3D"nv">width</span> / <span class=
=3D"m">2</span>)
</li><li>        <span class=3D"k">let</span> <span class=3D"nv">originY</s=
pan> =3D <span class=3D"nv">center</span>.<span class=3D"nv">y</span> - (<s=
pan class=3D"nv">size</span>.<span class=3D"nv">height</span> / <span class=
=3D"m">2</span>)
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">init</spa=
n>(<span class=3D"nv">origin</span>: <span class=3D"nv">Point</span>(<span =
class=3D"nv">x</span>: <span class=3D"nv">originX</span>, <span class=3D"nv=
">y</span>: <span class=3D"nv">originY</span>), <span class=3D"nv">size</sp=
an>: <span class=3D"nv">size</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The first <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Rect</span></code> initializer, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">init()</span></code>, is functionally the same as =
the default initializer that the structure would have received if it did no=
t have its own custom initializers. This initializer has an empty body, rep=
resented by an empty pair of curly braces <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">{}</span></code>. Calling this initializer =
returns a <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Rect</span></code> instance whose <code class=3D"docutils literal notransla=
te"><span class=3D"pre">origin</span></code> and <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">size</span></code> properties are bo=
th initialized with the default values of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Point(x:</span> <span class=3D"pre">0.0,</s=
pan> <span class=3D"pre">y:</span> <span class=3D"pre">0.0)</span></code> a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">Size(wi=
dth:</span> <span class=3D"pre">0.0,</span> <span class=3D"pre">height:</sp=
an> <span class=3D"pre">0.0)</span></code> from their property definitions:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">basicRect</span> =3D <span class=3D"nv">Rect</s=
pan>()
</li><li><span class=3D"c">// basicRect's origin is (0.0, 0.0) and its size=
 is (0.0, 0.0)</span>
</li></ol></div></div></div>
<p>The second <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Rect</span></code> initializer, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">init(origin:size:)</span></code>, is functionally=
 the same as the memberwise initializer that the structure would have recei=
ved if it did not have its own custom initializers. This initializer simply=
 assigns the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">origin</span></code> and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">size</span></code> argument values to the appropriate sto=
red properties:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">originRect</span> =3D <span class=3D"nv">Rect</=
span>(<span class=3D"nv">origin</span>: <span class=3D"nv">Point</span>(<sp=
an class=3D"nv">x</span>: <span class=3D"m">2.0</span>, <span class=3D"nv">=
y</span>: <span class=3D"m">2.0</span>),
</li><li>                      <span class=3D"nv">size</span>: <span class=
=3D"nv">Size</span>(<span class=3D"nv">width</span>: <span class=3D"m">5.0<=
/span>, <span class=3D"nv">height</span>: <span class=3D"m">5.0</span>))
</li><li><span class=3D"c">// originRect's origin is (2.0, 2.0) and its siz=
e is (5.0, 5.0)</span>
</li></ol></div></div></div>
<p>The third <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Rect</span></code> initializer, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">init(center:size:)</span></code>, is slightly more=
 complex. It starts by calculating an appropriate origin point based on a <=
code class=3D"docutils literal notranslate"><span class=3D"pre">center</spa=
n></code> point and a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">size</span></code> value. It then calls (or <em>delegates</em>)=
 to the <code class=3D"docutils literal notranslate"><span class=3D"pre">in=
it(origin:size:)</span></code> initializer, which stores the new origin and=
 size values in the appropriate properties:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">centerRect</span> =3D <span class=3D"nv">Rect</=
span>(<span class=3D"nv">center</span>: <span class=3D"nv">Point</span>(<sp=
an class=3D"nv">x</span>: <span class=3D"m">4.0</span>, <span class=3D"nv">=
y</span>: <span class=3D"m">4.0</span>),
</li><li>                      <span class=3D"nv">size</span>: <span class=
=3D"nv">Size</span>(<span class=3D"nv">width</span>: <span class=3D"m">3.0<=
/span>, <span class=3D"nv">height</span>: <span class=3D"m">3.0</span>))
</li><li><span class=3D"c">// centerRect's origin is (2.5, 2.5) and its siz=
e is (3.0, 3.0)</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t(center:size:)</span></code> initializer could have assigned the new value=
s of <code class=3D"docutils literal notranslate"><span class=3D"pre">origi=
n</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">size</span></code> to the appropriate properties itself. However,=
 it is more convenient (and clearer in intent) for the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">init(center:size:)</span></cod=
e> initializer to take advantage of an existing initializer that already pr=
ovides exactly that functionality.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">For an alternative way to write this example without defi=
ning the <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
nit()</span></code> and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">init(origin:size:)</span></code> initializers yourself, see <=
a class=3D"reference internal" href=3D"https://docs.swift.org/swift-book/La=
nguageGuide/Extensions.html"><span class=3D"doc">Extensions</span></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"ID216">
<h2>Class Inheritance and Initialization<a class=3D"headerlink" href=3D"htt=
ps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216" tit=
le=3D"Permalink to this headline">=C2=B6</a></h2>
<p>All of a class=E2=80=99s stored properties=E2=80=94including any propert=
ies the class inherits from its superclass=E2=80=94<em>must</em> be assigne=
d an initial value during initialization.</p>
<p>Swift defines two kinds of initializers for class types to help ensure a=
ll stored properties receive an initial value. These are known as designate=
d initializers and convenience initializers.</p>
<div class=3D"section" id=3D"ID217">
<h3>Designated Initializers and Convenience Initializers<a class=3D"headerl=
ink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization=
.html#ID217" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p><em>Designated initializers</em> are the primary initializers for a clas=
s. A designated initializer fully initializes all properties introduced by =
that class and calls an appropriate superclass initializer to continue the =
initialization process up the superclass chain.</p>
<p>Classes tend to have very few designated initializers, and it is quite c=
ommon for a class to have only one. Designated initializers are =E2=80=9Cfu=
nnel=E2=80=9D points through which initialization takes place, and through =
which the initialization process continues up the superclass chain.</p>
<p>Every class must have at least one designated initializer. In some cases=
, this requirement is satisfied by inheriting one or more designated initia=
lizers from a superclass, as described in <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#=
ID222"><span class=3D"std std-ref">Automatic Initializer Inheritance</span>=
</a> below.</p>
<p><em>Convenience initializers</em> are secondary, supporting initializers=
 for a class. You can define a convenience initializer to call a designated=
 initializer from the same class as the convenience initializer with some o=
f the designated initializer=E2=80=99s parameters set to default values. Yo=
u can also define a convenience initializer to create an instance of that c=
lass for a specific use case or input value type.</p>
<p>You do not have to provide convenience initializers if your class does n=
ot require them. Create convenience initializers whenever a shortcut to a c=
ommon initialization pattern will save time or make initialization of the c=
lass clearer in intent.</p>
</div>
<div class=3D"section" id=3D"ID218">
<h3>Syntax for Designated and Convenience Initializers<a class=3D"headerlin=
k" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.h=
tml#ID218" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Designated initializers for classes are written in the same way as simpl=
e initializers for value types:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">init</span>(<span class=3D"gi">parameters</span>) {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
<p>Convenience initializers are written in the same style, but with the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">convenience</=
span></code> modifier placed before the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">init</span></code> keyword, separated by a sp=
ace:</p>
<div class=3D"syntax-outline highlight-swift notranslate"><div class=3D"cod=
e-sample"><div class=3D"Swift highlight"><ol class=3D"code-lines"><li><span=
 class=3D"k">convenience</span> <span class=3D"k">init</span>(<span class=
=3D"gi">parameters</span>) {
</li><li>    <span class=3D"gi">statements</span>
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID219">
<h3>Initializer Delegation for Class Types<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID219" t=
itle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>To simplify the relationships between designated and convenience initial=
izers, Swift applies the following three rules for delegation calls between=
 initializers:</p>
<dl class=3D"docutils">
<dt><strong>Rule 1</strong></dt>
<dd>A designated initializer must call a designated initializer from its im=
mediate superclass.</dd>
<dt><strong>Rule 2</strong></dt>
<dd>A convenience initializer must call another initializer from the <em>sa=
me</em> class.</dd>
<dt><strong>Rule 3</strong></dt>
<dd>A convenience initializer must ultimately call a designated initializer=
.</dd>
</dl>
<p>A simple way to remember this is:</p>
<ul class=3D"simple">
<li>Designated initializers must always delegate <em>up</em>.</li>
<li>Convenience initializers must always delegate <em>across</em>.</li>
</ul>
<p>These rules are illustrated in the figure below:</p>
<img alt=3D"../_images/initializerDelegation01_2x.png" class=3D"align-cente=
r" src=3D"https://docs.swift.org/swift-book/_images/initializerDelegation01=
_2x.png" style=3D"width: 448px;">
<p>Here, the superclass has a single designated initializer and two conveni=
ence initializers. One convenience initializer calls another convenience in=
itializer, which in turn calls the single designated initializer. This sati=
sfies rules 2 and 3 from above. The superclass does not itself have a furth=
er superclass, and so rule 1 does not apply.</p>
<p>The subclass in this figure has two designated initializers and one conv=
enience initializer. The convenience initializer must call one of the two d=
esignated initializers, because it can only call another initializer from t=
he same class. This satisfies rules 2 and 3 from above. Both designated ini=
tializers must call the single designated initializer from the superclass, =
to satisfy rule 1 from above.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">These rules don=E2=80=99t affect how users of your classe=
s <em>create</em> instances of each class. Any initializer in the diagram a=
bove can be used to create a fully initialized instance of the class they b=
elong to. The rules only affect how you write the implementation of the cla=
ss=E2=80=99s initializers.</p>
</div>
<p>The figure below shows a more complex class hierarchy for four classes. =
It illustrates how the designated initializers in this hierarchy act as =E2=
=80=9Cfunnel=E2=80=9D points for class initialization, simplifying the inte=
rrelationships among classes in the chain:</p>
<img alt=3D"../_images/initializerDelegation02_2x.png" class=3D"align-cente=
r" src=3D"https://docs.swift.org/swift-book/_images/initializerDelegation02=
_2x.png" style=3D"width: 448px;">
</div>
<div class=3D"section" id=3D"ID220">
<h3>Two-Phase Initialization<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Initialization.html#ID220" title=3D"Permal=
ink to this headline">=C2=B6</a></h3>
<p>Class initialization in Swift is a two-phase process. In the first phase=
, each stored property is assigned an initial value by the class that intro=
duced it. Once the initial state for every stored property has been determi=
ned, the second phase begins, and each class is given the opportunity to cu=
stomize its stored properties further before the new instance is considered=
 ready for use.</p>
<p>The use of a two-phase initialization process makes initialization safe,=
 while still giving complete flexibility to each class in a class hierarchy=
. Two-phase initialization prevents property values from being accessed bef=
ore they are initialized, and prevents property values from being set to a =
different value by another initializer unexpectedly.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Swift=E2=80=99s two-phase initialization process is simil=
ar to initialization in Objective-C. The main difference is that during pha=
se 1, Objective-C assigns zero or null values (such as <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">0</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>) to=
 every property. Swift=E2=80=99s initialization flow is more flexible in th=
at it lets you set custom initial values, and can cope with types for which=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">0</span><=
/code> or <code class=3D"docutils literal notranslate"><span class=3D"pre">=
nil</span></code> is not a valid default value.</p>
</div>
<p>Swift=E2=80=99s compiler performs four helpful safety-checks to make sur=
e that two-phase initialization is completed without error:</p>
<dl class=3D"docutils">
<dt><strong>Safety check 1</strong></dt>
<dd>A designated initializer must ensure that all of the properties introdu=
ced by its class are initialized before it delegates up to a superclass ini=
tializer.</dd>
</dl>
<p>As mentioned above, the memory for an object is only considered fully in=
itialized once the initial state of all of its stored properties is known. =
In order for this rule to be satisfied, a designated initializer must make =
sure that all of its own properties are initialized before it hands off up =
the chain.</p>
<dl class=3D"docutils">
<dt><strong>Safety check 2</strong></dt>
<dd>A designated initializer must delegate up to a superclass initializer b=
efore assigning a value to an inherited property. If it doesn=E2=80=99t, th=
e new value the designated initializer assigns will be overwritten by the s=
uperclass as part of its own initialization.</dd>
<dt><strong>Safety check 3</strong></dt>
<dd>A convenience initializer must delegate to another initializer before a=
ssigning a value to <em>any</em> property (including properties defined by =
the same class). If it doesn=E2=80=99t, the new value the convenience initi=
alizer assigns will be overwritten by its own class=E2=80=99s designated in=
itializer.</dd>
<dt><strong>Safety check 4</strong></dt>
<dd>An initializer cannot call any instance methods, read the values of any=
 instance properties, or refer to <code class=3D"docutils literal notransla=
te"><span class=3D"pre">self</span></code> as a value until after the first=
 phase of initialization is complete.</dd>
</dl>
<p>The class instance is not fully valid until the first phase ends. Proper=
ties can only be accessed, and methods can only be called, once the class i=
nstance is known to be valid at the end of the first phase.</p>
<p>Here=E2=80=99s how two-phase initialization plays out, based on the four=
 safety checks above:</p>
<p><strong>Phase 1</strong></p>
<ul class=3D"simple">
<li>A designated or convenience initializer is called on a class.</li>
<li>Memory for a new instance of that class is allocated. The memory is not=
 yet initialized.</li>
<li>A designated initializer for that class confirms that all stored proper=
ties introduced by that class have a value. The memory for these stored pro=
perties is now initialized.</li>
<li>The designated initializer hands off to a superclass initializer to per=
form the same task for its own stored properties.</li>
<li>This continues up the class inheritance chain until the top of the chai=
n is reached.</li>
<li>Once the top of the chain is reached, and the final class in the chain =
has ensured that all of its stored properties have a value, the instance=E2=
=80=99s memory is considered to be fully initialized, and phase 1 is comple=
te.</li>
</ul>
<p><strong>Phase 2</strong></p>
<ul class=3D"simple">
<li>Working back down from the top of the chain, each designated initialize=
r in the chain has the option to customize the instance further. Initialize=
rs are now able to access <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">self</span></code> and can modify its properties, call its =
instance methods, and so on.</li>
<li>Finally, any convenience initializers in the chain have the option to c=
ustomize the instance and to work with <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">self</span></code>.</li>
</ul>
<p>Here=E2=80=99s how phase 1 looks for an initialization call for a hypoth=
etical subclass and superclass:</p>
<img alt=3D"../_images/twoPhaseInitialization01_2x.png" class=3D"align-cent=
er" src=3D"https://docs.swift.org/swift-book/_images/twoPhaseInitialization=
01_2x.png" style=3D"width: 448px;">
<p>In this example, initialization begins with a call to a convenience init=
ializer on the subclass. This convenience initializer cannot yet modify any=
 properties. It delegates across to a designated initializer from the same =
class.</p>
<p>The designated initializer makes sure that all of the subclass=E2=80=99s=
 properties have a value, as per safety check 1. It then calls a designated=
 initializer on its superclass to continue the initialization up the chain.=
</p>
<p>The superclass=E2=80=99s designated initializer makes sure that all of t=
he superclass properties have a value. There are no further superclasses to=
 initialize, and so no further delegation is needed.</p>
<p>As soon as all properties of the superclass have an initial value, its m=
emory is considered fully initialized, and phase 1 is complete.</p>
<p>Here=E2=80=99s how phase 2 looks for the same initialization call:</p>
<img alt=3D"../_images/twoPhaseInitialization02_2x.png" class=3D"align-cent=
er" src=3D"https://docs.swift.org/swift-book/_images/twoPhaseInitialization=
02_2x.png" style=3D"width: 448px;">
<p>The superclass=E2=80=99s designated initializer now has an opportunity t=
o customize the instance further (although it does not have to).</p>
<p>Once the superclass=E2=80=99s designated initializer is finished, the su=
bclass=E2=80=99s designated initializer can perform additional customizatio=
n (although again, it does not have to).</p>
<p>Finally, once the subclass=E2=80=99s designated initializer is finished,=
 the convenience initializer that was originally called can perform additio=
nal customization.</p>
</div>
<div class=3D"section" id=3D"ID221">
<h3>Initializer Inheritance and Overriding<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID221" t=
itle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Unlike subclasses in Objective-C, Swift subclasses do not inherit their =
superclass initializers by default. Swift=E2=80=99s approach prevents a sit=
uation in which a simple initializer from a superclass is inherited by a mo=
re specialized subclass and is used to create a new instance of the subclas=
s that is not fully or correctly initialized.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Superclass initializers <em>are</em> inherited in certain=
 circumstances, but only when it is safe and appropriate to do so. For more=
 information, see <a class=3D"reference internal" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/Initialization.html#ID222"><span class=3D"st=
d std-ref">Automatic Initializer Inheritance</span></a> below.</p>
</div>
<p>If you want a custom subclass to present one or more of the same initial=
izers as its superclass, you can provide a custom implementation of those i=
nitializers within the subclass.</p>
<p>When you write a subclass initializer that matches a superclass <em>desi=
gnated</em> initializer, you are effectively providing an override of that =
designated initializer. Therefore, you must write the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">override</span></code> modifier=
 before the subclass=E2=80=99s initializer definition. This is true even if=
 you are overriding an automatically provided default initializer, as descr=
ibed in <a class=3D"reference internal" href=3D"https://docs.swift.org/swif=
t-book/LanguageGuide/Initialization.html#ID213"><span class=3D"std std-ref"=
>Default Initializers</span></a>.</p>
<p>As with an overridden property, method or subscript, the presence of the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">override<=
/span></code> modifier prompts Swift to check that the superclass has a mat=
ching designated initializer to be overridden, and validates that the param=
eters for your overriding initializer have been specified as intended.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You always write the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">override</span></code> modifier when overridin=
g a superclass designated initializer, even if your subclass=E2=80=99s impl=
ementation of the initializer is a convenience initializer.</p>
</div>
<p>Conversely, if you write a subclass initializer that matches a superclas=
s <em>convenience</em> initializer, that superclass convenience initializer=
 can never be called directly by your subclass, as per the rules described =
above in <a class=3D"reference internal" href=3D"https://docs.swift.org/swi=
ft-book/LanguageGuide/Initialization.html#ID219"><span class=3D"std std-ref=
">Initializer Delegation for Class Types</span></a>. Therefore, your subcla=
ss is not (strictly speaking) providing an override of the superclass initi=
alizer. As a result, you do not write the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">override</span></code> modifier when provid=
ing a matching implementation of a superclass convenience initializer.</p>
<p>The example below defines a base class called <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Vehicle</span></code>. This base cla=
ss declares a stored property called <code class=3D"docutils literal notran=
slate"><span class=3D"pre">numberOfWheels</span></code>, with a default <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Int</span></c=
ode> value of <code class=3D"docutils literal notranslate"><span class=3D"p=
re">0</span></code>. The <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">numberOfWheels</span></code> property is used by a computed =
property called <code class=3D"docutils literal notranslate"><span class=3D=
"pre">description</span></code> to create a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">String</span></code> description of the v=
ehicle=E2=80=99s characteristics:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Vehicle</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">numberOfWheels=
</span> =3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">description</s=
pan>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"</span>=
\<span class=3D"p">(</span><span class=3D"nv">numberOfWheels</span><span cl=
ass=3D"p">)</span><span class=3D"s"> wheel(s)"</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Veh=
icle</span></code> class provides a default value for its only stored prope=
rty, and does not provide any custom initializers itself. As a result, it a=
utomatically receives a default initializer, as described in <a class=3D"re=
ference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/I=
nitialization.html#ID213"><span class=3D"std std-ref">Default Initializers<=
/span></a>. The default initializer (when available) is always a designated=
 initializer for a class, and can be used to create a new <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">Vehicle</span></code> insta=
nce with a <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>numberOfWheels</span></code> of <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">0</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">vehicle</span> =3D <span class=3D"nv">Vehicle</=
span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Vehicle: </span=
>\<span class=3D"p">(</span><span class=3D"nv">vehicle</span>.<span class=
=3D"nv">description</span><span class=3D"p">)</span><span class=3D"s">"</sp=
an>)
</li><li><span class=3D"c">// Vehicle: 0 wheel(s)</span>
</li></ol></div></div></div>
<p>The next example defines a subclass of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Vehicle</span></code> called <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Bicycle</span></code>:</=
p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Bicycle</span>: <span class=3D"nc">Vehicle</s=
pan> {
</li><li>    <span class=3D"k">override</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>()
</li><li>        <span class=3D"nv">numberOfWheels</span> =3D <span class=
=3D"m">2</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Bic=
ycle</span></code> subclass defines a custom designated initializer, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">init()</span></c=
ode>. This designated initializer matches a designated initializer from the=
 superclass of <code class=3D"docutils literal notranslate"><span class=3D"=
pre">Bicycle</span></code>, and so the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Bicycle</span></code> version of this initiali=
zer is marked with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">override</span></code> modifier.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t()</span></code> initializer for <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Bicycle</span></code> starts by calling <code class=
=3D"docutils literal notranslate"><span class=3D"pre">super.init()</span></=
code>, which calls the default initializer for the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Bicycle</span></code> class=E2=80=
=99s superclass, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Vehicle</span></code>. This ensures that the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">numberOfWheels</span></code> in=
herited property is initialized by <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Vehicle</span></code> before <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Bicycle</span></code> has the o=
pportunity to modify the property. After calling <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">super.init()</span></code>, the orig=
inal value of <code class=3D"docutils literal notranslate"><span class=3D"p=
re">numberOfWheels</span></code> is replaced with a new value of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">2</span></code>.</p>
<p>If you create an instance of <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Bicycle</span></code>, you can call its inherited <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">description</=
span></code> computed property to see how its <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">numberOfWheels</span></code> property h=
as been updated:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">bicycle</span> =3D <span class=3D"nv">Bicycle</=
span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Bicycle: </span=
>\<span class=3D"p">(</span><span class=3D"nv">bicycle</span>.<span class=
=3D"nv">description</span><span class=3D"p">)</span><span class=3D"s">"</sp=
an>)
</li><li><span class=3D"c">// Bicycle: 2 wheel(s)</span>
</li></ol></div></div></div>
<p>If a subclass initializer performs no customization in phase 2 of the in=
itialization process, and the superclass has a zero-argument designated ini=
tializer, you can omit a call to <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">super.init()</span></code> after assigning values to=
 all of the subclass=E2=80=99s stored properties.</p>
<p>This example defines another subclass of <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Vehicle</span></code>, called <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Hoverboard</span></co=
de>. In its initializer, the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Hoverboard</span></code> class sets only its <code class=
=3D"docutils literal notranslate"><span class=3D"pre">color</span></code> p=
roperty. Instead of making an explicit call to <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">super.init()</span></code>, this initi=
alizer relies on an implicit call to its superclass=E2=80=99s initializer t=
o complete the process.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Hoverboard</span>: <span class=3D"nc">Vehicle=
</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">color</span>: =
<span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">color</span>:=
 <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">color</sp=
an> =3D <span class=3D"nv">color</span>
</li><li>        <span class=3D"c">// super.init() implicitly called here</=
span>
</li><li>    }
</li><li>    <span class=3D"k">override</span> <span class=3D"k">var</span>=
 <span class=3D"nv">description</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"</span>=
\<span class=3D"p">(</span><span class=3D"k">super</span>.<span class=3D"nv=
">description</span><span class=3D"p">)</span><span class=3D"s"> in a beaut=
iful </span>\<span class=3D"p">(</span><span class=3D"nv">color</span><span=
 class=3D"p">)</span><span class=3D"s">"</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>An instance of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Hoverboard</span></code> uses the default number of wheels supplie=
d by the <code class=3D"docutils literal notranslate"><span class=3D"pre">V=
ehicle</span></code> initializer.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">hoverboard</span> =3D <span class=3D"nv">Hoverb=
oard</span>(<span class=3D"nv">color</span>: <span class=3D"s">"silver"</sp=
an>)
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Hoverboard: </s=
pan>\<span class=3D"p">(</span><span class=3D"nv">hoverboard</span>.<span c=
lass=3D"nv">description</span><span class=3D"p">)</span><span class=3D"s">"=
</span>)
</li><li><span class=3D"c">// Hoverboard: 0 wheel(s) in a beautiful silver<=
/span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Subclasses can modify inherited variable properties durin=
g initialization, but can not modify inherited constant properties.</p>
</div>
</div>
<div class=3D"section" id=3D"ID222">
<h3>Automatic Initializer Inheritance<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID222" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>As mentioned above, subclasses do not inherit their superclass initializ=
ers by default. However, superclass initializers <em>are</em> automatically=
 inherited if certain conditions are met. In practice, this means that you =
do not need to write initializer overrides in many common scenarios, and ca=
n inherit your superclass initializers with minimal effort whenever it is s=
afe to do so.</p>
<p>Assuming that you provide default values for any new properties you intr=
oduce in a subclass, the following two rules apply:</p>
<dl class=3D"docutils">
<dt><strong>Rule 1</strong></dt>
<dd>If your subclass doesn=E2=80=99t define any designated initializers, it=
 automatically inherits all of its superclass designated initializers.</dd>
<dt><strong>Rule 2</strong></dt>
<dd>If your subclass provides an implementation of <em>all</em> of its supe=
rclass designated initializers=E2=80=94either by inheriting them as per rul=
e 1, or by providing a custom implementation as part of its definition=E2=
=80=94then it automatically inherits all of the superclass convenience init=
ializers.</dd>
</dl>
<p>These rules apply even if your subclass adds further convenience initial=
izers.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">A subclass can implement a superclass designated initiali=
zer as a subclass convenience initializer as part of satisfying rule 2.</p>
</div>
</div>
<div class=3D"section" id=3D"ID223">
<h3>Designated and Convenience Initializers in Action<a class=3D"headerlink=
" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initialization.ht=
ml#ID223" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The following example shows designated initializers, convenience initial=
izers, and automatic initializer inheritance in action. This example define=
s a hierarchy of three classes called <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">Food</span></code>, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">RecipeIngredient</span></code>, and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">ShoppingLis=
tItem</span></code>, and demonstrates how their initializers interact.</p>
<p>The base class in the hierarchy is called <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Food</span></code>, which is a simple cl=
ass to encapsulate the name of a foodstuff. The <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Food</span></code> class introduces a=
 single <code class=3D"docutils literal notranslate"><span class=3D"pre">St=
ring</span></code> property called <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">name</span></code> and provides two initializers f=
or creating <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Food</span></code> instances:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Food</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">name</span>: =
<span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>    }
</li><li>    <span class=3D"k">convenience</span> <span class=3D"k">init</s=
pan>() {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">init</spa=
n>(<span class=3D"nv">name</span>: <span class=3D"s">"[Unnamed]"</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The figure below shows the initializer chain for the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">Food</span></code> class:</p>
<img alt=3D"../_images/initializersExample01_2x.png" class=3D"align-center"=
 src=3D"https://docs.swift.org/swift-book/_images/initializersExample01_2x.=
png" style=3D"width: 482px;">
<p>Classes do not have a default memberwise initializer, and so the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Food</span></code=
> class provides a designated initializer that takes a single argument call=
ed <code class=3D"docutils literal notranslate"><span class=3D"pre">name</s=
pan></code>. This initializer can be used to create a new <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">Food</span></code> instance=
 with a specific name:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">namedMeat</span> =3D <span class=3D"nv">Food</s=
pan>(<span class=3D"nv">name</span>: <span class=3D"s">"Bacon"</span>)
</li><li><span class=3D"c">// namedMeat's name is "Bacon"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t(name:</span> <span class=3D"pre">String)</span></code> initializer from t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">Food</s=
pan></code> class is provided as a <em>designated</em> initializer, because=
 it ensures that all stored properties of a new <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Food</span></code> instance are fully=
 initialized. The <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Food</span></code> class does not have a superclass, and so the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">init(name:</=
span> <span class=3D"pre">String)</span></code> initializer does not need t=
o call <code class=3D"docutils literal notranslate"><span class=3D"pre">sup=
er.init()</span></code> to complete its initialization.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Foo=
d</span></code> class also provides a <em>convenience</em> initializer, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">init()</span>=
</code>, with no arguments. The <code class=3D"docutils literal notranslate=
"><span class=3D"pre">init()</span></code> initializer provides a default p=
laceholder name for a new food by delegating across to the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">Food</span></code> class=
=E2=80=99s <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>init(name:</span> <span class=3D"pre">String)</span></code> with a <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">name</span></code=
> value of <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>[Unnamed]</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">mysteryMeat</span> =3D <span class=3D"nv">Food<=
/span>()
</li><li><span class=3D"c">// mysteryMeat's name is "[Unnamed]"</span>
</li></ol></div></div></div>
<p>The second class in the hierarchy is a subclass of <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">Food</span></code> called <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">RecipeIngredien=
t</span></code>. The <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">RecipeIngredient</span></code> class models an ingredient in a c=
ooking recipe. It introduces an <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Int</span></code> property called <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">quantity</span></code> (in ad=
dition to the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">name</span></code> property it inherits from <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Food</span></code>) and defines two =
initializers for creating <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">RecipeIngredient</span></code> instances:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">RecipeIngredient</span>: <span class=3D"nc">F=
ood</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">quantity</span=
>: <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">name</span>: =
<span class=3D"nc">String</span>, <span class=3D"nv">quantity</span>: <span=
 class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">quantity<=
/span> =3D <span class=3D"nv">quantity</span>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">name</span>: <span class=3D"nv">name</span>)
</li><li>    }
</li><li>    <span class=3D"k">override</span> <span class=3D"k">convenienc=
e</span> <span class=3D"k">init</span>(<span class=3D"nv">name</span>: <spa=
n class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">init</spa=
n>(<span class=3D"nv">name</span>: <span class=3D"nv">name</span>, <span cl=
ass=3D"nv">quantity</span>: <span class=3D"m">1</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The figure below shows the initializer chain for the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">RecipeIngredient</span></code=
> class:</p>
<img alt=3D"../_images/initializersExample02_2x.png" class=3D"align-center"=
 src=3D"https://docs.swift.org/swift-book/_images/initializersExample02_2x.=
png" style=3D"width: 482px;">
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Rec=
ipeIngredient</span></code> class has a single designated initializer, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">init(name:</sp=
an> <span class=3D"pre">String,</span> <span class=3D"pre">quantity:</span>=
 <span class=3D"pre">Int)</span></code>, which can be used to populate all =
of the properties of a new <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">RecipeIngredient</span></code> instance. This initializer =
starts by assigning the passed <code class=3D"docutils literal notranslate"=
><span class=3D"pre">quantity</span></code> argument to the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">quantity</span></code> pr=
operty, which is the only new property introduced by <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">RecipeIngredient</span></code>. =
After doing so, the initializer delegates up to the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">init(name:</span> <span class=3D"=
pre">String)</span></code> initializer of the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">Food</span></code> class. This process =
satisfies safety check 1 from <a class=3D"reference internal" href=3D"https=
://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID220"><span=
 class=3D"std std-ref">Two-Phase Initialization</span></a> above.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">RecipeI=
ngredient</span></code> also defines a convenience initializer, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">init(name:</span> <sp=
an class=3D"pre">String)</span></code>, which is used to create a <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">RecipeIngredient</s=
pan></code> instance by name alone. This convenience initializer assumes a =
quantity of <code class=3D"docutils literal notranslate"><span class=3D"pre=
">1</span></code> for any <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">RecipeIngredient</span></code> instance that is created wit=
hout an explicit quantity. The definition of this convenience initializer m=
akes <code class=3D"docutils literal notranslate"><span class=3D"pre">Recip=
eIngredient</span></code> instances quicker and more convenient to create, =
and avoids code duplication when creating several single-quantity <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">RecipeIngredient</s=
pan></code> instances. This convenience initializer simply delegates across=
 to the class=E2=80=99s designated initializer, passing in a <code class=3D=
"docutils literal notranslate"><span class=3D"pre">quantity</span></code> v=
alue of <code class=3D"docutils literal notranslate"><span class=3D"pre">1<=
/span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t(name:</span> <span class=3D"pre">String)</span></code> convenience initia=
lizer provided by <code class=3D"docutils literal notranslate"><span class=
=3D"pre">RecipeIngredient</span></code> takes the same parameters as the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">init(name:</=
span> <span class=3D"pre">String)</span></code> <em>designated</em> initial=
izer from <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Food</span></code>. Because this convenience initializer overrides a design=
ated initializer from its superclass, it must be marked with the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">override</span></cod=
e> modifier (as described in <a class=3D"reference internal" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID221"><span =
class=3D"std std-ref">Initializer Inheritance and Overriding</span></a>).</=
p>
<p>Even though <code class=3D"docutils literal notranslate"><span class=3D"=
pre">RecipeIngredient</span></code> provides the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">init(name:</span> <span class=3D"pre=
">String)</span></code> initializer as a convenience initializer, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">RecipeIngredient</s=
pan></code> has nonetheless provided an implementation of all of its superc=
lass=E2=80=99s designated initializers. Therefore, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">RecipeIngredient</span></code> aut=
omatically inherits all of its superclass=E2=80=99s convenience initializer=
s too.</p>
<p>In this example, the superclass for <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">RecipeIngredient</span></code> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Food</span></code>, w=
hich has a single convenience initializer called <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">init()</span></code>. This initializ=
er is therefore inherited by <code class=3D"docutils literal notranslate"><=
span class=3D"pre">RecipeIngredient</span></code>. The inherited version of=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">init()</s=
pan></code> functions in exactly the same way as the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Food</span></code> version, exce=
pt that it delegates to the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">RecipeIngredient</span></code> version of <code class=3D"=
docutils literal notranslate"><span class=3D"pre">init(name:</span> <span c=
lass=3D"pre">String)</span></code> rather than the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Food</span></code> version.</p>
<p>All three of these initializers can be used to create new <code class=3D=
"docutils literal notranslate"><span class=3D"pre">RecipeIngredient</span><=
/code> instances:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">oneMysteryItem</span> =3D <span class=3D"nv">Re=
cipeIngredient</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">oneBacon</span> =
=3D <span class=3D"nv">RecipeIngredient</span>(<span class=3D"nv">name</spa=
n>: <span class=3D"s">"Bacon"</span>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">sixEggs</span> =3D=
 <span class=3D"nv">RecipeIngredient</span>(<span class=3D"nv">name</span>:=
 <span class=3D"s">"Eggs"</span>, <span class=3D"nv">quantity</span>: <span=
 class=3D"m">6</span>)
</li></ol></div></div></div>
<p>The third and final class in the hierarchy is a subclass of <code class=
=3D"docutils literal notranslate"><span class=3D"pre">RecipeIngredient</spa=
n></code> called <code class=3D"docutils literal notranslate"><span class=
=3D"pre">ShoppingListItem</span></code>. The <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">ShoppingListItem</span></code> class mod=
els a recipe ingredient as it appears in a shopping list.</p>
<p>Every item in the shopping list starts out as =E2=80=9Cunpurchased=E2=80=
=9D. To represent this fact, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">ShoppingListItem</span></code> introduces a Boolean prop=
erty called <code class=3D"docutils literal notranslate"><span class=3D"pre=
">purchased</span></code>, with a default value of <code class=3D"docutils =
literal notranslate"><span class=3D"pre">false</span></code>. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">ShoppingListItem</spa=
n></code> also adds a computed <code class=3D"docutils literal notranslate"=
><span class=3D"pre">description</span></code> property, which provides a t=
extual description of a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">ShoppingListItem</span></code> instance:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">ShoppingListItem</span>: <span class=3D"nc">R=
ecipeIngredient</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">purchased</spa=
n> =3D <span class=3D"k">false</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">description</s=
pan>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">output</sp=
an> =3D <span class=3D"s">"</span>\<span class=3D"p">(</span><span class=3D=
"nv">quantity</span><span class=3D"p">)</span><span class=3D"s"> x </span>\=
<span class=3D"p">(</span><span class=3D"nv">name</span><span class=3D"p">)=
</span><span class=3D"s">"</span>
</li><li>        <span class=3D"nv">output</span> +=3D <span class=3D"nv">p=
urchased</span> ? <span class=3D"s">" <img class=3D"chromoji" title=3D"Heav=
y Check Mark" alt=3D"=E2=9C=94" src=3D"chrome-extension://cahedbegdkagmcjfo=
lhdlechbkeaieki/images/apple/2714.png">"</span> : <span class=3D"s">" =E2=
=9C=98"</span>
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">output<=
/span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code class=3D"docutils literal notranslate"><span class=
=3D"pre">ShoppingListItem</span></code> does not define an initializer to p=
rovide an initial value for <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">purchased</span></code>, because items in a shopping list=
 (as modeled here) always start out unpurchased.</p>
</div>
<p>Because it provides a default value for all of the properties it introdu=
ces and does not define any initializers itself, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">ShoppingListItem</span></code> autom=
atically inherits <em>all</em> of the designated and convenience initialize=
rs from its superclass.</p>
<p>The figure below shows the overall initializer chain for all three class=
es:</p>
<img alt=3D"../_images/initializersExample03_2x.png" class=3D"align-center"=
 src=3D"https://docs.swift.org/swift-book/_images/initializersExample03_2x.=
png" style=3D"width: 482px;">
<p>You can use all three of the inherited initializers to create a new <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">ShoppingListIt=
em</span></code> instance:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">breakfastList</span> =3D [
</li><li>    <span class=3D"nv">ShoppingListItem</span>(),
</li><li>    <span class=3D"nv">ShoppingListItem</span>(<span class=3D"nv">=
name</span>: <span class=3D"s">"Bacon"</span>),
</li><li>    <span class=3D"nv">ShoppingListItem</span>(<span class=3D"nv">=
name</span>: <span class=3D"s">"Eggs"</span>, <span class=3D"nv">quantity</=
span>: <span class=3D"m">6</span>),
</li><li>]
</li><li><span class=3D"nv">breakfastList</span>[<span class=3D"m">0</span>=
].<span class=3D"nv">name</span> =3D <span class=3D"s">"Orange juice"</span=
>
</li><li><span class=3D"nv">breakfastList</span>[<span class=3D"m">0</span>=
].<span class=3D"nv">purchased</span> =3D <span class=3D"k">true</span>
</li><li><span class=3D"k">for</span> <span class=3D"nv">item</span> <span =
class=3D"k">in</span> <span class=3D"nv">breakfastList</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">item</span>=
.<span class=3D"nv">description</span>)
</li><li>}
</li><li><span class=3D"c">// 1 x Orange juice <img class=3D"chromoji" titl=
e=3D"Heavy Check Mark" alt=3D"=E2=9C=94" src=3D"chrome-extension://cahedbeg=
dkagmcjfolhdlechbkeaieki/images/apple/2714.png"></span>
</li><li><span class=3D"c">// 1 x Bacon =E2=9C=98</span>
</li><li><span class=3D"c">// 6 x Eggs =E2=9C=98</span>
</li></ol></div></div></div>
<p>Here, a new array called <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">breakfastList</span></code> is created from an array lite=
ral containing three new <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">ShoppingListItem</span></code> instances. The type of the ar=
ray is inferred to be <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">[ShoppingListItem]</span></code>. After the array is created, t=
he name of the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">ShoppingListItem</span></code> at the start of the array is changed fr=
om <code class=3D"docutils literal notranslate"><span class=3D"pre">"[Unnam=
ed]"</span></code> to <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">"Orange</span> <span class=3D"pre">juice"</span></code> and it =
is marked as having been purchased. Printing the description of each item i=
n the array shows that their default states have been set as expected.</p>
</div>
</div>
<div class=3D"section" id=3D"ID224">
<h2>Failable Initializers<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Initialization.html#ID224" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p>It is sometimes useful to define a class, structure, or enumeration for =
which initialization can fail. This failure might be triggered by invalid i=
nitialization parameter values, the absence of a required external resource=
, or some other condition that prevents initialization from succeeding.</p>
<p>To cope with initialization conditions that can fail, define one or more=
 failable initializers as part of a class, structure, or enumeration defini=
tion. You write a failable initializer by placing a question mark after the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">init</spa=
n></code> keyword (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">init?</span></code>).</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You cannot define a failable and a nonfailable initialize=
r with the same parameter types and names.</p>
</div>
<p>A failable initializer creates an <em>optional</em> value of the type it=
 initializes. You write <code class=3D"docutils literal notranslate"><span =
class=3D"pre">return</span> <span class=3D"pre">nil</span></code> within a =
failable initializer to indicate a point at which initialization failure ca=
n be triggered.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Strictly speaking, initializers do not return a value. Ra=
ther, their role is to ensure that <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">self</span></code> is fully and correctly initiali=
zed by the time that initialization ends. Although you write <code class=3D=
"docutils literal notranslate"><span class=3D"pre">return</span> <span clas=
s=3D"pre">nil</span></code> to trigger an initialization failure, you do no=
t use the <code class=3D"docutils literal notranslate"><span class=3D"pre">=
return</span></code> keyword to indicate initialization success.</p>
</div>
<p>For instance, failable initializers are implemented for numeric type con=
versions. To ensure conversion between numeric types maintains the value ex=
actly, use the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">init(exactly:)</span></code> initializer. If the type conversion canno=
t maintain the value, the initializer fails.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">wholeNumber</span>: <span class=3D"nc">Double</=
span> =3D <span class=3D"m">12345.0</span>
</li><li><span class=3D"k">let</span> <span class=3D"nv">pi</span> =3D <spa=
n class=3D"m">3.14159</span>
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">valueMaintained</span> =3D <span class=3D"nv">Int</span>(<span cl=
ass=3D"nv">exactly</span>: <span class=3D"nv">wholeNumber</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">wholeNumber</span><span class=3D"=
p">)</span><span class=3D"s"> conversion to Int maintains value of </span>\=
<span class=3D"p">(</span><span class=3D"nv">valueMaintained</span><span cl=
ass=3D"p">)</span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "12345.0 conversion to Int maintains v=
alue of 12345"</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">valueChanged</span=
> =3D <span class=3D"nv">Int</span>(<span class=3D"nv">exactly</span>: <spa=
n class=3D"nv">pi</span>)
</li><li><span class=3D"c">// valueChanged is of type Int?, not Int</span>
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"nv">valueChanged</span>=
 =3D=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"</span>\<sp=
an class=3D"p">(</span><span class=3D"nv">pi</span><span class=3D"p">)</spa=
n><span class=3D"s"> conversion to Int does not maintain value"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "3.14159 conversion to Int does not ma=
intain value"</span>
</li></ol></div></div></div>
<p>The example below defines a structure called <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Animal</span></code>, with a constant=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">String</s=
pan></code> property called <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">species</span></code>. The <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Animal</span></code> structure also defi=
nes a failable initializer with a single parameter called <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">species</span></code>. This=
 initializer checks if the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">species</span></code> value passed to the initializer is a=
n empty string. If an empty string is found, an initialization failure is t=
riggered. Otherwise, the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">species</span></code> property=E2=80=99s value is set, and i=
nitialization succeeds:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Animal</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">species</span>=
: <span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">species</spa=
n>: <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">species</sp=
an>.<span class=3D"nv">isEmpty</span> { <span class=3D"k">return</span> <sp=
an class=3D"k">nil</span> }
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">species</=
span> =3D <span class=3D"nv">species</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You can use this failable initializer to try to initialize a new <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Animal</span></co=
de> instance and to check if initialization succeeded:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">someCreature</span> =3D <span class=3D"nv">Anim=
al</span>(<span class=3D"nv">species</span>: <span class=3D"s">"Giraffe"</s=
pan>)
</li><li><span class=3D"c">// someCreature is of type Animal?, not Animal</=
span>
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"k">let</span> <span cla=
ss=3D"nv">giraffe</span> =3D <span class=3D"nv">someCreature</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"An animal w=
as initialized with a species of </span>\<span class=3D"p">(</span><span cl=
ass=3D"nv">giraffe</span>.<span class=3D"nv">species</span><span class=3D"p=
">)</span><span class=3D"s">"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "An animal was initialized with a spec=
ies of Giraffe"</span>
</li></ol></div></div></div>
<p>If you pass an empty string value to the failable initializer=E2=80=99s =
<code class=3D"docutils literal notranslate"><span class=3D"pre">species</s=
pan></code> parameter, the initializer triggers an initialization failure:<=
/p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">anonymousCreature</span> =3D <span class=3D"nv"=
>Animal</span>(<span class=3D"nv">species</span>: <span class=3D"s">""</spa=
n>)
</li><li><span class=3D"c">// anonymousCreature is of type Animal?, not Ani=
mal</span>
</li><li>
</li><li><span class=3D"k">if</span> <span class=3D"nv">anonymousCreature</=
span> =3D=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"The anonymo=
us creature could not be initialized"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "The anonymous creature could not be i=
nitialized"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Checking for an empty string value (such as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">""</span></code> rath=
er than <code class=3D"docutils literal notranslate"><span class=3D"pre">"G=
iraffe"</span></code>) is not the same as checking for <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">nil</span></code> to indicate =
the absence of an <em>optional</em> <code class=3D"docutils literal notrans=
late"><span class=3D"pre">String</span></code> value. In the example above,=
 an empty string (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">""</span></code>) is a valid, non-optional <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">String</span></code>. However, it=
 is not appropriate for an animal to have an empty string as the value of i=
ts <code class=3D"docutils literal notranslate"><span class=3D"pre">species=
</span></code> property. To model this restriction, the failable initialize=
r triggers an initialization failure if an empty string is found.</p>
</div>
<div class=3D"section" id=3D"ID225">
<h3>Failable Initializers for Enumerations<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID225" t=
itle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can use a failable initializer to select an appropriate enumeration =
case based on one or more parameters. The initializer can then fail if the =
provided parameters do not match an appropriate enumeration case.</p>
<p>The example below defines an enumeration called <code class=3D"docutils =
literal notranslate"><span class=3D"pre">TemperatureUnit</span></code>, wit=
h three possible states (<code class=3D"docutils literal notranslate"><span=
 class=3D"pre">kelvin</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">celsius</span></code>, and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">fahrenheit</span></code>). A fa=
ilable initializer is used to find an appropriate enumeration case for a <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Character</s=
pan></code> value representing a temperature symbol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">TemperatureUnit</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">kelvin</span>=
, <span class=3D"nv">celsius</span>, <span class=3D"nv">fahrenheit</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">symbol</span=
>: <span class=3D"nc">Character</span>) {
</li><li>        <span class=3D"k">switch</span> <span class=3D"nv">symbol<=
/span> {
</li><li>        <span class=3D"k">case</span> <span class=3D"s">"K"</span>=
:
</li><li>            <span class=3D"k">self</span> =3D .<span class=3D"nv">=
kelvin</span>
</li><li>        <span class=3D"k">case</span> <span class=3D"s">"C"</span>=
:
</li><li>            <span class=3D"k">self</span> =3D .<span class=3D"nv">=
celsius</span>
</li><li>        <span class=3D"k">case</span> <span class=3D"s">"F"</span>=
:
</li><li>            <span class=3D"k">self</span> =3D .<span class=3D"nv">=
fahrenheit</span>
</li><li>        <span class=3D"k">default</span>:
</li><li>            <span class=3D"k">return</span> <span class=3D"k">nil<=
/span>
</li><li>        }
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You can use this failable initializer to choose an appropriate enumerati=
on case for the three possible states and to cause initialization to fail i=
f the parameter does not match one of these states:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">fahrenheitUnit</span> =3D <span class=3D"nv">Te=
mperatureUnit</span>(<span class=3D"nv">symbol</span>: <span class=3D"s">"F=
"</span>)
</li><li><span class=3D"k">if</span> <span class=3D"nv">fahrenheitUnit</spa=
n> !=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"This is a d=
efined temperature unit, so initialization succeeded."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "This is a defined temperature unit, s=
o initialization succeeded."</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">unknownUnit</span>=
 =3D <span class=3D"nv">TemperatureUnit</span>(<span class=3D"nv">symbol</s=
pan>: <span class=3D"s">"X"</span>)
</li><li><span class=3D"k">if</span> <span class=3D"nv">unknownUnit</span> =
=3D=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"This is not=
 a defined temperature unit, so initialization failed."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "This is not a defined temperature uni=
t, so initialization failed."</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID226">
<h3>Failable Initializers for Enumerations with Raw Values<a class=3D"heade=
rlink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initializati=
on.html#ID226" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Enumerations with raw values automatically receive a failable initialize=
r, <code class=3D"docutils literal notranslate"><span class=3D"pre">init?(r=
awValue:)</span></code>, that takes a parameter called <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">rawValue</span></code> of the =
appropriate raw-value type and selects a matching enumeration case if one i=
s found, or triggers an initialization failure if no matching value exists.=
</p>
<p>You can rewrite the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">TemperatureUnit</span></code> example from above to use raw va=
lues of type <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">Character</span></code> and to take advantage of the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">init?(rawValue:)</span></code=
> initializer:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">TemperatureUnit</span>: <span class=3D"nc">Cha=
racter</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">kelvin</span>=
 =3D <span class=3D"s">"K"</span>, <span class=3D"nv">celsius</span> =3D <s=
pan class=3D"s">"C"</span>, <span class=3D"nv">fahrenheit</span> =3D <span =
class=3D"s">"F"</span>
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">fahrenheitUnit</sp=
an> =3D <span class=3D"nv">TemperatureUnit</span>(<span class=3D"nv">rawVal=
ue</span>: <span class=3D"s">"F"</span>)
</li><li><span class=3D"k">if</span> <span class=3D"nv">fahrenheitUnit</spa=
n> !=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"This is a d=
efined temperature unit, so initialization succeeded."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "This is a defined temperature unit, s=
o initialization succeeded."</span>
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">unknownUnit</span>=
 =3D <span class=3D"nv">TemperatureUnit</span>(<span class=3D"nv">rawValue<=
/span>: <span class=3D"s">"X"</span>)
</li><li><span class=3D"k">if</span> <span class=3D"nv">unknownUnit</span> =
=3D=3D <span class=3D"k">nil</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"This is not=
 a defined temperature unit, so initialization failed."</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "This is not a defined temperature uni=
t, so initialization failed."</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID228">
<h3>Propagation of Initialization Failure<a class=3D"headerlink" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID228" ti=
tle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>A failable initializer of a class, structure, or enumeration can delegat=
e across to another failable initializer from the same class, structure, or=
 enumeration. Similarly, a subclass failable initializer can delegate up to=
 a superclass failable initializer.</p>
<p>In either case, if you delegate to another initializer that causes initi=
alization to fail, the entire initialization process fails immediately, and=
 no further initialization code is executed.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">A failable initializer can also delegate to a nonfailable=
 initializer. Use this approach if you need to add a potential failure stat=
e to an existing initialization process that does not otherwise fail.</p>
</div>
<p>The example below defines a subclass of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Product</span></code> called <code class=
=3D"docutils literal notranslate"><span class=3D"pre">CartItem</span></code=
>. The <code class=3D"docutils literal notranslate"><span class=3D"pre">Car=
tItem</span></code> class models an item in an online shopping cart. <code =
class=3D"docutils literal notranslate"><span class=3D"pre">CartItem</span><=
/code> introduces a stored constant property called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">quantity</span></code> and ensure=
s that this property always has a value of at least <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">1</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Product</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">name</span>:=
 <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">name</span>=
.<span class=3D"nv">isEmpty</span> { <span class=3D"k">return</span> <span =
class=3D"k">nil</span> }
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">class</span> <span class=3D"nv">CartItem</span>:=
 <span class=3D"nc">Product</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">quantity</span=
>: <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">name</span>:=
 <span class=3D"nc">String</span>, <span class=3D"nv">quantity</span>: <spa=
n class=3D"nc">Int</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">quantity</s=
pan> &lt; <span class=3D"m">1</span> { <span class=3D"k">return</span> <spa=
n class=3D"k">nil</span> }
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">quantity<=
/span> =3D <span class=3D"nv">quantity</span>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">name</span>: <span class=3D"nv">name</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The failable initializer for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">CartItem</span></code> starts by validating that it h=
as received a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">quantity</span></code> value of <code class=3D"docutils literal notrans=
late"><span class=3D"pre">1</span></code> or more. If the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">quantity</span></code> is i=
nvalid, the entire initialization process fails immediately and no further =
initialization code is executed. Likewise, the failable initializer for <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Product</span=
></code> checks the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">name</span></code> value, and the initializer process fails immed=
iately if <code class=3D"docutils literal notranslate"><span class=3D"pre">=
name</span></code> is the empty string.</p>
<p>If you create a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">CartItem</span></code> instance with a nonempty name and a quantit=
y of <code class=3D"docutils literal notranslate"><span class=3D"pre">1</sp=
an></code> or more, initialization succeeds:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">twoSocks</span> =3D=
 <span class=3D"nv">CartItem</span>(<span class=3D"nv">name</span>: <span c=
lass=3D"s">"sock"</span>, <span class=3D"nv">quantity</span>: <span class=
=3D"m">2</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Item: </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">twoSocks</span>.<span class=
=3D"nv">name</span><span class=3D"p">)</span><span class=3D"s">, quantity: =
</span>\<span class=3D"p">(</span><span class=3D"nv">twoSocks</span>.<span =
class=3D"nv">quantity</span><span class=3D"p">)</span><span class=3D"s">"</=
span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Item: sock, quantity: 2"</span>
</li></ol></div></div></div>
<p>If you try to create a <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">CartItem</span></code> instance with a <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">quantity</span></code> value o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">0</span>=
</code>, the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">CartItem</span></code> initializer causes initialization to fail:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">zeroShirts</span> =
=3D <span class=3D"nv">CartItem</span>(<span class=3D"nv">name</span>: <spa=
n class=3D"s">"shirt"</span>, <span class=3D"nv">quantity</span>: <span cla=
ss=3D"m">0</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Item: </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">zeroShirts</span>.<span cla=
ss=3D"nv">name</span><span class=3D"p">)</span><span class=3D"s">, quantity=
: </span>\<span class=3D"p">(</span><span class=3D"nv">zeroShirts</span>.<s=
pan class=3D"nv">quantity</span><span class=3D"p">)</span><span class=3D"s"=
>"</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Unable to i=
nitialize zero shirts"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Unable to initialize zero shirts"</sp=
an>
</li></ol></div></div></div>
<p>Similarly, if you try to create a <code class=3D"docutils literal notran=
slate"><span class=3D"pre">CartItem</span></code> instance with an empty <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">name</span><=
/code> value, the superclass <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Product</span></code> initializer causes initialization =
to fail:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">if=
</span> <span class=3D"k">let</span> <span class=3D"nv">oneUnnamed</span> =
=3D <span class=3D"nv">CartItem</span>(<span class=3D"nv">name</span>: <spa=
n class=3D"s">""</span>, <span class=3D"nv">quantity</span>: <span class=3D=
"m">1</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Item: </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">oneUnnamed</span>.<span cla=
ss=3D"nv">name</span><span class=3D"p">)</span><span class=3D"s">, quantity=
: </span>\<span class=3D"p">(</span><span class=3D"nv">oneUnnamed</span>.<s=
pan class=3D"nv">quantity</span><span class=3D"p">)</span><span class=3D"s"=
>"</span>)
</li><li>} <span class=3D"k">else</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Unable to i=
nitialize one unnamed product"</span>)
</li><li>}
</li><li><span class=3D"c">// Prints "Unable to initialize one unnamed prod=
uct"</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID229">
<h3>Overriding a Failable Initializer<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID229" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can override a superclass failable initializer in a subclass, just l=
ike any other initializer. Alternatively, you can override a superclass fai=
lable initializer with a subclass <em>nonfailable</em> initializer. This en=
ables you to define a subclass for which initialization cannot fail, even t=
hough initialization of the superclass is allowed to fail.</p>
<p>Note that if you override a failable superclass initializer with a nonfa=
ilable subclass initializer, the only way to delegate up to the superclass =
initializer is to force-unwrap the result of the failable superclass initia=
lizer.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You can override a failable initializer with a nonfailabl=
e initializer but not the other way around.</p>
</div>
<p>The example below defines a class called <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Document</span></code>. This class models=
 a document that can be initialized with a <code class=3D"docutils literal =
notranslate"><span class=3D"pre">name</span></code> property that is either=
 a nonempty string value or <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">nil</span></code>, but cannot be an empty string:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Document</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>?
</li><li>    <span class=3D"c">// this initializer creates a document with =
a nil name value</span>
</li><li>    <span class=3D"k">init</span>() {}
</li><li>    <span class=3D"c">// this initializer creates a document with =
a nonempty name value</span>
</li><li>    <span class=3D"k">init</span>?(<span class=3D"nv">name</span>:=
 <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">name</span>=
.<span class=3D"nv">isEmpty</span> { <span class=3D"k">return</span> <span =
class=3D"k">nil</span> }
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The next example defines a subclass of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Document</span></code> called <code class=
=3D"docutils literal notranslate"><span class=3D"pre">AutomaticallyNamedDoc=
ument</span></code>. The <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">AutomaticallyNamedDocument</span></code> subclass overrides =
both of the designated initializers introduced by <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">Document</span></code>. These overr=
ides ensure that an <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">AutomaticallyNamedDocument</span></code> instance has an initial =
<code class=3D"docutils literal notranslate"><span class=3D"pre">name</span=
></code> value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">"[Untitled]"</span></code> if the instance is initialized without =
a name, or if an empty string is passed to the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">init(name:)</span></code> initializer:=
</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">AutomaticallyNamedDocument</span>: <span clas=
s=3D"nc">Document</span> {
</li><li>    <span class=3D"k">override</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>()
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"s">"[Untitled]"</span>
</li><li>    }
</li><li>    <span class=3D"k">override</span> <span class=3D"k">init</span=
>(<span class=3D"nv">name</span>: <span class=3D"nc">String</span>) {
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>()
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">name</span>=
.<span class=3D"nv">isEmpty</span> {
</li><li>            <span class=3D"k">self</span>.<span class=3D"nv">name<=
/span> =3D <span class=3D"s">"[Untitled]"</span>
</li><li>        } <span class=3D"k">else</span> {
</li><li>            <span class=3D"k">self</span>.<span class=3D"nv">name<=
/span> =3D <span class=3D"nv">name</span>
</li><li>        }
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Aut=
omaticallyNamedDocument</span></code> overrides its superclass=E2=80=99s fa=
ilable <code class=3D"docutils literal notranslate"><span class=3D"pre">ini=
t?(name:)</span></code> initializer with a nonfailable <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">init(name:)</span></code> init=
ializer. Because <code class=3D"docutils literal notranslate"><span class=
=3D"pre">AutomaticallyNamedDocument</span></code> copes with the empty stri=
ng case in a different way than its superclass, its initializer does not ne=
ed to fail, and so it provides a nonfailable version of the initializer ins=
tead.</p>
<p>You can use forced unwrapping in an initializer to call a failable initi=
alizer from the superclass as part of the implementation of a subclass=E2=
=80=99s nonfailable initializer. For example, the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">UntitledDocument</span></code> subc=
lass below is always named <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">"[Untitled]"</span></code>, and it uses the failable <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">init(name:)</sp=
an></code> initializer from its superclass during initialization.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">UntitledDocument</span>: <span class=3D"nc">D=
ocument</span> {
</li><li>    <span class=3D"k">override</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">name</span>: <span class=3D"s">"[Untitled]"</span>)!
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>In this case, if the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">init(name:)</span></code> initializer of the superclass were =
ever called with an empty string as the name, the forced unwrapping operati=
on would result in a runtime error. However, because it=E2=80=99s called wi=
th a string constant, you can see that the initializer won=E2=80=99t fail, =
so no runtime error can occur in this case.</p>
</div>
<div class=3D"section" id=3D"ID230">
<h3>The init! Failable Initializer<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Initialization.html#ID230" title=3D"=
Permalink to this headline">=C2=B6</a></h3>
<p>You typically define a failable initializer that creates an optional ins=
tance of the appropriate type by placing a question mark after the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">init</span></code>=
 keyword (<code class=3D"docutils literal notranslate"><span class=3D"pre">=
init?</span></code>). Alternatively, you can define a failable initializer =
that creates an implicitly unwrapped optional instance of the appropriate t=
ype. Do this by placing an exclamation mark after the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">init</span></code> keyword (<co=
de class=3D"docutils literal notranslate"><span class=3D"pre">init!</span><=
/code>) instead of a question mark.</p>
<p>You can delegate from <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">init?</span></code> to <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">init!</span></code> and vice versa, and you can=
 override <code class=3D"docutils literal notranslate"><span class=3D"pre">=
init?</span></code> with <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">init!</span></code> and vice versa. You can also delegate fr=
om <code class=3D"docutils literal notranslate"><span class=3D"pre">init</s=
pan></code> to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">init!</span></code>, although doing so will trigger an assertion if th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">init!</s=
pan></code> initializer causes initialization to fail.</p>
</div>
</div>
<div class=3D"section" id=3D"ID231">
<h2>Required Initializers<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Initialization.html#ID231" title=3D"Permalink=
 to this headline">=C2=B6</a></h2>
<p>Write the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">required</span></code> modifier before the definition of a class initial=
izer to indicate that every subclass of the class must implement that initi=
alizer:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span> {
</li><li>    <span class=3D"k">required</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"c">// initializer implementation goes here<=
/span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>You must also write the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">required</span></code> modifier before every subclass impl=
ementation of a required initializer, to indicate that the initializer requ=
irement applies to further subclasses in the chain. You do not write the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">override</sp=
an></code> modifier when overriding a required designated initializer:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeSubclass</span>: <span class=3D"nc">SomeC=
lass</span> {
</li><li>    <span class=3D"k">required</span> <span class=3D"k">init</span=
>() {
</li><li>        <span class=3D"c">// subclass implementation of the requir=
ed initializer goes here</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You do not have to provide an explicit implementation of =
a required initializer if you can satisfy the requirement with an inherited=
 initializer.</p>
</div>
</div>
<div class=3D"section" id=3D"ID232">
<h2>Setting a Default Property Value with a Closure or Function<a class=3D"=
headerlink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initial=
ization.html#ID232" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>If a stored property=E2=80=99s default value requires some customization=
 or setup, you can use a closure or global function to provide a customized=
 default value for that property. Whenever a new instance of the type that =
the property belongs to is initialized, the closure or function is called, =
and its return value is assigned as the property=E2=80=99s default value.</=
p>
<p>These kinds of closures or functions typically create a temporary value =
of the same type as the property, tailor that value to represent the desire=
d initial state, and then return that temporary value to be used as the pro=
perty=E2=80=99s default value.</p>
<p>Here=E2=80=99s a skeleton outline of how a closure can be used to provid=
e a default property value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">someProperty</=
span>: <span class=3D"nc">SomeType</span> =3D {
</li><li>        <span class=3D"c">// create a default value for someProper=
ty inside this closure</span>
</li><li>        <span class=3D"c">// someValue must be of the same type as=
 SomeType</span>
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">someVal=
ue</span>
</li><li>    }()
</li><li>}
</li></ol></div></div></div>
<p>Note that the closure=E2=80=99s end curly brace is followed by an empty =
pair of parentheses. This tells Swift to execute the closure immediately. I=
f you omit these parentheses, you are trying to assign the closure itself t=
o the property, and not the return value of the closure.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you use a closure to initialize a property, remember t=
hat the rest of the instance has not yet been initialized at the point that=
 the closure is executed. This means that you cannot access any other prope=
rty values from within your closure, even if those properties have default =
values. You also cannot use the implicit <code class=3D"docutils literal no=
translate"><span class=3D"pre">self</span></code> property, or call any of =
the instance=E2=80=99s methods.</p>
</div>
<p>The example below defines a structure called <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Chessboard</span></code>, which model=
s a board for the game of chess. Chess is played on an 8 x 8 board, with al=
ternating black and white squares.</p>
<img alt=3D"../_images/chessBoard_2x.png" class=3D"align-center" src=3D"htt=
ps://docs.swift.org/swift-book/_images/chessBoard_2x.png" style=3D"width: 2=
30px;">
<p>To represent this game board, the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">Chessboard</span></code> structure has a single =
property called <code class=3D"docutils literal notranslate"><span class=3D=
"pre">boardColors</span></code>, which is an array of 64 <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">Bool</span></code> values. A=
 value of <code class=3D"docutils literal notranslate"><span class=3D"pre">=
true</span></code> in the array represents a black square and a value of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">false</span>=
</code> represents a white square. The first item in the array represents t=
he top left square on the board and the last item in the array represents t=
he bottom right square on the board.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">boa=
rdColors</span></code> array is initialized with a closure to set up its co=
lor values:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Chessboard</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">boardColors</s=
pan>: [<span class=3D"nc">Bool</span>] =3D {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">temporaryB=
oard</span> =3D [<span class=3D"nv">Bool</span>]()
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">isBlack</s=
pan> =3D <span class=3D"k">false</span>
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">i</span> <=
span class=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"m">8=
</span> {
</li><li>            <span class=3D"k">for</span> <span class=3D"nv">j</spa=
n> <span class=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"=
m">8</span> {
</li><li>                <span class=3D"nv">temporaryBoard</span>.<span cla=
ss=3D"nv">append</span>(<span class=3D"nv">isBlack</span>)
</li><li>                <span class=3D"nv">isBlack</span> =3D !<span class=
=3D"nv">isBlack</span>
</li><li>            }
</li><li>            <span class=3D"nv">isBlack</span> =3D !<span class=3D"=
nv">isBlack</span>
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">tempora=
ryBoard</span>
</li><li>    }()
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">squareIsBlack=
At</span>(<span class=3D"nv">row</span>: <span class=3D"nc">Int</span>, <sp=
an class=3D"nv">column</span>: <span class=3D"nc">Int</span>) -&gt; <span c=
lass=3D"nc">Bool</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">boardCo=
lors</span>[(<span class=3D"nv">row</span> * <span class=3D"m">8</span>) + =
<span class=3D"nv">column</span>]
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Whenever a new <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Chessboard</span></code> instance is created, the closure is execu=
ted, and the default value of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">boardColors</span></code> is calculated and returned. T=
he closure in the example above calculates and sets the appropriate color f=
or each square on the board in a temporary array called <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">temporaryBoard</span></code>,=
 and returns this temporary array as the closure=E2=80=99s return value onc=
e its setup is complete. The returned array value is stored in <code class=
=3D"docutils literal notranslate"><span class=3D"pre">boardColors</span></c=
ode> and can be queried with the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">squareIsBlackAt(row:column:)</span></code> utility f=
unction:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">board</span> =3D <span class=3D"nv">Chessboard<=
/span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">board</span>.<s=
pan class=3D"nv">squareIsBlackAt</span>(<span class=3D"nv">row</span>: <spa=
n class=3D"m">0</span>, <span class=3D"nv">column</span>: <span class=3D"m"=
>1</span>))
</li><li><span class=3D"c">// Prints "true"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">board</span>.<s=
pan class=3D"nv">squareIsBlackAt</span>(<span class=3D"nv">row</span>: <spa=
n class=3D"m">7</span>, <span class=3D"nv">column</span>: <span class=3D"m"=
>7</span>))
</li><li><span class=3D"c">// Prints "false"</span>
</li></ol></div></div></div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Inheritance.html">Inheritance</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/Deinitialization.html">Deinitialization</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/initializerDelegation01_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////BAQF+/z++vv93ebzTH6/TX/AT4DAU4PCVIPCVITC
VoXDV4bDWYfEWojEXYrFYIzGZI/Ia5TKcpnNeZ7PiarVkK/Xl7Tapb7frMPhssfju87nw9Tqxtbr
0d7v6e/3UIHAUYLBUoPBWIfDW4nEf6PRnbncscfjs8nktsvlvM/nv9HowdPpxNXqx9frytnszNvt
ztzu0t/v2OPx4On04+v15u327vP55Oz1CwwN8/f79vn8+fv9/P3+HB8hFxsdDA4PHyMlMzg6houN
UmJoR1VadIuTmaqwlKKnipKVpMbRmbnDV2lvTFxhOkZKuuDst9zortHdq87ZlrW/j6y2f5mheZKa
XXB2qcvWjKixh6KrboSLo8PNnr3HsdHbr87Yq8jREhUWKS8xFRgZnK+1l6esQE5SaH6END9Cud/q
tNnkstbhsNTfp8nTkrC5g56mY3d9s9TeornAn7W7nLC2LTU3m6+0m66zmq2yi5WXhImKJCorh46P
AQICBgcHEBISCAkJhIaGfn9//v//5ufnzM3Nvr+/rq+vra6uq6ysqqurpqenoaKinJ2dlJWVjI2N
goOCAgIBBgYFCgkHDAsJjYqFjYqGi4iEHRkURz0yOjIpT0Q4yq6QV0s+6Mus5smqvayZqp6Rn5aM
lpCJFBEOgW5bd2ZUbFxMIh0Y/Niz+dax1reYz7GTr5Z8e2lXcWFQZ1hJ/dm0+9ez99Sw9NKu8c+s
782q7cup6smn58al5cSj4cGg3L2dxKiMvaKHtpyCmYNtKiQepY52jXlldGRTMisk7c6t7M2t68ys
EA4MCAcG3cKn1r2kzLagvqyavayavKuZuaiXu6qZuqmYt6eXtKWWjoqGjYmFioeEX1FEGBQRjYmG
AQAABQQE/v7+/f39+/v7+Pj48/Pz7u7u3d3d19fX0tLSz8/Pzs7Oy8vLycnJxsbGwsLCurq6rKys
iIiIgICAfX19eHh4cnJyaWlpYmJiWlpaUlJSSEhIQEBAGxsbAwMDAgICAQEB////7aRcgAAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAEH6SURBVHja7J15fFXVufe/Z55P
5nlOBEFRURRsnLHae99ese1Vcaq3KoK0QqttfW8tFBBa+7G1toBSRKht1Uq1WjvcW9tXcMC0gAMq
CgQyz3Ny5vm8f5yTkBDADCeckPN8/8kZ9l7Z57fXb6/nWWvttRUKBEGIF0qRQBDEgIIgBhQEQQwo
CGJAQRDEgIIgBhQEQQwoCGJAQRDEgIIgBhQEYXyoj/PZpb3twWBQtBGEmKFSqjXF7wz/XDFsMval
VQ6P6CUIMUeTn17xmQZUWxyilCBMCKbS949tGY8x4AU90vwJwgTh15htJzXghQf8opIgTBT2ZGvf
SQyocrtFI0GYQAeG5jSc2IDZvaKQIExoFOpxDn47ZBxQ5RJ9BGFiMZaf0IAzxYCCMME09pzQgG2i
jiBMNJ1rB70ZMg6YIkOAgjDRmAc3gUOmoiWLAeODRaUMJ7XKCGxiMGSkYUgvqKSAcSF5RpXrv//S
Pc+v8MWkvDk5OR4x8+Qlr/dEBlSJOHGgZPGzsBPqbXMc3lgUmP+vpiHnWJhcWHtPFIIK8Qg//1bK
ZU6Pyribd8o/jk3Ltfa3outpghgw3mSVUv6JHZRnHqIiKzYGXJkluooBhRFhgDo7EKqdt5uMbpJU
hHoBi4ZwD6Qo8LmTMhQd3mgPWVK6ocvS6fQCyUp8zqSszi5QFKl0+DrNjdGNugFTplYd8obqQwD5
zkwtvg5XxOFJGc6MQLvXLvKLAQXa8puA0JF0miHj1pVFvUB6JeV74Yx/Z2PZu21wWVsNoD/jg06A
8o5aKF6wMiOroWN2F/qUw5F8su+op1I7I7nGxZV2MGfUtA/spyz7tJN6WLupQ8SPM7IkRbxxQyAz
LSkfbH19dmDlMeHkyrJ3Ad6uTIF89weRTyuqrMBKehoAFNPqIx/vmaYBWAtY/xld1OBfJaAs28Nl
F82FikwDpHwKRRdeysrmFNFfDJjgtFfDntbO+nPSk05wMirmZEybCZQo0QQgJ9mcMY9QCQABima3
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
hi+dDPfhPz4AAAAASUVORK5CYII=

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/initializerDelegation02_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA/////v7/8PP69vj8+/z++vv98vX68PT6TH6/TX/ATn/A
T4DAUIHBUoLBU4PCVIPCVoXDVYTCV4bDWYfEXYrFXovGX4zGYo7HZZDIbJXKbZbLbpbLcpnNd53P
ep/Qh6jUkbDYlLLZlrPZobvdpL3fqMDgqsLhrMPirsTisMbjydjs0d7v2uTy3+j07fL57PH49Pf7
UYLBW4nEZ5LJapTKgKTSja3WlrTamLXamrfbp8Dgq8PhtMnktsvlvM/nv9How9Tp2OPx3efz7vP5
4er05e326O/36/H4/P3+DA4PFBYXhIiKgoSFgYOEdIuTmKmvSlJVj5qeuuDsstbimrrEi6ixhJ+o
bIKJud7qsNPertHcl7W/fJWdr87YNj9CT1xgpb/HnK+1lqarHSAhlqWqlaSpk6Ckt93onr/Jka+4
YHR6VmhtpMXPttrlqsvVPklMpLzDornAoLa8l6ith46QKTEzMDg6JSkqFxwdHiQlAQICEBMTBgcH
CAkJkZOTgIKCfn9/fX5+dXZ2yMnJtre3tLW1rq+vqqurpqenlpeXjY6OiYqKhoeHhYaGhIWFgoOD
f4CAgIGAAgIBgoKBhoWCCgkHhIOBko2Hya2PUEU5NC0l2sGmxbKdwa+bt6iXtaaWsqSVrqGTBQQD
FBEOIh0Y/Niz6smmxKiLeWhWKSMd/dm0+tey+NWx9NGu8c+s7cyp58al5cWj4cGg17iZ0LKUuZ+E
qpJ5aVpLW05BPzYt3b6em4VvRz0z9dOxHRkV5ciq4cWoEA4MCAcG07ujyrWfvqyauqmYqZ2RppuQ
joqGioeEiXVioZeOGRUSAQAABAMD/v7+/f39+/v79/f38/Pz7u7u5+fn4uLi3d3d2dnZ19fX1dXV
09PT0tLS0NDQzs7Oy8vLx8fHxcXFw8PDwcHBv7+/vLy8ubm5tra2s7OzsbGxqamppqampKSkoqKi
n5+fm5ubfHx8eXl5b29vZmZmMDAwGxsbEBAQCwsLBQUFBAQEAwMDAgICAQEB/////5PtbAAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAHUoSURBVHja7J19YFTVnf6fuXfu
vE8yM3l/A8I7CZAMYrvbFVoqosW2SlW0BQurYn+LIqiVF3mp5UWUti6K0i1oqwW6QqsUKwiIZYV2
u1VkEiAJ70kg75NkJpn3uXPv/P6YmZAEAmQykyEz388fMDN3zsnc557nnO85955zJBIQBBErGJKA
IMiABEEGJAiCDEgQZECCIMiABEEGJAiCDEgQZECCIMiABEEGJAiib0iv8Zns65c8Tj9pQxARQ6KS
533pucbnVz2MXaw8xZNeBBFxxshM3hsasLDJRkoRRFQo8JTdwIAFl3wkE0FECXbi590+6GrAKRXk
P4KIGv6GkebrGJC1u0gjgoiiA3mf0Pl919sQQ9pJIYKIJvbbem4BWYECUIKILi0QemoBv+EmeQgi
uvBf7zEEJf8RRNS51KMBK0kcgog2aT0a0EHiEES0ETu/6TIIIyVxCCLaOF09tYAEQfQvZECCIAMS
BBmQIAgyIEGQAQmCIAMSBBmQIAgyIEGQAQmCIAMSBBmQIAgyIEGQAQmCIAMSBBmQIAgyIEGQAQmC
IAMSBBmQIAgyIEGQAQmCIAMSBBmQIMiABEGQAQmCDEgQBBmQIMiABEFEj24bIuXLSRKCiCLaLyXX
MWDqUVKIIKLIZApBCYL6gARBkAEJggxIEGRAgiDIgARBBiQIggxIEGRAgiDIgARBBiQIggxIEGRA
giDIgARBBiQIggxIEGRAgiDIgARBBiQIggxIEGRAgiDIgARBBiQIggxIEGRAgiADEgRBBiSIBEPa
y++Xffjk7+JUisd/8yPn2Ajkc0r9hyffiVONhFmOwr7mcVKlksarPo/95oGC3qWQdN6qRYHbr785
y7kPXTg2Ol4rI7VE7/p+QR8zOZ3+e2vK147HqUS+Fixs7FMBKE/7g0X/L/Gqj9AM5YO24ut9ZfIX
muYwW8BT2W/YxQbZxXg1oCzdJCgaGov6Urv/5f3pX/PUVafEqUT8WNm5feaGceGmL03fxSUVmeNW
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
AAAAAElFTkSuQmCC

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/twoPhaseInitialization01_2x.png

iVBORw0KGgoAAAANSUhEUgAAA4EAAAGtCAMAAACfhYGaAAAACXBIWXMAAAsTAAALEwEAmpwYAAAE
AGlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjajZXPbxRlGMc/u/POrAl1DqYCFlMn/gBCSrOA
QRoE3e0u20Itm22LbWNitrNvd8dOZ8d3ZsuP9MRFb6D+ASpy8GDiyQR/RbgABw0kBA2xITHhUOKP
EEm4GFIPs92d1jb1PT37fb/P9/k+z/tkB1Kfl33fTVow64WqVMha4xOTVuoOSZ5hE11sKtuBnykW
hwDKvu+y8iTg0c8kAG7tXuN+o7OpIgMbEk8A9Upgz0LiFOiu7asQjHvAgZOhH0LqWaBTjU9MQioN
dFajOAd0TkXxONCpRkv9kHIB066VK5CaB3qmYng1FkceAOgsSE8qx7ZKhaxVVPVpx5Uxuxtc/88z
6zaW63UDHcHMyDFgJyRO1dRAqRl/YpfzI8CLkLjuh9kSsB0SfzRmxjLALkg+Na2OjEX85KtnaqNv
ApshWXHCwdEmfsabGj4e5SYvzNSPlZqc63bQPwk8D8m7NTk4FPnRqMhcHugBrbvWGGjqa0eDuZH8
ss6ZWv9wpKOpd8pHi0AXaO+reul45Fm7IN1CKdLXrvphselBW/Tc4aFIU5gyyI8s42FtdCDKFftD
NdrMFZPTzpHBJn/ed4tDkTdxUTVKY03OzbLKFyId8bf0xpqa+tZKOXcM6AX9MCcSZSR1ppDYeDzG
okSBLBY+ijrTOLgUkHhIFE7iSWZw1uEVkahm3GZUkXgsonCw1+FEFe43OXWxRaTFPpEWB8WQOCQO
iD4s8Zp4XRwWOZEWfeJgK7cYq29R5X5L510aSCxKnCB7vquxs13vrHrbsW+ce7Aiu/4fz3LZT3wC
BMy0mLvj/V+b/25rW+O2uPTWrY5r8xzfaL76PX1Rv63f0+/oC22G/qu+oC/od8jg4lJFMovEwUMS
xBzEe7iCS0gZl9/wqMd4KypOe+e72jf2jXMP5HvDj4Y529NG07+k/0zfTn+avpj+fdWU15yS9pH2
lfa99rX2jfYjlnZZu6L9oF3VvtS+jb3V+vvRensysW4l3pqzlrhm1txmvmDmzOfMl8yhtp65xdxj
Dpg7zJy5rfVu8XrxXhwmcFtTXbtWxBvDw+EkEkVAGReP06v2v5ktusUeMbhqaw+Ig6Ll0sgbOSOD
Zewy+ow9xlEj0/Zn7DByRp+xw8iv2Dp7nQ5kjBXvczdTSAJmUDjMIXEJkKE8FQL01/3TyqnWQmtv
Ov2KlfF9V1qDnt3bY5Vd11JOtRYGlpKBVHOy0sv4xKQV/UU/LJEAEptvtLHwDTj0F2g329hkA74I
YMvLbWxnFzz9MVzabzfU3PI3M/ETBNP79ka/OrKg311aergdUh/C4w+Wlv65sLT0+DPQFuCy+y9g
ZXF57k4HNAAAACBjSFJNAABtmAAAc44AAPJ7AACE2gAAbpQAAOUaAAAzJwAAGReZSRx/AAADAFBM
VEUAAAD///8AAAH7/P7r8Pjy9frw9PpMfr9Nf8BOf8BPgMBQgcFSgsFTg8JUhMJXhsNZh8RdisVe
i8ZgjMZijsdnkclslctymc15ns98oNCAo9KJqtWSsNiattugut22yuXR3u/a5PLe5/Ph6fTt8vn0
9/tRgsFbicSkvt+rw+Gxx+OzyeS8z+e/0ejD1OnI2OzV4fDY4/Hd5/Pu8/nk7PXo7/f2+fz5+/38
/f4QEhPg5OYeIyVOWl9HUVUkKStne4KYqa+Vo6iPmp7l7fC64Oy12uay1uKrztmiw86Wtb+Goap7
lJyw096py9afv8maucOMqLGAmqJfcnguNzqmxtCw0Nqvztg2P0Klv8cUFxg+R0oqMDKXp6yWpquW
paqVpKmIjpDn8PPi6OqBhIW33eiu0t2s0NuRr7huhYxVZ2y53+qnydN0jJOjusGgtrycsLaUoqbq
9fjk6+3i6esZHR6JkZPq9vmDh4iMlpjp9ffo8/WGjI3g5ufh6Onj6+wBAgIGBwcNDw8ICQkLDAyB
hITe4uLc39/b3d1+f397fHz+///a29vZ2trX2Ni2t7ewsbGsra2mp6ekpaWio6OXmJiTlJSPkJCK
i4uGh4eFhoaEhYWBgoICAgHa2tmGhYILCgiEg4Hf3tze3duJh4T99Ojx6+Pk4d3+9OiTjoj48Ob3
7+Xz7OOPi4bo5N/JrY+0m4A0LSXYv6TNuKHFsp2ypJWxo5SvopSWkIn98+j68ef37+b17eTu6OEo
IhxLQDX82LP717LOsJLEqIufiHF7aVc+NSz92bT41bH00q7nxqXiwqHbvJyMeGRpWkv207Duzatc
T0IIBwbRuqLIs54WFBKimI7Vtpjs5uEfGhYSDw0FBAT+/v79/f37+/v5+fn29vbz8/Pw8PDu7u7p
6enn5+fk5OTh4eHe3t7c3Nzb29va2trZ2dnY2NjX19fV1dXT09PR0dHMzMzHx8fAwMCpqammpqaj
o6N3d3dvb29jY2M4ODgFBQUEBAQCAgIBAQH////cFcW/AAABAHRSTlP/////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////8AU/cHJQAAL6RJREFUeNrsnXl8W9Wd9h9d7bJWy0tiO7bjRXH2UEiYTEhogeHT
0gVo2uFNnCm0TTdKN0jrWQrZ2neamdAOJZS2pNAWkgydklJoKSUtvJBkUpIA2QBb3vdFlq3N2nX1
/iHviRNbsa1E9/n+AfL1PTfWc85zf79z7rnnyGQghKQMgRIQQgcSQgcSQuhAQuhAQggdSAgdSAih
AwmhAwkhdCAhdCAhZNpQXOCYsrw/HIxSG0KmC5lKrbJq37zQb86bma2Yo22mYoRMO4Y5n6m6tAOL
3H5KRciMYHVEL9UPXOqgAQmZIZzm0vGH5GNjYFEb+3+EzBgh2ZL2i8XAMg8NSMgM4u7YdbEYqHNR
IkJmEn+Na+IYWOamQITMKPHQRbJQdYgCETKzeFZNnIUqOQ5KyAwTk7knjIERykPITKMb89OYWWkc
CE0NSr1SFhcHAlRCEogTZ6FqWjAFyIszWv/tOc93HcbgtCQhloo5cwbC1PWKReUZ/dOYWWkm3oVn
H9mCM8Ox0Dwdg9GWbsDqpbBXLDltE2ahJAVknQEUFTG56m1EDF6RgkgMvh+Y8k4gUKyz19u9S4EG
M/WQGoyBqSa7CdEggGYdAFMfsgXEegFYFRAdUJsBtzI7AK3DO5ipZnph6POEAHkW4MUcdY8T0Bot
Qn880hcfld5mKmUWMdzfDwAwZqu8oqFP1wwAalOmDzFNL3NVOpAAsPSKAPzZQA+QfQrLegFkncUK
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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/twoPhaseInitialization02_2x.png

iVBORw0KGgoAAAANSUhEUgAAA4AAAAGtCAMAAABwR+qkAAAACXBIWXMAAAsTAAALEwEAmpwYAAAE
AGlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjajZXPbxRlGMc/u/POrAl1DqYCFlMn/gBCSrOA
QRoE3e0u20Itm22LbWNitrNvd8dOZ8d3ZsuP9MRFb6D+ASpy8GDiyQR/RbgABw0kBA2xITHhUOKP
EEm4GFIPs92d1jb1PT37fb/P9/k+z/tkB1Kfl33fTVow64WqVMha4xOTVuoOSZ5hE11sKtuBnykW
hwDKvu+y8iTg0c8kAG7tXuN+o7OpIgMbEk8A9Upgz0LiFOiu7asQjHvAgZOhH0LqWaBTjU9MQioN
dFajOAd0TkXxONCpRkv9kHIB066VK5CaB3qmYng1FkceAOgsSE8qx7ZKhaxVVPVpx5Uxuxtc/88z
6zaW63UDHcHMyDFgJyRO1dRAqRl/YpfzI8CLkLjuh9kSsB0SfzRmxjLALkg+Na2OjEX85KtnaqNv
ApshWXHCwdEmfsabGj4e5SYvzNSPlZqc63bQPwk8D8m7NTk4FPnRqMhcHugBrbvWGGjqa0eDuZH8
ss6ZWv9wpKOpd8pHi0AXaO+reul45Fm7IN1CKdLXrvphselBW/Tc4aFIU5gyyI8s42FtdCDKFftD
NdrMFZPTzpHBJn/ed4tDkTdxUTVKY03OzbLKFyId8bf0xpqa+tZKOXcM6AX9MCcSZSR1ppDYeDzG
okSBLBY+ijrTOLgUkHhIFE7iSWZw1uEVkahm3GZUkXgsonCw1+FEFe43OXWxRaTFPpEWB8WQOCQO
iD4s8Zp4XRwWOZEWfeJgK7cYq29R5X5L510aSCxKnCB7vquxs13vrHrbsW+ce7Aiu/4fz3LZT3wC
BMy0mLvj/V+b/25rW+O2uPTWrY5r8xzfaL76PX1Rv63f0+/oC22G/qu+oC/od8jg4lJFMovEwUMS
xBzEe7iCS0gZl9/wqMd4KypOe+e72jf2jXMP5HvDj4Y529NG07+k/0zfTn+avpj+fdWU15yS9pH2
lfa99rX2jfYjlnZZu6L9oF3VvtS+jb3V+vvRensysW4l3pqzlrhm1txmvmDmzOfMl8yhtp65xdxj
Dpg7zJy5rfVu8XrxXhwmcFtTXbtWxBvDw+EkEkVAGReP06v2v5ktusUeMbhqaw+Ig6Ll0sgbOSOD
Zewy+ow9xlEj0/Zn7DByRp+xw8iv2Dp7nQ5kjBXvczdTSAJmUDjMIXEJkKE8FQL01/3TyqnWQmtv
Ov2KlfF9V1qDnt3bY5Vd11JOtRYGlpKBVHOy0sv4xKQV/UU/LJEAEptvtLHwDTj0F2g329hkA74I
YMvLbWxnFzz9MVzabzfU3PI3M/ETBNP79ka/OrKg311aergdUh/C4w+Wlv65sLT0+DPQFuCy+y9g
ZXF57k4HNAAAACBjSFJNAABtmAAAc44AAPJ7AACE2gAAbpQAAOUaAAAzJwAAGReZSRx/AAADAFBM
VEUAAAD///8DAwT7/P7l7Pbw9PpMfr9Nf8BOf8BPgMBQgcFSgsFTg8JUhMJWhcNXhsNZh8RdisVq
k8pymc15ns+KqtWQr9ikvd6nv9+4zObA0eje5/Ph6fTp7/f09/tRgsFjj8eCpdKZttugu92oweCr
w+GuxeKyyOPG1urK2ezN2+3P3e7S3+/V4fDY4/Ha5fLd5/Pu8/nt8vjx9frr8fgNDg/2+fz5+/38
/f4lKSsVFxjg5OaIiouBg4QeIyUrMDJBSEtidn1yiZGUoqeToKW64Oy43uqrztmmyNOjxM+Yt8GV
s72Goap5kpq22uaevsiNqbKBm6Nqf4aqy9YvODuw0NqvztipxM2mv8dIUVScr7UaHR6WpquVpKmQ
nKCMlZjm7/KChYav096s0NuRr7iz1+JZa3CgtryZq7CNl5qHjpDq9fjo8vXi6etPW16JkZPq9vmE
iIne4uM3QEKLlZeKk5Xl7vDp9ffh5+jj6uvk7O3j6+wBAgIRFBQGBwcICQnd39/b3d1+f3/+///a
29vZ2trLzMyxsrKoqammp6elpqahoqKZmpqPkJCMjY2Gh4eFhoaBgoKAgYECAgHa2tmKiISGhYPf
3tzm497z7eT99Ojx6+Oeloz+9Oj68eaSjYf37+Xz7OPs5+E/Niw1LibItJ7Fsp29rJmypJX98+j3
7+b17eQMCgghHBd5Z1VLQDX82LPgwJ/Wt5jPsZO9ooYpIx392bT717P617L31LD00q7uzarlxaPc
vZ3KrZDEqIyxmH6giXKLd2NoWUpbTkHoyagIBwbRuqLBr5y2ppawopSqnpKOiobu6OLg3twZFRIR
Dgze3NsBAAAEAwOEg4P+/v79/f37+/v5+fn19fX09PTz8/Pw8PDu7u7p6enn5+fk5OTi4uLf39/c
3Nzb29va2trZ2dnY2NjX19fW1tbU1NTS0tLQ0NDHx8fAwMC3t7etra2lpaWjo6Ofn5+EhIR6enp0
dHRsbGxgYGA4ODgLCwsFBQUEBAQCAgIBAQH///+3XFqHAAABAHRSTlP/////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////8AU/cHJQAALoRJREFUeNrs3Xl8HPV9N/DPzt6nVqd1WpJt2ZIlCxtqE9wEu7TQ
hBts2jrmyPVAk2KnLUmaA8uxTNJXCoTUTvMEnpC8EnBoEpsACSGBBpBD7WKX2JFky5Zl3at7Ja32
nN2dmeePXcnyISGtVlqx+3n/g7TaGbzfmc/8jpmdUalARIkisAREDCARA0hEDCARA0hEDCARA0hE
DCARA0hEDCARA0hEc6O5wmtFobAUDLE2RHGTq1Jpbe9d/rrqsoux1zsHRNaLKO7U1qXvvW8Aq109
rBTRvDDmnX2fAK7uCLJMRPNEVdI8bQDzx9j9JJrHBJZe3AZePAu6wc/8Ec0jpfeai8eFF7WApgFW
iGg+hQO+KQMoSDz5QDS/QnljU3VBy7wsD9H8kg1Tt4ABlodovoeB/qlawDCLQzTfpMm/aKb8Cy0Y
way2YszMKyBSw9STMGqZ1UmAtLR+38g/veqqCMbnIoglK/O0YyzrIh4FTvr5ohPxJk6CJkBR60RL
mOGKxworT2JZF+u6eIWmGgNSAlheATaUr8wtAORSM+uRYjQsQYJlV+Hqcx4Ay1pxPIcnghhAWugt
0OsBgO7CbmSMwJYGpRuA1Q50AYUqjIRydMJw0B0ZM+SLWULQGfQCsFsx6knLlNsAwarNhNPgnDzD
bcnQamWn5AsCgD7bMAab0xiZ6SkQs53pQyGOFBlAAgZMAQCKOh1+ILMZa7sBpLUCWiDUjdLOVgC1
P+kAYC5srK0BsKFtFNC2ojTnzGAlYC78G9QAuLrjQqYKc94FAKztdAP5UhsABzZ4XYA6vR29cAB5
I5z4TrCLZkG1nAVdeLZhKPIysxSCOxh0A+lO5A4CsI0CasAyhrJuAHhruHgMebkNeKvW54Djy+fd
MLvhHgRynMKyxrfeAoDeLDmEnD6kj8H62eeB9UUO9GV4IRgc2JCRO6g4qgQ37P1AQXFhLzxFbAMT
QOYkzCIS3ACEm9sfyclM01/5HccrSzKWNwJhHdR/AnIeP5lZiJqwGgAkFOQNwdYArEovLgO6MsaX
yqrB2vST9csBhxkWB3DuTFPaBhwTgAJgycDZM1WAlfVPMAYw0XoGrgaAGkffUHrRFd9R2OZwd94J
dGVDBFaNBOQxfy26zQBQmz0wNIws4Bq/p6dDDejGl3KtWuXwIDwKQAWhFtBo4GktLR2D+gQgmBHq
KS11s/4cA6Y6x1B2prcLALqQM3KFN+hDiJw7EnR/XwNXGgC8CqSNAfj5KAB4AIcTUKxp6B9fangY
+WaVP98JAHINMLjeOyT1yIB0zXvorf2+ZXjYx+ozgCSKo6p0jSbvj0BJwH/538cAoGfDMQhZNUAf
AGAIUEf/C+R1RscV3slnMez6DgB9QO1TcK8+DRwHcE2HC+isrUENgA2jDt6AhAFMcVpAlhQP4Mrr
xbHMKwRQueiHtUPjfUwAsDkBDF9pvUWtwLVdsjyAmnQobaVBBwC8hywXRv+9vFkGcAzl57kBGMCU
pv5yDcraASAkArCOKUCjCpMv2bW5AOQfA2QngO7LL1cTNxyLDOZtKijReU1NZitWnfGNT7OEu1Hs
0wyGAT2AsTFzpsbXA5xJ93ATMICpTNoDWIx+ALAPAy64gJMb/VAtmRjNBdRSZEO5RLUELQCY04HR
C9nxA4NaCULJe8iNvmQ4Dgz6oh1VlOohtgGa7F7kDxRYgQ4HUNIOpDGAicVZ0ETLBE54C23Wgsxs
IN8DGajKs1oz6yfe0VNis6RnAYVeZAK9JWZYCtvacmwX1uEBpPR889L3LlzoawOQBliWArUAGhrs
NiDHBvTA3dDQsEQDeMb7scQApi5PNSC1fX64ve9dbAgAofXA2eHh3gunJIQzzpGBd4GADG8BcG70
6pFGYHDS1wcH1EBvx+g5YNX4mfXea4BPlq/+px8DNcCggGPONfKSs4AO7mrg3Bq5cgioYgOY6CEI
r4RJMNmT+aW38BYAqH1uIOQPKACuGvGNXwmz3KUAEEoGAUkpcQIOQMjuB8xuZI4CgGTNigSv3CEh
eiWMZqXjrYF+17OrHCh0BdMre9Cr9AAruwB/hhsOpQ/Id/ILaInY5JN+5vcBF4F8tT9DCEvBPin6
q8827NVrABewpBulg9kBWzgcbfGsmRohPGLsAVDggRw9la41azKUYYMDkZclD5CvUyshp6/AA4sD
MKcHMhAOD3sAQJ0bSBeU4bCbR9xECDGAHxxLulHazTIkbQA5BiRKIAaQiAEkSk08Eb/YN1AWRlmF
5MVJGKIFxkkYIo4BiYgBJGIAiRhAImIAiVLHRecBtaF0PUtCNI9MrVMHELC1sEJE86iCXVAijgGJ
iAEkYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAiYgCJGEAi
YgCJGEAiYgCJGEAiBpCIGECiFKOZ5ftbfqa66LHySUR5SBoti8N6TmuFpD2syXK4Yq7rOKVVJ219
FDlUMZ8B7H7hAN5Yo03O4oV+4oJrpGSOa2ky6KEMHknOEm38wxZ0iCvnVB+9XpXU9dl9r1g1i0Uu
as7SfMXTPR3pzMuB15eGRpO3O5CeYUzX3jWXQ3yj0XTQJkvJWyJr4Koc0VcZ8/ItJuUVld2TtPVR
XXXszpBvul2oogWh2ALY8pL2f4aU5O6RG/PzTbevir13ZdG+nO5SJ3WJLOJfSd4YD1KNZsNLuiTf
hSCLd3nKZxzAmffGm19+qW4w2YvnP39a90pTzO2fRfNrrSe58wdP6PWXzadjW9asf12b7LsQBNOQ
Zea70IwD2JirzhlD8nP+ty831mVN2ldTYVZZsrxsiq3/qX8jlAL1Ud5TzKfiHsAlT51OhfwBwz37
OmNb8ozh5dQ4qyNdpzsXw2Knjb2hlKiPclRjiHcAG3/sbEVqaB2xx7ag/lB6ipToZK++MYb64GSK
1GfsZcOpOAfwF97+FCkelP6nWmJZ7rTe5kmVGr2nmf25qEbdK0qq1Meg0sc5gJ+3+1KleAghpiZQ
CzllSmRTNLNeRqNWp0x9pAFNnAOoOe9PmeqNjsS0pwiHpJQpkadv9iXSIHUCiKPqOAfwmZHUKR40
sQXwIylUomOzn25SKUrq1MekPhXfAKInhfYuz9OxLKWSQNN5kSWYQwCJiAEkYgCJiAEkYgCJiAEk
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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/initializersExample01_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gJyUmKikqLi0uLCstMDAyMjI0Ly8wOzs8RUVG
/v7/ODk7Njc5+/z+5ez29/n8TH6/TX/AT4DAUoLBVoXDWYfEWojEXInFXYrFXovGXovFYIzGYo7H
ZZDIaJLJa5TKbZbLcJjMc5rNeJ7Pe6DQf6LRg6XThqjUiqrVi6vWjq3Xj67XkrDYlbLZmrbbnbjc
pr/gqMDgr8XiuMzmwdLp0d7v1ODw3+j04ur16e/39fj89Pf7W4nEja3WoLvdo73epr/frMTiq8Ph
scfjtsvlvM/nxNXqx9frydnszNvtz93u0t/v1uLx2OPx2uXy3efz3+jz4On04+v17vP58fX66/H4
6vD3PD5A9fj7+fv9/P3+RElNP0NG7vX6UVpfVV9kTlZaWWRpbn+GaXmASVBT8vn89vv9iaKrhp6n
gZigfZKad4uSc4aNX21y2+/2uuHtueDst93ptNnlrdDbveLunr3HmrjClbK7kq22weTvwOPujqiw
ZXR5zOny0+z02O713fD23/H34/P45PP46fX57/j79Pr8u+LtsNXgqMrUosPNvOLtvuPuxObw2/D2
4fL35/X55fT48Pn79/z9/f7+4MKi/N6+/erV/vDh/vbt/Nm1+9i08M6s/Nm2+daz9dSx8tGu7cyr
6cmo5sam/Nq3272f07aZ/Nu4zrKW/Nu6/Ny7/N29/N2+/ePI/ebP/ejS/enV/uvY/erX/u7d/u/g
/vHk/vLm//nz/vjy//r1//795MSlx6uQwqeNv6SLtZyEpY55hnRk/eDE/urX/uzbl4Jwd2dZ//n0
aVtQ//r2//v4X1JJ//z6VUpDTEI8RTw3//38LyooPjYzMSspNzAuLigoKiUlJCEhJiMjKCcn/Pz8
+fn59vb28PDw6+vr5ubm39/f3d3d19fX0NDQx8fHvr6+tbW1qKion5+fl5eXjIyMgYGBeHh4c3Nz
cHBwaGhoYGBgWVlZUFBQSEhIQEBAKysrHx8fGBgYEBAQCAgIBQUFAgICAQEB////giQitQAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAACOdSURBVHja7J15eFxnfe8/s2mk
GUkz2izJliw73iSvsR0bx0kbWhq2QEjbhLQ2DSlwC9SEWy4tLeUppb20FHh6b1swNG1TIE9knuAA
SVpCiS8OKY4xUWzH8iLvi2xrX2Y0i2bmzHL/ODPSyNLIsi1bkvX9/GHPmfOeV2d+7/mcdznvOcdi
QQgxk7EqBEJIYiGEJBZCSGIhJLEQQhILISSxEEISCyGJhRCSWAghiYUQE8E+xnfeJZFwLK7YCDGt
sDnyazzPjf7eMuoGCO/ao4biJcT0bDpXL//eVSV+38GAIiXE9G08L2i6isTvfj2hMAkxnVl44Ira
+Yp6WA4LMc05d9cVfeURNbG3P6IQCTHNGXhnS+6a+E71h4WY9iQO525Oe48qPkJMf3oeyinxEl0c
FmIm4MspsTrEQswILuWUOKTgCDETCOaUOKbgCDETGKHqiLnTukY8vfHMBaD4lwrFbCeVU2IxvbHs
BeDB688hef/w55a2iW3zNjhxScGfxkjiGUTiQejbcyM5rMq6B2b1BLd5DtYo9pJYTAqBn8NbFAYh
iWcetgIjlsrRwrbb4llX962OJceSWaVrj4+69P/AkfSHdgVWEotb0xGuuWNXD/cUnukdtco1p7Zw
BzxyvscHQKWnpbdj+5+/5XgAwF21/Gm413Ph8sg2+UD26aF6Xn5nWfhM+rvCCrutKtLWZppvrS6o
iJ/rURFIYnFjtfDGl5qB13jw56PWlRw8CLCTLfv6gTU/A9jGy8sCQOFbnnsD2MN7LufMvNh3+DDA
1qMXAGpW7QDg4QP9gGvD8wBv/ZkKQRKLG2HtS7D95Xjhs2OuvbfQSASX7tjxwF5wzoOHfP322ucB
aHiOLd1dJc5xrkfZ510wPzSyog0qzqbn1T/3yC9CWNab+chhSSxuiMKHdrH5q35YPMYFoeivHksA
g+C1JShuZOvLcTi7KAZQBG2HaMVxZuRGpW8z/z/cxardsL7dKF29k+VdcWv5Se7t7bHNPcDOtzdR
+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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/initializersExample02_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gJiMkKCcoLCssMjEzMTEzMDAyNTU3LS0uOzs8
/v7/MjM1+/z+6/D43uf0Nzk85Ov1TH6/TX/AT4DAUIHBUoLBU4PCVIPCVITCVoXDV4bDWYfEWojE
XInFXYrFXovGX4zGXovFYo3HYo7HZZDIbpbLc5rNeZ7PfqLRhqjUj67XlbLZmrbborzeqMDgrMPh
u87nwdLpw9Tqxtbr1ODw09/v1uHw3+j04ur16e/37fL57PH49Pf7UYLBYI3GaZPJg6bTiqvVnbnc
oLvdpr/fscfjtsvlvM/nxNXqx9frytnszdvt0t/v2OPx2uXy3efz3+jz4On04+v15u327vP58fX6
6vD3PD5AMzQ1Nzg5REVG+fv9/P3+RElNP0NGTlRXS09RYG1zbX6FZnV7WWVqUlxg9fr8iKCpdYmQ
2+/23O/2uuHtu+HtuN7qvOLurdDbp8jToL/JwOPvkay1weTvf5WcxOXw0Orz0+z00uvz1Oz02e71
3fD23/H34/P45PP47/j7s9jjvOLtmLa/v+Pux+fw1+711u302u/14fL35/X57Pf65fT46fb5/v//
/erV/vfv/Nm1+Nay9dOw/Nm2+ti08tCu7cyr5sam3r+g/Nq307aZx6yRvKOJ/N29/eHE/eTL/ebO
/ejS/urV/enU/erW/uvY/uzZ/uza/u7d/vDi/vPo/vTq//nz//79r5eBnYh0/urXindn//r2//v4
//z6YlRLfGZa//38cVtRTkE7VkhCRzs3PzYz8KaS9KqW9bOh98Cx+Ma4+tnQ++Ha/Obg9KiU86iU
7KOQ5J2Lz5CA9KuY9a2atH5xmWxh9bCe9rmp+Mm9+cu/+dHH+tbN+9zU+97X/fHuNi0rOjEv/e/s
/vTyMCkoKiUlJCEh/Pz8+vr69vb27+/v5+fn3d3d1dXVzc3NxsbGurq6q6urnJyckJCQh4eHg4OD
f39/eHh4cHBwYWFhWFhYSEhIQEBAMzMzMDAwHBwcFxcXEBAQCQkJBAQEAQEB////TC1s/AAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAF4VSURBVHja7L15YF1lnf//Ondf
crPve5O0CRQQEFxgOopAkYpgEfCrNAoo4ozOUp3NmfmOzozjjON8xWWcnx1BlhSVghRZii1U1GLd
oJTSli5Jmn3fb85dzz3n98e5N7lpb9KkTdosn9cfyT33nPPccz7P836ez7MrCoIgLGUsYgJBEBEL
giAiFgRBRCwIImJBEETEgiCIiAVBEBELgohYEAQRsSAIImJBEGaDLcV36zxRvdEQ2wjC4sJtd3r2
nvq1csoEiHWOg1ExlyAsSpSCC588rYjf0T8qlhKExes8X7bzNCK+ojUmZhKExczlL009Pqlh650e
0bAgLG72rZ9JxOtcB8VEgrDIef1DM4jY+aYYSBAWO7Ej04v4vkNiH0FY/PTdMq2IW8NiHkFYAqjJ
B9bk1mnnuFhHEJYA2uB0JbEmxhGEpUBgWnc6IsYRhCUn4iljp3UxzqImpxCAjL1iipWOMa2IhcVN
yS8AuPnMQ7jWOfl5f9fs7llbwRudYvxFjIh4KWW/N4H7ibMJoWfP5OeLZnlPxVYuFtuLiIV54U3g
XWIGQUS89PBWd45MM6b9oq7SVv9kW4YzjUBw4siyVmkZP7mh46bEqLx+MayIWDgnWC/JerId33ua
ek85lVXtf01tZNPIcVOQRb7fArefSDsAkOO7cgv43tc0te6r+5MOXBe4XT25wRMD5uElDvfLF+W0
DptDCez55dYu3xsSBSJi4axwlu4G8D9386kidu0CYCu+kj6gfD8AT3ANQE7hnn2A/6cfnL4BKzd/
t1nU17QDlJQ1wF6440AfkDX05pvApRIHImLhrHjbz8D33u7yp1KevdrXZRQF9/jT+yD9OLwzoBeP
miPgfXtY549abKuD07vpea+A99YG1Dcu6oLCN9+E+qdUtq3ThrBc/DQA+/dLJIiIhbMgZw9k5fya
5jWhU0/GrjlgQOelcCg9jFvFe0KjmysNgFX7cB4COteeFGL8eLCHC3bB9Yd21HWNkTUctHbAHW/u
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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://cahedbegdkagmcjfolhdlechbkeaieki/images/apple/2714.png

iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAQAAAAAYLlVAAAEFklEQVR4Xu3ZW0xcVRQG4H+dQTqA
kRkoFSIImtI2pKXV2tCYmMaMNkao2lDxbhOU0CAEL00orbQqGjUaQAUig2hMaay2PmhjfDBpE++m
1geqhkjTFqkJQ3EYKGWGy8zvUxMyZx85w8DuC9/7nP2vOZe9srYQV5eBq2wpQAI0uW0NS3EH1iEJ
ELKXTb99DgBaHsINqxwvyg4kYbbTvxZq+gc2bnN8iOVElGOabsEtm+QwkhFtLOTVFICNiuXBw3/2
awmwvkjuIqJxiq2a3gJWwwETftVzWst3oCBftsOElGZN34GEKqbA7ETP91oCFGQ5dkKBLaSWAEYF
3TA79cfXWj7FN7mSK6AQbuaMls0o+Ulkw6w3fFTLZpSZ4n5GYMbmvkktAVxlWEVE47nAIS3bcf4y
oxYKbBu8rCWAsR3rFfVfmO7S0hGJg+r6O88FtHREK0uwWVH/xXCHlpZMElbuIRTaz/q0BMjzRDbD
bEjaNXXFshsK7DgzpKUrzvU4VA1IYKpTU1su9YQZu/4ZsB1ArrmxkJuwVlIR4qlQ99B4LPWLhzAZ
nX4HsBUgLytSnluGQrkS5unkspzigSDsqocC3zfVrw6QW8kGuSGqgjuNJ+CFLdkeh0f1/k82AzYC
ZLcZVQARjbtzDg4E47j/7T6frQBSRSjlR8rRZqd+UdY/0w7YCkBYqkvr9o9iDqy32P+GbAaIXJQM
qOU4q/Ea/lfWvYaiflwYf8/2fIBvwZI8l54NaxCHsR8KkZZRv+35wKTXWYMcqKUn1qEGlq4vZhFM
eD7UhTkJcUXms9IMK6FIka8HSpKY+SM2woSVg96YJiQ+74pdshpqTryCB6C04kEqlkevrzvGGREn
0AhLcn9GCRQkSfZCga9yIuYZ0dBny2ukCBbkdTluvmh6eaQAJjw5fGQeUzJOcy8JK2vTqxHF7ZI6
KMhLnIINiiFVxqcogwX6w7eO9GOWjJexHyb8ZnjrvMd0kw2JxUiBWprxJh6eVX+eUSuIxmnZF8eg
cuwvNsGSPJS2bdaPD0gqzA4Nn4xrUOl/2/2Y3AwrLe7vRgIAkH47H4cJR3AAMRDCzLXDOAJrHf5d
gIjrhGyBWb3/jbhnxYGj/BLWKl2lgGuncvnfR95dkFlx5AVjC1JhpdX9LxtgQuJ5TiAmQqil1koL
LHFSlsHsg0DFgo3rx9pwHJaUy/8d3oeYCWHlujXyM1JhG+8bOxZHAGWECnhhE1sv1Sz4iclYJw7C
nl/G9yzKicmlmpQNsg5zYH/4UV5elDMjjsoj8M+1vJQEz2KehJjLtVv5hThh5duZp0JngEUMADjv
dnyMLJj52BRs4RSwyAEAZ77RiFKZ9cSwTz6JfBQ8jzgJYVeSR+7BagBEH34K/sBBLICls+OlAP8B
tZtmpCURnGsAAAAASUVORK5CYII=

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/initializersExample03_2x.png

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
YAAAOpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gJCAhJiIjKCcoLCssMjI0Ly8wOjs9+/z+5ez2
5+32TH6/TX/AT4DAUIHBUoLBU4PCVIPCVITCVoXDV4bDWYfEWojEXInFXYrFXovGXovFYIzGYo7H
aJLJbJXLbZbLbpbLb5fMcJjMcZnNc5rNdpzOeZ7Pep/Qe6DQfqLRi6vWkK/XlbLZmrbbuMzmu87n
wtPpyNfrydjszdvuy9ns0N3u1ODw1uHw3Obz3ufz4ur16vD46e/37PH49Pf7UYLBZpHIapTKg6bT
h6nUnbncoLvdo73epr/fqMHgq8PhscfjtsvlvM/nv9HowtTqwdPpxNXqx9frztzuzdvt0t/v2OPx
2uXy3efz4On04+v17vP58fX6+fv9/P3+RElNP0NGTE9RQkdK9vr8Z3Z8WWVqU11hoL/KhJujd4uS
YG5zTVVYuuHtud/rttvnqs3YvOLulrO9jKavweTvb4GHyOfxzeny0Orz2e713fD23/H36vb6sdXg
v+Pux+fwyejx4fL35/X57Pf68fn7/v//9ti4/vHj/vPn/vjx/Nm1+9i0/Nm2+daz9tSx8tGu7cyr
38Ch58en/Nq4/Ny6/N29/eLG/eXM/ejT/uvX/erW/uza/u3c/vTq//791LaZya2SvKKJrZV/gnBh
cGFV//n1//z6/vr4//38mHhpZk9Hqn5vWUdBOjc27aSQ5p+M9a6b9rSi9bOh9rem9rur98O1+tnQ
+9zT++Ha/Orl9KiU86iU9KmV8aaT25iH0JCAv4V29KuYkmdd9bCedlZO9rWk9ral9rio976v98Cy
+MW4+Ma5+Me6+Mu/+c7D+tTL+9vT+trS+9zU+97X++DZ/fHugFxUUT87Rjc0/vTyMCkoOzAvNiwr
KiQk/v7+/f39+vr69vb28fHx7u7u6enp5ubm4uLi3t7e2dnZ1tbW0dHRz8/PzMzMxsbGv7+/tLS0
o6OjjY2NeXl5cHBwY2NjWFhYSEhIRUVFQEBAHBwcFxcXDw8PCQkJBAQEAQEB////TKuynwAAAQB0
Uk5T////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////AFP3ByUAAJdZSURBVHja7P13fFRHmu+Pv0/n
VisLgYSQULAQFhhHwGAb7PFEh0k2xibN2Hji7nfuzt6w987VZjb87t65M7uzO2HHOJDBaZw9Httj
wGATbAxIWICVUU4tqVudz/n9cbqlFmoJCSSUnvfLL6zuU6f6nOfUp+p5qupUKQqCIExlDGICQRAR
C4IgIhYEQUQsCCJiQRBExIIgiIgFQRARC4KIWBAEEbEgCCJiQRBGginGdxuc3tCpkNhGECYViiMh
d39vjO8HvQCx4VRtUOwlCJNTyMvm7Lr4O+PFIl6zv1kVUwnCJKU+YdH5S7TEN1aKHy0Ik5oVfxj4
+aKOreWiYUGY5Hxwz3AiXl0vGhaEyc77a4cRscUpBhKEyY768dAiXv2x2EcQJj+NDw0p4iSfmEcQ
pgADXOYBQ0xm8aYFYSoQah+qJfaIcQRhKtA1pDst3rQgTAkGTL4cMHdaxpcmMQVLAGg4cqUZ2ZP7
/px3bGSnLCngVIU8gkmENqSIhUlMznYA7r7ijJa80/fnwhGekrud+0XEkxYR8VTB+yB1R8QMgoh4
6vIBpI5ZZndkAxcNVAgiYmFcMCYZgkNoTYk343P3fTQkKVp3f7eG3R598CJqTkR/MiQpnqiRiTib
5uyLuUyJoS55CiJi4bJJu9mxHdY7jw+W4/xrW/cDq+KP+ACSb0rfChUlHYcAlNzrdgEbejsv3XXl
WNqzH9a2hX31+Ut2w4bOox4A022p21lzSB6EiFi4TJYffgFgJ3cPjoav198NP8CaNzVIXr0ToIB1
AKx67TTADoov+Rsp818F2MuXDgGsfq0M2MG6P/YAn3sBePaROnkUImLhslg61wOOL16I2x/r6CaP
u04pfJ5n7z4C1+9kY3utMr9bF+aK11hTrmUlXr8rds7F9QBaNSgr98LaQPt+fl9cC/Nfgw3u5sPs
euD3kPMCVKyz7JZHISIWLo/OP8KXDv8B45LGwQdLO5xA5dq92IB26DgAVQYzwIIS7G+FqKZ9Tm3M
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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.swift.org/swift-book/_images/chessBoard_2x.png

iVBORw0KGgoAAAANSUhEUgAAAcwAAAHMCAMAAABvBWi0AAAACXBIWXMAAAsTAAALEwEAmpwYAAA4
KmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0w
TXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRh
LyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMwNjcgNzkuMTU3NzQ3LCAyMDE1LzAzLzMw
LTIzOjQwOjQyICAgICAgICAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMu
b3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJk
ZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFw
LzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMv
MS4xLyIKICAgICAgICAgICAgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bo
b3Rvc2hvcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNv
bS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5j
b20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0i
aHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0
dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5B
ZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3JUb29sPgogICAg
ICAgICA8eG1wOkNyZWF0ZURhdGU+MjAxNi0wMi0wNFQxMzozMDowOC0wODowMDwveG1wOkNyZWF0
ZURhdGU+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE2LTAyLTA0VDEzOjMxOjM1LTA4OjAw
PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAxNi0wMi0wNFQx
MzozMTozNS0wODowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPGRjOmZvcm1hdD5pbWFn
ZS9wbmc8L2RjOmZvcm1hdD4KICAgICAgICAgPHBob3Rvc2hvcDpDb2xvck1vZGU+MjwvcGhvdG9z
aG9wOkNvbG9yTW9kZT4KICAgICAgICAgPHhtcE1NOkluc3RhbmNlSUQ+eG1wLmlpZDpiMDZmNjQ2
ZS0xOTFiLTQ5NDgtOWIxMS1jNjc3NGMxODRmN2Y8L3htcE1NOkluc3RhbmNlSUQ+CiAgICAgICAg
IDx4bXBNTTpEb2N1bWVudElEPnhtcC5kaWQ6YjA2ZjY0NmUtMTkxYi00OTQ4LTliMTEtYzY3NzRj
MTg0ZjdmPC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVu
dElEPnhtcC5kaWQ6YjA2ZjY0NmUtMTkxYi00OTQ4LTliMTEtYzY3NzRjMTg0ZjdmPC94bXBNTTpP
cmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpIaXN0b3J5PgogICAgICAgICAgICA8
cmRmOlNlcT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+
CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgog
ICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOmIwNmY2NDZlLTE5MWIt
NDk0OC05YjExLWM2Nzc0YzE4NGY3Zjwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAg
ICAgPHN0RXZ0OndoZW4+MjAxNi0wMi0wNFQxMzozMDowOC0wODowMDwvc3RFdnQ6d2hlbj4KICAg
ICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIENDIDIw
MTUgKE1hY2ludG9zaCk8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgIDwvcmRm
OmxpPgogICAgICAgICAgICA8L3JkZjpTZXE+CiAgICAgICAgIDwveG1wTU06SGlzdG9yeT4KICAg
ICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRp
ZmY6WFJlc29sdXRpb24+NzIwMDAwLzEwMDAwPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8
dGlmZjpZUmVzb2x1dGlvbj43MjAwMDAvMTAwMDA8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAg
IDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDxl
eGlmOkNvbG9yU3BhY2U+NjU1MzU8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4
ZWxYRGltZW5zaW9uPjQ2MDwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOlBp
eGVsWURpbWVuc2lvbj40NjA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNj
cmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
PD94cGFja2V0IGVuZD0idyI/Pn50eCQAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAA
OpgAABdvkl/FRgAAAwBQTFRFAAAA////Ix8gKCQlKiYnKSUmMi4vMS0uNTEyKicoKicnOzg4Qj8/
enl5cXBwbWxs+/v7+Pj49vb28vLy8fHx5+fn4eHhgICAfX19d3d3dXV1c3NzcHBwbGxsa2tr////
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKwe0pgAAACB0Uk5T
/////////////////////////////////////////wBcXBvtAAAEV0lEQVR42uzdMW/TQBzG4bu6
pEksMUQMEd//ozFkQIozINEUE4YuqeTK+K0IjvX8JhjuLuSRzx3Qv7UWLaUHXwFMwRRMwYQpmIIp
mIIJU/fS4/VfVr6Pe+vTj/cwX3w591Z1zXpnCqZg6oM/zb725RLs85T8j4WfySc+f17eSZtk0be/
wXzpgp33ySP+Pfk3fP29wJNcs4IJUzAFUzBhCqZgCqZgwhRMwRRMwYQpmIIpmIIJUzAFUzBhCqZg
CqZgwhRMwRRMwYQpmIIpmDAFUzAFUzBhCqZgCqZgwhRM3ah6PSj/9c9tG+zznBz+VJZ3UjQ7/zn5
HQddKaWsrj/kwMD92qQ7Ty2aMz/zk7bJov6UPIeuWe9MwRRMwRRMmIIpmIIJUzAFUzAFE6ZgCqZg
CiZMwRRMwYQpmIIpmIIJUzAFUzAFE6ZgCqZgwhRMwRRMwYQpmIIpmIIJUzAFU9MbGLi/64N9VjVY
tMQp/edk0TpZdChlfOB+3wU775NHPDlo7lP6jzc7yTXrnSmYgimYgglTMAVTMGEKpmAKpmDCFEzB
FEzBhCmYgimYMAVTMAVTMGEKpmAKpmDCFEzBFEyYgimYgimYMAVTMAVTMGEKpmAqaGDgftsG+yxx
dn500iY66RIs6koZH7hfm3Tnqc18dn500jZZ1J+S59A1650pmIIpmIIJUzAFUzBhCqZgCqZgwhRM
wRRMwYQpmIIpmDAFUzAFUzBhCqZgCqZgwhRMwRRMmIIpmIIpmDAFUzAFUzBhCqZganoDA/d3fbDP
qgaLljil/5wsWieLDqWMD9zvu2DnffKIJwfNfUr/8WYnuWa9MwVTMAVTMGEKpmAKJkzBFEzBFEyY
gimYgimYMAVTMAUTpmAKpmAKJkzBFEzBFEyYgimYgglTMAVTMAUTpmAKpmAKJkzBFEwFDQzcb9tg
nyXOzo9O2kQnXYJFXSnjA/drk+48tZnPzo9O2iaL+lPyHLpmvTMFUzAFUzBhCqZgCiZMwRRMwRRM
mIIpmIIpmDAFUzAFE6ZgCqZgCiZMwRRMwRRMmIIpmIIJUzAFUzAFE6ZgCqZgCiZMwRRMTW9g4P6u
D/ZZ1WDREqf0n5NF62TRoZTxgft9F+y8Tx7x5KC5T+k/3uwk16x3pmAKpmAKJkzBFEzBhCmYgimY
gglTMAVTMAUTpmAKpmDCFEzBFEzBhCmYgimYgglTMAVTMGEKpmAKpmDCFEzBFEzBhCmYgqmggYH7
bRvss8TZ+dFJm+ikS7CoK2V84H5t0p2nNvPZ+dFJ22RRf0qeQ9esd6ZgCqZgCiZMwRRMwYQpmIIp
mIIJUzAFUzAFE6ZgCqZgwhRMwRRMwYQpmIIpmIIJUzAFUzBhCqZgCqZgwhRMwRRMwYQpmIKp6Q0M
3H9YBfv8Sg5v6vJO6qOPV9KP92bg/gCm7qg3mK5Z70zB1D/t8cPvYf3Pmnd/mpVrVjAFUzBhCqZg
CqZgwhRM3aQ/AwCvJ2w2/Sr2rwAAAABJRU5ErkJggg==

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

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

------MultipartBoundary--fIJcZ0vHfj94vb49SB7o02IOTYbfp9ml3y0HVrZ2rR------
