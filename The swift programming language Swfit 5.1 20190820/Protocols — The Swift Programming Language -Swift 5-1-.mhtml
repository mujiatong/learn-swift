From: <Saved by Blink>
Snapshot-Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Protocols.html
Subject: =?utf-8?Q?Protocols=20=E2=80=94=20The=20Swift=20Programming=20Language=20?=
 =?utf-8?Q?(Swift=205.1)?=
Date: Tue, 20 Aug 2019 00:58:03 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----"


------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: text/html
Content-ID: <frame-9C591BE0CAA5C51CCB7B775B6C6BFEFC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/LanguageGuide/Protocols.html

<!DOCTYPE html><html class=3D"  ext-strict"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"author" content=3D"Apple Inc.">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width initial-scale=
=3D1">
   =20
    <title>Protocols =E2=80=94 The Swift Programming Language (Swift 5.1)</=
title>
   =20
    <link rel=3D"license" href=3D"https://docs.swift.org/LICENSE.txt">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/application.css">
    <link rel=3D"stylesheet" media=3D"all" href=3D"https://docs.swift.org/s=
wift-book/_static/stylesheets/tspl.css">
    <link rel=3D"shortcut icon" sizes=3D"16x16 24x24 32x32 48x48 64x64" typ=
e=3D"image/vnd.microsoft.icon" href=3D"https://docs.swift.org/favicon.ico">
    <link rel=3D"apple-touch-icon" href=3D"https://docs.swift.org/apple-tou=
ch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://docs.swi=
ft.org/apple-touch-icon-57x57.png">
    <link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://docs.swi=
ft.org/apple-touch-icon-72x72.png">
    <link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://docs.swi=
ft.org/apple-touch-icon-76x76.png">
    <link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://docs.s=
wift.org/apple-touch-icon-114x114.png">
    <link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://docs.s=
wift.org/apple-touch-icon-120x120.png">
    <link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://docs.s=
wift.org/apple-touch-icon-144x144.png">
    <link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://docs.s=
wift.org/apple-touch-icon-152x152.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://docs.s=
wift.org/apple-touch-icon-180x180.png">
    <link rel=3D"mask-icon" href=3D"https://docs.swift.org/assets/images/ic=
on-swift.svg" color=3D"#F05339">=20
  <style>img.chromoji { width:1.2em !important; height:1.2em !important; }.=
chromoji-font, #chromoji-font { font-size:1.2em !important; }</style></head=
>
  <body class=3D" ext-webkit ext-chrome" id=3D"syno-nsc-ext-gen3">


<nav role=3D"navigation">
    <header role=3D"banner">
      <h1 id=3D"logo">
        <a href=3D"https://swift.org/" title=3D"Swift.org" role=3D"img" ari=
a-label=3D"Swift.org">
          Swift.org
        </a>
      </h1>
    </header>

    <div id=3D"menu-toggle" class=3D"menu-toggle open"></div>

    <h2>The Swift Programming Language<div>Swift 5.1</div></h2>

    <ul>
    <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/">Welcome to Swift</a></li>
<li class=3D"toctree-l1 current"><a class=3D"reference internal" href=3D"ht=
tps://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Language Guid=
e</a><ul class=3D"current">
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TheBasics.html">The Basics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/BasicOperators.html">Basic Operators<=
/a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings an=
d Characters</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/CollectionTypes.html">Collection Type=
s</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ControlFlow.html">Control Flow</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Functions.html">Functions</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Closures.html">Closures</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumeration</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures=
 and Classes</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Properties.html">Properties</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Subscripts.html">Subscripts</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Inheritance.html">Inheritance</a></li=
>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitializati=
on</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chain=
ing</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/ErrorHandling.html">Error Handling</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a></li>
<li class=3D"toctree-l2 current"><a class=3D"current reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#">Prot=
ocols</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Generics.html">Generics</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html">Opaque Types</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Auto=
matic Reference Counting</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/MemorySafety.html">Memory Safety</a><=
/li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AccessControl.html">Access Control</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html">Advanced Oper=
ators</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Lan=
guage Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.swift.org/swift-book/RevisionHistory/RevisionHistory.html">Revision Hist=
ory</a></li>
</ul>

    <li class=3D"toctree-l1 return"><a class=3D"reference internal" href=3D=
"https://swift.org/">=E2=86=90 Return to Swift.org</a></li>
    </ul>
</nav>




<main role=3D"main">
    <article class=3D"page">
        <menu id=3D"bashful" type=3D"toolbar">
          <div class=3D"inner">
            <menuitem id=3D"jump_to" class=3D"menu-bar-item closed">
            <span id=3D"jump_to_toggle">On This Page</span>
            <div class=3D"chevron">
                <div class=3D"chevy chevron-left"></div>
                <div class=3D"chevy chevron-right"></div>
            </div>
            <menu type=3D"list" class=3D"details">
                <ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#">Protocols</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID268">Protocol Syntax</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID269">Property Requirements</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID270">Method Requirements</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID271">Mutating Method Requirements</a></li=
>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID272">Initializer Requirements</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID273">Class Implementations of Protocol In=
itializer Requirements</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID274">Failable Initializer Requirements</a=
></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID275">Protocols as Types</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID276">Delegation</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID277">Adding Protocol Conformance with an =
Extension</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID574">Conditionally Conforming to a Protoc=
ol</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID278">Declaring Protocol Adoption with an =
Extension</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID279">Collections of Protocol Types</a></l=
i>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID280">Protocol Inheritance</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID281">Class-Only Protocols</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID282">Protocol Composition</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID283">Checking for Protocol Conformance</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID284">Optional Protocol Requirements</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID521">Protocol Extensions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID529">Providing Default Implementations</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.swift.org/swift-bo=
ok/LanguageGuide/Protocols.html#ID527">Adding Constraints to Protocol Exten=
sions</a></li>
</ul>
</li>
</ul>
</li>
</ul>

            </menu>
            </menuitem>
          </div>
        </menu>

       =20
  <div class=3D"section" id=3D"protocols">
<h1>Protocols<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/Protocols.html#protocols" title=3D"Permalink to this head=
line">=C2=B6</a></h1>
<p>A <em>protocol</em> defines a blueprint of methods, properties, and othe=
r requirements that suit a particular task or piece of functionality. The p=
rotocol can then be <em>adopted</em> by a class, structure, or enumeration =
to provide an actual implementation of those requirements. Any type that sa=
tisfies the requirements of a protocol is said to <em>conform</em> to that =
protocol.</p>
<p>In addition to specifying requirements that conforming types must implem=
ent, you can extend a protocol to implement some of these requirements or t=
o implement additional functionality that conforming types can take advanta=
ge of.</p>
<div class=3D"section" id=3D"ID268">
<h2>Protocol Syntax<a class=3D"headerlink" href=3D"https://docs.swift.org/s=
wift-book/LanguageGuide/Protocols.html#ID268" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>You define protocols in a very similar way to classes, structures, and e=
numerations:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"c">// protocol definition goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>Custom types state that they adopt a particular protocol by placing the =
protocol=E2=80=99s name after the type=E2=80=99s name, separated by a colon=
, as part of their definition. Multiple protocols can be listed, and are se=
parated by commas:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">SomeStructure</span>: <span class=3D"nc">Fir=
stProtocol</span>, <span class=3D"nc">AnotherProtocol</span> {
</li><li>    <span class=3D"c">// structure definition goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>If a class has a superclass, list the superclass name before any protoco=
ls it adopts, followed by a comma:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span>: <span class=3D"nc">SomeSupe=
rclass</span>, <span class=3D"nc">FirstProtocol</span>, <span class=3D"nc">=
AnotherProtocol</span> {
</li><li>    <span class=3D"c">// class definition goes here</span>
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID269">
<h2>Property Requirements<a class=3D"headerlink" href=3D"https://docs.swift=
.org/swift-book/LanguageGuide/Protocols.html#ID269" title=3D"Permalink to t=
his headline">=C2=B6</a></h2>
<p>A protocol can require any conforming type to provide an instance proper=
ty or type property with a particular name and type. The protocol doesn=E2=
=80=99t specify whether the property should be a stored property or a compu=
ted property=E2=80=94it only specifies the required property name and type.=
 The protocol also specifies whether each property must be gettable or gett=
able <em>and</em> settable.</p>
<p>If a protocol requires a property to be gettable and settable, that prop=
erty requirement can=E2=80=99t be fulfilled by a constant stored property o=
r a read-only computed property. If the protocol only requires a property t=
o be gettable, the requirement can be satisfied by any kind of property, an=
d it=E2=80=99s valid for the property to be also settable if this is useful=
 for your own code.</p>
<p>Property requirements are always declared as variable properties, prefix=
ed with the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">var</span></code> keyword. Gettable and settable properties are indicated=
 by writing <code class=3D"docutils literal notranslate"><span class=3D"pre=
">{</span> <span class=3D"pre">get</span> <span class=3D"pre">set</span> <s=
pan class=3D"pre">}</span></code> after their type declaration, and gettabl=
e properties are indicated by writing <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">{</span> <span class=3D"pre">get</span> <span c=
lass=3D"pre">}</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">mustBeSettable=
</span>: <span class=3D"nc">Int</span> { <span class=3D"k">get</span> <span=
 class=3D"k">set</span> }
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">doesNotNeedToB=
eSettable</span>: <span class=3D"nc">Int</span> { <span class=3D"k">get</sp=
an> }
</li><li>}
</li></ol></div></div></div>
<p>Always prefix type property requirements with the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">static</span></code> keyword whe=
n you define them in a protocol. This rule pertains even though type proper=
ty requirements can be prefixed with the <code class=3D"docutils literal no=
translate"><span class=3D"pre">class</span></code> or <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">static</span></code> keyword wh=
en implemented by a class:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">AnotherProtocol</span> {
</li><li>    <span class=3D"k">static</span> <span class=3D"k">var</span> <=
span class=3D"nv">someTypeProperty</span>: <span class=3D"nc">Int</span> { =
<span class=3D"k">get</span> <span class=3D"k">set</span> }
</li><li>}
</li></ol></div></div></div>
<p>Here=E2=80=99s an example of a protocol with a single instance property =
requirement:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">FullyNamed</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">fullName</span=
>: <span class=3D"nc">String</span> { <span class=3D"k">get</span> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Ful=
lyNamed</span></code> protocol requires a conforming type to provide a full=
y qualified name. The protocol doesn=E2=80=99t specify anything else about =
the nature of the conforming type=E2=80=94it only specifies that the type m=
ust be able to provide a full name for itself. The protocol states that any=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">FullyName=
d</span></code> type must have a gettable instance property called <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">fullName</span></c=
ode>, which is of type <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">String</span></code>.</p>
<p>Here=E2=80=99s an example of a simple structure that adopts and conforms=
 to the <code class=3D"docutils literal notranslate"><span class=3D"pre">Fu=
llyNamed</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Person</span>: <span class=3D"nc">FullyNamed=
</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">fullName</span=
>: <span class=3D"nc">String</span>
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">john</span> =3D <s=
pan class=3D"nv">Person</span>(<span class=3D"nv">fullName</span>: <span cl=
ass=3D"s">"John Appleseed"</span>)
</li><li><span class=3D"c">// john.fullName is "John Appleseed"</span>
</li></ol></div></div></div>
<p>This example defines a structure called <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Person</span></code>, which represents a s=
pecific named person. It states that it adopts the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">FullyNamed</span></code> protocol =
as part of the first line of its definition.</p>
<p>Each instance of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Person</span></code> has a single stored property called <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">fullName</span></c=
ode>, which is of type <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">String</span></code>. This matches the single requirement of t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">FullyNa=
med</span></code> protocol, and means that <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Person</span></code> has correctly conform=
ed to the protocol. (Swift reports an error at compile-time if a protocol r=
equirement is not fulfilled.)</p>
<p>Here=E2=80=99s a more complex class, which also adopts and conforms to t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">FullyNa=
med</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Starship</span>: <span class=3D"nc">FullyName=
d</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">prefix</span>:=
 <span class=3D"nc">String</span>?
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">name</span>: =
<span class=3D"nc">String</span>, <span class=3D"nv">prefix</span>: <span c=
lass=3D"nc">String</span>? =3D <span class=3D"k">nil</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">prefix</s=
pan> =3D <span class=3D"nv">prefix</span>
</li><li>    }
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">fullName</span=
>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> (<span class=3D"nv">prefix=
</span> !=3D <span class=3D"k">nil</span> ? <span class=3D"nv">prefix</span=
>! + <span class=3D"s">" "</span> : <span class=3D"s">""</span>) + <span cl=
ass=3D"nv">name</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">ncc1701</span> =3D=
 <span class=3D"nv">Starship</span>(<span class=3D"nv">name</span>: <span c=
lass=3D"s">"Enterprise"</span>, <span class=3D"nv">prefix</span>: <span cla=
ss=3D"s">"USS"</span>)
</li><li><span class=3D"c">// ncc1701.fullName is "USS Enterprise"</span>
</li></ol></div></div></div>
<p>This class implements the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">fullName</span></code> property requirement as a compute=
d read-only property for a starship. Each <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">Starship</span></code> class instance store=
s a mandatory <code class=3D"docutils literal notranslate"><span class=3D"p=
re">name</span></code> and an optional <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">prefix</span></code>. The <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">fullName</span></code> propert=
y uses the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>prefix</span></code> value if it exists, and prepends it to the beginning =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">name</s=
pan></code> to create a full name for the starship.</p>
</div>
<div class=3D"section" id=3D"ID270">
<h2>Method Requirements<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/Protocols.html#ID270" title=3D"Permalink to thi=
s headline">=C2=B6</a></h2>
<p>Protocols can require specific instance methods and type methods to be i=
mplemented by conforming types. These methods are written as part of the pr=
otocol=E2=80=99s definition in exactly the same way as for normal instance =
and type methods, but without curly braces or a method body. Variadic param=
eters are allowed, subject to the same rules as for normal methods. Default=
 values, however, can=E2=80=99t be specified for method parameters within a=
 protocol=E2=80=99s definition.</p>
<p>As with type property requirements, you always prefix type method requir=
ements with the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">static</span></code> keyword when they=E2=80=99re defined in a protoc=
ol. This is true even though type method requirements are prefixed with the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">class</sp=
an></code> or <code class=3D"docutils literal notranslate"><span class=3D"p=
re">static</span></code> keyword when implemented by a class:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"k">static</span> <span class=3D"k">func</span> =
<span class=3D"nv">someTypeMethod</span>()
</li><li>}
</li></ol></div></div></div>
<p>The following example defines a protocol with a single instance method r=
equirement:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">RandomNumberGenerator</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">random</span>=
() -&gt; <span class=3D"nc">Double</span>
</li><li>}
</li></ol></div></div></div>
<p>This protocol, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">RandomNumberGenerator</span></code>, requires any conforming type =
to have an instance method called <code class=3D"docutils literal notransla=
te"><span class=3D"pre">random</span></code>, which returns a <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Double</span></code> =
value whenever it=E2=80=99s called. Although it=E2=80=99s not specified as =
part of the protocol, it=E2=80=99s assumed that this value will be a number=
 from <code class=3D"docutils literal notranslate"><span class=3D"pre">0.0<=
/span></code> up to (but not including) <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">1.0</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Ran=
domNumberGenerator</span></code> protocol doesn=E2=80=99t make any assumpti=
ons about how each random number will be generated=E2=80=94it simply requir=
es the generator to provide a standard way to generate a new random number.=
</p>
<p>Here=E2=80=99s an implementation of a class that adopts and conforms to =
the <code class=3D"docutils literal notranslate"><span class=3D"pre">Random=
NumberGenerator</span></code> protocol. This class implements a pseudorando=
m number generator algorithm known as a <em>linear congruential generator</=
em>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">LinearCongruentialGenerator</span>: <span cla=
ss=3D"nc">RandomNumberGenerator</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">lastRandom</sp=
an> =3D <span class=3D"m">42.0</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">m</span> =3D <=
span class=3D"m">139968.0</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">a</span> =3D <=
span class=3D"m">3877.0</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">c</span> =3D <=
span class=3D"m">29573.0</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">random</span>=
() -&gt; <span class=3D"nc">Double</span> {
</li><li>        <span class=3D"nv">lastRandom</span> =3D ((<span class=3D"=
nv">lastRandom</span> * <span class=3D"nv">a</span> + <span class=3D"nv">c<=
/span>).<span class=3D"nv">truncatingRemainder</span>(<span class=3D"nv">di=
vidingBy</span>:<span class=3D"nv">m</span>))
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">lastRan=
dom</span> / <span class=3D"nv">m</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">generator</span> =
=3D <span class=3D"nv">LinearCongruentialGenerator</span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Here's a random=
 number: </span>\<span class=3D"p">(</span><span class=3D"nv">generator</sp=
an>.<span class=3D"nv">random</span>()<span class=3D"p">)</span><span class=
=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "Here's a random number: 0.37464991998=
17101"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"And another one=
: </span>\<span class=3D"p">(</span><span class=3D"nv">generator</span>.<sp=
an class=3D"nv">random</span>()<span class=3D"p">)</span><span class=3D"s">=
"</span>)
</li><li><span class=3D"c">// Prints "And another one: 0.729023776863283"</=
span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID271">
<h2>Mutating Method Requirements<a class=3D"headerlink" href=3D"https://doc=
s.swift.org/swift-book/LanguageGuide/Protocols.html#ID271" title=3D"Permali=
nk to this headline">=C2=B6</a></h2>
<p>It=E2=80=99s sometimes necessary for a method to modify (or <em>mutate</=
em>) the instance it belongs to. For instance methods on value types (that =
is, structures and enumerations) you place the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">mutating</span></code> keyword before =
a method=E2=80=99s <code class=3D"docutils literal notranslate"><span class=
=3D"pre">func</span></code> keyword to indicate that the method is allowed =
to modify the instance it belongs to and any properties of that instance. T=
his process is described in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/Methods.html#ID239"><span class=3D=
"std std-ref">Modifying Value Types from Within Instance Methods</span></a>=
.</p>
<p>If you define a protocol instance method requirement that is intended to=
 mutate instances of any type that adopts the protocol, mark the method wit=
h the <code class=3D"docutils literal notranslate"><span class=3D"pre">muta=
ting</span></code> keyword as part of the protocol=E2=80=99s definition. Th=
is enables structures and enumerations to adopt the protocol and satisfy th=
at method requirement.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you mark a protocol instance method requirement as <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">mutating</spa=
n></code>, you don=E2=80=99t need to write the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">mutating</span></code> keyword when wr=
iting an implementation of that method for a class. The <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">mutating</span></code> keywor=
d is only used by structures and enumerations.</p>
</div>
<p>The example below defines a protocol called <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Togglable</span></code>, which defines=
 a single instance method requirement called <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">toggle</span></code>. As its name sugges=
ts, the <code class=3D"docutils literal notranslate"><span class=3D"pre">to=
ggle()</span></code> method is intended to toggle or invert the state of an=
y conforming type, typically by modifying a property of that type.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">tog=
gle()</span></code> method is marked with the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">mutating</span></code> keyword as part =
of the <code class=3D"docutils literal notranslate"><span class=3D"pre">Tog=
glable</span></code> protocol definition, to indicate that the method is ex=
pected to mutate the state of a conforming instance when it=E2=80=99s calle=
d:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Togglable</span> {
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">toggle</span>()
</li><li>}
</li></ol></div></div></div>
<p>If you implement the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Togglable</span></code> protocol for a structure or enumerati=
on, that structure or enumeration can conform to the protocol by providing =
an implementation of the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">toggle()</span></code> method that is also marked as <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">mutating</span></=
code>.</p>
<p>The example below defines an enumeration called <code class=3D"docutils =
literal notranslate"><span class=3D"pre">OnOffSwitch</span></code>. This en=
umeration toggles between two states, indicated by the enumeration cases <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">on</span></c=
ode> and <code class=3D"docutils literal notranslate"><span class=3D"pre">o=
ff</span></code>. The enumeration=E2=80=99s <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">toggle</span></code> implementation is ma=
rked as <code class=3D"docutils literal notranslate"><span class=3D"pre">mu=
tating</span></code>, to match the <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Togglable</span></code> protocol=E2=80=99s require=
ments:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">en=
um</span> <span class=3D"nv">OnOffSwitch</span>: <span class=3D"nc">Togglab=
le</span> {
</li><li>    <span class=3D"k">case</span> <span class=3D"nv">off</span>, <=
span class=3D"nv">on</span>
</li><li>    <span class=3D"k">mutating</span> <span class=3D"k">func</span=
> <span class=3D"nv">toggle</span>() {
</li><li>        <span class=3D"k">switch</span> <span class=3D"k">self</sp=
an> {
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">off</spa=
n>:
</li><li>            <span class=3D"k">self</span> =3D .<span class=3D"nv">=
on</span>
</li><li>        <span class=3D"k">case</span> .<span class=3D"nv">on</span=
>:
</li><li>            <span class=3D"k">self</span> =3D .<span class=3D"nv">=
off</span>
</li><li>        }
</li><li>    }
</li><li>}
</li><li><span class=3D"k">var</span> <span class=3D"nv">lightSwitch</span>=
 =3D <span class=3D"nv">OnOffSwitch</span>.<span class=3D"nv">off</span>
</li><li><span class=3D"nv">lightSwitch</span>.<span class=3D"nv">toggle</s=
pan>()
</li><li><span class=3D"c">// lightSwitch is now equal to .on</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID272">
<h2>Initializer Requirements<a class=3D"headerlink" href=3D"https://docs.sw=
ift.org/swift-book/LanguageGuide/Protocols.html#ID272" title=3D"Permalink t=
o this headline">=C2=B6</a></h2>
<p>Protocols can require specific initializers to be implemented by conform=
ing types. You write these initializers as part of the protocol=E2=80=99s d=
efinition in exactly the same way as for normal initializers, but without c=
urly braces or an initializer body:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">someParameter=
</span>: <span class=3D"nc">Int</span>)
</li><li>}
</li></ol></div></div></div>
<div class=3D"section" id=3D"ID273">
<h3>Class Implementations of Protocol Initializer Requirements<a class=3D"h=
eaderlink" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocol=
s.html#ID273" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You can implement a protocol initializer requirement on a conforming cla=
ss as either a designated initializer or a convenience initializer. In both=
 cases, you must mark the initializer implementation with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">required</span></code=
> modifier:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SomeClass</span>: <span class=3D"nc">SomeProt=
ocol</span> {
</li><li>    <span class=3D"k">required</span> <span class=3D"k">init</span=
>(<span class=3D"nv">someParameter</span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"c">// initializer implementation goes here<=
/span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The use of the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">required</span></code> modifier ensures that you provide an explic=
it or inherited implementation of the initializer requirement on all subcla=
sses of the conforming class, such that they also conform to the protocol.<=
/p>
<p>For more information on required initializers, see <a class=3D"reference=
 internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Initiali=
zation.html#ID231"><span class=3D"std std-ref">Required Initializers</span>=
</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">You don=E2=80=99t need to mark protocol initializer imple=
mentations with the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">required</span></code> modifier on classes that are marked with t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">final</=
span></code> modifier, because final classes can=E2=80=99t subclassed. For =
more about the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">final</span></code> modifier, see <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID202"=
><span class=3D"std std-ref">Preventing Overrides</span></a>.</p>
</div>
<p>If a subclass overrides a designated initializer from a superclass, and =
also implements a matching initializer requirement from a protocol, mark th=
e initializer implementation with both the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">required</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">override</span></code> mo=
difiers:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeProtocol</span> {
</li><li>    <span class=3D"k">init</span>()
</li><li>}
</li><li>
</li><li><span class=3D"k">class</span> <span class=3D"nv">SomeSuperClass</=
span> {
</li><li>    <span class=3D"k">init</span>() {
</li><li>        <span class=3D"c">// initializer implementation goes here<=
/span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class=3D"k">class</span> <span class=3D"nv">SomeSubClass</sp=
an>: <span class=3D"nc">SomeSuperClass</span>, <span class=3D"nc">SomeProto=
col</span> {
</li><li>    <span class=3D"c">// "required" from SomeProtocol conformance;=
 "override" from SomeSuperClass</span>
</li><li>    <span class=3D"k">required</span> <span class=3D"k">override</=
span> <span class=3D"k">init</span>() {
</li><li>        <span class=3D"c">// initializer implementation goes here<=
/span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID274">
<h3>Failable Initializer Requirements<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID274" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p>Protocols can define failable initializer requirements for conforming ty=
pes, as defined in <a class=3D"reference internal" href=3D"https://docs.swi=
ft.org/swift-book/LanguageGuide/Initialization.html#ID224"><span class=3D"s=
td std-ref">Failable Initializers</span></a>.</p>
<p>A failable initializer requirement can be satisfied by a failable or non=
failable initializer on a conforming type. A nonfailable initializer requir=
ement can be satisfied by a nonfailable initializer or an implicitly unwrap=
ped failable initializer.</p>
</div>
</div>
<div class=3D"section" id=3D"ID275">
<h2>Protocols as Types<a class=3D"headerlink" href=3D"https://docs.swift.or=
g/swift-book/LanguageGuide/Protocols.html#ID275" title=3D"Permalink to this=
 headline">=C2=B6</a></h2>
<p>Protocols don=E2=80=99t actually implement any functionality themselves.=
 Nonetheless, you can use protocols as a fully fledged types in your code. =
Using a protocol as a type is sometimes called an <em>existential type</em>=
, which comes from the phrase =E2=80=9Cthere exists a type <em>T</em> such =
that <em>T</em> conforms to the protocol=E2=80=9D.</p>
<p>You can use a protocol in many places where other types are allowed, inc=
luding:</p>
<ul class=3D"simple">
<li>As a parameter type or return type in a function, method, or initialize=
r</li>
<li>As the type of a constant, variable, or property</li>
<li>As the type of items in an array, dictionary, or other container</li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Because protocols are types, begin their names with a cap=
ital letter (such as <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">FullyNamed</span></code> and <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">RandomNumberGenerator</span></code>) to match=
 the names of other types in Swift (such as <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Int</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">String</span></code>, and <code =
class=3D"docutils literal notranslate"><span class=3D"pre">Double</span></c=
ode>).</p>
</div>
<p>Here=E2=80=99s an example of a protocol used as a type:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Dice</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">sides</span>: =
<span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">generator</spa=
n>: <span class=3D"nc">RandomNumberGenerator</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">sides</span>:=
 <span class=3D"nc">Int</span>, <span class=3D"nv">generator</span>: <span =
class=3D"nc">RandomNumberGenerator</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">sides</sp=
an> =3D <span class=3D"nv">sides</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">generator=
</span> =3D <span class=3D"nv">generator</span>
</li><li>    }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">roll</span>()=
 -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">Int</sp=
an>(<span class=3D"nv">generator</span>.<span class=3D"nv">random</span>() =
* <span class=3D"nv">Double</span>(<span class=3D"nv">sides</span>)) + <spa=
n class=3D"m">1</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This example defines a new class called <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Dice</span></code>, which represents an <e=
m>n</em>-sided dice for use in a board game. <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">Dice</span></code> instances have an int=
eger property called <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">sides</span></code>, which represents how many sides they have, =
and a property called <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">generator</span></code>, which provides a random number generat=
or from which to create dice roll values.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">gen=
erator</span></code> property is of type <code class=3D"docutils literal no=
translate"><span class=3D"pre">RandomNumberGenerator</span></code>. Therefo=
re, you can set it to an instance of <em>any</em> type that adopts the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">RandomNumberGe=
nerator</span></code> protocol. Nothing else is required of the instance yo=
u assign to this property, except that the instance must adopt the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">RandomNumberGenera=
tor</span></code> protocol. Because its type is <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">RandomNumberGenerator</span></code>, =
code inside the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Dice</span></code> class can only interact with <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">generator</span></code> in ways=
 that apply to all generators that conform to this protocol. That means it =
can=E2=80=99t use any methods or properties that are defined by the underly=
ing type of the generator. However, you can downcast from a protocol type t=
o an underlying type in the same way you can downcast from a superclass to =
a subclass, as discussed in <a class=3D"reference internal" href=3D"https:/=
/docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID341"><span clas=
s=3D"std std-ref">Downcasting</span></a>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">Dice</s=
pan></code> also has an initializer, to set up its initial state. This init=
ializer has a parameter called <code class=3D"docutils literal notranslate"=
><span class=3D"pre">generator</span></code>, which is also of type <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">RandomNumberGener=
ator</span></code>. You can pass a value of any conforming type in to this =
parameter when initializing a new <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Dice</span></code> instance.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">Dice</s=
pan></code> provides one instance method, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">roll</span></code>, which returns an intege=
r value between 1 and the number of sides on the dice. This method calls th=
e generator=E2=80=99s <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">random()</span></code> method to create a new random number bet=
ween <code class=3D"docutils literal notranslate"><span class=3D"pre">0.0</=
span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">1.0</span></code>, and uses this random number to create a dice ro=
ll value within the correct range. Because <code class=3D"docutils literal =
notranslate"><span class=3D"pre">generator</span></code> is known to adopt =
<code class=3D"docutils literal notranslate"><span class=3D"pre">RandomNumb=
erGenerator</span></code>, it=E2=80=99s guaranteed to have a <code class=3D=
"docutils literal notranslate"><span class=3D"pre">random()</span></code> m=
ethod to call.</p>
<p>Here=E2=80=99s how the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Dice</span></code> class can be used to create a six-sided =
dice with a <code class=3D"docutils literal notranslate"><span class=3D"pre=
">LinearCongruentialGenerator</span></code> instance as its random number g=
enerator:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">d6</span> =3D <span class=3D"nv">Dice</span>(<s=
pan class=3D"nv">sides</span>: <span class=3D"m">6</span>, <span class=3D"n=
v">generator</span>: <span class=3D"nv">LinearCongruentialGenerator</span>(=
))
</li><li><span class=3D"k">for</span> <span class=3D"k">_</span> <span clas=
s=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"m">5</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Random dice=
 roll is </span>\<span class=3D"p">(</span><span class=3D"nv">d6</span>.<sp=
an class=3D"nv">roll</span>()<span class=3D"p">)</span><span class=3D"s">"<=
/span>)
</li><li>}
</li><li><span class=3D"c">// Random dice roll is 3</span>
</li><li><span class=3D"c">// Random dice roll is 5</span>
</li><li><span class=3D"c">// Random dice roll is 4</span>
</li><li><span class=3D"c">// Random dice roll is 5</span>
</li><li><span class=3D"c">// Random dice roll is 4</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID276">
<h2>Delegation<a class=3D"headerlink" href=3D"https://docs.swift.org/swift-=
book/LanguageGuide/Protocols.html#ID276" title=3D"Permalink to this headlin=
e">=C2=B6</a></h2>
<p><em>Delegation</em> is a design pattern that enables a class or structur=
e to hand off (or <em>delegate</em>) some of its responsibilities to an ins=
tance of another type. This design pattern is implemented by defining a pro=
tocol that encapsulates the delegated responsibilities, such that a conform=
ing type (known as a delegate) is guaranteed to provide the functionality t=
hat has been delegated. Delegation can be used to respond to a particular a=
ction, or to retrieve data from an external source without needing to know =
the underlying type of that source.</p>
<p>The example below defines two protocols for use with dice-based board ga=
mes:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">DiceGame</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">dice</span>: <=
span class=3D"nc">Dice</span> { <span class=3D"k">get</span> }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">play</span>()
</li><li>}
</li><li><span class=3D"k">protocol</span> <span class=3D"nv">DiceGameDeleg=
ate</span>: <span class=3D"nc">AnyObject</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">gameDidStart<=
/span>(<span class=3D"k">_</span> <span class=3D"nv">game</span>: <span cla=
ss=3D"nc">DiceGame</span>)
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">game</span>(<=
span class=3D"k">_</span> <span class=3D"nv">game</span>: <span class=3D"nc=
">DiceGame</span>, <span class=3D"nv">didStartNewTurnWithDiceRoll</span> <s=
pan class=3D"nv">diceRoll</span>: <span class=3D"nc">Int</span>)
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">gameDidEnd</s=
pan>(<span class=3D"k">_</span> <span class=3D"nv">game</span>: <span class=
=3D"nc">DiceGame</span>)
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Dic=
eGame</span></code> protocol is a protocol that can be adopted by any game =
that involves dice.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Dic=
eGameDelegate</span></code> protocol can be adopted to track the progress o=
f a <code class=3D"docutils literal notranslate"><span class=3D"pre">DiceGa=
me</span></code>. To prevent strong reference cycles, delegates are declare=
d as weak references. For information about weak references, see <a class=
=3D"reference internal" href=3D"https://docs.swift.org/swift-book/LanguageG=
uide/AutomaticReferenceCounting.html#ID51"><span class=3D"std std-ref">Stro=
ng Reference Cycles Between Class Instances</span></a>. Marking the protoco=
l as class-only lets the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">SnakesAndLadders</span></code> class later in this chapter d=
eclare that its delegate must use a weak reference. A class-only protocol i=
s marked by its inheritance from <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">AnyObject</span></code> as discussed in <a class=3D"=
reference internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide=
/Protocols.html#ID281"><span class=3D"std std-ref">Class-Only Protocols</sp=
an></a>.</p>
<p>Here=E2=80=99s a version of the <em>Snakes and Ladders</em> game origina=
lly introduced in <a class=3D"reference internal" href=3D"https://docs.swif=
t.org/swift-book/LanguageGuide/ControlFlow.html"><span class=3D"doc">Contro=
l Flow</span></a>. This version is adapted to use a <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">Dice</span></code> instance for i=
ts dice-rolls; to adopt the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">DiceGame</span></code> protocol; and to notify a <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">DiceGameDelegate</=
span></code> about its progress:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">SnakesAndLadders</span>: <span class=3D"nc">D=
iceGame</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">finalSquare</s=
pan> =3D <span class=3D"m">25</span>
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">dice</span> =
=3D <span class=3D"nv">Dice</span>(<span class=3D"nv">sides</span>: <span c=
lass=3D"m">6</span>, <span class=3D"nv">generator</span>: <span class=3D"nv=
">LinearCongruentialGenerator</span>())
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">square</span> =
=3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">board</span>: =
[<span class=3D"nc">Int</span>]
</li><li>    <span class=3D"k">init</span>() {
</li><li>        <span class=3D"nv">board</span> =3D <span class=3D"nv">Arr=
ay</span>(<span class=3D"nv">repeating</span>: <span class=3D"m">0</span>, =
<span class=3D"nv">count</span>: <span class=3D"nv">finalSquare</span> + <s=
pan class=3D"m">1</span>)
</li><li>        <span class=3D"nv">board</span>[<span class=3D"m">03</span=
>] =3D +<span class=3D"m">08</span>; <span class=3D"nv">board</span>[<span =
class=3D"m">06</span>] =3D +<span class=3D"m">11</span>; <span class=3D"nv"=
>board</span>[<span class=3D"m">09</span>] =3D +<span class=3D"m">09</span>=
; <span class=3D"nv">board</span>[<span class=3D"m">10</span>] =3D +<span c=
lass=3D"m">02</span>
</li><li>        <span class=3D"nv">board</span>[<span class=3D"m">14</span=
>] =3D <span class=3D"m">-10</span>; <span class=3D"nv">board</span>[<span =
class=3D"m">19</span>] =3D <span class=3D"m">-11</span>; <span class=3D"nv"=
>board</span>[<span class=3D"m">22</span>] =3D <span class=3D"m">-02</span>=
; <span class=3D"nv">board</span>[<span class=3D"m">24</span>] =3D <span cl=
ass=3D"m">-08</span>
</li><li>    }
</li><li>    <span class=3D"k">weak</span> <span class=3D"k">var</span> <sp=
an class=3D"nv">delegate</span>: <span class=3D"nc">DiceGameDelegate</span>=
?
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">play</span>()=
 {
</li><li>        <span class=3D"nv">square</span> =3D <span class=3D"m">0</=
span>
</li><li>        <span class=3D"nv">delegate</span>?.<span class=3D"nv">gam=
eDidStart</span>(<span class=3D"k">self</span>)
</li><li>        <span class=3D"nv">gameLoop</span>: <span class=3D"k">whil=
e</span> <span class=3D"nv">square</span> !=3D <span class=3D"nv">finalSqua=
re</span> {
</li><li>            <span class=3D"k">let</span> <span class=3D"nv">diceRo=
ll</span> =3D <span class=3D"nv">dice</span>.<span class=3D"nv">roll</span>=
()
</li><li>            <span class=3D"nv">delegate</span>?.<span class=3D"nv"=
>game</span>(<span class=3D"k">self</span>, <span class=3D"nv">didStartNewT=
urnWithDiceRoll</span>: <span class=3D"nv">diceRoll</span>)
</li><li>            <span class=3D"k">switch</span> <span class=3D"nv">squ=
are</span> + <span class=3D"nv">diceRoll</span> {
</li><li>            <span class=3D"k">case</span> <span class=3D"nv">final=
Square</span>:
</li><li>                <span class=3D"k">break</span> <span class=3D"nv">=
gameLoop</span>
</li><li>            <span class=3D"k">case</span> <span class=3D"k">let</s=
pan> <span class=3D"nv">newSquare</span> <span class=3D"k">where</span> <sp=
an class=3D"nv">newSquare</span> &gt; <span class=3D"nv">finalSquare</span>=
:
</li><li>                <span class=3D"k">continue</span> <span class=3D"n=
v">gameLoop</span>
</li><li>            <span class=3D"k">default</span>:
</li><li>                <span class=3D"nv">square</span> +=3D <span class=
=3D"nv">diceRoll</span>
</li><li>                <span class=3D"nv">square</span> +=3D <span class=
=3D"nv">board</span>[<span class=3D"nv">square</span>]
</li><li>            }
</li><li>        }
</li><li>        <span class=3D"nv">delegate</span>?.<span class=3D"nv">gam=
eDidEnd</span>(<span class=3D"k">self</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>For a description of the <em>Snakes and Ladders</em> gameplay, see <a cl=
ass=3D"reference internal" href=3D"https://docs.swift.org/swift-book/Langua=
geGuide/ControlFlow.html#ID137"><span class=3D"std std-ref">Break</span></a=
>.</p>
<p>This version of the game is wrapped up as a class called <code class=3D"=
docutils literal notranslate"><span class=3D"pre">SnakesAndLadders</span></=
code>, which adopts the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">DiceGame</span></code> protocol. It provides a gettable <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">dice</span></co=
de> property and a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">play()</span></code> method in order to conform to the protocol. (=
The <code class=3D"docutils literal notranslate"><span class=3D"pre">dice</=
span></code> property is declared as a constant property because it doesn=
=E2=80=99t need to change after initialization, and the protocol only requi=
res that it must be gettable.)</p>
<p>The <em>Snakes and Ladders</em> game board setup takes place within the =
class=E2=80=99s <code class=3D"docutils literal notranslate"><span class=3D=
"pre">init()</span></code> initializer. All game logic is moved into the pr=
otocol=E2=80=99s <code class=3D"docutils literal notranslate"><span class=
=3D"pre">play</span></code> method, which uses the protocol=E2=80=99s requi=
red <code class=3D"docutils literal notranslate"><span class=3D"pre">dice</=
span></code> property to provide its dice roll values.</p>
<p>Note that the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">delegate</span></code> property is defined as an <em>optional</em>=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">DiceGameD=
elegate</span></code>, because a delegate isn=E2=80=99t required in order t=
o play the game. Because it=E2=80=99s of an optional type, the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">delegate</span></code=
> property is automatically set to an initial value of <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">nil</span></code>. Thereafter,=
 the game instantiator has the option to set the property to a suitable del=
egate. Because the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">DiceGameDelegate</span></code> protocol is class-only, you can dec=
lare the delegate to be <code class=3D"docutils literal notranslate"><span =
class=3D"pre">weak</span></code> to prevent reference cycles.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">DiceGam=
eDelegate</span></code> provides three methods for tracking the progress of=
 a game. These three methods have been incorporated into the game logic wit=
hin the <code class=3D"docutils literal notranslate"><span class=3D"pre">pl=
ay()</span></code> method above, and are called when a new game starts, a n=
ew turn begins, or the game ends.</p>
<p>Because the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">delegate</span></code> property is an <em>optional</em> <code class=3D=
"docutils literal notranslate"><span class=3D"pre">DiceGameDelegate</span><=
/code>, the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">play()</span></code> method uses optional chaining each time it calls a m=
ethod on the delegate. If the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">delegate</span></code> property is nil, these delegate =
calls fail gracefully and without error. If the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">delegate</span></code> property is no=
n-nil, the delegate methods are called, and are passed the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">SnakesAndLadders</span></c=
ode> instance as a parameter.</p>
<p>This next example shows a class called <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">DiceGameTracker</span></code>, which adopts=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">DiceG=
ameDelegate</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">DiceGameTracker</span>: <span class=3D"nc">Di=
ceGameDelegate</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">numberOfTurns<=
/span> =3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">gameDidStart<=
/span>(<span class=3D"k">_</span> <span class=3D"nv">game</span>: <span cla=
ss=3D"nc">DiceGame</span>) {
</li><li>        <span class=3D"nv">numberOfTurns</span> =3D <span class=3D=
"m">0</span>
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">game</span>=
 <span class=3D"k">is</span> <span class=3D"nc">SnakesAndLadders</span> {
</li><li>            <span class=3D"nv">print</span>(<span class=3D"s">"Sta=
rted a new game of Snakes and Ladders"</span>)
</li><li>        }
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"The gam=
e is using a </span>\<span class=3D"p">(</span><span class=3D"nv">game</spa=
n>.<span class=3D"nv">dice</span>.<span class=3D"nv">sides</span><span clas=
s=3D"p">)</span><span class=3D"s">-sided dice"</span>)
</li><li>    }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">game</span>(<=
span class=3D"k">_</span> <span class=3D"nv">game</span>: <span class=3D"nc=
">DiceGame</span>, <span class=3D"nv">didStartNewTurnWithDiceRoll</span> <s=
pan class=3D"nv">diceRoll</span>: <span class=3D"nc">Int</span>) {
</li><li>        <span class=3D"nv">numberOfTurns</span> +=3D <span class=
=3D"m">1</span>
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"Rolled =
a </span>\<span class=3D"p">(</span><span class=3D"nv">diceRoll</span><span=
 class=3D"p">)</span><span class=3D"s">"</span>)
</li><li>    }
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">gameDidEnd</s=
pan>(<span class=3D"k">_</span> <span class=3D"nv">game</span>: <span class=
=3D"nc">DiceGame</span>) {
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"The gam=
e lasted for </span>\<span class=3D"p">(</span><span class=3D"nv">numberOfT=
urns</span><span class=3D"p">)</span><span class=3D"s"> turns"</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">DiceGam=
eTracker</span></code> implements all three methods required by <code class=
=3D"docutils literal notranslate"><span class=3D"pre">DiceGameDelegate</spa=
n></code>. It uses these methods to keep track of the number of turns a gam=
e has taken. It resets a <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">numberOfTurns</span></code> property to zero when the game s=
tarts, increments it each time a new turn begins, and prints out the total =
number of turns once the game has ended.</p>
<p>The implementation of <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">gameDidStart(_:)</span></code> shown above uses the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">game</span></code>=
 parameter to print some introductory information about the game that is ab=
out to be played. The <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">game</span></code> parameter has a type of <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">DiceGame</span></code>, not <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">SnakesAndLad=
ders</span></code>, and so <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">gameDidStart(_:)</span></code> can access and use only met=
hods and properties that are implemented as part of the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">DiceGame</span></code> protoc=
ol. However, the method is still able to use type casting to query the type=
 of the underlying instance. In this example, it checks whether <code class=
=3D"docutils literal notranslate"><span class=3D"pre">game</span></code> is=
 actually an instance of <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">SnakesAndLadders</span></code> behind the scenes, and prints=
 an appropriate message if so.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">gam=
eDidStart(_:)</span></code> method also accesses the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">dice</span></code> property of t=
he passed <code class=3D"docutils literal notranslate"><span class=3D"pre">=
game</span></code> parameter. Because <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">game</span></code> is known to conform to the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">DiceGame</s=
pan></code> protocol, it=E2=80=99s guaranteed to have a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">dice</span></code> property, =
and so the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>gameDidStart(_:)</span></code> method is able to access and print the dice=
=E2=80=99s <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>sides</span></code> property, regardless of what kind of game is being pla=
yed.</p>
<p>Here=E2=80=99s how <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">DiceGameTracker</span></code> looks in action:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">tracker</span> =3D <span class=3D"nv">DiceGameT=
racker</span>()
</li><li><span class=3D"k">let</span> <span class=3D"nv">game</span> =3D <s=
pan class=3D"nv">SnakesAndLadders</span>()
</li><li><span class=3D"nv">game</span>.<span class=3D"nv">delegate</span> =
=3D <span class=3D"nv">tracker</span>
</li><li><span class=3D"nv">game</span>.<span class=3D"nv">play</span>()
</li><li><span class=3D"c">// Started a new game of Snakes and Ladders</spa=
n>
</li><li><span class=3D"c">// The game is using a 6-sided dice</span>
</li><li><span class=3D"c">// Rolled a 3</span>
</li><li><span class=3D"c">// Rolled a 5</span>
</li><li><span class=3D"c">// Rolled a 4</span>
</li><li><span class=3D"c">// Rolled a 5</span>
</li><li><span class=3D"c">// The game lasted for 4 turns</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID277">
<h2>Adding Protocol Conformance with an Extension<a class=3D"headerlink" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID277"=
 title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>You can extend an existing type to adopt and conform to a new protocol, =
even if you don=E2=80=99t have access to the source code for the existing t=
ype. Extensions can add new properties, methods, and subscripts to an exist=
ing type, and are therefore able to add any requirements that a protocol ma=
y demand. For more about extensions, see <a class=3D"reference internal" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html"><spa=
n class=3D"doc">Extensions</span></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Existing instances of a type automatically adopt and conf=
orm to a protocol when that conformance is added to the instance=E2=80=99s =
type in an extension.</p>
</div>
<p>For example, this protocol, called <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">TextRepresentable</span></code>, can be impleme=
nted by any type that has a way to be represented as text. This might be a =
description of itself, or a text version of its current state:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">TextRepresentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">textualDescrip=
tion</span>: <span class=3D"nc">String</span> { <span class=3D"k">get</span=
> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Dic=
e</span></code> class from above can be extended to adopt and conform to <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">TextRepresen=
table</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Dice</span>: <span class=3D"nc">TextRepre=
sentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">textualDescrip=
tion</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A </spa=
n>\<span class=3D"p">(</span><span class=3D"nv">sides</span><span class=3D"=
p">)</span><span class=3D"s">-sided dice"</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This extension adopts the new protocol in exactly the same way as if <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">Dice</span></=
code> had provided it in its original implementation. The protocol name is =
provided after the type name, separated by a colon, and an implementation o=
f all requirements of the protocol is provided within the extension=E2=80=
=99s curly braces.</p>
<p>Any <code class=3D"docutils literal notranslate"><span class=3D"pre">Dic=
e</span></code> instance can now be treated as <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">TextRepresentable</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">d12</span> =3D <span class=3D"nv">Dice</span>(<=
span class=3D"nv">sides</span>: <span class=3D"m">12</span>, <span class=3D=
"nv">generator</span>: <span class=3D"nv">LinearCongruentialGenerator</span=
>())
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">d12</span>.<spa=
n class=3D"nv">textualDescription</span>)
</li><li><span class=3D"c">// Prints "A 12-sided dice"</span>
</li></ol></div></div></div>
<p>Similarly, the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">SnakesAndLadders</span></code> game class can be extended to adopt=
 and conform to the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">TextRepresentable</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">SnakesAndLadders</span>: <span class=3D"n=
c">TextRepresentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">textualDescrip=
tion</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A game =
of Snakes and Ladders with </span>\<span class=3D"p">(</span><span class=3D=
"nv">finalSquare</span><span class=3D"p">)</span><span class=3D"s"> squares=
"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">game</span>.<sp=
an class=3D"nv">textualDescription</span>)
</li><li><span class=3D"c">// Prints "A game of Snakes and Ladders with 25 =
squares"</span>
</li></ol></div></div></div>
<div class=3D"section" id=3D"ID574">
<h3>Conditionally Conforming to a Protocol<a class=3D"headerlink" href=3D"h=
ttps://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID574" title=
=3D"Permalink to this headline">=C2=B6</a></h3>
<p>A generic type may be able to satisfy the requirements of a protocol onl=
y under certain conditions, such as when the type=E2=80=99s generic paramet=
er conforms to the protocol. You can make a generic type conditionally conf=
orm to a protocol by listing constraints when extending the type. Write the=
se constraints after the name of the protocol you=E2=80=99re adopting by wr=
iting a generic <code class=3D"docutils literal notranslate"><span class=3D=
"pre">where</span></code> clause. For more about generic <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">where</span></code> clauses,=
 see <a class=3D"reference internal" href=3D"https://docs.swift.org/swift-b=
ook/LanguageGuide/Generics.html#ID192"><span class=3D"std std-ref">Generic =
Where Clauses</span></a>.</p>
<p>The following extension makes <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Array</span></code> instances conform to the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">TextRepresentable=
</span></code> protocol whenever they store elements of a type that conform=
s to <code class=3D"docutils literal notranslate"><span class=3D"pre">TextR=
epresentable</span></code>.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Array</span>: <span class=3D"nc">TextRepr=
esentable</span> <span class=3D"k">where</span> <span class=3D"nc">Element<=
/span>: <span class=3D"nc">TextRepresentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">textualDescrip=
tion</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">let</span> <span class=3D"nv">itemsAsTex=
t</span> =3D <span class=3D"k">self</span>.<span class=3D"nv">map</span> { =
<span class=3D"nv">$0</span>.<span class=3D"nv">textualDescription</span> }
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"["</spa=
n> + <span class=3D"nv">itemsAsText</span>.<span class=3D"nv">joined</span>=
(<span class=3D"nv">separator</span>: <span class=3D"s">", "</span>) + <spa=
n class=3D"s">"]"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">myDice</span> =3D =
[<span class=3D"nv">d6</span>, <span class=3D"nv">d12</span>]
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">myDice</span>.<=
span class=3D"nv">textualDescription</span>)
</li><li><span class=3D"c">// Prints "[A 6-sided dice, A 12-sided dice]"</s=
pan>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID278">
<h3>Declaring Protocol Adoption with an Extension<a class=3D"headerlink" hr=
ef=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID278"=
 title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>If a type already conforms to all of the requirements of a protocol, but=
 has not yet stated that it adopts that protocol, you can make it adopt the=
 protocol with an empty extension:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">st=
ruct</span> <span class=3D"nv">Hamster</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">textualDescrip=
tion</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"s">"A hamst=
er named </span>\<span class=3D"p">(</span><span class=3D"nv">name</span><s=
pan class=3D"p">)</span><span class=3D"s">"</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">extension</span> <span class=3D"nc">Hamster</spa=
n>: <span class=3D"nc">TextRepresentable</span> {}
</li></ol></div></div></div>
<p>Instances of <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Hamster</span></code> can now be used wherever <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">TextRepresentable</span></code> =
is the required type:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">simonTheHamster</span> =3D <span class=3D"nv">H=
amster</span>(<span class=3D"nv">name</span>: <span class=3D"s">"Simon"</sp=
an>)
</li><li><span class=3D"k">let</span> <span class=3D"nv">somethingTextRepre=
sentable</span>: <span class=3D"nc">TextRepresentable</span> =3D <span clas=
s=3D"nv">simonTheHamster</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">somethingTextRe=
presentable</span>.<span class=3D"nv">textualDescription</span>)
</li><li><span class=3D"c">// Prints "A hamster named Simon"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Types don=E2=80=99t automatically adopt a protocol just b=
y satisfying its requirements. They must always explicitly declare their ad=
option of the protocol.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"ID279">
<h2>Collections of Protocol Types<a class=3D"headerlink" href=3D"https://do=
cs.swift.org/swift-book/LanguageGuide/Protocols.html#ID279" title=3D"Permal=
ink to this headline">=C2=B6</a></h2>
<p>A protocol can be used as the type to be stored in a collection such as =
an array or a dictionary, as mentioned in <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275=
"><span class=3D"std std-ref">Protocols as Types</span></a>. This example c=
reates an array of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">TextRepresentable</span></code> things:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">things</span>: [<span class=3D"nc">TextRepresen=
table</span>] =3D [<span class=3D"nv">game</span>, <span class=3D"nv">d12</=
span>, <span class=3D"nv">simonTheHamster</span>]
</li></ol></div></div></div>
<p>It=E2=80=99s now possible to iterate over the items in the array, and pr=
int each item=E2=80=99s textual description:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fo=
r</span> <span class=3D"nv">thing</span> <span class=3D"k">in</span> <span =
class=3D"nv">things</span> {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">thing</span=
>.<span class=3D"nv">textualDescription</span>)
</li><li>}
</li><li><span class=3D"c">// A game of Snakes and Ladders with 25 squares<=
/span>
</li><li><span class=3D"c">// A 12-sided dice</span>
</li><li><span class=3D"c">// A hamster named Simon</span>
</li></ol></div></div></div>
<p>Note that the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">thing</span></code> constant is of type <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">TextRepresentable</span></code>. It=
=E2=80=99s not of type <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">Dice</span></code>, or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">DiceGame</span></code>, or <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Hamster</span></code>, even if t=
he actual instance behind the scenes is of one of those types. Nonetheless,=
 because it=E2=80=99s of type <code class=3D"docutils literal notranslate">=
<span class=3D"pre">TextRepresentable</span></code>, and anything that is <=
code class=3D"docutils literal notranslate"><span class=3D"pre">TextReprese=
ntable</span></code> is known to have a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">textualDescription</span></code> property, it=
=E2=80=99s safe to access <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">thing.textualDescription</span></code> each time through th=
e loop.</p>
</div>
<div class=3D"section" id=3D"ID280">
<h2>Protocol Inheritance<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Protocols.html#ID280" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>A protocol can <em>inherit</em> one or more other protocols and can add =
further requirements on top of the requirements it inherits. The syntax for=
 protocol inheritance is similar to the syntax for class inheritance, but w=
ith the option to list multiple inherited protocols, separated by commas:</=
p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">InheritingProtocol</span>: <span class=3D"=
nc">SomeProtocol</span>, <span class=3D"nc">AnotherProtocol</span> {
</li><li>    <span class=3D"c">// protocol definition goes here</span>
</li><li>}
</li></ol></div></div></div>
<p>Here=E2=80=99s an example of a protocol that inherits the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">TextRepresentable</span>=
</code> protocol from above:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">PrettyTextRepresentable</span>: <span clas=
s=3D"nc">TextRepresentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">prettyTextualD=
escription</span>: <span class=3D"nc">String</span> { <span class=3D"k">get=
</span> }
</li><li>}
</li></ol></div></div></div>
<p>This example defines a new protocol, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">PrettyTextRepresentable</span></code>, which =
inherits from <code class=3D"docutils literal notranslate"><span class=3D"p=
re">TextRepresentable</span></code>. Anything that adopts <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">PrettyTextRepresentable</sp=
an></code> must satisfy all of the requirements enforced by <code class=3D"=
docutils literal notranslate"><span class=3D"pre">TextRepresentable</span><=
/code>, <em>plus</em> the additional requirements enforced by <code class=
=3D"docutils literal notranslate"><span class=3D"pre">PrettyTextRepresentab=
le</span></code>. In this example, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">PrettyTextRepresentable</span></code> adds a singl=
e requirement to provide a gettable property called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">prettyTextualDescription</span></=
code> that returns a <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">String</span></code>.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Sna=
kesAndLadders</span></code> class can be extended to adopt and conform to <=
code class=3D"docutils literal notranslate"><span class=3D"pre">PrettyTextR=
epresentable</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">SnakesAndLadders</span>: <span class=3D"n=
c">PrettyTextRepresentable</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">prettyTextualD=
escription</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">var</span> <span class=3D"nv">output</sp=
an> =3D <span class=3D"nv">textualDescription</span> + <span class=3D"s">":=
\n"</span>
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">index</spa=
n> <span class=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"=
nv">finalSquare</span> {
</li><li>            <span class=3D"k">switch</span> <span class=3D"nv">boa=
rd</span>[<span class=3D"nv">index</span>] {
</li><li>            <span class=3D"k">case</span> <span class=3D"k">let</s=
pan> <span class=3D"nv">ladder</span> <span class=3D"k">where</span> <span =
class=3D"nv">ladder</span> &gt; <span class=3D"m">0</span>:
</li><li>                <span class=3D"nv">output</span> +=3D <span class=
=3D"s">"=E2=96=B2 "</span>
</li><li>            <span class=3D"k">case</span> <span class=3D"k">let</s=
pan> <span class=3D"nv">snake</span> <span class=3D"k">where</span> <span c=
lass=3D"nv">snake</span> &lt; <span class=3D"m">0</span>:
</li><li>                <span class=3D"nv">output</span> +=3D <span class=
=3D"s">"=E2=96=BC "</span>
</li><li>            <span class=3D"k">default</span>:
</li><li>                <span class=3D"nv">output</span> +=3D <span class=
=3D"s">"=E2=97=8B "</span>
</li><li>            }
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">output<=
/span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>This extension states that it adopts the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">PrettyTextRepresentable</span></code> pro=
tocol and provides an implementation of the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">prettyTextualDescription</span></code> pr=
operty for the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">SnakesAndLadders</span></code> type. Anything that is <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">PrettyTextRepresentable</s=
pan></code> must also be <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">TextRepresentable</span></code>, and so the implementation o=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">prettyTe=
xtualDescription</span></code> starts by accessing the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">textualDescription</span></cod=
e> property from the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">TextRepresentable</span></code> protocol to begin an output stri=
ng. It appends a colon and a line break, and uses this as the start of its =
pretty text representation. It then iterates through the array of board squ=
ares, and appends a geometric shape to represent the contents of each squar=
e:</p>
<ul class=3D"simple">
<li>If the square=E2=80=99s value is greater than <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">0</span></code>, it=E2=80=99s the b=
ase of a ladder, and is represented by <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">=E2=96=B2</span></code>.</li>
<li>If the square=E2=80=99s value is less than <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">0</span></code>, it=E2=80=99s the head=
 of a snake, and is represented by <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">=E2=96=BC</span></code>.</li>
<li>Otherwise, the square=E2=80=99s value is <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">0</span></code>, and it=E2=80=99s a =E2=
=80=9Cfree=E2=80=9D square, represented by <code class=3D"docutils literal =
notranslate"><span class=3D"pre">=E2=97=8B</span></code>.</li>
</ul>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
ttyTextualDescription</span></code> property can now be used to print a pre=
tty text description of any <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">SnakesAndLadders</span></code> instance:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"nv">game</span>.<span class=3D"nv">prettyTextual=
Description</span>)
</li><li><span class=3D"c">// A game of Snakes and Ladders with 25 squares:=
</span>
</li><li><span class=3D"c">// =E2=97=8B =E2=97=8B =E2=96=B2 =E2=97=8B =E2=
=97=8B =E2=96=B2 =E2=97=8B =E2=97=8B =E2=96=B2 =E2=96=B2 =E2=97=8B =E2=97=
=8B =E2=97=8B =E2=96=BC =E2=97=8B =E2=97=8B =E2=97=8B =E2=97=8B =E2=96=BC =
=E2=97=8B =E2=97=8B =E2=96=BC =E2=97=8B =E2=96=BC =E2=97=8B</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID281">
<h2>Class-Only Protocols<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Protocols.html#ID281" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>You can limit protocol adoption to class types (and not structures or en=
umerations) by adding the <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">AnyObject</span></code> protocol to a protocol=E2=80=99s in=
heritance list.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">SomeClassOnlyProtocol</span>: <span class=
=3D"nc">AnyObject</span>, <span class=3D"nc">SomeInheritedProtocol</span> {
</li><li>    <span class=3D"c">// class-only protocol definition goes here<=
/span>
</li><li>}
</li></ol></div></div></div>
<p>In the example above, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">SomeClassOnlyProtocol</span></code> can only be adopted by c=
lass types. It=E2=80=99s a compile-time error to write a structure or enume=
ration definition that tries to adopt <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">SomeClassOnlyProtocol</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Use a class-only protocol when the behavior defined by th=
at protocol=E2=80=99s requirements assumes or requires that a conforming ty=
pe has reference semantics rather than value semantics. For more about refe=
rence and value semantics, see <a class=3D"reference internal" href=3D"http=
s://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88"=
><span class=3D"std std-ref">Structures and Enumerations Are Value Types</s=
pan></a> and <a class=3D"reference internal" href=3D"https://docs.swift.org=
/swift-book/LanguageGuide/ClassesAndStructures.html#ID89"><span class=3D"st=
d std-ref">Classes Are Reference Types</span></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"ID282">
<h2>Protocol Composition<a class=3D"headerlink" href=3D"https://docs.swift.=
org/swift-book/LanguageGuide/Protocols.html#ID282" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>It can be useful to require a type to conform to multiple protocols at t=
he same time. You can combine multiple protocols into a single requirement =
with a <em>protocol composition</em>. Protocol compositions behave as if yo=
u defined a temporary local protocol that has the combined requirements of =
all protocols in the composition. Protocol compositions don=E2=80=99t defin=
e any new protocol types.</p>
<p>Protocol compositions have the form <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">SomeProtocol</span> <span class=3D"pre">&amp;<=
/span> <span class=3D"pre">AnotherProtocol</span></code>. You can list as m=
any protocols as you need, separating them with ampersands (<code class=3D"=
docutils literal notranslate"><span class=3D"pre">&amp;</span></code>). In =
addition to its list of protocols, a protocol composition can also contain =
one class type, which you can use to specify a required superclass.</p>
<p>Here=E2=80=99s an example that combines two protocols called <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Named</span></code> a=
nd <code class=3D"docutils literal notranslate"><span class=3D"pre">Aged</s=
pan></code> into a single protocol composition requirement on a function pa=
rameter:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">Named</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span> { <span class=3D"k">get</span> }
</li><li>}
</li><li><span class=3D"k">protocol</span> <span class=3D"nv">Aged</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">age</span>: <s=
pan class=3D"nc">Int</span> { <span class=3D"k">get</span> }
</li><li>}
</li><li><span class=3D"k">struct</span> <span class=3D"nv">Person</span>: =
<span class=3D"nc">Named</span>, <span class=3D"nc">Aged</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">age</span>: <s=
pan class=3D"nc">Int</span>
</li><li>}
</li><li><span class=3D"k">func</span> <span class=3D"nv">wishHappyBirthday=
</span>(<span class=3D"nv">to</span> <span class=3D"nv">celebrator</span>: =
<span class=3D"nc">Named</span> &amp; <span class=3D"nc">Aged</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Happy birth=
day, </span>\<span class=3D"p">(</span><span class=3D"nv">celebrator</span>=
.<span class=3D"nv">name</span><span class=3D"p">)</span><span class=3D"s">=
, you're </span>\<span class=3D"p">(</span><span class=3D"nv">celebrator</s=
pan>.<span class=3D"nv">age</span><span class=3D"p">)</span><span class=3D"=
s">!"</span>)
</li><li>}
</li><li><span class=3D"k">let</span> <span class=3D"nv">birthdayPerson</sp=
an> =3D <span class=3D"nv">Person</span>(<span class=3D"nv">name</span>: <s=
pan class=3D"s">"Malcolm"</span>, <span class=3D"nv">age</span>: <span clas=
s=3D"m">21</span>)
</li><li><span class=3D"nv">wishHappyBirthday</span>(<span class=3D"nv">to<=
/span>: <span class=3D"nv">birthdayPerson</span>)
</li><li><span class=3D"c">// Prints "Happy birthday, Malcolm, you're 21!"<=
/span>
</li></ol></div></div></div>
<p>In this example, the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Named</span></code> protocol has a single requirement for a g=
ettable <code class=3D"docutils literal notranslate"><span class=3D"pre">St=
ring</span></code> property called <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">name</span></code>. The <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">Aged</span></code> protocol has a si=
ngle requirement for a gettable <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Int</span></code> property called <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">age</span></code>. Both proto=
cols are adopted by a structure called <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">Person</span></code>.</p>
<p>The example also defines a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">wishHappyBirthday(to:)</span></code> function. The type=
 of the <code class=3D"docutils literal notranslate"><span class=3D"pre">ce=
lebrator</span></code> parameter is <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Named</span> <span class=3D"pre">&amp;</span> <sp=
an class=3D"pre">Aged</span></code>, which means =E2=80=9Cany type that con=
forms to both the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Named</span></code> and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Aged</span></code> protocols.=E2=80=9D It doesn=E2=
=80=99t matter which specific type is passed to the function, as long as it=
 conforms to both of the required protocols.</p>
<p>The example then creates a new <code class=3D"docutils literal notransla=
te"><span class=3D"pre">Person</span></code> instance called <code class=3D=
"docutils literal notranslate"><span class=3D"pre">birthdayPerson</span></c=
ode> and passes this new instance to the <code class=3D"docutils literal no=
translate"><span class=3D"pre">wishHappyBirthday(to:)</span></code> functio=
n. Because <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>Person</span></code> conforms to both protocols, this call is valid, and t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">wishHap=
pyBirthday(to:)</span></code> function can print its birthday greeting.</p>
<p>Here=E2=80=99s an example that combines the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Named</span></code> protocol from the =
previous example with a <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Location</span></code> class:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Location</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">latitude</span=
>: <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">longitude</spa=
n>: <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">latitude</spa=
n>: <span class=3D"nc">Double</span>, <span class=3D"nv">longitude</span>: =
<span class=3D"nc">Double</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">latitude<=
/span> =3D <span class=3D"nv">latitude</span>
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">longitude=
</span> =3D <span class=3D"nv">longitude</span>
</li><li>    }
</li><li>}
</li><li><span class=3D"k">class</span> <span class=3D"nv">City</span>: <sp=
an class=3D"nc">Location</span>, <span class=3D"nc">Named</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">name</span>: <=
span class=3D"nc">String</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">name</span>: =
<span class=3D"nc">String</span>, <span class=3D"nv">latitude</span>: <span=
 class=3D"nc">Double</span>, <span class=3D"nv">longitude</span>: <span cla=
ss=3D"nc">Double</span>) {
</li><li>        <span class=3D"k">self</span>.<span class=3D"nv">name</spa=
n> =3D <span class=3D"nv">name</span>
</li><li>        <span class=3D"k">super</span>.<span class=3D"nv">init</sp=
an>(<span class=3D"nv">latitude</span>: <span class=3D"nv">latitude</span>,=
 <span class=3D"nv">longitude</span>: <span class=3D"nv">longitude</span>)
</li><li>    }
</li><li>}
</li><li><span class=3D"k">func</span> <span class=3D"nv">beginConcert</spa=
n>(<span class=3D"nv">in</span> <span class=3D"nv">location</span>: <span c=
lass=3D"nc">Location</span> &amp; <span class=3D"nc">Named</span>) {
</li><li>    <span class=3D"nv">print</span>(<span class=3D"s">"Hello, </sp=
an>\<span class=3D"p">(</span><span class=3D"nv">location</span>.<span clas=
s=3D"nv">name</span><span class=3D"p">)</span><span class=3D"s">!"</span>)
</li><li>}
</li><li>
</li><li><span class=3D"k">let</span> <span class=3D"nv">seattle</span> =3D=
 <span class=3D"nv">City</span>(<span class=3D"nv">name</span>: <span class=
=3D"s">"Seattle"</span>, <span class=3D"nv">latitude</span>: <span class=3D=
"m">47.6</span>, <span class=3D"nv">longitude</span>: <span class=3D"m">-12=
2.3</span>)
</li><li><span class=3D"nv">beginConcert</span>(<span class=3D"nv">in</span=
>: <span class=3D"nv">seattle</span>)
</li><li><span class=3D"c">// Prints "Hello, Seattle!"</span>
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">beg=
inConcert(in:)</span></code> function takes a parameter of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Location</span> <span=
 class=3D"pre">&amp;</span> <span class=3D"pre">Named</span></code>, which =
means =E2=80=9Cany type that=E2=80=99s a subclass of <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Location</span></code> and that =
conforms to the <code class=3D"docutils literal notranslate"><span class=3D=
"pre">Named</span></code> protocol.=E2=80=9D In this case, <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">City</span></code> satisfi=
es both requirements.</p>
<p>Passing <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>birthdayPerson</span></code> to the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">beginConcert(in:)</span></code> function is inva=
lid because <code class=3D"docutils literal notranslate"><span class=3D"pre=
">Person</span></code> isn=E2=80=99t a subclass of <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Location</span></code>. Likewise, =
if you made a subclass of <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Location</span></code> that didn=E2=80=99t conform to the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">Named</span=
></code> protocol, calling <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">beginConcert(in:)</span></code> with an instance of that t=
ype is also invalid.</p>
</div>
<div class=3D"section" id=3D"ID283">
<h2>Checking for Protocol Conformance<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID283" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h2>
<p>You can use the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">is</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">as</span></code> operators described in <a class=3D"ref=
erence internal" href=3D"https://docs.swift.org/swift-book/LanguageGuide/Ty=
peCasting.html"><span class=3D"doc">Type Casting</span></a> to check for pr=
otocol conformance, and to cast to a specific protocol. Checking for and ca=
sting to a protocol follows exactly the same syntax as checking for and cas=
ting to a type:</p>
<ul class=3D"simple">
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">is=
</span></code> operator returns <code class=3D"docutils literal notranslate=
"><span class=3D"pre">true</span></code> if an instance conforms to a proto=
col and returns <code class=3D"docutils literal notranslate"><span class=3D=
"pre">false</span></code> if it doesn=E2=80=99t.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">as=
?</span></code> version of the downcast operator returns an optional value =
of the protocol=E2=80=99s type, and this value is <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">nil</span></code> if the instance d=
oesn=E2=80=99t conform to that protocol.</li>
<li>The <code class=3D"docutils literal notranslate"><span class=3D"pre">as=
!</span></code> version of the downcast operator forces the downcast to the=
 protocol type and triggers a runtime error if the downcast doesn=E2=80=99t=
 succeed.</li>
</ul>
<p>This example defines a protocol called <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">HasArea</span></code>, with a single proper=
ty requirement of a gettable <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Double</span></code> property called <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">area</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">pr=
otocol</span> <span class=3D"nv">HasArea</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">area</span>: <=
span class=3D"nc">Double</span> { <span class=3D"k">get</span> }
</li><li>}
</li></ol></div></div></div>
<p>Here are two classes, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">Circle</span></code> and <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">Country</span></code>, both of which conform =
to the <code class=3D"docutils literal notranslate"><span class=3D"pre">Has=
Area</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Circle</span>: <span class=3D"nc">HasArea</sp=
an> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">pi</span> =3D =
<span class=3D"m">3.1415927</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">radius</span>:=
 <span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">area</span>: <=
span class=3D"nc">Double</span> { <span class=3D"k">return</span> <span cla=
ss=3D"nv">pi</span> * <span class=3D"nv">radius</span> * <span class=3D"nv"=
>radius</span> }
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">radius</span>=
: <span class=3D"nc">Double</span>) { <span class=3D"k">self</span>.<span c=
lass=3D"nv">radius</span> =3D <span class=3D"nv">radius</span> }
</li><li>}
</li><li><span class=3D"k">class</span> <span class=3D"nv">Country</span>: =
<span class=3D"nc">HasArea</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">area</span>: <=
span class=3D"nc">Double</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">area</span>: =
<span class=3D"nc">Double</span>) { <span class=3D"k">self</span>.<span cla=
ss=3D"nv">area</span> =3D <span class=3D"nv">area</span> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Cir=
cle</span></code> class implements the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">area</span></code> property requirement as a c=
omputed property, based on a stored <code class=3D"docutils literal notrans=
late"><span class=3D"pre">radius</span></code> property. The <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Country</span></code> cl=
ass implements the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">area</span></code> requirement directly as a stored property. Both=
 classes correctly conform to the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">HasArea</span></code> protocol.</p>
<p>Here=E2=80=99s a class called <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">Animal</span></code>, which doesn=E2=80=99t conform =
to the <code class=3D"docutils literal notranslate"><span class=3D"pre">Has=
Area</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Animal</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">legs</span>: <=
span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">init</span>(<span class=3D"nv">legs</span>: =
<span class=3D"nc">Int</span>) { <span class=3D"k">self</span>.<span class=
=3D"nv">legs</span> =3D <span class=3D"nv">legs</span> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Cir=
cle</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Country</span></code> and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">Animal</span></code> classes don=E2=80=99t have a =
shared base class. Nonetheless, they=E2=80=99re all classes, and so instanc=
es of all three types can be used to initialize an array that stores values=
 of type <code class=3D"docutils literal notranslate"><span class=3D"pre">A=
nyObject</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">objects</span>: [<span class=3D"nc">AnyObject</=
span>] =3D [
</li><li>    <span class=3D"nv">Circle</span>(<span class=3D"nv">radius</sp=
an>: <span class=3D"m">2.0</span>),
</li><li>    <span class=3D"nv">Country</span>(<span class=3D"nv">area</spa=
n>: <span class=3D"m">243_610</span>),
</li><li>    <span class=3D"nv">Animal</span>(<span class=3D"nv">legs</span=
>: <span class=3D"m">4</span>)
</li><li>]
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
ects</span></code> array is initialized with an array literal containing a =
<code class=3D"docutils literal notranslate"><span class=3D"pre">Circle</sp=
an></code> instance with a radius of 2 units; a <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">Country</span></code> instance initia=
lized with the surface area of the United Kingdom in square kilometers; and=
 an <code class=3D"docutils literal notranslate"><span class=3D"pre">Animal=
</span></code> instance with four legs.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">obj=
ects</span></code> array can now be iterated, and each object in the array =
can be checked to see if it conforms to the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">HasArea</span></code> protocol:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">fo=
r</span> <span class=3D"nv">object</span> <span class=3D"k">in</span> <span=
 class=3D"nv">objects</span> {
</li><li>    <span class=3D"k">if</span> <span class=3D"k">let</span> <span=
 class=3D"nv">objectWithArea</span> =3D <span class=3D"nv">object</span> <s=
pan class=3D"k">as</span>? <span class=3D"nc">HasArea</span> {
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"Area is=
 </span>\<span class=3D"p">(</span><span class=3D"nv">objectWithArea</span>=
.<span class=3D"nv">area</span><span class=3D"p">)</span><span class=3D"s">=
"</span>)
</li><li>    } <span class=3D"k">else</span> {
</li><li>        <span class=3D"nv">print</span>(<span class=3D"s">"Somethi=
ng that doesn't have an area"</span>)
</li><li>    }
</li><li>}
</li><li><span class=3D"c">// Area is 12.5663708</span>
</li><li><span class=3D"c">// Area is 243610.0</span>
</li><li><span class=3D"c">// Something that doesn't have an area</span>
</li></ol></div></div></div>
<p>Whenever an object in the array conforms to the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">HasArea</span></code> protocol, th=
e optional value returned by the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">as?</span></code> operator is unwrapped with optiona=
l binding into a constant called <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">objectWithArea</span></code>. The <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">objectWithArea</span></code>=
 constant is known to be of type <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">HasArea</span></code>, and so its <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">area</span></code> property =
can be accessed and printed in a type-safe way.</p>
<p>Note that the underlying objects aren=E2=80=99t changed by the casting p=
rocess. They continue to be a <code class=3D"docutils literal notranslate">=
<span class=3D"pre">Circle</span></code>, a <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">Country</span></code> and an <code class=
=3D"docutils literal notranslate"><span class=3D"pre">Animal</span></code>.=
 However, at the point that they=E2=80=99re stored in the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">objectWithArea</span></code=
> constant, they=E2=80=99re only known to be of type <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">HasArea</span></code>, and so on=
ly their <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
rea</span></code> property can be accessed.</p>
</div>
<div class=3D"section" id=3D"ID284">
<h2>Optional Protocol Requirements<a class=3D"headerlink" href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Protocols.html#ID284" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<p>You can define <em>optional requirements</em> for protocols. These requi=
rements don=E2=80=99t have to be implemented by types that conform to the p=
rotocol. Optional requirements are prefixed by the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">optional</span></code> modifier as=
 part of the protocol=E2=80=99s definition. Optional requirements are avail=
able so that you can write code that interoperates with Objective-C. Both t=
he protocol and the optional requirement must be marked with the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">@objc</span></code> =
attribute. Note that <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">@objc</span></code> protocols can be adopted only by classes tha=
t inherit from Objective-C classes or other <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">@objc</span></code> classes. They can=E2=
=80=99t be adopted by structures or enumerations.</p>
<p>When you use a method or property in an optional requirement, its type a=
utomatically becomes an optional. For example, a method of type <code class=
=3D"docutils literal notranslate"><span class=3D"pre">(Int)</span> <span cl=
ass=3D"pre">-&gt;</span> <span class=3D"pre">String</span></code> becomes <=
code class=3D"docutils literal notranslate"><span class=3D"pre">((Int)</spa=
n> <span class=3D"pre">-&gt;</span> <span class=3D"pre">String)?</span></co=
de>. Note that the entire function type is wrapped in the optional, not the=
 method=E2=80=99s return value.</p>
<p>An optional protocol requirement can be called with optional chaining, t=
o account for the possibility that the requirement was not implemented by a=
 type that conforms to the protocol. You check for an implementation of an =
optional method by writing a question mark after the name of the method whe=
n it=E2=80=99s called, such as <code class=3D"docutils literal notranslate"=
><span class=3D"pre">someOptionalMethod?(someArgument)</span></code>. For i=
nformation on optional chaining, see <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">=
<span class=3D"doc">Optional Chaining</span></a>.</p>
<p>The following example defines an integer-counting class called <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">Counter</span></cod=
e>, which uses an external data source to provide its increment amount. Thi=
s data source is defined by the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">CounterDataSource</span></code> protocol, which has t=
wo optional requirements:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">@o=
bjc</span> <span class=3D"k">protocol</span> <span class=3D"nv">CounterData=
Source</span> {
</li><li>    <span class=3D"k">@objc</span> <span class=3D"k">optional</spa=
n> <span class=3D"k">func</span> <span class=3D"nv">increment</span>(<span =
class=3D"nv">forCount</span> <span class=3D"nv">count</span>: <span class=
=3D"nc">Int</span>) -&gt; <span class=3D"nc">Int</span>
</li><li>    <span class=3D"k">@objc</span> <span class=3D"k">optional</spa=
n> <span class=3D"k">var</span> <span class=3D"nv">fixedIncrement</span>: <=
span class=3D"nc">Int</span> { <span class=3D"k">get</span> }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Cou=
nterDataSource</span></code> protocol defines an optional method requiremen=
t called <code class=3D"docutils literal notranslate"><span class=3D"pre">i=
ncrement(forCount:)</span></code> and an optional property requirement call=
ed <code class=3D"docutils literal notranslate"><span class=3D"pre">fixedIn=
crement</span></code>. These requirements define two different ways for dat=
a sources to provide an appropriate increment amount for a <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">Counter</span></code> inst=
ance.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Strictly speaking, you can write a custom class that conf=
orms to <code class=3D"docutils literal notranslate"><span class=3D"pre">Co=
unterDataSource</span></code> without implementing <em>either</em> protocol=
 requirement. They=E2=80=99re both optional, after all. Although technicall=
y allowed, this wouldn=E2=80=99t make for a very good data source.</p>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Cou=
nter</span></code> class, defined below, has an optional <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">dataSource</span></code> pro=
perty of type <code class=3D"docutils literal notranslate"><span class=3D"p=
re">CounterDataSource?</span></code>:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">Counter</span> {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">count</span> =
=3D <span class=3D"m">0</span>
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">dataSource</sp=
an>: <span class=3D"nc">CounterDataSource</span>?
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">increment</sp=
an>() {
</li><li>        <span class=3D"k">if</span> <span class=3D"k">let</span> <=
span class=3D"nv">amount</span> =3D <span class=3D"nv">dataSource</span>?.<=
span class=3D"nv">increment</span>?(<span class=3D"nv">forCount</span>: <sp=
an class=3D"nv">count</span>) {
</li><li>            <span class=3D"nv">count</span> +=3D <span class=3D"nv=
">amount</span>
</li><li>        } <span class=3D"k">else</span> <span class=3D"k">if</span=
> <span class=3D"k">let</span> <span class=3D"nv">amount</span> =3D <span c=
lass=3D"nv">dataSource</span>?.<span class=3D"nv">fixedIncrement</span> {
</li><li>            <span class=3D"nv">count</span> +=3D <span class=3D"nv=
">amount</span>
</li><li>        }
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Cou=
nter</span></code> class stores its current value in a variable property ca=
lled <code class=3D"docutils literal notranslate"><span class=3D"pre">count=
</span></code>. The <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Counter</span></code> class also defines a method called <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">increment</span></=
code>, which increments the <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">count</span></code> property every time the method is cal=
led.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">inc=
rement()</span></code> method first tries to retrieve an increment amount b=
y looking for an implementation of the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">increment(forCount:)</span></code> method on i=
ts data source. The <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">increment()</span></code> method uses optional chaining to try to=
 call <code class=3D"docutils literal notranslate"><span class=3D"pre">incr=
ement(forCount:)</span></code>, and passes the current <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">count</span></code> value as t=
he method=E2=80=99s single argument.</p>
<p>Note that <em>two</em> levels of optional chaining are at play here. Fir=
st, it=E2=80=99s possible that <code class=3D"docutils literal notranslate"=
><span class=3D"pre">dataSource</span></code> may be <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">nil</span></code>, and so <code =
class=3D"docutils literal notranslate"><span class=3D"pre">dataSource</span=
></code> has a question mark after its name to indicate that <code class=3D=
"docutils literal notranslate"><span class=3D"pre">increment(forCount:)</sp=
an></code> should be called only if <code class=3D"docutils literal notrans=
late"><span class=3D"pre">dataSource</span></code> isn=E2=80=99t <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">nil</span></code>. S=
econd, even if <code class=3D"docutils literal notranslate"><span class=3D"=
pre">dataSource</span></code> <em>does</em> exist, there=E2=80=99s no guara=
ntee that it implements <code class=3D"docutils literal notranslate"><span =
class=3D"pre">increment(forCount:)</span></code>, because it=E2=80=99s an o=
ptional requirement. Here, the possibility that <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">increment(forCount:)</span></code> mi=
ght not be implemented is also handled by optional chaining. The call to <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">increment(fo=
rCount:)</span></code> happens only if <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">increment(forCount:)</span></code> exists=E2=
=80=94that is, if it isn=E2=80=99t <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">nil</span></code>. This is why <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">increment(forCount:)</span></=
code> is also written with a question mark after its name.</p>
<p>Because the call to <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">increment(forCount:)</span></code> can fail for either of thes=
e two reasons, the call returns an <em>optional</em> <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Int</span></code> value. This is=
 true even though <code class=3D"docutils literal notranslate"><span class=
=3D"pre">increment(forCount:)</span></code> is defined as returning a non-o=
ptional <code class=3D"docutils literal notranslate"><span class=3D"pre">In=
t</span></code> value in the definition of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">CounterDataSource</span></code>. Even thou=
gh there are two optional chaining operations, one after another, the resul=
t is still wrapped in a single optional. For more information about using m=
ultiple optional chaining operations, see <a class=3D"reference internal" h=
ref=3D"https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.htm=
l#ID252"><span class=3D"std std-ref">Linking Multiple Levels of Chaining</s=
pan></a>.</p>
<p>After calling <code class=3D"docutils literal notranslate"><span class=
=3D"pre">increment(forCount:)</span></code>, the optional <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">Int</span></code> that it r=
eturns is unwrapped into a constant called <code class=3D"docutils literal =
notranslate"><span class=3D"pre">amount</span></code>, using optional bindi=
ng. If the optional <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">Int</span></code> does contain a value=E2=80=94that is, if the de=
legate and method both exist, and the method returned a value=E2=80=94the u=
nwrapped <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
mount</span></code> is added onto the stored <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">count</span></code> property, and increm=
entation is complete.</p>
<p>If it=E2=80=99s <em>not</em> possible to retrieve a value from the <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">increment(forCo=
unt:)</span></code> method=E2=80=94either because <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">dataSource</span></code> is nil, or=
 because the data source doesn=E2=80=99t implement <code class=3D"docutils =
literal notranslate"><span class=3D"pre">increment(forCount:)</span></code>=
=E2=80=94then the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">increment()</span></code> method tries to retrieve a value from th=
e data source=E2=80=99s <code class=3D"docutils literal notranslate"><span =
class=3D"pre">fixedIncrement</span></code> property instead. The <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">fixedIncrement</span=
></code> property is also an optional requirement, so its value is an optio=
nal <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code> value, even though <code class=3D"docutils literal notranslate"=
><span class=3D"pre">fixedIncrement</span></code> is defined as a non-optio=
nal <code class=3D"docutils literal notranslate"><span class=3D"pre">Int</s=
pan></code> property as part of the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">CounterDataSource</span></code> protocol definiti=
on.</p>
<p>Here=E2=80=99s a simple <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">CounterDataSource</span></code> implementation where the d=
ata source returns a constant value of <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">3</span></code> every time it=E2=80=99s querie=
d. It does this by implementing the optional <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">fixedIncrement</span></code> property re=
quirement:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">ThreeSource</span>: <span class=3D"nc">NSObje=
ct</span>, <span class=3D"nc">CounterDataSource</span> {
</li><li>    <span class=3D"k">let</span> <span class=3D"nv">fixedIncrement=
</span> =3D <span class=3D"m">3</span>
</li><li>}
</li></ol></div></div></div>
<p>You can use an instance of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">ThreeSource</span></code> as the data source for a new =
<code class=3D"docutils literal notranslate"><span class=3D"pre">Counter</s=
pan></code> instance:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">va=
r</span> <span class=3D"nv">counter</span> =3D <span class=3D"nv">Counter</=
span>()
</li><li><span class=3D"nv">counter</span>.<span class=3D"nv">dataSource</s=
pan> =3D <span class=3D"nv">ThreeSource</span>()
</li><li><span class=3D"k">for</span> <span class=3D"k">_</span> <span clas=
s=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"m">4</span> {
</li><li>    <span class=3D"nv">counter</span>.<span class=3D"nv">increment=
</span>()
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">counter</sp=
an>.<span class=3D"nv">count</span>)
</li><li>}
</li><li><span class=3D"c">// 3</span>
</li><li><span class=3D"c">// 6</span>
</li><li><span class=3D"c">// 9</span>
</li><li><span class=3D"c">// 12</span>
</li></ol></div></div></div>
<p>The code above creates a new <code class=3D"docutils literal notranslate=
"><span class=3D"pre">Counter</span></code> instance; sets its data source =
to be a new <code class=3D"docutils literal notranslate"><span class=3D"pre=
">ThreeSource</span></code> instance; and calls the counter=E2=80=99s <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">increment()</sp=
an></code> method four times. As expected, the counter=E2=80=99s <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">count</span></code> =
property increases by three each time <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">increment()</span></code> is called.</p>
<p>Here=E2=80=99s a more complex data source called <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">TowardsZeroSource</span></code>, =
which makes a <code class=3D"docutils literal notranslate"><span class=3D"p=
re">Counter</span></code> instance count up or down towards zero from its c=
urrent <code class=3D"docutils literal notranslate"><span class=3D"pre">cou=
nt</span></code> value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">cl=
ass</span> <span class=3D"nv">TowardsZeroSource</span>: <span class=3D"nc">=
NSObject</span>, <span class=3D"nc">CounterDataSource</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">increment</sp=
an>(<span class=3D"nv">forCount</span> <span class=3D"nv">count</span>: <sp=
an class=3D"nc">Int</span>) -&gt; <span class=3D"nc">Int</span> {
</li><li>        <span class=3D"k">if</span> <span class=3D"nv">count</span=
> =3D=3D <span class=3D"m">0</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"m">0</s=
pan>
</li><li>        } <span class=3D"k">else</span> <span class=3D"k">if</span=
> <span class=3D"nv">count</span> &lt; <span class=3D"m">0</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"m">1</s=
pan>
</li><li>        } <span class=3D"k">else</span> {
</li><li>            <span class=3D"k">return</span> <span class=3D"m">-1</=
span>
</li><li>        }
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">Tow=
ardsZeroSource</span></code> class implements the optional <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">increment(forCount:)</span=
></code> method from the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">CounterDataSource</span></code> protocol and uses the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">count</span></co=
de> argument value to work out which direction to count in. If <code class=
=3D"docutils literal notranslate"><span class=3D"pre">count</span></code> i=
s already zero, the method returns <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">0</span></code> to indicate that no further counti=
ng should take place.</p>
<p>You can use an instance of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">TowardsZeroSource</span></code> with the existing <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">Counter</span><=
/code> instance to count from <code class=3D"docutils literal notranslate">=
<span class=3D"pre">-4</span></code> to zero. Once the counter reaches zero=
, no more counting takes place:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">c=
ounter</span>.<span class=3D"nv">count</span> =3D <span class=3D"m">-4</spa=
n>
</li><li><span class=3D"nv">counter</span>.<span class=3D"nv">dataSource</s=
pan> =3D <span class=3D"nv">TowardsZeroSource</span>()
</li><li><span class=3D"k">for</span> <span class=3D"k">_</span> <span clas=
s=3D"k">in</span> <span class=3D"m">1</span>...<span class=3D"m">5</span> {
</li><li>    <span class=3D"nv">counter</span>.<span class=3D"nv">increment=
</span>()
</li><li>    <span class=3D"nv">print</span>(<span class=3D"nv">counter</sp=
an>.<span class=3D"nv">count</span>)
</li><li>}
</li><li><span class=3D"c">// -3</span>
</li><li><span class=3D"c">// -2</span>
</li><li><span class=3D"c">// -1</span>
</li><li><span class=3D"c">// 0</span>
</li><li><span class=3D"c">// 0</span>
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID521">
<h2>Protocol Extensions<a class=3D"headerlink" href=3D"https://docs.swift.o=
rg/swift-book/LanguageGuide/Protocols.html#ID521" title=3D"Permalink to thi=
s headline">=C2=B6</a></h2>
<p>Protocols can be extended to provide method, initializer, subscript, and=
 computed property implementations to conforming types. This allows you to =
define behavior on protocols themselves, rather than in each type=E2=80=99s=
 individual conformance or in a global function.</p>
<p>For example, the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">RandomNumberGenerator</span></code> protocol can be extended to p=
rovide a <code class=3D"docutils literal notranslate"><span class=3D"pre">r=
andomBool()</span></code> method, which uses the result of the required <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">random()</spa=
n></code> method to return a random <code class=3D"docutils literal notrans=
late"><span class=3D"pre">Bool</span></code> value:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">RandomNumberGenerator</span> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">randomBool</s=
pan>() -&gt; <span class=3D"nc">Bool</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">random<=
/span>() &gt; <span class=3D"m">0.5</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>By creating an extension on the protocol, all conforming types automatic=
ally gain this method implementation without any additional modification.</=
p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">generator</span> =3D <span class=3D"nv">LinearC=
ongruentialGenerator</span>()
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"Here's a random=
 number: </span>\<span class=3D"p">(</span><span class=3D"nv">generator</sp=
an>.<span class=3D"nv">random</span>()<span class=3D"p">)</span><span class=
=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "Here's a random number: 0.37464991998=
17101"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"s">"And here's a ra=
ndom Boolean: </span>\<span class=3D"p">(</span><span class=3D"nv">generato=
r</span>.<span class=3D"nv">randomBool</span>()<span class=3D"p">)</span><s=
pan class=3D"s">"</span>)
</li><li><span class=3D"c">// Prints "And here's a random Boolean: true"</s=
pan>
</li></ol></div></div></div>
<p>Protocol extensions can add implementations to conforming types but can=
=E2=80=99t make a protocol extend or inherit from another protocol. Protoco=
l inheritance is always specified in the protocol declaration itself.</p>
<div class=3D"section" id=3D"ID529">
<h3>Providing Default Implementations<a class=3D"headerlink" href=3D"https:=
//docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID529" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p>You can use protocol extensions to provide a default implementation to a=
ny method or computed property requirement of that protocol. If a conformin=
g type provides its own implementation of a required method or property, th=
at implementation will be used instead of the one provided by the extension=
.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Protocol requirements with default implementations provid=
ed by extensions are distinct from optional protocol requirements. Although=
 conforming types don=E2=80=99t have to provide their own implementation of=
 either, requirements with default implementations can be called without op=
tional chaining.</p>
</div>
<p>For example, the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">PrettyTextRepresentable</span></code> protocol, which inherits th=
e <code class=3D"docutils literal notranslate"><span class=3D"pre">TextRepr=
esentable</span></code> protocol can provide a default implementation of it=
s required <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>prettyTextualDescription</span></code> property to simply return the resul=
t of accessing the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">textualDescription</span></code> property:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">PrettyTextRepresentable</span>  {
</li><li>    <span class=3D"k">var</span> <span class=3D"nv">prettyTextualD=
escription</span>: <span class=3D"nc">String</span> {
</li><li>        <span class=3D"k">return</span> <span class=3D"nv">textual=
Description</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
</div>
<div class=3D"section" id=3D"ID527">
<h3>Adding Constraints to Protocol Extensions<a class=3D"headerlink" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID527" t=
itle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>When you define a protocol extension, you can specify constraints that c=
onforming types must satisfy before the methods and properties of the exten=
sion are available. You write these constraints after the name of the proto=
col you=E2=80=99re extending by writing a generic <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">where</span></code> clause. For mor=
e about generic <code class=3D"docutils literal notranslate"><span class=3D=
"pre">where</span></code> clauses, see <a class=3D"reference internal" href=
=3D"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID192"><s=
pan class=3D"std std-ref">Generic Where Clauses</span></a>.</p>
<p>For example, you can define an extension to the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Collection</span></code> protocol =
that applies to any collection whose elements conform to the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">Equatable</span></code> =
protocol. By constraining a collection=E2=80=99s elements to the <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Equatable</span></co=
de> protocol, a part of the standard library, you can use the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">=3D=3D</span></code> =
and <code class=3D"docutils literal notranslate"><span class=3D"pre">!=3D</=
span></code> operators to check for equality and inequality between two ele=
ments.</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">ex=
tension</span> <span class=3D"nc">Collection</span> <span class=3D"k">where=
</span> <span class=3D"nc">Element</span>: <span class=3D"nc">Equatable</sp=
an> {
</li><li>    <span class=3D"k">func</span> <span class=3D"nv">allEqual</spa=
n>() -&gt; <span class=3D"nc">Bool</span> {
</li><li>        <span class=3D"k">for</span> <span class=3D"nv">element</s=
pan> <span class=3D"k">in</span> <span class=3D"k">self</span> {
</li><li>            <span class=3D"k">if</span> <span class=3D"nv">element=
</span> !=3D <span class=3D"k">self</span>.<span class=3D"nv">first</span> =
{
</li><li>                <span class=3D"k">return</span> <span class=3D"k">=
false</span>
</li><li>            }
</li><li>        }
</li><li>        <span class=3D"k">return</span> <span class=3D"k">true</sp=
an>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">all=
Equal()</span></code> method returns <code class=3D"docutils literal notran=
slate"><span class=3D"pre">true</span></code> only if all the elements in t=
he collection are equal.</p>
<p>Consider two arrays of integers, one where all the elements are the same=
, and one where they aren=E2=80=99t:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"k">le=
t</span> <span class=3D"nv">equalNumbers</span> =3D [<span class=3D"m">100<=
/span>, <span class=3D"m">100</span>, <span class=3D"m">100</span>, <span c=
lass=3D"m">100</span>, <span class=3D"m">100</span>]
</li><li><span class=3D"k">let</span> <span class=3D"nv">differentNumbers</=
span> =3D [<span class=3D"m">100</span>, <span class=3D"m">100</span>, <spa=
n class=3D"m">200</span>, <span class=3D"m">100</span>, <span class=3D"m">2=
00</span>]
</li></ol></div></div></div>
<p>Because arrays conform to <code class=3D"docutils literal notranslate"><=
span class=3D"pre">Collection</span></code> and integers conform to <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">Equatable</span><=
/code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">eq=
ualNumbers</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">differentNumbers</span></code> can use the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">allEqual()</span></co=
de> method:</p>
<div class=3D"highlight-swift notranslate"><div class=3D"code-sample"><div =
class=3D"Swift highlight"><ol class=3D"code-lines"><li><span class=3D"nv">p=
rint</span>(<span class=3D"nv">equalNumbers</span>.<span class=3D"nv">allEq=
ual</span>())
</li><li><span class=3D"c">// Prints "true"</span>
</li><li><span class=3D"nv">print</span>(<span class=3D"nv">differentNumber=
s</span>.<span class=3D"nv">allEqual</span>())
</li><li><span class=3D"c">// Prints "false"</span>
</li></ol></div></div></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If a conforming type satisfies the requirements for multi=
ple constrained extensions that provide implementations for the same method=
 or property, Swift uses the implementation corresponding to the most speci=
alized constraints.</p>
</div>
</div>
</div>
</div>


    </article>
    <div class=3D"next_previous">
        <p class=3D"previous"><a href=3D"https://docs.swift.org/swift-book/=
LanguageGuide/Extensions.html">Extensions</a></p>
        <p class=3D"next"><a href=3D"https://docs.swift.org/swift-book/Lang=
uageGuide/Generics.html">Generics</a></p>
    </div>
    <div class=3D"admonition-beta admonition">
        <p class=3D"first admonition-title">Beta Software</p>
        <p>
          This documentation contains preliminary information about an API =
or technology in development.
          This information is subject to change, and software implemented a=
ccording to this documentation should be tested with final operating system=
 software.
        </p>
        <p class=3D"last"><a class=3D"reference external" href=3D"https://d=
eveloper.apple.com/support/beta-software/">Learn more about using Apple's b=
eta software</a></p>
    </div>
</main>


<footer role=3D"contentinfo">
  <aside>
    <a href=3D"https://swift.org/atom.xml" title=3D"Subscribe to Site Updat=
es"><i class=3D"feed">Subscribe</i></a>
    <a href=3D"https://twitter.com/swiftlang" rel=3D"nofollow" title=3D"Fol=
low @SwiftLang on Twitter"><i class=3D"twitter">Twitter</i></a>
  </aside>

  <p class=3D"copyright">Copyright =C2=A9 2019 Apple Inc. All rights reserv=
ed.</p>
  <p class=3D"trademark">Swift and the Swift logo are trademarks of Apple I=
nc.</p>
  <p class=3D"privacy">
    <a href=3D"https://www.apple.com/privacy/privacy-policy/">Privacy Polic=
y</a>
    <a href=3D"https://www.apple.com/legal/privacy/en-ww/cookies/">Cookies<=
/a>
  </p>
</footer>
<div id=3D"jump_to_overlay"></div>

 =20

<span id=3D"buffer-extension-hover-button" style=3D"display: none; position=
: absolute; z-index: 8675309; width: 100px; height: 25px; background-image:=
 url(&quot;chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/=
img/buffer-hover-icon@2x.png&quot;); background-size: 100px 25px; opacity: =
0.9; cursor: pointer;"></span><div id=3D"syno-nsc-ext-comp-1008" class=3D" =
x-tip-invalid" style=3D"position: absolute; z-index: 11000; visibility: hid=
den; display: none;"><div class=3D"x-tip-invalid-tl"><div class=3D"x-tip-in=
valid-tr"><div class=3D"x-tip-invalid-tc"><div class=3D"x-tip-invalid-heade=
r x-unselectable" id=3D"syno-nsc-ext-gen4"><span class=3D"x-tip-invalid-hea=
der-text"></span></div></div></div></div><div class=3D"x-tip-invalid-bwrap"=
 id=3D"syno-nsc-ext-gen5"><div class=3D"x-tip-invalid-ml"><div class=3D"x-t=
ip-invalid-mr"><div class=3D"x-tip-invalid-mc" id=3D"syno-nsc-ext-gen8"><di=
v class=3D"x-tip-invalid-body" id=3D"syno-nsc-ext-gen6" style=3D"height: au=
to;"></div></div></div></div><div class=3D"x-tip-invalid-bl x-panel-nofoote=
r" id=3D"syno-nsc-ext-gen7"><div class=3D"x-tip-invalid-br"><div class=3D"x=
-tip-invalid-bc"></div></div></div></div><div class=3D"x-tip-anchor x-tip-a=
nchor-top" id=3D"syno-nsc-ext-gen9" style=3D"z-index: 11001;"></div></div><=
/body></html>
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/application.css

@charset "utf-8";

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; padding: 0px; }

ul, ol, li, dl, dt, dd, h1, h2, h3, h4, h5, h6, hgroup, p, blockquote, figu=
re, form, fieldset, input, legend, pre, abbr { margin: 0px; padding: 0px; }

pre, code, address, caption, th, figcaption { font-size: 1em; font-weight: =
normal; font-style: normal; }

fieldset, iframe, img { border: none; }

caption, th { text-align: left; }

table { border-collapse: collapse; border-spacing: 0px; }

article, aside, footer, header, nav, main, section, summary, details, hgrou=
p, figure, figcaption { display: block; }

audio, canvas, video, progress { display: inline-block; vertical-align: bas=
eline; }

button { font: inherit; vertical-align: middle; }

.highlight { background: rgb(255, 255, 255); }

.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .=
cs { color: rgb(0, 116, 0); }

.highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .=
kr, .highlight .nb { color: rgb(170, 13, 145); }

.highlight .kt { color: rgb(63, 110, 116); }

.highlight .err { color: rgb(166, 23, 23); }

.highlight .o { font-weight: bold; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .=
mo { color: rgb(28, 0, 207); }

.highlight .s { color: rgb(196, 26, 22); }

.highlight .na { color: teal; }

.highlight .nc { color: rgb(92, 38, 153); }

.highlight .no { color: teal; }

.highlight .ni { color: purple; }

.highlight .ne { color: rgb(153, 0, 0); }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: navy; }

.highlight .nv, .highlight .nf { color: rgb(63, 110, 116); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: teal; }

.highlight .vg { color: teal; }

.highlight .vi { color: teal; }

.highlight .il { color: rgb(0, 153, 153); }

*, ::before, ::after { box-sizing: border-box; }

html, body { height: 100%; }

body { font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; font-size: 18px; line-height: 1.5; col=
or: rgb(51, 51, 51); font-weight: 300; }

body pre, body code { font-family: Menlo, Consolas, Monaco, "Courier New", =
monospace, serif; }

a:link { color: rgb(0, 136, 204); text-decoration: none; }

a:visited { color: rgb(119, 102, 204); }

a:active { color: rgb(0, 136, 204); }

a:hover { color: rgb(0, 136, 204); text-decoration: underline; }

p { margin-bottom: 1.5em; }

h1 { margin-bottom: 0.8em; font-size: 3em; font-weight: 300; line-height: 1=
; }

h1.active + .main-nav { border-top: 1px solid rgb(51, 51, 51); }

h2 { margin-bottom: 0.5em; font-size: 2.5em; font-weight: 300; line-height:=
 1; }

h3 { margin-bottom: 0.5em; font-size: 1.5em; font-weight: 300; line-height:=
 1; }

h4 { margin-bottom: 0.5em; font-size: 1.25em; font-weight: 300; line-height=
: 1.2; }

h5 { margin-bottom: 0.5em; font-size: 1.175em; font-weight: 500; line-heigh=
t: 1.4; }

h6 { margin-bottom: 0.5em; font-size: 1em; font-weight: 700; line-height: 1=
.5; }

pre { font-size: 14px; line-height: 18px; border-left: 3px solid rgb(239, 8=
1, 56); margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; ove=
rflow: scroll; }

p > code, li > code, dd > code, blockquote > code, td > code { color: rgb(0=
, 0, 0); padding: 3px 8px; font-size: 14px; white-space: nowrap; border: 1p=
x solid rgb(229, 229, 229); background-color: rgb(247, 247, 247); }

hr { border-right: none; border-bottom: none; border-left: none; border-ima=
ge: initial; border-top: 1px solid rgb(243, 243, 243); margin: 2em 0px; }

hr:last-child { display: none; }

details { margin-bottom: 2em; }

details :first-child { margin-top: 1.5em; }

cite { display: block; }

cite::before { content: "=E2=80=94 "; }

#logo { text-indent: -9999px; height: 48px; width: 100%; margin-top: 20px; =
margin-bottom: 0.5em; padding-bottom: 10px; }

#logo a { display: block; width: 190px; height: 48px; background-image: url=
("../images/swift.svg"); background-repeat: no-repeat; background-size: 190=
px 48px; background-position-x: -8px; }

nav[role=3D"navigation"] { width: 250px; position: fixed; overflow: scroll;=
 left: 0px; top: 0px; bottom: 0px; background: rgb(250, 250, 250); border-r=
ight: 1px solid rgb(230, 230, 230); padding: 20px 30px; }

nav[role=3D"navigation"] ul { border-top: 1px solid rgb(230, 230, 230); fon=
t-weight: 400; margin-bottom: 30px; list-style: none; }

nav[role=3D"navigation"] ul ul { list-style: none; }

nav[role=3D"navigation"] ul li { border-bottom: 1px solid rgb(230, 230, 230=
); }

nav[role=3D"navigation"] ul li.active { border-bottom: 1px solid rgb(51, 51=
, 51); }

nav[role=3D"navigation"] ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li a:link { color: rgb(51, 51, 51); text-decora=
tion: none; text-transform: uppercase; letter-spacing: 1px; font-size: 12px=
; display: block; padding: 10px; }

nav[role=3D"navigation"] ul li a:visited { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li a:active { font-weight: 700; }

nav[role=3D"navigation"] ul li a:hover { color: rgb(0, 136, 204); }

nav[role=3D"navigation"] ul li ul { margin-bottom: 10px; border-top: none; =
}

nav[role=3D"navigation"] ul li ul li { border-bottom: none; padding: 0.1em;=
 }

nav[role=3D"navigation"] ul li ul li.active { border-bottom: none; }

nav[role=3D"navigation"] ul li ul li.active a { font-weight: 700; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(0, 136, 204); text-de=
coration: none; text-transform: none; letter-spacing: 0px; font-size: 12px;=
 display: block; margin-left: 15px; padding: 0px 0px 3px; border-bottom: no=
ne; font-weight: 300; }

nav[role=3D"navigation"] ul li ul a:hover { text-decoration: underline; }

nav[role=3D"navigation"] h2 { font-size: 0.75em; font-weight: 600; text-tra=
nsform: lowercase; font-variant: small-caps; color: rgb(153, 153, 153); pad=
ding-bottom: 0.5em; }

main { max-width: 798px; min-width: 320px; margin-left: 250px; padding: 35p=
x 30px 0px; min-height: 100%; height: auto !important; }

footer[role=3D"contentinfo"] { background: rgb(51, 51, 51); color: white; p=
adding: 20px 30px; margin-left: 250px; min-height: 74px; }

footer[role=3D"contentinfo"] p { font-size: 0.625em; color: rgb(204, 204, 2=
04); line-height: 1em; margin-bottom: 1em; }

footer[role=3D"contentinfo"] p.privacy a { color: rgb(204, 204, 204); borde=
r-right: 1px solid rgb(204, 204, 204); margin-right: 6px; padding-right: 8p=
x; }

footer[role=3D"contentinfo"] p.privacy a:last-child { border: none; margin:=
 0px; padding: 0px; }

footer[role=3D"contentinfo"] aside { position: relative; width: 100%; max-w=
idth: 700px; margin-right: 68px; }

footer[role=3D"contentinfo"] aside i { width: 16px; height: 16px; backgroun=
d-repeat: no-repeat; background-size: 16px; display: block; margin-left: 1e=
m; float: right; text-indent: -5000em; }

footer[role=3D"contentinfo"] aside i.twitter { background-image: url("../im=
ages/icon-twitter.svg"); }

footer[role=3D"contentinfo"] aside i.feed { background-image: url("../image=
s/icon-feed.svg"); }

article:first-of-type { padding-bottom: 36px; }

article h2 { padding-top: 1.1em; }

article h3 { padding-top: 1em; }

article h4 { padding-top: 1em; border-bottom: 1px solid rgb(243, 243, 243);=
 padding-bottom: 0.5em; }

article h5 { margin-top: 1em; }

article header { width: 100%; display: inline-block; padding-bottom: 3em; }

article header h1 { padding-bottom: 0.125em; }

article header .byline { float: left; font-size: 14px; margin-left: 3em; }

article header .byline img { width: 32px; height: 32px; border-radius: 50%;=
 border: 1px solid rgb(204, 204, 204); position: absolute; margin-right: 0.=
25em; margin-top: -6px; }

article header .byline span { padding-left: 42px; }

article header time { float: left; text-transform: uppercase; font-size: 14=
px; font-weight: 400; color: rgb(170, 170, 170); }

article header .tags { display: block; font-size: 12px; font-weight: 400; m=
argin-top: 0px; }

article:not(:first-of-type) { border-top: 1px solid rgb(230, 230, 230); pad=
ding: 36px 0px; }

article blockquote { border-left: 3px solid rgb(195, 195, 195); margin: 0.5=
em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; color: rgb(51, 51, 51)=
; }

article ul, article ol { padding-left: 40px; margin: 1em 0px; }

article ul ul, article ul ol, article ol ul, article ol ol { margin: 0px; }

article ul { list-style: disc; }

article ul ul { list-style: circle; }

article ul ul ul { list-style: square; }

article ol { list-style: decimal; }

article dl { margin: 2em 0px 1em; }

article dl dt { display: block; }

article dl dd { margin: 0px 0px 1em 1em; }

article table { width: auto; min-width: 68%; margin: 2em auto 3em; border-c=
ollapse: separate; border: 1px solid rgb(227, 227, 227); }

article table th { background: rgb(250, 250, 250); font-weight: 700; text-a=
lign: center; }

article table th, article table td { padding: 0.5em 1.5em; border-bottom: 1=
px solid rgb(243, 243, 243); }

article table th:not(:first-child), article table td:not(:first-child) { bo=
rder-left: 1px solid rgb(243, 243, 243); }

article table tr:last-child td { border-bottom: none; }

article details { margin-top: 0px; cursor: pointer; }

article details summary { padding-bottom: 0.5em; outline: none; margin-top:=
 0px; }

article details summary::after { content: "Expand"; text-transform: lowerca=
se; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204);=
 }

article details[open] summary::after { content: "Collapse"; }

article details[open] :not(summary) { cursor: auto; }

article details.download { margin-top: 0px; cursor: pointer; }

article details.download summary { padding-bottom: 0.5em; outline: none; ma=
rgin-top: 0px; }

article details.download summary::after { content: none; text-transform: lo=
wercase; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, =
204); }

article details.download[open] summary::after { content: none; }

article details.download[open] :not(summary) { cursor: auto; }

article > details { margin-left: 40px; }

article .good pre, article pre.good { background: rgb(230, 255, 229); borde=
r-color: rgb(192, 255, 188); }

article .good pre::before, article pre.good::before { content: "=E2=9C=85";=
 float: right; }

article .bad pre, article pre.bad { background: rgb(249, 226, 228); border-=
color: rgb(246, 183, 190); }

article .bad pre::before, article pre.bad::before { content: "=E2=9B=94=EF=
=B8=8F"; float: right; }

article footer { margin: 4em 0px 0px; padding: 1.5em 0px 1em; border-top: 1=
px solid rgb(243, 243, 243); }

article footer::after { content: ""; display: table; clear: both; }

article footer nav [rel=3D"prev"] { width: 45%; float: left; text-align: le=
ft; }

article footer nav [rel=3D"prev"]::before { content: "=E2=86=90 "; }

article footer nav [rel=3D"next"] { width: 45%; float: right; text-align: r=
ight; }

article footer nav [rel=3D"next"]::after { content: " =E2=86=92"; }

.title a:link, .title a:visited { color: rgb(51, 51, 51); }

.alert, .success, .info, .warning, .danger { border-width: 1px; border-styl=
e: solid; padding: 0.5em; margin: 0.5em 0px 1.5em; }

.alert p:first-child, .success p:first-child, .info p:first-child, .warning=
 p:first-child, .danger p:first-child { margin-top: 0px; }

.alert p:last-child, .success p:last-child, .info p:last-child, .warning p:=
last-child, .danger p:last-child { margin-bottom: 0px; }

.alert code, .success code, .info code, .warning code, .danger code { borde=
r: none; background: transparent; padding: 0px; }

code { white-space: pre-line; }

pre code { white-space: inherit; }

pre code .graphic { font-size: 19px; line-height: 0; }

pre code .commentary, pre code .graphic { font-family: "Helvetica Neue", He=
lvetica, Arial, Verdana, sans-serif; }

@supports (overflow: -webkit-marquee) and (justify-content: inherit) {
  .alert::before, .success::before, .info::before, .warning::before, .dange=
r::before { font-size: 1em; float: left; clear: left; padding-left: 0.125em=
; width: 2em; }
  .alert p, .success p, .info p, .warning p, .danger p { padding-left: 2em;=
 }
  .success::before { content: "=E2=9C=85"; }
  .info::before { content: "=E2=84=B9=EF=B8=8F"; }
  .warning::before { content: "=E2=9A=A0=EF=B8=8F"; }
  .danger::before { content: "=E2=9D=97=EF=B8=8F"; }
}

.success { border-color: rgb(20, 158, 57); background-color: rgb(224, 255, =
232); }

.info { border-color: rgb(19, 156, 254); background-color: rgb(222, 240, 25=
3); }

.warning { border-color: rgb(255, 255, 16); background-color: rgb(255, 255,=
 235); }

.danger { border-color: rgb(213, 0, 27); background-color: rgb(254, 225, 22=
6); }

table.downloads { width: 100%; table-layout: fixed; }

table.downloads th { font-size: 0.75em; }

table.downloads .platform { width: 40%; }

table.downloads .download { width: 60%; }

table.downloads .download a.debug, table.downloads .download a.signature { =
font-size: 0.7em; display: block; }

table.downloads .download a { font-weight: 700; font-size: 1em; }

table.downloads .download a:not([download]) { font-weight: 400; }

table.downloads .download a:not([download])::before { content: "("; }

table.downloads .download a:not([download])::after { content: ")"; }

article input.detail[type=3D"checkbox"] { visibility: hidden; cursor: point=
er; height: 0px; width: 100%; margin-bottom: 2em; display: block; font-size=
: inherit; font-style: inherit; font-weight: inherit; font-family: inherit;=
 position: relative; top: -0.85rem; }

article p + input.detail[type=3D"checkbox"] { margin-top: auto; }

article .screenonly { display: none; }

@media screen {
  article .screenonly { display: inherit; }
  article input.detail[type=3D"checkbox"]::before { content: "=E2=96=B6 "; =
visibility: visible; font-size: 80%; }
  article input.detail[type=3D"checkbox"]::after { text-transform: lowercas=
e; font-variant: small-caps; border-bottom: 1px dashed rgb(204, 204, 204); =
color: rgb(102, 102, 102); content: "More detail"; visibility: visible; }
  article input.detail[type=3D"checkbox"]:checked::before { content: "=E2=
=96=BC "; }
  article input.detail[type=3D"checkbox"]:checked::after { content: "Less d=
etail"; }
  article input.detail[type=3D"checkbox"] + .more { transition: opacity 0.5=
s ease 0s, max-height 0.5s ease 0s; }
  article input.detail[type=3D"checkbox"]:checked + .more { visibility: vis=
ible; max-height: 1000rem; }
  article input.detail[type=3D"checkbox"]:not(:checked) + .more { overflow:=
 hidden; max-height: 0px; opacity: 0; }
}

article .more > p:first-of-type { margin-top: 0px; }

@media only screen and (max-width: 767px) {
  nav[role=3D"navigation"] { width: 100%; position: relative; background: r=
gb(250, 250, 250); border-bottom: 1px solid rgb(230, 230, 230); border-righ=
t: none; padding: 20px 30px; overflow: hidden; }
  nav[role=3D"navigation"].open > * { display: block; }
  nav[role=3D"navigation"] > h2, nav[role=3D"navigation"] ul { display: non=
e; }
  .menu-toggle { float: right; content: " "; height: 20px; width: 20px; bac=
kground-image: url("../images/icon-close.svg"); background-repeat: no-repea=
t; background-position: center center; background-size: 21px 21px; margin-t=
op: -48px; margin-right: 12px; cursor: pointer; }
  .menu-toggle.open { background-image: url("../images/icon-menu.svg"); }
  #logo a { width: 198px; margin: 0px auto; }
  main { max-width: 100%; min-width: 320px; margin-left: 0px; padding: 30px=
 30px 0px; }
  footer[role=3D"contentinfo"] { margin-left: 0px; }
  h1 { font-size: 48px; font-weight: 200; line-height: 1; }
  h2 { font-size: 40px; font-weight: 300; line-height: 1.1; }
  h3 { font-size: 38px; font-weight: 300; line-height: 1.1; }
  h4 { font-size: 36px; font-weight: 300; line-height: 1.2; }
  h5 { font-size: 24px; font-weight: 500; line-height: 1.4; }
  h6 { font-size: 18px; font-weight: 700; line-height: 1.5; }
  table.downloads { border: 1px solid rgb(243, 243, 243); }
  table.downloads, table.downloads thead, table.downloads tbody, table.down=
loads th, table.downloads td, table.downloads tr { display: block !importan=
t; }
  table.downloads thead tr { position: absolute; top: -9999px; left: -9999p=
x; }
  table.downloads tr { border: 1px solid rgb(243, 243, 243); }
  table.downloads td { position: relative; padding-left: 35%; border-left: =
none !important; border-right: none !important; border-bottom: 1px solid rg=
b(243, 243, 243) !important; width: 100% !important; }
  table.downloads td::before { position: absolute; top: 0.5em; left: 0.5em;=
 width: 27.5%; padding-right: 10px; white-space: nowrap; text-align: right;=
 }
  table.downloads td.platform::before { content: "Platform"; }
  table.downloads td.download::before { content: "Download"; top: 1em; }
  table.downloads td.date::before { content: "Date"; }
}

@media only print {
  html body { background: white; font-size: 12pt; padding: 0.5in; }
  html body * { -webkit-print-color-adjust: exact; }
  a { color: black !important; text-decoration: underline !important; }
  h1, h2, h3, h4, h5, h6, p, article > div, pre, table { break-inside: avoi=
d; }
  details:not([open]) { visibility: visible; }
  details:not([open]) summary { display: none !important; }
  details:not([open]) > *, details:not([open]) { display: block; }
  .alert, .success, .info, .warning, .danger { margin: 1.5em 0px; }
  main { width: auto; padding: 0px; border: 0px; color: black; background: =
transparent; margin: 0px; max-width: 100%; min-height: 1in; float: none !im=
portant; }
  nav[role=3D"navigation"] { background: transparent; border: none; width: =
auto; position: static; padding: 0px; }
  nav[role=3D"navigation"] h2, nav[role=3D"navigation"] ul { display: none;=
 }
  nav[role=3D"navigation"] #logo { position: static; margin-bottom: 1.5em; =
}
  nav[role=3D"navigation"] #logo a { background-position: -15px center; }
  footer[role=3D"contentinfo"] { display: none; }
}
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/swift.svg

<?xml version=3D"1.0" encoding=3D"iso-8859-1"?>
<svg version=3D"1.1" id=3D"artwork" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"191.1856px" height=3D"59.3911px" viewBox=3D"0 0 191.1856 59.3911=
" enable-background=3D"new 0 0 191.1856 59.3911"
	 xml:space=3D"preserve">
<g>
	<g>
		<path fill=3D"#F05138" d=3D"M59.3867,16.4501c-0.0035-0.5973-0.0101-1.1943=
-0.0266-1.7923c-0.0348-1.3008-0.1117-2.6134-0.3429-3.9003
			c-0.2346-1.3069-0.6181-2.5221-1.2225-3.7093c-0.5933-1.1659-1.3689-2.2328=
-2.2941-3.158
			c-0.925-0.9252-1.9919-1.7007-3.1583-2.2943c-1.1862-0.6037-2.4016-0.9871-=
3.7073-1.2217
			c-1.2876-0.2319-2.6002-0.3083-3.902-0.3435c-0.5977-0.0162-1.1948-0.023-1=
.7923-0.0267C42.2315,0,41.5218,0,40.8128,0H25.0912
			h-6.5131c-0.7097,0-1.4186,0-2.1276,0.0041c-0.5977,0.0037-1.1955,0.0105-1=
.7923,0.0267
			c-0.3254,0.0088-0.6515,0.0202-0.9778,0.0359c-0.9788,0.0472-1.9591,0.1337=
-2.9243,0.3076
			c-0.9793,0.176-1.9079,0.4356-2.8113,0.8091C7.6437,1.3078,7.3453,1.445,7.=
0487,1.5959C6.1739,2.0411,5.3549,2.5886,4.61,3.2248
			c-0.2483,0.2121-0.4884,0.434-0.7196,0.6653c-0.9254,0.9252-1.701,1.9921-2=
.2943,3.158
			c-0.6044,1.1872-0.9874,2.4024-1.2222,3.7093c-0.231,1.2869-0.3078,2.5995-=
0.3428,3.9003
			c-0.0164,0.598-0.0233,1.195-0.0272,1.7923C-0.0006,17.1594,0,17.8689,0,18=
.5781V28.26v12.5525
			c0,0.7099-0.0007,1.4187,0.0039,2.1286c0.0039,0.5973,0.0108,1.1943,0.0272=
,1.7913c0.035,1.3015,0.1117,2.6144,0.3428,3.9007
			c0.2348,1.3065,0.6178,2.5228,1.2222,3.7097c0.5933,1.1662,1.3689,2.2328,2=
.2943,3.1576c0.9247,0.9256,1.9919,1.701,3.1584,2.295
			c1.1863,0.6038,2.4016,0.9867,3.7076,1.2213c1.2868,0.2316,2.6004,0.3086,3=
.9019,0.3434c0.5968,0.0159,1.1946,0.023,1.7923,0.0264
			c0.709,0.0051,1.4179,0.0044,2.1276,0.0044h22.2346c0.709,0,1.4187,0.0007,=
2.1278-0.0044
			c0.5975-0.0034,1.1946-0.0105,1.7923-0.0264c1.3018-0.0348,2.6144-0.1119,3=
.902-0.3434c1.3057-0.2346,2.5211-0.6176,3.7073-1.2213
			c1.1664-0.5939,2.2333-1.3694,3.1583-2.295c0.9252-0.9249,1.7009-1.9914,2.=
2941-3.1576c0.6044-1.1869,0.9879-2.4031,1.2225-3.7097
			c0.2312-1.2863,0.3081-2.5992,0.3429-3.9007c0.0164-0.597,0.023-1.1939,0.0=
266-1.7913c0.0046-0.7099,0.0042-1.4187,0.0042-2.1286
			V18.5781C59.3909,17.8689,59.3912,17.1594,59.3867,16.4501z"/>
		<path fill=3D"#FFFFFF" d=3D"M47.0606,36.6607c-0.0014-0.0018-0.0027-0.0031=
-0.0042-0.0048c0.0657-0.2236,0.1335-0.4458,0.191-0.675
			c2.465-9.8209-3.5511-21.4319-13.7316-27.5454c4.4613,6.0479,6.4339,13.373=
3,4.6813,19.7795
			c-0.1563,0.5714-0.3442,1.1198-0.5519,1.6528c-0.2254-0.1481-0.5094-0.3162=
-0.8908-0.5265c0,0-10.1269-6.2527-21.1028-17.3122
			c-0.288-0.2903,5.8528,8.777,12.8219,16.1399c-3.2834-1.8427-12.4338-8.500=
4-18.2266-13.8023
			c0.7117,1.1869,1.5582,2.3298,2.4887,3.4301c4.8375,6.1349,11.1462,13.7044=
,18.7043,19.5169
			c-5.3104,3.2498-12.8141,3.5025-20.2852,0.0034c-1.8479-0.866-3.5851-1.910=
9-5.1932-3.0981
			c3.1625,5.0585,8.0332,9.4229,13.9613,11.9708c7.0695,3.0381,14.0996,2.832=
1,19.3356,0.0498l-0.0041,0.006
			c0.0239-0.0151,0.0543-0.0316,0.0791-0.0469c0.215-0.1156,0.4284-0.2333,0.=
6371-0.3576
			c2.5157-1.3058,7.4847-2.6306,10.1518,2.5588C50.7755,49.6699,52.1635,42.9=
395,47.0606,36.6607z"/>
	</g>
</g>
<g id=3D"XMLID_1_">
	<g>
		<path d=3D"M81.9306,38.5423c0.464,4.1203,4.3938,6.8217,9.8514,6.8217c5.18=
54,0,8.9239-2.7014,8.9239-6.4393
			c0-3.2203-2.2648-5.186-7.4776-6.4953l-5.0484-1.2825c-7.259-1.8013-10.534=
-5.0764-10.534-10.4792
			c0-6.6585,5.8127-11.2709,14.0819-11.2709c8.0226,0,13.7263,4.6392,13.9175=
,11.3257h-5.3212
			c-0.4098-4.0935-3.7391-6.6049-8.7327-6.6049c-4.94,0-8.3783,2.5382-8.3783=
,6.2493c0,2.8926,2.129,4.6124,7.3686,5.9497
			l4.2025,1.0913c8.1323,1.9926,11.4615,5.158,11.4615,10.8617c0,7.259-5.758=
5,11.8166-14.9278,11.8166
			c-8.5141,0-14.3268-4.5308-14.7634-11.5437H81.9306z"/>
		<path d=3D"M140.0488,49.4308h-5.3492l-6.2493-21.777h-0.109l-6.2219,21.777=
h-5.3486l-7.9142-28.5183h5.1848l5.5124,22.8963h0.1096
			l6.2219-22.8963h5.021l6.2767,22.8963h0.1096l5.5125-22.8963h5.13L140.0488=
,49.4308z"/>
		<path d=3D"M151.3891,13.2442c0-1.7185,1.4195-3.1106,3.1387-3.1106c1.7466,=
0,3.1655,1.3921,3.1655,3.1106
			c0,1.7197-1.4189,3.1387-3.1655,3.1387C152.8086,16.3829,151.3891,14.964,1=
51.3891,13.2442z M151.9353,20.9125h5.2122v28.5183
			h-5.2122V20.9125z"/>
		<path d=3D"M191.1856,25.1156v-4.2032h-5.5125v-6.8217h-5.1854v6.8217h-4.22=
99h-5.7335v-2.5102
			c0.0268-2.5382,1.0096-3.6027,3.3567-3.6027c0.7636,0,1.5279,0.0828,2.1558=
,0.1912v-4.0935
			c-0.9281-0.1364-1.774-0.218-2.7562-0.218c-5.5673,0-7.9142,2.3202-7.9142,=
7.6414v2.5918h-3.9839v4.2032h3.9839v24.3151h5.1848
			V25.1156h5.7067h4.2299v16.8381c0,5.5125,2.1016,7.6402,7.5592,7.6402c1.17=
35,0,2.5108-0.0816,3.1113-0.218v-4.2567
			c-0.355,0.0548-1.3922,0.1364-1.9651,0.1364c-2.4286,0-3.5199-1.1461-3.519=
9-3.7111V25.1156H191.1856z"/>
	</g>
</g>
</svg>=0A
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-twitter.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M16 3.038c-0.589 0.261-1.221 0.438-1.885 0.517 =
0.678-0.406 1.198-1.050 1.443-1.816-0.634 0.376-1.337 0.649-2.085 0.797-0.5=
99-0.638-1.452-1.037-2.396-1.037-1.813 0-3.283 1.47-3.283 3.282 0 0.257 0.0=
29 0.508 0.085 0.748-2.728-0.137-5.147-1.444-6.766-3.43-0.283 0.485-0.444 1=
.049-0.444 1.65 0 1.139 0.579 2.144 1.46 2.732-0.538-0.017-1.044-0.165-1.48=
7-0.411-0 0.014-0 0.027-0 0.041 0 1.59 1.132 2.917 2.633 3.219-0.275 0.075-=
0.565 0.115-0.865 0.115-0.212 0-0.417-0.021-0.618-0.059 0.418 1.304 1.63 2.=
253 3.066 2.28-1.123 0.88-2.539 1.405-4.077 1.405-0.265 0-0.526-0.016-0.783=
-0.046 1.453 0.931 3.178 1.475 5.032 1.475 6.038 0 9.34-5.002 9.34-9.34 0-0=
.142-0.003-0.284-0.010-0.425 0.642-0.463 1.198-1.041 1.638-1.699z"></path>
</svg>=0A
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-feed.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"ht=
tp://www.w3.org/1999/xlink" width=3D"16" height=3D"16" viewBox=3D"0 0 16 16=
">
<path fill=3D"#cccccc" d=3D"M2.13 11.733c-1.175 0-2.13 0.958-2.13 2.126 0 1=
.174 0.955 2.122 2.13 2.122 1.179 0 2.133-0.948 2.133-2.122-0-1.168-0.954-2=
.126-2.133-2.126zM0.002 5.436v3.067c1.997 0 3.874 0.781 5.288 2.196 1.412 1=
.411 2.192 3.297 2.192 5.302h3.080c-0-5.825-4.739-10.564-10.56-10.564zM0.00=
6 0v3.068c7.122 0 12.918 5.802 12.918 12.932h3.076c0-8.82-7.176-16-15.994-1=
6z"></path>
</svg>=0A
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/stylesheets/tspl.css

@charset "utf-8";

div.Swift { font-family: Menlo, monospace; font-size: 14px; line-height: 18=
px; margin: 0.5em 0.5em 1.5em 10px; padding: 0.5em 0.5em 0.5em 1em; overflo=
w: scroll; }

.code-sample { display: block; font-size: 1.4em; margin-left: 21px; }

.code-sample .code-lines { margin-left: 0px; }

.code-lines { counter-reset: li 0; line-height: 1.6em; list-style: none; ma=
rgin: 0px 0px 0px 20px; padding: 0px; }

.code-sample .code-lines li { list-style-type: none; margin: 0px; padding-r=
ight: 10px; }

.code-lines li { padding-left: 0px; text-indent: -13px; white-space: pre-wr=
ap; border-left: 18px solid transparent; }

.code-lines li::before { color: rgb(128, 128, 128); content: counter(li); c=
ounter-increment: li 1; font-family: Menlo, monospace; font-size: 0.9em; ma=
rgin-right: 16px; user-select: none; }

.code-sample .code-lines li::before { margin-left: -35px; margin-right: 25p=
x; }

.code-sample .code-lines li:nth-child(n+10)::before { margin-left: -43px; m=
argin-right: 25px; }

.code-sample .code-lines li:only-of-type::before { color: rgb(255, 255, 255=
); content: " "; }

.syntax-outline .code-lines li::before { content: " "; }

.syntax-outline .code-lines { line-height: 1.9em; }

.syntax-outline div.Swift { border-color: transparent; }

.code-sample div.Swift { width: 93%; margin-left: 13px; overflow: visible; =
}

div.Swift { border-left: 5px solid rgb(205, 233, 244); padding: 4px 0px 2px=
 10px; margin: 10px 0px 21px; line-height: 22px; }

.highlight .gi { background-color: rgb(233, 239, 250); border: 1px solid rg=
b(196, 212, 241); border-radius: 10px; color: rgb(0, 0, 0); padding: 2px 6p=
x; font-style: inherit; white-space: nowrap; }

.admonition.grammar { border-left: 5px solid rgb(233, 233, 233); margin: 20=
px 0px; padding-left: 15px; padding-bottom: 1px; font-size: 0.8em; backgrou=
nd: transparent; }

.admonition.grammar p.admonition-title { margin-bottom: 8px; }

.admonition.grammar p { margin: 0px; }

.admonition.grammar p.syntax-def { margin-left: 25px; text-indent: -25px; }

.admonition.grammar .syntax-def-name { color: rgb(128, 128, 128); font-styl=
e: italic; font-size: 15px; }

.admonition.grammar .arrow { padding: 0px 6px; }

.admonition.grammar code { border: 0px; background: transparent; font-size:=
 14px; font-weight: bold; padding: 0px 3px; }

.admonition.grammar a.syntax-def { font-size: 15px; font-style: italic; pad=
ding: 0px 3px; }

.admonition.grammar sub { color: rgb(128, 128, 128); font-size: 12px; font-=
style: italic; margin-left: -3px; padding-right: 5px; vertical-align: basel=
ine; position: relative; top: 0.3em; }

.admonition.grammar .syntax-group { margin-bottom: 10px; }

nav[role=3D"navigation"] h2 { font-size: 1em; color: rgb(51, 51, 51); paddi=
ng: 0px 12px 2px; }

nav[role=3D"navigation"] h2 div { font-weight: 100; padding-top: 3px; }

nav[role=3D"navigation"] ul li ul a:link { color: rgb(51, 51, 51); }

nav[role=3D"navigation"] ul li ul a.current:link { font-weight: bold; }

nav[role=3D"navigation"] .return { padding: 0px 0px 20px; text-indent: -18p=
x; margin-left: 18px; }

img.align-center { max-width: 100%; height: auto; margin: 10px auto; displa=
y: block; }

a.headerlink { display: none; }

body { background: rgb(255, 255, 255); }

p { margin-bottom: 1em; }

h2 { font-size: 2em; }

h3 { font-size: 1.4em; }

@media only screen and (max-width: 767px) {
  h2 { font-size: 2em; }
  h3 { font-size: 1.4em; }
}

.playground_link a { font-weight: bold; }

p > code.literal, li > code.literal, dt > code.literal, dd > code.literal {=
 background-color: transparent; border: none; padding: 0px; color: rgb(102,=
 102, 102); font-size: 0.9em; }

a > code.literal { background-color: transparent; border: none; padding: 0p=
x; font-size: 0.9em; }

article table { border-collapse: collapse; border-color: rgb(221, 221, 221)=
; }

article table th, article table td, article table th:not(:first-child), art=
icle table td:not(:first-child) { border-color: rgb(221, 221, 221); }

.admonition { margin-left: 34px; border-left: 5px solid rgb(204, 204, 204);=
 background-color: rgb(245, 245, 245); padding: 10px; font-size: 0.85em; ma=
rgin-bottom: 1.5em; }

.admonition-experiment { border-color: rgb(0, 136, 204); }

.admonition-beta { margin-top: 4em; clear: both; }

.admonition .admonition-title { text-transform: uppercase; color: rgb(119, =
119, 119); font-weight: normal; font-size: 0.7em; letter-spacing: 2px; marg=
in-bottom: 0.7em; }

.admonition .last { margin-bottom: 0px; }

nav[role=3D"navigation"].open ul { display: block; }

#bashful { position: fixed; left: 0px; top: 0px; width: 100%; margin: 0px; =
z-index: 10; }

#bashful .inner { position: relative; width: 100%; max-width: 985px; }

#jump_to { position: absolute; right: 15px; }

#jump_to_toggle { display: block; float: right; background: url("../images/=
icon-caret-sm.svg") right 1px no-repeat rgb(250, 250, 250); border-right: 1=
px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); b=
order-left: 1px solid rgb(230, 230, 230); border-image: initial; border-top=
: none; padding: 5px 27px 5px 8px; color: rgb(51, 51, 51); font: 12px/14px =
Helvetica, Arial, Verdana, sans-serif; letter-spacing: 1px; text-transform:=
 uppercase; height: 25px; cursor: pointer; }

#jump_to.open #jump_to_toggle { border-bottom-color: rgb(250, 250, 250); ba=
ckground-image: url("../images/icon-close-sm.svg"); }

#jump_to menu { display: none; }

#jump_to.open menu { display: block; margin: 24px 0px 0px; padding: 0px 15p=
x; background: rgb(250, 250, 250); border: 1px solid rgb(230, 230, 230); wi=
dth: 300px; font-size: 12px; line-height: 15px; color: rgb(102, 102, 102); =
}

#jump_to menu ul { list-style: none; margin: 15px 0px; padding: 0px; }

#jump_to menu ul ul { margin: 0px; }

#jump_to menu ul a { display: none; }

#jump_to menu ul ul a { display: inline; color: rgb(51, 51, 51); }

#jump_to menu ul ul ul { display: none; padding-left: 15px; margin-bottom: =
10px; }

#jump_to menu ul ul ul ul { display: none; }

#jump_to menu ul ul li { margin: 6px 0px; }

#jump_to_overlay { position: fixed; display: none; width: 100%; height: 100=
%; top: 0px; left: 0px; background-color: transparent; z-index: 5; cursor: =
default; }

.next_previous p { display: inline; margin: 0px; }

.next_previous .previous a { float: left; padding: 0px 25px; background: ur=
l("../images/icon-next_previous.svg") 0px 3px no-repeat; display: block; }

.next_previous .next a { float: right; padding: 0px 25px; background: url("=
../images/icon-next_previous.svg") right -18px no-repeat; display: block; }

footer { margin-top: 4em; clear: both; }

@media only screen and (max-width: 767px) {
  #jump_to, #bashful { display: none; }
  .code-sample { margin-left: 10px; }
  .admonition { margin-left: 23px; }
}
------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-caret-sm.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"21px" viewBox=3D"0 0 21 21" enable-background=3D=
"new 0 0 21 21" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.002,8.338l3.655,3.655"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M10.657,11.993l3.655-3.655"/>
	</g>
</g>
</svg>

------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.swift.org/swift-book/_static/images/icon-next_previous.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"21px" height=3D"41.918px" viewBox=3D"0 0 21 41.918" enable-backg=
round=3D"new 0 0 21 41.918" xml:space=3D"preserve">
<title>icon-close</title>
<desc>Close Icon</desc>
<g id=3D"Container">
	<g id=3D"icon-close">
		<path id=3D"Line-Copy-8" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5,5.813"/>
		<path id=3D"Line-Copy-7" fill=3D"none" stroke=3D"#333333" stroke-linecap=
=3D"square" d=3D"M7.005,10.5l5.5-5.5"/>
	</g>
</g>
<g id=3D"Container_1_">
	<g id=3D"icon-close_1_">
		<path id=3D"Line-Copy-8_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,37.347l5.5-5.813"/>
		<path id=3D"Line-Copy-7_1_" fill=3D"none" stroke=3D"#333333" stroke-linec=
ap=3D"square" d=3D"M8.006,26.033l5.5,5.5"/>
	</g>
</g>
</svg>

------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAAAyCAYAAAAZUZThAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA
IGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAABIsSURBVHja7J1pVJvX
mcd/Qvu+gkDsq1hiYoPBLTZestmpm3gaJ2nSJE067UyOu85pO9OMp5OeSWc6OTNtZ6aJk9Nz0k5S
O3WmjdMmThvbSWwHHDdmCzY2ZjVgsAAjkAUyEgKh+SAQyCwBjF03ef+fhN5773Pvc5//fZYrCVEw
GESAAAGzQwJw14+OA2QDO4CHAZOgGgGfQLiA3cDz+3eWNACIgsEgd/3ouB2RqEFu1CDVyBFFRQmq
EvCJQ3A8yKjHx4jLA8Fgyv6dJR2SiWc75EY1Y1Ixw54RhLBLwCcRIpEImVSM3KBmxOXZATwx6Soe
GZOIGfGPCeQQ8Mn1IMEgI/4xAlIJwN+EcxDANDI2jkANAQLANxZAMpGHS6bHXwIECCAiihKycQEC
5oFAEAECBIIIECAQRICAZYdkWmYiaEOAAMGDCBCwBA8i+A8BAuYLsa6VixKJSDEr2JBhYGOmAYCj
zZd4r+US7f0+xoXQTsBfRg6yvAPLJVHYrSo2ZuopSdNjVEnDzx4ojGFzjpHj59wcbXbT2DvMyNj4
dV34F1Za+FSaHoBvvtYqWIKA6+NBlLIoipJ0bMjUk29To1NKZ21nVEnZepOF0nQ9pxyXea/ZTeX5
Qbz+pRPFrBSzPd9CcZqeRLMSAK8/QIPDw6kuDwcbXfR7AwCogsPYbfEfy02dTv4X/9RNTfewYOlX
T5CrcyF6hYR1GQbWZ+jJiVUjlyws/9cppaxLN1CUrONsz2XKWtwca7mE2ze2aHI8c38mZq38CsKK
WZWiZ1WKHsYD/PrUQGi1welE/HiFedPJr4nyCxnmjeBBvrrexsaspX/PSi6JYmWClpUJWvJtKv79
0PnFyV8bFybH0aoG3q1uBiA3xUpGQjR56fG8XtEECsvHflOnkz84HhCsfDkIcrW58ksHKjnXauKW
ggxSrMYljdHe6+JwTQvlzQMERdZF9V2XHTL8I1UN/NO+OmS6ib8v9DLma2XU48KUVYwoONNpfOzq
BMHI10Id5AbwIB0+FU3vX+DNqjZK7LFsXp1FXoqVqCjRvP3Gx4Ocae/lYFUTxxt76B2RIdeZkSiX
Ng/vmBiNLTP8t0yzMLI+vsbKxhwzZq0MgEaHh7fr+3njrGtG28I4FRuzDOTGayNyneo2Ny9X9tLq
Golo/8z2DOw2DS+Vd/FyrTNC1r6Kbn5+ojdi7K0rLBSm6lHKxAB82ObmwBknR9qGrnqfDn1jJQA7
9pwlySDjngIrdpsGgM5+L4fr+3m51olZKeZrpfHheUyub1f5hXAeNz283WI3kp+gJTteE5739PGu
RLpRzkNFVnJsmrDOr0Sjw8M39rVEyHms2MrqVEO4z3wybiiCSJRaJEotbr+X1+v7OXjqMGvSLNxZ
nEVxdiJSiTii/ehYgIqGTt6qaOLEOSc+iQ6ZNhG1YWnMcLqGsBi1FOfEYz7dOmMT58OTdySxzh4Z
HtptmrDhXEmS796RjFk3M9dZZzdRmKLn279tiiDJuH8Y0KDCO0NWwDsYfn13jpGv35Y8Y36rUvWs
StVjmyDYsiTyhRZKc6Ij3ks0K3m0NAGNXBwqdFhUM9aXbFbw5b1NEf22ZOl5tDRhhozJ8WL1Mn7y
niOCHD+9LwulXIzzkoe9B2rRqOTcWpyDSiELRwKtPUOAdKrP/Vlh8l0pIz1GxVOLDMsXR5Bl8MNW
rYxks5Yul56uAQ9lXQMca/4TN8ef4u6SXAoyQ4ljTfMF3jhez8kLlxlXGpGZM0g3a0g0Kmh3eukd
8i9a9juVTTxwRyEWvYpffjGXP9Ze5NWTfQsiyjq7ib0HKnjpnVp6B708VJrDdx+5I2S0+SbeqB+I
aP/a4Woy4k0crm7mzZpzAPzDPZ/mwS3FKOVituXp+Wl574yYZ2txCiq5lPpzDo7VttB50c2w1ABB
DWalmL8uDemno7ufH//6MMcaHeTFG/nWvaUU5aVyX7GVD9oHZ3ioj4y3Ztnb0pxojlQ28Is/VnDm
govPFqTxj49tRqWQsb04jmGfnx/vPsTL5Wex6pR87/Pr2VSUTaJFxd3ZhohD4xeHT1OUIOFYbQtl
de2cueAiL97Iv/3tVpLjzGzOj+HFEz3hvfhCgTlEDtcQX/yP1xiUGgkGxmjqdPKdh24FYH/1Baq6
R1CY4gD4u03xKGVihn1+nvvt0fC8Hr1tJQ9uKWad3cTd5wdn9fg3hAd5YLWVzTkmbEYFvW4f77W4
KW/W09gTzUm3i6pXKsiwhE7dFucIUn0MUms89lgNpZkGNmQYsOrlOFw+Dp4d4JWq3kXJf/bYBaxG
NZuKslHKxGwvjuMzK2MWRJS9ByrYdbwHZfwqopMk7G/vo7CygU1F2STFaGe03117ibEPupDpLETf
tB6AXcc7Kbm5n+Q4Mynm2UMGlVzKkcoGnthbgVxnIUqmJkoMEiXcm29GJQ9tx1d3HcCrTSL6pgy6
/T5++GoNb+SlopJLuTVDS2vlyFXv17DPz38fbMSjziT6JgXlAy5uPd3GxtV2APa8VcH+doi+aT2B
wBi/Km9jU1F26CBURlYYFaY4vvTsO8h1FqSa0Hjdfh+vvnea7zywAYAVMQqOdlwGwKIOhd2nz3Uz
GpOLShxa9xvn+vjOxJglKzI4PTIQDjvt8ToAnt9XHjGvXce7w3r/dIrq2hHkav2H/7KbMb8KEQpi
9Qo+X6jg9mwjlR1DHDqro67LRIc3FEOr47WsSNByR46JomQtJvWUQY35ffgvuxc9H6UlkZ37TnFb
dTMP3lFIbpotgii/OeFgz4ezhyfNriBKS2JYDzJ9NBc9gTmLwHJTHJMBVkGcCp1CAql5IBKFK0dz
zf+/DjaiS1kxI6fOi1OEvcfaoiKImgwldDBupqM7ZATR6sXtVXCOvW139HNZbSNKLCEISDVGeoem
DP+EI4BMHx3qK5bQ4TdMjRmYub7JNZmVYvJj1YCOJONUq8Cod6rPRJVNJJbBhHwm9B4OS0d94fcL
4hVTxJYa2bxSP02yibZuF8lxZpJj1Mte0F42D7K7vJnfH62mJDuObSW5rEiNxaSWsTnXTEmantou
D+82hth9q93IygQNWoUknKjXtfXw+vF6jjd0MyTWoZow2MVAY8ukbMDFwWffYXOWMYIoj5YmcrZn
mOpZLs1O9vohKvLUF0XNrZqHV1m4JdcSTtAXXMjo7mdYbWO2soVFFzKC5DgzO7eZ5xwjRq9Ylv06
1XYRkVgy55rbvDLE01Qils0tN2Mi4S5MM8zIEWZDr8tDToqVvNQYzJWDYe++KVUXbvNBy0UglAPG
aKbu1P75/oI5x7Xo1dcyB7m6gVTmREZH/bzdOsC7p99lbWY0d67JoiAzHq1CRmmGgbXpIeZHTZy0
l31+apov8NaJJt5v7mNcaUZmzEQllS15PjK1EZnaSFm/i4PPvMOXS1N4/J5QGLQ110C1YyZB3OOK
ycP/I8umP9icxLrskAHXn3NwsqmL+vZQOPiVbSUkx5nn1OewbzRkhLM8sxjU4dCn3TF3It7W7V4W
FxIlUUBw7ht2sVQxv5yJZ4U2FU/enY5KLmHY52d/2WkcTjddF93kplh5cEvxjHm8dKSJ4pxELHoV
ux6wc/TsAGq5mPXZoeLFkcoGPnSCRDHzUKg/51h4iXt5PcjVjxwllWKJtTHktXDM0U/Z7uPcnKDh
s5+yU5SdiEUXMgLn4GUqGzp584NGTnZ5iNKYkcXa0SpleEYCyzIXmcaATGNgz8lutnzaSXKcBYsm
atrYUzJEYvEsMoMzXmcY5WFyVJ5p42svlCHVGJAoQifdF3yj8++USDTn2urPOchNs9HucPLYM2/P
Uy3UoLamLu4iZFaZwQWt+aNYtzVXH86dnnhuP1XOELmiZCqkuvFZ+3QE9Dzx3H5+9u3tmLVythfH
hXVQXtvCiye6J0r1ofYnmx3kJIfCr/l0A6C/Iny9YUKsLKuK9RlGcmJVdAz4ONyop+6ChdNDbmpe
rSE7up51N4XCpmOnO2no8yHTW1HY4lkRr+MWu5Fkk4KzPcOUtbho6l2ezw8pTHGolYqI2HepSNBO
uZk/VHXM2IzkuKV/kqCt201umo3cNBuFq1bT4hrhLwEWjThs3HWj0aitmvCznCTDHGGihqcf3caw
z8/nvv+/9A56w95frrNE3GMB9EzLjb72uVvY82HfdVvfsoVY995sZtNEXT0/QcuGTAM1nR7+UOek
7oKJNo+bxvLOidPdhD5Bz4p4DVtXWChI1IQ/1JifoCVGHcWPDi6cIJvSdDxSEk9Fq4vKjiGqHaFq
SYZJzkPFsVgMoU072dIz92G6gAN5fHSq/HzX2jzef7NzIjGV8PUN8eEa/rxjzvH+qxXn2bo2B4Cd
d6bw96+10u8dm3ZJJuHOHCN7ahZpHMHFz2UxOpk8dHLTbKxJndL9pjQdW4sSZ51Hfow8HJI9+Nkt
OAZHI4Y+cm4wsqx+ysnDG0P3XPetiQ3lkhNyJrEt18iZnmFaBkauDUGuNqh5eu97HM8ycfvqTFZm
2NAppWzMMrI2XU9l+yDvNAzw4fnQrfaqJC23ZZsoStEhFYcSMP9YgNoWB29XNVPWNEDQlLZg2QGf
h0SLkkSLku1r5kqQnbxS6SCotC7ZFt5u6mfHxIVkYUY0v3xYw7B/jCSzCqVcTEd3KJRbAj9oH9Xy
831lPL59PYnRal55PJ9GR6jqp5JJSLSECgK7axZ/el5Lfhyr6yAnJaTTJ7el09nvDc93svJ2ZZ8D
p7v4q3wtuWk2Hts482J0J3Cg9iI/PtoVrm499eK7PL3jM6gUMp6+306n08uwP3SA2G2hUvy/vlZP
88ANWsUa1SfyVrOTQ3VlrEk3sXl1JquzEtBrFJSkG/hUmp66rtCGr0jQhhN1t8dHVVMXB6uaOdE6
QEBhQKZPXNR3gTsGvFSeaaMoL3XWev/rRz9kd1kzI+YsRFeV1xh56sV3efKxW7EYtWGjdbqGePY3
f6JrYIT/+dZdSxpbLFOw+1Q3g8OHuP+2ApLjLOGNn0TlmbYbLsR6qaqPWH0td61fiUouCc/5SGUD
//m7Kv7lobUz9uWbt+eQYrPMmnSn2CyoFDK2rIyhZ3Ak7DFPjZj43nP7+eLmAoryUsO6n34Atl90
A/JlXd/kr7sHvcrlGTg4HsDvGYDhAewxSjYXpnNLQQZmnSqiXf/gMIdrWjhY3UrjRS+oTMg0JkRR
4kXLDPh9DF9sY8TdR6ndhkETyjkueXwca7mIypKIwhgXUdb0Oju53BsyOEve+hljzvV8zOdhsLOe
takmDBoFlzw+3m8bQG1NRSxTcqm1BqnGiD55Kj9xd9Qx6nHNeH82jAz24e3rxG6WkRZrCK+jvNGB
XB+NNiHnI/Uxfe665BURn0dznikDQG1NDd/9LFQnc/W93NuGzu+kODOUbFc0d+MWG1BbU/F0NzPi
7gvP4+GCaB7bkITTNcRDP3yZgfHI8vGYd4jf/+BBkm0WGs738/V97RG69zo7MQQ9YVkA+6vPIVFo
0CbmzluOXgyU3hH27ywRLTtBpogyzph3iNGhPpK0cHtBKluKQ7e0ByoaebumjfNDINVGI1Fql+1f
Loz5PIyPjU6UMqXhCtNyY1LOtZIR8PsI+L3XfB3Ltt+BMUYnLoKlSu2MO5ZJPLs9hewkM3sPVfHC
qcCs7b6/XsfGwkzOtvfyjd91zStr0rMvNyYJcs2+ky6KikKq1iNV6egZGeaF8k52vVkNgFwfg1wX
h8qqYv4LiCXEjNfJkK61HLFMsWyn4fWASCxZkKF6Lg8DZlZlpyA60zHjeaFNTXFeykRRpfuqZN1Q
SfrcmhMhVqhRKdSoYlIWlQgK+PihrK6T1TmJZCdZ+L+v6DhSP3UpuiJBiz0+lMN0OJz87Ej7jDDw
ekMiWKuA64nX6gcJ/OogX7qrBItRy71rbJF5jmuIQx/U85M/nMKQVvBnt8tlvUkXIOCjINdZeP1c
H3t37iE7WhUuRABUNnfT5wuiMMZiSFt1Q9ikRNgyAdefJNHIddE4/D66nN4pY7StxCi+sUxSIIiA
Pxv+EgoRQg4iQMA8EH68WoCAhXgQwYEIECB4EAEClpqkCz5EgIC5CDIgCmISKCJAAJOf+B6YHmLt
lgbHBc0IEABIx8cBXphOkOelowGkgXFEgn4EfII9hzQwjnQsAPD89BCrEciRBQI7ZIHAI4BRUJeA
TyBcwG7g+f07S9ph4gtTAgQImB3/PwDuN9LAj5N4JQAAAABJRU5ErkJggg==

------MultipartBoundary--xOzTDgAGhCvUNOaeDhusS7YZNssuvWXWVCt5olUGeY------
